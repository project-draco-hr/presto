{
  Preconditions.checkArgument(!Iterables.all(query.getSelect().getSelectItems(),Predicates.instanceOf(AllColumns.class)),"'*' column specifier must be expanded");
  Preconditions.checkArgument(query.getHaving() == null,"Queries with HAVING clause not supported by this transformer");
  Preconditions.checkArgument(Iterables.all(query.getSelect().getSelectItems(),Predicates.instanceOf(AliasedExpression.class)),"All SELECT terms must be properly aliased");
  if (!query.getOrderBy().isEmpty()) {
    throw new UnsupportedOperationException("not yet implemented: queries with ORDER BY");
  }
  query=treeRewriter.defaultRewrite(query,context);
  List<FunctionCall> aggregates=extractAggregates(query.getSelect().getSelectItems());
  if (aggregates.isEmpty()) {
    return query;
  }
  Map<Expression,String> syntheticAttributes=IterableUtils.toMap(concat(query.getGroupBy(),aggregates),NameGenerator.<Expression>fieldAliasGenerator(namer));
  ImmutableList.Builder<Expression> fields=ImmutableList.builder();
  for (  Map.Entry<Expression,String> entry : syntheticAttributes.entrySet()) {
    fields.add(new AliasedExpression(entry.getKey(),entry.getValue()));
  }
  Query subquery=new Query(new Select(false,fields.build()),query.getFrom(),query.getWhere(),query.getGroupBy(),null,ImmutableList.<SortItem>of(),null);
  String syntheticRelation=namer.newRelationAlias();
  ImmutableList.Builder<Expression> rewritten=ImmutableList.builder();
  for (  Expression term : query.getSelect().getSelectItems()) {
    Map<Expression,QualifiedName> qualified=Maps.transformValues(syntheticAttributes,QualifiedName.addPrefixFunction(QualifiedName.of(syntheticRelation)));
    Expression rewrittenTerm=TreeRewriter.rewriteWith(new ReplaceWithAttributeReference(qualified),term);
    if (!(rewrittenTerm instanceof AliasedExpression)) {
      rewrittenTerm=new AliasedExpression(rewrittenTerm,namer.newFieldAlias());
    }
    rewritten.add(rewrittenTerm);
  }
  Query result=new Query(new Select(query.getSelect().isDistinct(),rewritten.build()),ImmutableList.<Relation>of(new AliasedRelation(new Subquery(subquery),syntheticRelation,null)),null,ImmutableList.<Expression>of(),null,ImmutableList.<SortItem>of(),query.getLimit());
  return result;
}
