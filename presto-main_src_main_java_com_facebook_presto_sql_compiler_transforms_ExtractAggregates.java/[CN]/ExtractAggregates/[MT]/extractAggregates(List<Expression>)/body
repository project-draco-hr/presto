{
  final ImmutableList.Builder<FunctionCall> builder=ImmutableList.builder();
  AstVisitor<Void,Void> extractor=new DefaultTraversalVisitor<Void,Void>(){
    @Override protected Void visitFunctionCall(    FunctionCall node,    Void context){
      FunctionInfo info=metadata.getFunction(node.getName());
      if (info != null && info.isAggregate()) {
        builder.add(node);
      }
      super.visitFunctionCall(node,context);
      return null;
    }
  }
;
  for (  Expression term : terms) {
    extractor.process(term,null);
  }
  return builder.build();
}
