{
  requireNonNull(columnHandle,"columnHandle is null");
  requireNonNull(value,"value is null");
  String mapping=columnHandle.getMapping();
  FieldType fieldType=columnHandle.getDataFormat() == null ? FieldType.BYTE : FieldType.forString(columnHandle.getDataFormat());
  int start=0;
  int end=value.length;
  if (mapping != null) {
    List<String> fields=ImmutableList.copyOf(Splitter.on(':').limit(2).split(mapping));
    if (!fields.isEmpty()) {
      start=Integer.parseInt(fields.get(0));
      checkState(start >= 0 && start < value.length,"Found start %s, but only 0..%s is legal",start,value.length);
      if (fields.size() > 1) {
        end=Integer.parseInt(fields.get(1));
        checkState(end > 0 && end <= value.length,"Found end %s, but only 1..%s is legal",end,value.length);
      }
    }
  }
  checkState(start <= end,"Found start %s and end %s. start must be smaller than end",start,end);
  return new RawKafkaValueProvider(ByteBuffer.wrap(value,start,end - start),columnHandle,fieldType);
}
