{
  if (!rowGroupOpen) {
    openRowGroup();
  }
  if (readOffset > 0) {
    if (presentStream != null) {
      readOffset=presentStream.countBitsSet(readOffset);
    }
    if (readOffset > 0) {
      if (lengthStream == null) {
        throw new OrcCorruptionException("Value is not null but data stream is not present");
      }
      long entrySkipSize=lengthStream.sum(readOffset);
      keyStreamReader.prepareNextRead(Ints.checkedCast(entrySkipSize));
      valueStreamReader.prepareNextRead(Ints.checkedCast(entrySkipSize));
    }
  }
  int[] lengths=new int[nextBatchSize];
  boolean[] nullVector=new boolean[nextBatchSize];
  if (presentStream == null) {
    if (lengthStream == null) {
      throw new OrcCorruptionException("Value is not null but data stream is not present");
    }
    lengthStream.nextIntVector(nextBatchSize,lengths);
  }
 else {
    int nullValues=presentStream.getUnsetBits(nextBatchSize,nullVector);
    if (nullValues != nextBatchSize) {
      if (lengthStream == null) {
        throw new OrcCorruptionException("Value is not null but data stream is not present");
      }
      lengthStream.nextIntVector(nextBatchSize,lengths,nullVector);
    }
  }
  Type keyType=type.getTypeParameters().get(0);
  Type valueType=type.getTypeParameters().get(1);
  int entryCount=0;
  for (  int length : lengths) {
    entryCount+=length;
  }
  Block keys;
  Block values;
  if (entryCount > 0) {
    keyStreamReader.prepareNextRead(entryCount);
    valueStreamReader.prepareNextRead(entryCount);
    keys=keyStreamReader.readBlock(keyType);
    values=valueStreamReader.readBlock(valueType);
  }
 else {
    keys=keyType.createBlockBuilder(new BlockBuilderStatus(),0).build();
    values=valueType.createBlockBuilder(new BlockBuilderStatus(),1).build();
  }
  InterleavedBlock keyValueBlock=createKeyValueBlock(keys,values,lengths);
  lengths[0]=lengths[0] * 2;
  for (int i=1; i < lengths.length; i++) {
    lengths[i]=lengths[i - 1] + (lengths[i] * 2);
  }
  ArrayBlock arrayBlock=new ArrayBlock(keyValueBlock,Slices.wrappedIntArray(lengths),0,Slices.wrappedBooleanArray(nullVector));
  readOffset=0;
  nextBatchSize=0;
  return arrayBlock;
}
