{
  if (block.isNull(position)) {
    return null;
  }
  if (BooleanType.BOOLEAN.equals(type)) {
    return type.getBoolean(block,position);
  }
  if (BigintType.BIGINT.equals(type)) {
    return type.getLong(block,position);
  }
  if (IntegerType.INTEGER.equals(type)) {
    return (int)type.getLong(block,position);
  }
  if (DoubleType.DOUBLE.equals(type)) {
    return type.getDouble(block,position);
  }
  if (type instanceof VarcharType) {
    return new Text(type.getSlice(block,position).getBytes());
  }
  if (VarbinaryType.VARBINARY.equals(type)) {
    return type.getSlice(block,position).getBytes();
  }
  if (DateType.DATE.equals(type)) {
    long days=type.getLong(block,position);
    return new Date(UTC.getMillisKeepLocal(DateTimeZone.getDefault(),TimeUnit.DAYS.toMillis(days)));
  }
  if (TimestampType.TIMESTAMP.equals(type)) {
    long millisUtc=type.getLong(block,position);
    return new Timestamp(millisUtc);
  }
  if (type instanceof DecimalType) {
    DecimalType decimalType=(DecimalType)type;
    return getHiveDecimal(decimalType,block,position);
  }
  if (isArrayType(type)) {
    Type elementType=type.getTypeParameters().get(0);
    Block arrayBlock=block.getObject(position,Block.class);
    List<Object> list=new ArrayList<>(arrayBlock.getPositionCount());
    for (int i=0; i < arrayBlock.getPositionCount(); i++) {
      Object element=getField(elementType,arrayBlock,i);
      list.add(element);
    }
    return Collections.unmodifiableList(list);
  }
  if (isMapType(type)) {
    Type keyType=type.getTypeParameters().get(0);
    Type valueType=type.getTypeParameters().get(1);
    Block mapBlock=block.getObject(position,Block.class);
    Map<Object,Object> map=new HashMap<>();
    for (int i=0; i < mapBlock.getPositionCount(); i+=2) {
      Object key=getField(keyType,mapBlock,i);
      Object value=getField(valueType,mapBlock,i + 1);
      map.put(key,value);
    }
    return Collections.unmodifiableMap(map);
  }
  if (isRowType(type)) {
    Block rowBlock=block.getObject(position,Block.class);
    List<Type> fieldTypes=type.getTypeParameters();
    checkCondition(fieldTypes.size() == rowBlock.getPositionCount(),StandardErrorCode.INTERNAL_ERROR,"Expected row value field count does not match type field count");
    List<Object> row=new ArrayList<>(rowBlock.getPositionCount());
    for (int i=0; i < rowBlock.getPositionCount(); i++) {
      Object element=getField(fieldTypes.get(i),rowBlock,i);
      row.add(element);
    }
    return Collections.unmodifiableList(row);
  }
  throw new PrestoException(NOT_SUPPORTED,"unsupported type: " + type);
}
