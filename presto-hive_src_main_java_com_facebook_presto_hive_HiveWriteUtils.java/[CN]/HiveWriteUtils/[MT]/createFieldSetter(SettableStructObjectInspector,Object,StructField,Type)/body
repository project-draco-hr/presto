{
  if (type.equals(BooleanType.BOOLEAN)) {
    return new BooleanFieldSetter(rowInspector,row,field);
  }
  if (type.equals(BigintType.BIGINT)) {
    return new BigintFieldBuilder(rowInspector,row,field);
  }
  if (type.equals(IntegerType.INTEGER)) {
    return new IntFieldSetter(rowInspector,row,field);
  }
  if (type.equals(SmallintType.SMALLINT)) {
    return new SmallintFieldSetter(rowInspector,row,field);
  }
  if (type.equals(TinyintType.TINYINT)) {
    return new TinyintFieldSetter(rowInspector,row,field);
  }
  if (type.equals(DoubleType.DOUBLE)) {
    return new DoubleFieldSetter(rowInspector,row,field);
  }
  if (type instanceof VarcharType) {
    return new VarcharFieldSetter(rowInspector,row,field,type);
  }
  if (type instanceof CharType) {
    return new CharFieldSetter(rowInspector,row,field,type);
  }
  if (type.equals(VarbinaryType.VARBINARY)) {
    return new BinaryFieldSetter(rowInspector,row,field);
  }
  if (type.equals(DateType.DATE)) {
    return new DateFieldSetter(rowInspector,row,field);
  }
  if (type.equals(TimestampType.TIMESTAMP)) {
    return new TimestampFieldSetter(rowInspector,row,field);
  }
  if (type instanceof DecimalType) {
    DecimalType decimalType=(DecimalType)type;
    return new DecimalFieldSetter(rowInspector,row,field,decimalType);
  }
  if (isArrayType(type)) {
    return new ArrayFieldSetter(rowInspector,row,field,type.getTypeParameters().get(0));
  }
  if (isMapType(type)) {
    return new MapFieldSetter(rowInspector,row,field,type.getTypeParameters().get(0),type.getTypeParameters().get(1));
  }
  if (isRowType(type)) {
    return new RowFieldSetter(rowInspector,row,field,type.getTypeParameters());
  }
  throw new IllegalArgumentException("unsupported type: " + type);
}
