{
  FunctionRegistry functionRegistry=new FunctionRegistry(typeRegistry,new BlockEncodingManager(typeRegistry),new FeaturesConfig().setExperimentalSyntaxEnabled(true));
  Set<Type> types=getStandardPrimitiveTypes();
  for (  Type sourceType : types) {
    for (    Type resultType : types) {
      if (typeRegistry.canCoerce(sourceType,resultType) && sourceType != UNKNOWN && resultType != UNKNOWN) {
        assertTrue(functionRegistry.canResolveOperator(OperatorType.CAST,resultType,ImmutableList.of(sourceType)),format("'%s' -> '%s' coercion exists but there is no cast operator",sourceType,resultType));
      }
    }
  }
}
