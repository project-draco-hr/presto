{
  BlockBuilder blockBuilder=VARCHAR.createBlockBuilder(new BlockBuilderStatus());
  VARCHAR.writeString(blockBuilder,"alice");
  VARCHAR.writeString(blockBuilder,"bob");
  VARCHAR.writeString(blockBuilder,"charlie");
  VARCHAR.writeString(blockBuilder,"dave");
  Block block=blockBuilder.build();
  DynamicSliceOutput sliceOutput=new DynamicSliceOutput(1024);
  BlockEncoding blockEncoding=new UncompressedEncoder(VARCHAR,sliceOutput).append(block).append(block).finish();
  Block actualBlock=blockEncoding.readBlock(sliceOutput.slice().getInput());
  BlockBuilder expectedBlockBuilder=VARCHAR.createBlockBuilder(new BlockBuilderStatus());
  VARCHAR.writeString(expectedBlockBuilder,"alice");
  VARCHAR.writeString(expectedBlockBuilder,"bob");
  VARCHAR.writeString(expectedBlockBuilder,"charlie");
  VARCHAR.writeString(expectedBlockBuilder,"dave");
  VARCHAR.writeString(expectedBlockBuilder,"alice");
  VARCHAR.writeString(expectedBlockBuilder,"bob");
  VARCHAR.writeString(expectedBlockBuilder,"charlie");
  VARCHAR.writeString(expectedBlockBuilder,"dave");
  Block expectedBlock=expectedBlockBuilder.build();
  BlockAssertions.assertBlockEquals(VARCHAR,actualBlock,expectedBlock);
}
