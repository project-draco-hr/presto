{
  Signature boundSignature=SignatureBinder.bindVariables(getSignature(),boundVariables,arity);
  if (implementations.getExactImplementations().containsKey(boundSignature)) {
    ScalarImplementation implementation=implementations.getExactImplementations().get(boundSignature);
    MethodHandleAndConstructor methodHandleAndConstructor=implementation.specialize(boundSignature,boundVariables,typeManager,functionRegistry);
    checkCondition(methodHandleAndConstructor != null,FUNCTION_IMPLEMENTATION_ERROR,String.format("Exact implementation of %s do not match expected java types.",boundSignature.getName()));
    return new ScalarFunctionImplementation(implementation.isNullable(),implementation.getNullableArguments(),methodHandleAndConstructor.getMethodHandle(),methodHandleAndConstructor.getConstructor(),isDeterministic());
  }
  ScalarFunctionImplementation selectedImplementation=null;
  for (  ScalarImplementation implementation : implementations.getSpecializedImplementations()) {
    MethodHandleAndConstructor methodHandle=implementation.specialize(boundSignature,boundVariables,typeManager,functionRegistry);
    if (methodHandle != null) {
      checkCondition(selectedImplementation == null,AMBIGUOUS_FUNCTION_IMPLEMENTATION,"Ambiguous implementation for %s with bindings %s",getSignature(),boundVariables.getTypeVariables());
      selectedImplementation=new ScalarFunctionImplementation(implementation.isNullable(),implementation.getNullableArguments(),methodHandle.getMethodHandle(),methodHandle.getConstructor(),isDeterministic());
    }
  }
  if (selectedImplementation != null) {
    return selectedImplementation;
  }
  for (  ScalarImplementation implementation : implementations.getGenericImplementations()) {
    MethodHandleAndConstructor methodHandle=implementation.specialize(boundSignature,boundVariables,typeManager,functionRegistry);
    if (methodHandle != null) {
      checkCondition(selectedImplementation == null,AMBIGUOUS_FUNCTION_IMPLEMENTATION,"Ambiguous implementation for %s with bindings %s",getSignature(),boundVariables.getTypeVariables());
      selectedImplementation=new ScalarFunctionImplementation(implementation.isNullable(),implementation.getNullableArguments(),methodHandle.getMethodHandle(),methodHandle.getConstructor(),isDeterministic());
    }
  }
  if (selectedImplementation != null) {
    return selectedImplementation;
  }
  throw new PrestoException(FUNCTION_IMPLEMENTATION_MISSING,format("Unsupported type parameters (%s) for %s",boundVariables,getSignature()));
}
