{
  final Cursor cursor=source.cursor();
  return new AbstractIterator<RunLengthEncodedBlock>(){
    @Override protected RunLengthEncodedBlock computeNext(){
      if (!cursor.hasNextPosition()) {
        endOfData();
        return null;
      }
      cursor.advanceNextValue();
      Tuple key=cursor.getTuple();
      long startPosition=cursor.getPosition();
      while (cursor.hasNextPosition() && cursor.nextValueEquals(key)) {
        cursor.advanceNextPosition();
      }
      Range range=Range.create(startPosition,cursor.getPosition());
      return new RunLengthEncodedBlock(key,range);
    }
  }
;
}
