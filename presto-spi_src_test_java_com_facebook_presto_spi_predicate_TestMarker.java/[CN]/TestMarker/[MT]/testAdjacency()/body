{
  ImmutableMap<Marker,Integer> markers=ImmutableMap.<Marker,Integer>builder().put(Marker.lowerUnbounded(BIGINT),-1000).put(Marker.above(BIGINT,0L),-100).put(Marker.below(BIGINT,1L),-1).put(Marker.exactly(BIGINT,1L),0).put(Marker.above(BIGINT,1L),1).put(Marker.below(BIGINT,2L),100).put(Marker.upperUnbounded(BIGINT),1000).build();
  for (  Map.Entry<Marker,Integer> entry1 : markers.entrySet()) {
    for (    Map.Entry<Marker,Integer> entry2 : markers.entrySet()) {
      boolean adjacent=entry1.getKey().isAdjacent(entry2.getKey());
      boolean distanceIsOne=Math.abs(entry1.getValue() - entry2.getValue()) == 1;
      assertEquals(adjacent,distanceIsOne);
    }
  }
  assertEquals(Marker.below(BIGINT,1L).greaterAdjacent(),Marker.exactly(BIGINT,1L));
  assertEquals(Marker.exactly(BIGINT,1L).greaterAdjacent(),Marker.above(BIGINT,1L));
  assertEquals(Marker.above(BIGINT,1L).lesserAdjacent(),Marker.exactly(BIGINT,1L));
  assertEquals(Marker.exactly(BIGINT,1L).lesserAdjacent(),Marker.below(BIGINT,1L));
  try {
    Marker.below(BIGINT,1L).lesserAdjacent();
    fail();
  }
 catch (  IllegalStateException e) {
  }
  try {
    Marker.above(BIGINT,1L).greaterAdjacent();
    fail();
  }
 catch (  IllegalStateException e) {
  }
  try {
    Marker.lowerUnbounded(BIGINT).lesserAdjacent();
    fail();
  }
 catch (  IllegalStateException e) {
  }
  try {
    Marker.lowerUnbounded(BIGINT).greaterAdjacent();
    fail();
  }
 catch (  IllegalStateException e) {
  }
  try {
    Marker.upperUnbounded(BIGINT).lesserAdjacent();
    fail();
  }
 catch (  IllegalStateException e) {
  }
  try {
    Marker.upperUnbounded(BIGINT).greaterAdjacent();
    fail();
  }
 catch (  IllegalStateException e) {
  }
}
