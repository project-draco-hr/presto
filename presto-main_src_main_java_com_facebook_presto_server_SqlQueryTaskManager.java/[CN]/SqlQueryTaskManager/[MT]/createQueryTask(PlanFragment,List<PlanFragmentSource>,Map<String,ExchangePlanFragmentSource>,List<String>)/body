{
  Preconditions.checkNotNull(fragment,"fragment is null");
  Preconditions.checkNotNull(outputIds,"outputIds is null");
  Preconditions.checkNotNull(splits,"splits is null");
  Preconditions.checkNotNull(exchangeSources,"exchangeSources is null");
  String taskId=String.valueOf(nextTaskId.getAndIncrement());
  List<TupleInfo> tupleInfos=ImmutableList.copyOf(IterableTransformer.on(fragment.getRoot().getOutputSymbols()).transform(Functions.forMap(fragment.getSymbols())).transform(com.facebook.presto.sql.analyzer.Type.toRaw()).transform(new Function<Type,TupleInfo>(){
    @Override public TupleInfo apply(    Type input){
      return new TupleInfo(input);
    }
  }
).list());
  TaskOutput taskOutput=new TaskOutput(taskId,outputIds,tupleInfos,pageBufferMax,splits.size());
  SqlQueryTask queryTask=new SqlQueryTask(taskId,fragment,taskOutput,splits,exchangeSources,sourceProvider,metadata,shardExecutor);
  taskExecutor.submit(queryTask);
  tasks.put(taskId,taskOutput);
  return taskOutput.getQueryTaskInfo();
}
