{
  ScalarFunction scalarFunction=method.getAnnotation(ScalarFunction.class);
  ScalarOperator scalarOperator=method.getAnnotation(ScalarOperator.class);
  Description descriptionAnnotation=method.getAnnotation(Description.class);
  ImmutableList.Builder<SqlScalarFunction> builder=ImmutableList.builder();
  Map<Set<TypeParameter>,Constructor<?>> constructors=ImmutableMap.of();
  if (!Modifier.isStatic(method.getModifiers())) {
    try {
      constructors=ImmutableMap.of(ImmutableSet.of(),method.getDeclaringClass().getConstructor());
    }
 catch (    NoSuchMethodException e) {
      throw new PrestoException(FUNCTION_IMPLEMENTATION_ERROR,format("%s is non-static, but its declaring class is missing a default constructor",method));
    }
  }
  if (scalarFunction != null) {
    String baseName=scalarFunction.value().isEmpty() ? camelToSnake(method.getName()) : scalarFunction.value();
    builder.add(createReflectionParametricScalar(baseName,scalarFunction.hidden(),scalarFunction.deterministic(),descriptionAnnotation,ImmutableList.of(method),baseName,constructors));
    for (    String alias : scalarFunction.alias()) {
      builder.add(createReflectionParametricScalar(alias,scalarFunction.hidden(),scalarFunction.deterministic(),descriptionAnnotation,ImmutableList.of(method),baseName,constructors));
    }
  }
  if (scalarOperator != null) {
    builder.add(createReflectionParametricScalar(mangleOperatorName(scalarOperator.value()),true,true,descriptionAnnotation,ImmutableList.of(method),method.getName(),constructors));
  }
  return builder.build();
}
