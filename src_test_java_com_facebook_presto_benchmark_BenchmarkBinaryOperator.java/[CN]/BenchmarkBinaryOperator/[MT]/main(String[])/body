{
  File column3=new File("data/columns/column3.data");
  File column4=new File("data/columns/column4.data");
  File column5=new File("data/columns/column5.data");
  Slice column3Slice=Slices.mapFileReadOnly(column3);
  Slice column4Slice=Slices.mapFileReadOnly(column4);
  Slice column5Slice=Slices.mapFileReadOnly(column5);
  for (int i=0; i < 100000; ++i) {
    TupleStream column3Stream=UncompressedSerde.readAsStream(column3Slice);
    TupleStream column4Stream=UncompressedSerde.readAsStream(column4Slice);
    TupleStream column5Stream=UncompressedSerde.readAsStream(column5Slice);
    UncompressedBinaryOperator sub=new UncompressedBinaryOperator(column4Stream,column3Stream,new SubtractionOperation());
    GroupByOperator groupBy=new GroupByOperator(column5Stream);
    HashAggregationOperator aggregation=new HashAggregationOperator(groupBy,sub,AverageAggregation.PROVIDER);
    Result result=doIt(aggregation);
    long count=result.count;
    Duration duration=result.duration;
    DataSize fileSize=new DataSize(column3.length() + column4.length() + column5.length(),DataSize.Unit.BYTE);
    System.out.println(String.format("%s, %s, %.2f/s, %2.2f MB/s",duration,count,count / duration.toMillis() * 1000,fileSize.getValue(DataSize.Unit.MEGABYTE) / duration.convertTo(TimeUnit.SECONDS)));
  }
  Thread.sleep(1000);
}
