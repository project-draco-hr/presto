{
  ObjectMapper mapper=new ObjectMapperProvider().get().registerModule(new SimpleModule().addDeserializer(ColumnHandle.class,new JsonDeserializer<ColumnHandle>(){
    @Override public ColumnHandle deserialize(    JsonParser jsonParser,    DeserializationContext deserializationContext) throws IOException {
      return new ObjectMapperProvider().get().readValue(jsonParser,TestingColumnHandle.class);
    }
  }
));
  TestingColumnHandle columnHandle=new TestingColumnHandle("a");
  LocalProperty<ColumnHandle> property1=new ConstantProperty<>(columnHandle);
  assertEquals(property1,mapper.readValue(mapper.writeValueAsString(property1),new TypeReference<LocalProperty<ColumnHandle>>(){
  }
));
  LocalProperty<ColumnHandle> property2=new SortingProperty<>(columnHandle,SortOrder.ASC_NULLS_FIRST);
  assertEquals(property2,mapper.readValue(mapper.writeValueAsString(property2),new TypeReference<LocalProperty<ColumnHandle>>(){
  }
));
  LocalProperty<ColumnHandle> property3=new GroupingProperty<>(ImmutableList.of(columnHandle));
  assertEquals(property3,mapper.readValue(mapper.writeValueAsString(property3),new TypeReference<LocalProperty<ColumnHandle>>(){
  }
));
}
