{
  if (!rowGroupOpen) {
    openRowGroup();
  }
  if (readOffset > 0) {
    if (presentStream != null) {
      readOffset=presentStream.countBitsSet(readOffset);
    }
    if (readOffset > 0) {
      if (secondsStream == null) {
        throw new OrcCorruptionException("Value is not null but seconds stream is not present");
      }
      if (nanosStream == null) {
        throw new OrcCorruptionException("Value is not null but nanos stream is not present");
      }
      secondsStream.skip(readOffset);
      nanosStream.skip(readOffset);
    }
  }
  BlockBuilder builder=type.createBlockBuilder(new BlockBuilderStatus(),nextBatchSize);
  if (presentStream == null) {
    if (secondsStream == null) {
      throw new OrcCorruptionException("Value is not null but seconds stream is not present");
    }
    if (nanosStream == null) {
      throw new OrcCorruptionException("Value is not null but nanos stream is not present");
    }
    secondsStream.nextLongVector(nextBatchSize,secondsVector);
    nanosStream.nextLongVector(nextBatchSize,nanosVector);
    for (int i=0; i < nextBatchSize; i++) {
      type.writeLong(builder,decodeTimestamp(secondsVector[i],nanosVector[i],baseTimestampInSeconds));
    }
  }
 else {
    int nullValues=presentStream.getUnsetBits(nextBatchSize,nullVector);
    if (nullValues != nextBatchSize) {
      if (secondsStream == null) {
        throw new OrcCorruptionException("Value is not null but seconds stream is not present");
      }
      if (nanosStream == null) {
        throw new OrcCorruptionException("Value is not null but nanos stream is not present");
      }
      secondsStream.nextLongVector(nextBatchSize,secondsVector,nullVector);
      nanosStream.nextLongVector(nextBatchSize,nanosVector,nullVector);
      for (int i=0; i < nextBatchSize; i++) {
        if (nullVector[i]) {
          builder.appendNull();
        }
 else {
          type.writeLong(builder,decodeTimestamp(secondsVector[i],nanosVector[i],baseTimestampInSeconds));
        }
      }
    }
 else {
      for (int i=0; i < nextBatchSize; i++) {
        builder.appendNull();
      }
    }
  }
  readOffset=0;
  nextBatchSize=0;
  return builder.build();
}
