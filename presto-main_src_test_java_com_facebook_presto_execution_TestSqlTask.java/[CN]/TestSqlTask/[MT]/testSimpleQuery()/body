{
  SqlTask sqlTask=createInitialTask();
  TaskInfo taskInfo=sqlTask.updateTask(TEST_SESSION,Optional.of(PLAN_FRAGMENT),ImmutableList.of(new TaskSource(TABLE_SCAN_NODE_ID,ImmutableSet.of(SPLIT),true)),createInitialEmptyOutputBuffers(PARTITIONED).withBuffer(OUT,0).withNoMoreBufferIds());
  assertEquals(taskInfo.getTaskStatus().getState(),TaskState.RUNNING);
  taskInfo=sqlTask.getTaskInfo();
  assertEquals(taskInfo.getTaskStatus().getState(),TaskState.RUNNING);
  BufferResult results=sqlTask.getTaskResults(OUT,0,new DataSize(1,MEGABYTE)).get();
  assertEquals(results.isBufferComplete(),false);
  assertEquals(results.getPages().size(),1);
  assertEquals(results.getPages().get(0).getPositionCount(),1);
  for (boolean moreResults=true; moreResults; moreResults=!results.isBufferComplete()) {
    results=sqlTask.getTaskResults(OUT,results.getToken() + results.getPages().size(),new DataSize(1,MEGABYTE)).get();
  }
  assertEquals(results.getPages().size(),0);
  TaskInfo info=sqlTask.abortTaskResults(OUT);
  assertEquals(info.getOutputBuffers().getState(),BufferState.FINISHED);
  taskInfo=sqlTask.getTaskInfo(taskInfo.getTaskStatus().getState()).get(1,SECONDS);
  assertEquals(taskInfo.getTaskStatus().getState(),TaskState.FINISHED);
  taskInfo=sqlTask.getTaskInfo();
  assertEquals(taskInfo.getTaskStatus().getState(),TaskState.FINISHED);
}
