{
  checkArgument(left >= 0 && right >= 0);
  for (int field=0; field < types.length; field++) {
    Type type=types[field];
    int comparison;
switch (type) {
case BOOLEAN:
      comparison=Boolean.compare(tupleInfo.getBoolean(slice,left,field),tupleInfo.getBoolean(slice,right,field));
    break;
case FIXED_INT_64:
  comparison=Long.compare(tupleInfo.getLong(slice,left,field),tupleInfo.getLong(slice,right,field));
break;
case DOUBLE:
comparison=Double.compare(tupleInfo.getDouble(slice,left,field),tupleInfo.getDouble(slice,right,field));
break;
case VARIABLE_BINARY:
comparison=tupleInfo.getSlice(slice,left,field).compareTo(tupleInfo.getSlice(slice,right,field));
break;
default :
throw new AssertionError("unimplemented type: " + type);
}
if (comparison != 0) {
return comparison;
}
}
return 0;
}
