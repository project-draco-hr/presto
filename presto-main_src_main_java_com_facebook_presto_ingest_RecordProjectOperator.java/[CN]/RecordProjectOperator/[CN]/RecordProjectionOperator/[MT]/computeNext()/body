{
  if (operatorStats.isDone()) {
    return endOfData();
  }
  BlockBuilder[] outputs=new BlockBuilder[getChannelCount()];
  for (int i=0; i < outputs.length; i++) {
    outputs[i]=new BlockBuilder(getTupleInfos().get(i));
  }
  while (!isFull(outputs) && cursor.advanceNextPosition()) {
    for (int column=0; column < super.getChannelCount(); column++) {
      BlockBuilder output=outputs[column];
      if (cursor.isNull(column)) {
        output.appendNull();
      }
 else {
switch (getTupleInfos().get(column).getTypes().get(0)) {
case FIXED_INT_64:
          output.append(cursor.getLong(column));
        break;
case DOUBLE:
      output.append(cursor.getDouble(column));
    break;
case VARIABLE_BINARY:
  output.append(cursor.getString(column));
break;
}
}
}
}
long completedDataSize=cursor.getCompletedBytes();
if (completedDataSize > currentCompletedSize) {
operatorStats.addCompletedDataSize(completedDataSize - currentCompletedSize);
currentCompletedSize=completedDataSize;
}
if (outputs[0].isEmpty()) {
return endOfData();
}
Block[] blocks=new Block[getChannelCount()];
for (int i=0; i < blocks.length; i++) {
blocks[i]=outputs[i].build();
}
Page page=new Page(blocks);
operatorStats.addCompletedPositions(page.getPositionCount());
return page;
}
