{
  checkArgument(!isPartitionColumn[column],"Column is a partition key");
  loaded[column]=true;
  nulls[column]=false;
  OrcLazyObject lazyObject=getRawValue(column);
  if (lazyObject == null) {
    nulls[column]=true;
    return;
  }
  Object value=materializeValue(lazyObject);
  if (value == null) {
    nulls[column]=true;
    return;
  }
  HiveType type=hiveTypes[column];
  if (isStructuralType(type)) {
    slices[column]=getBlockSlice(sessionTimeZone,lazyObject,fieldInspectors[column]);
  }
 else   if (type.equals(HIVE_STRING)) {
    Text text=checkWritable(value,Text.class);
    slices[column]=Slices.copyOf(Slices.wrappedBuffer(text.getBytes()),0,text.getLength());
  }
 else   if (type.equals(HIVE_BINARY)) {
    BytesWritable bytesWritable=checkWritable(value,BytesWritable.class);
    slices[column]=Slices.copyOf(Slices.wrappedBuffer(bytesWritable.getBytes()),0,bytesWritable.getLength());
  }
 else {
    throw new RuntimeException(String.format("%s is not a valid STRING type",type));
  }
}
