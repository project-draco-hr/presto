{
  TypedByteCodeNode value=process(node.getOperand(),context);
  if (value.type == void.class) {
    return value;
  }
  Variable tempVariable=context.createTempVariable(value.type);
  Block block=new Block(context).append(value.node).storeVariable(tempVariable.getLocalVariableDefinition());
  TypedByteCodeNode elseValue;
  if (node.getDefaultValue() != null) {
    elseValue=process(node.getDefaultValue(),context);
  }
 else {
    elseValue=process(new NullLiteral(),context);
  }
  List<TypedWhenClause> whenClauses=ImmutableList.copyOf(transform(node.getWhenClauses(),new Function<WhenClause,TypedWhenClause>(){
    @Override public TypedWhenClause apply(    WhenClause whenClause){
      return new TypedWhenClause(context,whenClause);
    }
  }
));
  Class<?> type=getType(ImmutableList.<TypedByteCodeNode>builder().addAll(transform(whenClauses,whenValueGetter())).add(elseValue).build());
  elseValue=coerceToType(context,elseValue,type);
  for (  TypedWhenClause whenClause : Lists.reverse(new ArrayList<>(whenClauses))) {
    Block condition=new Block(context);
    condition.loadVariable(tempVariable.getLocalVariableDefinition());
    condition.append(coerceToType(context,whenClause.condition,getType(value,whenClause.condition)).node);
    condition.invokeStatic(Operations.class,"equal",boolean.class,value.type,value.type);
    block.loadConstant(false).storeVariable("wasNull");
    elseValue=typedByteCodeNode(new IfStatement(context,condition,coerceToType(context,whenClause.value,type).node,elseValue.node),type);
  }
  return typedByteCodeNode(block.append(elseValue.node),type);
}
