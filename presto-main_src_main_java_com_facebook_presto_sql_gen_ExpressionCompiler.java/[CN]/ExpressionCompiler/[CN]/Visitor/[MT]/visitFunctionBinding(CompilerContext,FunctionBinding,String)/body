{
  List<TypedByteCodeNode> arguments=functionBinding.getArguments();
  MethodType methodType=functionBinding.getCallSite().type();
  LabelNode end=new LabelNode("end");
  Block block=new Block(context).setDescription("invoke").comment(comment);
  ArrayList<Class<?>> stackTypes=new ArrayList<>();
  for (int i=0; i < arguments.size(); i++) {
    TypedByteCodeNode argument=arguments.get(i);
    Class<?> argumentType=methodType.parameterList().get(i);
    block.append(coerceToType(context,argument,argumentType).node);
    stackTypes.add(argument.type);
    block.append(ifWasNullPopAndGoto(context,end,methodType.returnType(),Lists.reverse(stackTypes)));
  }
  block.invokeDynamic(functionBinding.getName(),methodType,functionBinding.getBindingId());
  Class<?> unboxedReturnType=Primitives.unwrap(methodType.returnType());
  if (functionBinding.isNullable()) {
    if (unboxedReturnType.isPrimitive()) {
      LabelNode notNull=new LabelNode("notNull");
      block.dup(methodType.returnType()).ifNotNullGoto(notNull).loadConstant(true).storeVariable("wasNull").comment("swap boxed null with unboxed default").pop(methodType.returnType()).loadJavaDefault(unboxedReturnType).gotoLabel(end).visitLabel(notNull).append(unboxPrimitive(context,unboxedReturnType));
    }
 else {
      block.dup(methodType.returnType()).ifNotNullGoto(end).loadConstant(true).storeVariable("wasNull");
    }
  }
  block.visitLabel(end);
  return typedByteCodeNode(block,unboxedReturnType);
}
