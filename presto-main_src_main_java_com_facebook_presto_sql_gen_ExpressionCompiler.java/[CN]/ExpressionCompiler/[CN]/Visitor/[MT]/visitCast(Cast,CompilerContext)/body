{
  TypedByteCodeNode value=process(node.getExpression(),context);
  if (value.type == void.class) {
    return value;
  }
  LabelNode end=new LabelNode("end");
  Block block=new Block(context);
  block.append(value.node);
switch (node.getType()) {
case "BOOLEAN":
    block.append(ifWasNullClearAndGoto(context,end,boolean.class,value.type));
  block.invokeStatic(Operations.class,"castToBoolean",boolean.class,value.type);
return typedByteCodeNode(block.visitLabel(end),boolean.class);
case "BIGINT":
block.append(ifWasNullClearAndGoto(context,end,long.class,value.type));
block.invokeStatic(Operations.class,"castToLong",long.class,value.type);
return typedByteCodeNode(block.visitLabel(end),long.class);
case "DOUBLE":
block.append(ifWasNullClearAndGoto(context,end,double.class,value.type));
block.invokeStatic(Operations.class,"castToDouble",double.class,value.type);
return typedByteCodeNode(block.visitLabel(end),double.class);
case "VARCHAR":
block.append(ifWasNullClearAndGoto(context,end,Slice.class,value.type));
block.invokeStatic(Operations.class,"castToSlice",Slice.class,value.type);
return typedByteCodeNode(block.visitLabel(end),Slice.class);
}
throw new UnsupportedOperationException("Unsupported type: " + node.getType());
}
