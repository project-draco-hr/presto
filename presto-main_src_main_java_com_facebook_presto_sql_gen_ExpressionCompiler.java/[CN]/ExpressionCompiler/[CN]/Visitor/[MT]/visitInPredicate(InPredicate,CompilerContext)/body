{
  Expression valueListExpression=node.getValueList();
  if (!(valueListExpression instanceof InListExpression)) {
    throw new UnsupportedOperationException("Compilation of IN subquery is not supported yet");
  }
  TypedByteCodeNode value=process(node.getValue(),context);
  if (value.type == void.class) {
    return value;
  }
  ImmutableList.Builder<TypedByteCodeNode> values=ImmutableList.builder();
  InListExpression valueList=(InListExpression)valueListExpression;
  for (  Expression test : valueList.getValues()) {
    TypedByteCodeNode testNode=process(test,context);
    values.add(testNode);
  }
  Class<?> type=getType(ImmutableList.<TypedByteCodeNode>builder().add(value).addAll(values.build()).build());
  ImmutableListMultimap.Builder<Integer,TypedByteCodeNode> hashBucketsBuilder=ImmutableListMultimap.builder();
  ImmutableList.Builder<TypedByteCodeNode> defaultBucket=ImmutableList.builder();
  ImmutableSet.Builder<Object> constantValuesBuilder=ImmutableSet.builder();
  for (  TypedByteCodeNode testNode : values.build()) {
    if (testNode.node instanceof Constant) {
      Constant constant=(Constant)testNode.node;
      Object testValue=constant.getValue();
      constantValuesBuilder.add(testValue);
      int hashCode;
      if (type == boolean.class) {
        hashCode=Operations.hashCode(testValue != 0);
      }
 else       if (type == long.class) {
        hashCode=Operations.hashCode((long)testValue);
      }
 else       if (type == double.class) {
        hashCode=Operations.hashCode(((Number)testValue).doubleValue());
      }
 else       if (type == Slice.class) {
        hashCode=Operations.hashCode((Slice)testValue);
      }
 else {
        throw new IllegalStateException("Error processing in statement: unsupported type " + testValue.getClass().getSimpleName());
      }
      hashBucketsBuilder.put(hashCode,coerceToType(context,testNode,type));
    }
 else {
      defaultBucket.add(coerceToType(context,testNode,type));
    }
  }
  ImmutableListMultimap<Integer,TypedByteCodeNode> hashBuckets=hashBucketsBuilder.build();
  ImmutableSet<Object> constantValues=constantValuesBuilder.build();
  LabelNode end=new LabelNode("end");
  LabelNode match=new LabelNode("match");
  LabelNode noMatch=new LabelNode("noMatch");
  LabelNode defaultLabel=new LabelNode("default");
  ByteCodeNode switchBlock;
  if (constantValues.size() < 1000) {
    Block switchCaseBlocks=new Block(context);
    LookupSwitchBuilder switchBuilder=lookupSwitchBuilder();
    for (    Entry<Integer,Collection<TypedByteCodeNode>> bucket : hashBuckets.asMap().entrySet()) {
      LabelNode label=new LabelNode("inHash" + bucket.getKey());
      switchBuilder.addCase(bucket.getKey(),label);
      Collection<TypedByteCodeNode> testValues=bucket.getValue();
      Block caseBlock=buildInCase(context,type,label,match,defaultLabel,testValues,false);
      switchCaseBlocks.append(caseBlock.setDescription("case " + bucket.getKey()));
    }
    switchBuilder.defaultCase(defaultLabel);
    switchBlock=new Block(context).comment("lookupSwitch(hashCode(<stackValue>))").dup(type).invokeStatic(Operations.class,"hashCode",int.class,type).append(switchBuilder.build()).append(switchCaseBlocks);
  }
 else {
    FunctionBinding functionBinding=bootstrapFunctionBinder.bindFunction("in",getSessionByteCode,ImmutableList.<TypedByteCodeNode>of(),new InFunctionBinder(type,constantValues));
    switchBlock=new Block(context).comment("inListSet.contains(<stackValue>)").append(new IfStatement(context,new Block(context).dup(type).invokeDynamic(functionBinding.getName(),functionBinding.getCallSite().type(),functionBinding.getBindingId()),jump(match),NOP));
  }
  Block defaultCaseBlock=buildInCase(context,type,defaultLabel,match,noMatch,defaultBucket.build(),true).setDescription("default");
  Block block=new Block(context).comment(node.toString()).append(coerceToType(context,value,type).node).append(ifWasNullPopAndGoto(context,end,boolean.class,type)).append(switchBlock).append(defaultCaseBlock);
  Block matchBlock=new Block(context).setDescription("match").visitLabel(match).pop(type).loadConstant(false).storeVariable("wasNull").loadConstant(true).gotoLabel(end);
  block.append(matchBlock);
  Block noMatchBlock=new Block(context).setDescription("noMatch").visitLabel(noMatch).pop(type).loadConstant(false).gotoLabel(end);
  block.append(noMatchBlock);
  block.visitLabel(end);
  return typedByteCodeNode(block,boolean.class);
}
