{
  Input input=node.getInput();
  int channel=input.getChannel();
  Type type=inputTypes.get(input);
  checkState(type != null,"No type for input %s",input);
  int field=0;
  Block isNullCheck=new Block(context).setDescription(String.format("channels[%d].get%s(%d)",channel,type,field)).loadVariable("channels").loadConstant(channel).loadObjectArray().loadConstant(field).invokeInterface(TupleReadable.class,"isNull",boolean.class,int.class);
  Block isNull=new Block(context).loadConstant(true).storeVariable("wasNull");
  Block notNull=new Block(context).loadVariable("channels").loadConstant(channel).loadObjectArray().loadConstant(field);
  Class<?> nodeType;
switch (type) {
case FIXED_INT_64:
    isNull.loadConstant(0L);
  notNull.invokeInterface(TupleReadable.class,"getLong",long.class,int.class);
nodeType=long.class;
break;
case DOUBLE:
isNull.loadConstant(0.0);
notNull.invokeInterface(TupleReadable.class,"getDouble",double.class,int.class);
nodeType=double.class;
break;
case VARIABLE_BINARY:
isNull.loadNull();
notNull.invokeInterface(TupleReadable.class,"getSlice",Slice.class,int.class);
notNull.invokeStatic(Operations.class,"toString",String.class,Slice.class);
nodeType=String.class;
break;
default :
throw new UnsupportedOperationException("not yet implemented: " + type);
}
return typedByteCodeNode(new IfStatement(context,isNullCheck,isNull,notNull),nodeType);
}
