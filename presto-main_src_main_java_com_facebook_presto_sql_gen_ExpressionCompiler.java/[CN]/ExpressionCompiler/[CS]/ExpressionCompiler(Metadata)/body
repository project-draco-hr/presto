{
  this.metadata=checkNotNull(metadata,"metadata is null");
  this.functionBootstrap=new FunctionBootstrap(metadata);
  try {
    ClassDefinition classDefinition=new ClassDefinition(new CompilerContext(null),a(PUBLIC,FINAL),typeFromPathName("Bootstrap" + CLASS_ID.incrementAndGet()),type(AbstractFilterAndProjectIterator.class));
    FieldDefinition bootstrapField=classDefinition.declareField(a(PUBLIC,STATIC,FINAL),"BOOTSTRAP",type(AtomicReference.class,FunctionBootstrap.class));
    classDefinition.getClassInitializer().getBody().newObject(AtomicReference.class).dup().invokeConstructor(AtomicReference.class).putStaticField(bootstrapField);
    classDefinition.declareMethod(new CompilerContext(null),a(PUBLIC,STATIC),"bootstrap",type(CallSite.class),arg("lookup",Lookup.class),arg("name",String.class),arg("type",MethodType.class)).getBody().getStaticField(bootstrapField).invokeVirtual(AtomicReference.class,"get",Object.class).checkCast(FunctionBootstrap.class).loadVariable("name").loadVariable("type").invokeVirtual(FunctionBootstrap.class,"bootstrap",CallSite.class,String.class,MethodType.class).retObject();
    Class<?> bootstrapClass=defineClasses(ImmutableList.of(classDefinition)).values().iterator().next();
    AtomicReference<FunctionBootstrap> bootstrapReference=(AtomicReference<FunctionBootstrap>)bootstrapClass.getField("BOOTSTRAP").get(null);
    bootstrapReference.set(functionBootstrap);
    bootstrapMethod=bootstrapClass.getMethod("bootstrap",Lookup.class,String.class,MethodType.class);
  }
 catch (  Exception e) {
    throw Throwables.propagate(e);
  }
}
