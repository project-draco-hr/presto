{
  MethodDefinition filterAndProjectMethod=classDefinition.declareMethod(new CompilerContext(),a(PUBLIC),"filterAndProjectRowOriented",type(void.class),arg("blocks",com.facebook.presto.block.Block[].class),arg("pageBuilder",PageBuilder.class));
  CompilerContext compilerContext=filterAndProjectMethod.getCompilerContext();
  LocalVariableDefinition positionVariable=compilerContext.declareVariable(int.class,"position");
  LocalVariableDefinition rowsVariable=compilerContext.declareVariable(int.class,"rows");
  filterAndProjectMethod.getBody().loadVariable("blocks").loadConstant(0).loadObjectArray().invokeInterface(com.facebook.presto.block.Block.class,"getPositionCount",int.class).storeVariable(rowsVariable);
  List<LocalVariableDefinition> cursorVariables=new ArrayList<>();
  int channels=Ordering.natural().max(transform(inputTypes.keySet(),Input.channelGetter())) + 1;
  for (int i=0; i < channels; i++) {
    LocalVariableDefinition cursorVariable=compilerContext.declareVariable(BlockCursor.class,"cursor_" + i);
    cursorVariables.add(cursorVariable);
    filterAndProjectMethod.getBody().loadVariable("blocks").loadConstant(i).loadObjectArray().invokeInterface(com.facebook.presto.block.Block.class,"cursor",BlockCursor.class).storeVariable(cursorVariable);
  }
  ForLoopBuilder forLoop=forLoopBuilder(compilerContext).initialize(new Block(compilerContext).loadConstant(0).storeVariable(positionVariable)).condition(new Block(compilerContext).loadVariable(positionVariable).loadVariable(rowsVariable).invokeStatic(Operations.class,"lessThan",boolean.class,int.class,int.class)).update(new Block(compilerContext).incrementVariable(positionVariable,(byte)1));
  Block forLoopBody=new Block(compilerContext);
  for (  LocalVariableDefinition cursorVariable : cursorVariables) {
    forLoopBody.loadVariable(cursorVariable).invokeInterface(BlockCursor.class,"advanceNextPosition",boolean.class).invokeStatic(Preconditions.class,"checkState",void.class,boolean.class);
  }
  IfStatementBuilder ifStatement=new IfStatementBuilder(compilerContext);
  Block condition=new Block(compilerContext);
  condition.loadThis();
  for (int channel=0; channel < channels; channel++) {
    condition.loadVariable("cursor_" + channel);
  }
  condition.invokeVirtual(classDefinition.getType(),"filter",type(boolean.class),nCopies(channels,type(TupleReadable.class)));
  ifStatement.condition(condition);
  Block trueBlock=new Block(compilerContext);
  if (projections.isEmpty()) {
    trueBlock.loadVariable("pageBuilder").invokeVirtual(PageBuilder.class,"declarePosition",void.class);
  }
 else {
    for (int projectionIndex=0; projectionIndex < projections.size(); projectionIndex++) {
      trueBlock.loadThis();
      for (int channel=0; channel < channels; channel++) {
        trueBlock.loadVariable("cursor_" + channel);
      }
      trueBlock.loadVariable("pageBuilder").loadConstant(projectionIndex).invokeVirtual(PageBuilder.class,"getBlockBuilder",BlockBuilder.class,int.class);
      trueBlock.invokeVirtual(classDefinition.getType(),"project_" + projectionIndex,type(void.class),ImmutableList.<ParameterizedType>builder().addAll(nCopies(channels,type(TupleReadable.class))).add(type(BlockBuilder.class)).build());
    }
  }
  ifStatement.ifTrue(trueBlock);
  forLoopBody.append(ifStatement.build());
  filterAndProjectMethod.getBody().append(forLoop.body(forLoopBody).build());
  for (  LocalVariableDefinition cursorVariable : cursorVariables) {
    filterAndProjectMethod.getBody().loadVariable(cursorVariable).invokeInterface(BlockCursor.class,"advanceNextPosition",boolean.class).invokeStatic(Operations.class,"not",boolean.class,boolean.class).invokeStatic(Preconditions.class,"checkState",void.class,boolean.class);
  }
  filterAndProjectMethod.getBody().ret();
}
