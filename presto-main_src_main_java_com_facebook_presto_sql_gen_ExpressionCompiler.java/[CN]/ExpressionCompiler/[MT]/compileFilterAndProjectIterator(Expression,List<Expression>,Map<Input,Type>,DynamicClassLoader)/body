{
  ClassDefinition classDefinition=new ClassDefinition(new CompilerContext(bootstrapMethod),a(PUBLIC,FINAL),typeFromPathName("FilterAndProjectIterator_" + CLASS_ID.incrementAndGet()),type(AbstractFilterAndProjectIterator.class));
  FieldDefinition sessionField=classDefinition.declareField(a(PRIVATE,FINAL),"session",Session.class);
  classDefinition.declareConstructor(new CompilerContext(bootstrapMethod),a(PUBLIC),arg("tupleInfos",type(Iterable.class,TupleInfo.class)),arg("pageIterator",PageIterator.class),arg("session",Session.class)).getBody().comment("super(tupleInfos, pageIterator);").loadThis().loadVariable("tupleInfos").loadVariable("pageIterator").invokeConstructor(AbstractFilterAndProjectIterator.class,Iterable.class,PageIterator.class).comment("this.session = session;").loadThis().loadVariable("session").putField(classDefinition.getType(),sessionField).ret();
  generateFilterAndProjectCursorMethod(classDefinition,projections);
  generateFilterAndProjectIteratorMethod(classDefinition,projections,inputTypes);
  generateFilterMethod(classDefinition,filter,inputTypes,true);
  generateFilterMethod(classDefinition,filter,inputTypes,false);
  List<TupleInfo> tupleInfos=new ArrayList<>();
  int projectionIndex=0;
  for (  Expression projection : projections) {
    Class<?> type=generateProjectMethod(classDefinition,"project_" + projectionIndex,projection,inputTypes,true);
    generateProjectMethod(classDefinition,"project_" + projectionIndex,projection,inputTypes,false);
    if (type == boolean.class) {
      tupleInfos.add(TupleInfo.SINGLE_BOOLEAN);
    }
 else     if (type == long.class || type == void.class) {
      tupleInfos.add(TupleInfo.SINGLE_LONG);
    }
 else     if (type == double.class) {
      tupleInfos.add(TupleInfo.SINGLE_DOUBLE);
    }
 else     if (type == Slice.class) {
      tupleInfos.add(TupleInfo.SINGLE_VARBINARY);
    }
 else {
      throw new IllegalStateException("Type " + type.getName() + "can be output");
    }
    projectionIndex++;
  }
  Class<? extends PageIterator> filterAndProjectClass=defineClasses(ImmutableList.of(classDefinition),classLoader).values().iterator().next().asSubclass(PageIterator.class);
  return new TypedPageIteratorClass(filterAndProjectClass,tupleInfos);
}
