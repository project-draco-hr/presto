{
  BootstrapEntry bootstrap=BootstrapEntry.makeBootstrap(classLoader,metadata);
  ClassDefinition classDefinition=new ClassDefinition(new CompilerContext(bootstrap.getBootstrapMethod()),a(PUBLIC,FINAL),typeFromPathName("FilterAndProjectOperator_" + CLASS_ID.incrementAndGet()),type(AbstractFilterAndProjectOperator.class));
  FieldDefinition sessionField=classDefinition.declareField(a(PRIVATE,FINAL),"session",ConnectorSession.class);
  classDefinition.declareConstructor(new CompilerContext(bootstrap.getBootstrapMethod()),a(PUBLIC),arg("operatorContext",OperatorContext.class),arg("types",type(Iterable.class,Type.class))).getBody().comment("super(operatorContext, types);").pushThis().getVariable("operatorContext").getVariable("types").invokeConstructor(AbstractFilterAndProjectOperator.class,OperatorContext.class,Iterable.class).comment("this.session = operatorContext.getSession();").pushThis().getVariable("operatorContext").invokeVirtual(OperatorContext.class,"getSession",ConnectorSession.class).putField(sessionField).ret();
  generateFilterAndProjectRowOriented(bootstrap,classDefinition,filter,projections,expressionTypes);
  generateFilterMethod(bootstrap,classDefinition,filter,expressionTypes,true,timeZoneKey);
  generateFilterMethod(bootstrap,classDefinition,filter,expressionTypes,false,timeZoneKey);
  List<Type> types=new ArrayList<>();
  int projectionIndex=0;
  for (  Expression projection : projections) {
    generateProjectMethod(bootstrap,classDefinition,"project_" + projectionIndex,projection,expressionTypes,true,timeZoneKey);
    generateProjectMethod(bootstrap,classDefinition,"project_" + projectionIndex,projection,expressionTypes,false,timeZoneKey);
    types.add(expressionTypes.get(projection));
    projectionIndex++;
  }
  classDefinition.declareMethod(new CompilerContext(bootstrap.getBootstrapMethod()),a(PUBLIC),"toString",type(String.class)).getBody().push(toStringHelper(classDefinition.getType().getJavaClassName()).add("filter",filter).add("projections",projections).toString()).retObject();
  Class<? extends Operator> filterAndProjectClass=defineClass(classDefinition,Operator.class,classLoader);
  return new TypedOperatorClass(filterAndProjectClass,types);
}
