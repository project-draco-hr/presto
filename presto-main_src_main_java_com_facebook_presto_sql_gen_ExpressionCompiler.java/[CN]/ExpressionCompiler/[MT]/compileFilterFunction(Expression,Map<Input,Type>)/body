{
  ClassDefinition classDefinition=new ClassDefinition(new CompilerContext(),a(PUBLIC,FINAL),typeFromPathName("FilterFunction_" + CLASS_ID.incrementAndGet()),type(Object.class),type(FilterFunction.class));
  classDefinition.declareConstructor(new CompilerContext(),a(PUBLIC)).getBody().loadThis().invokeConstructor(Object.class).ret();
  MethodDefinition filterMethod=classDefinition.declareMethod(new CompilerContext(),a(PUBLIC),"filter",type(boolean.class),NamedParameterDefinition.arg("channels",TupleReadable[].class));
  filterMethod.getCompilerContext().declareVariable(type(boolean.class),"wasNull");
  TypedByteCodeNode body=new Visitor(metadata,inputTypes).process(expression,filterMethod.getCompilerContext());
  if (body.type == void.class) {
    filterMethod.getBody().loadConstant(false).retBoolean();
  }
 else {
    filterMethod.getBody().loadConstant(false).storeVariable("wasNull").append(body.node).retBoolean();
  }
  Class<? extends FilterFunction> filterClass=defineClasses(ImmutableList.of(classDefinition)).values().iterator().next().asSubclass(FilterFunction.class);
  try {
    FilterFunction function=filterClass.newInstance();
    return function;
  }
 catch (  Throwable e) {
    throw Throwables.propagate(e);
  }
}
