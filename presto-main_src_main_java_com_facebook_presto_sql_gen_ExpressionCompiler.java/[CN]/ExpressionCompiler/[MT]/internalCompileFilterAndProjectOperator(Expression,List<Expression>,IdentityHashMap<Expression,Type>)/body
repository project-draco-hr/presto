{
  DynamicClassLoader classLoader=createClassLoader();
  TypedOperatorClass typedOperatorClass=compileFilterAndProjectOperator(filter,projections,expressionTypes,classLoader);
  Constructor<? extends Operator> constructor;
  try {
    constructor=typedOperatorClass.getOperatorClass().getConstructor(OperatorContext.class,Iterable.class);
  }
 catch (  NoSuchMethodException e) {
    throw Throwables.propagate(e);
  }
  FilterAndProjectOperatorFactoryFactory operatorFactoryFactory=new FilterAndProjectOperatorFactoryFactory(constructor,typedOperatorClass.getTypes());
  return operatorFactoryFactory;
}
