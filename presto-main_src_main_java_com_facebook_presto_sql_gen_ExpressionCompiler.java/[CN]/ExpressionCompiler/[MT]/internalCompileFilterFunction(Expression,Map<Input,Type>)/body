{
  ClassDefinition classDefinition=new ClassDefinition(new CompilerContext(bootstrapMethod),a(PUBLIC,FINAL),typeFromPathName("FilterFunction_" + CLASS_ID.incrementAndGet()),type(Object.class),type(FilterFunction.class));
  FieldDefinition sessionField=classDefinition.declareField(a(PRIVATE,FINAL),"session",Session.class);
  classDefinition.declareConstructor(new CompilerContext(bootstrapMethod),a(PUBLIC),arg("session",Session.class)).getBody().pushThis().invokeConstructor(Object.class).comment("this.session = session;").pushThis().getVariable("session").putField(sessionField).ret();
  MethodDefinition filterMethod=classDefinition.declareMethod(new CompilerContext(bootstrapMethod),a(PUBLIC),"filter",type(boolean.class),arg("channels",TupleReadable[].class));
  filterMethod.getBody().pushThis();
  int channels=Ordering.natural().max(transform(inputTypes.keySet(),Input.channelGetter())) + 1;
  for (int i=0; i < channels; i++) {
    filterMethod.getBody().getVariable("channels").push(i).getObjectArrayElement();
  }
  filterMethod.getBody().invokeVirtual(classDefinition.getType(),"filter",type(boolean.class),nCopies(channels,type(TupleReadable.class)));
  filterMethod.getBody().retBoolean();
  generateFilterMethod(classDefinition,expression,inputTypes,false);
  generateFilterMethod(classDefinition,expression,inputTypes,true);
  classDefinition.declareMethod(new CompilerContext(bootstrapMethod),a(PUBLIC),"toString",type(String.class)).getBody().push(toStringHelper(classDefinition.getType().getJavaClassName()).add("filter",expression).toString()).retObject();
  Class<? extends FilterFunction> filterClass=defineClasses(ImmutableList.of(classDefinition),createClassLoader()).values().iterator().next().asSubclass(FilterFunction.class);
  try {
    final Constructor<? extends FilterFunction> constructor=filterClass.getConstructor(Session.class);
    return new Function<Session,FilterFunction>(){
      @Override public FilterFunction apply(      Session session){
        try {
          FilterFunction function=constructor.newInstance(session);
          return function;
        }
 catch (        Throwable e) {
          throw Throwables.propagate(e);
        }
      }
    }
;
  }
 catch (  Throwable e) {
    throw Throwables.propagate(e);
  }
}
