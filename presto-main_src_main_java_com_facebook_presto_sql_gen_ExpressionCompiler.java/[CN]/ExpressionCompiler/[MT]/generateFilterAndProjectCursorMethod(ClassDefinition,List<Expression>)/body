{
  MethodDefinition filterAndProjectMethod=classDefinition.declareMethod(new CompilerContext(bootstrapMethod),a(PUBLIC),"filterAndProjectRowOriented",type(void.class),arg("cursor",RecordCursor.class),arg("pageBuilder",PageBuilder.class));
  CompilerContext compilerContext=filterAndProjectMethod.getCompilerContext();
  LabelNode done=new LabelNode("done");
  WhileLoopBuilder whileLoop=WhileLoop.whileLoopBuilder(compilerContext).condition(new Block(compilerContext).getVariable("pageBuilder").invokeVirtual(PageBuilder.class,"isFull",boolean.class).ifNotZeroGoto(done).getVariable("cursor").invokeInterface(RecordCursor.class,"advanceNextPosition",boolean.class));
  Block whileLoopBody=new Block(compilerContext);
  IfStatementBuilder ifStatement=new IfStatementBuilder(compilerContext);
  ifStatement.condition(new Block(compilerContext).pushThis().getVariable("cursor").invokeVirtual(classDefinition.getType(),"filter",type(boolean.class),type(RecordCursor.class)));
  Block trueBlock=new Block(compilerContext);
  if (projections.isEmpty()) {
    trueBlock.getVariable("pageBuilder").invokeVirtual(PageBuilder.class,"declarePosition",void.class);
  }
 else {
    for (int projectionIndex=0; projectionIndex < projections.size(); projectionIndex++) {
      trueBlock.pushThis();
      trueBlock.getVariable("cursor");
      trueBlock.getVariable("pageBuilder").push(projectionIndex).invokeVirtual(PageBuilder.class,"getBlockBuilder",BlockBuilder.class,int.class);
      trueBlock.invokeVirtual(classDefinition.getType(),"project_" + projectionIndex,type(void.class),type(RecordCursor.class),type(BlockBuilder.class));
    }
  }
  ifStatement.ifTrue(trueBlock);
  whileLoopBody.append(ifStatement.build());
  filterAndProjectMethod.getBody().append(whileLoop.body(whileLoopBody).build()).visitLabel(done);
  filterAndProjectMethod.getBody().ret();
}
