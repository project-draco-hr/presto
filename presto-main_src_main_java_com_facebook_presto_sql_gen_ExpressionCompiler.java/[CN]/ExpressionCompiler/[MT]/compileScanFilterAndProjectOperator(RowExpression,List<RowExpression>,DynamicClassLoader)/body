{
  BootstrapEntry bootstrap=BootstrapEntry.makeBootstrap(classLoader,metadata);
  ClassDefinition classDefinition=new ClassDefinition(new CompilerContext(bootstrap.getBootstrapMethod()),a(PUBLIC,FINAL),typeFromPathName("ScanFilterAndProjectOperator_" + CLASS_ID.incrementAndGet()),type(AbstractScanFilterAndProjectOperator.class));
  FieldDefinition sessionField=classDefinition.declareField(a(PRIVATE,FINAL),"session",ConnectorSession.class);
  classDefinition.declareConstructor(new CompilerContext(bootstrap.getBootstrapMethod()),a(PUBLIC),arg("operatorContext",OperatorContext.class),arg("sourceId",PlanNodeId.class),arg("dataStreamProvider",DataStreamProvider.class),arg("columns",type(Iterable.class,ColumnHandle.class)),arg("types",type(Iterable.class,Type.class))).getBody().comment("super(operatorContext, sourceId, dataStreamProvider, columns, types);").pushThis().getVariable("operatorContext").getVariable("sourceId").getVariable("dataStreamProvider").getVariable("columns").getVariable("types").invokeConstructor(AbstractScanFilterAndProjectOperator.class,OperatorContext.class,PlanNodeId.class,DataStreamProvider.class,Iterable.class,Iterable.class).comment("this.session = operatorContext.getSession();").pushThis().getVariable("operatorContext").invokeVirtual(OperatorContext.class,"getSession",ConnectorSession.class).putField(sessionField).ret();
  generateFilterAndProjectRowOriented(bootstrap,classDefinition,filter,projections);
  generateFilterAndProjectCursorMethod(bootstrap,classDefinition,projections);
  generateFilterMethod(bootstrap,classDefinition,filter,true);
  generateFilterMethod(bootstrap,classDefinition,filter,false);
  List<Type> types=new ArrayList<>();
  int projectionIndex=0;
  for (  RowExpression projection : projections) {
    generateProjectMethod(bootstrap,classDefinition,"project_" + projectionIndex,projection,true);
    generateProjectMethod(bootstrap,classDefinition,"project_" + projectionIndex,projection,false);
    types.add(projection.getType());
    projectionIndex++;
  }
  generateToString(bootstrap,classDefinition,toStringHelper(classDefinition.getType().getJavaClassName()).add("filter",filter).add("projections",projections).toString());
  Class<? extends SourceOperator> filterAndProjectClass=defineClass(classDefinition,SourceOperator.class,classLoader);
  return new TypedOperatorClass(filterAndProjectClass,types);
}
