{
  Scope scope=generatorContext.getScope();
  RowExpression first=arguments.get(0);
  RowExpression second=arguments.get(1);
  LabelNode notMatch=new LabelNode("notMatch");
  ByteCodeBlock block=new ByteCodeBlock().comment("check if first arg is null").append(generatorContext.generate(first)).append(ByteCodeUtils.ifWasNullPopAndGoto(scope,notMatch,void.class));
  Type firstType=first.getType();
  Type secondType=second.getType();
  Type commonType=FunctionRegistry.getCommonSuperType(firstType,secondType).get();
  FunctionInfo equalsFunction=generatorContext.getRegistry().resolveOperator(OperatorType.EQUAL,ImmutableList.of(firstType,secondType));
  ByteCodeNode equalsCall=generatorContext.generateCall(equalsFunction,ImmutableList.of(cast(generatorContext,new ByteCodeBlock().dup(firstType.getJavaType()),firstType,commonType),cast(generatorContext,generatorContext.generate(second),secondType,commonType)));
  ByteCodeBlock conditionBlock=new ByteCodeBlock().append(equalsCall).append(ByteCodeUtils.ifWasNullClearPopAndGoto(scope,notMatch,void.class,boolean.class));
  ByteCodeBlock trueBlock=new ByteCodeBlock().append(generatorContext.wasNull().set(constantTrue())).pop(first.getType().getJavaType()).pushJavaDefault(first.getType().getJavaType());
  block.append(new IfStatement().condition(conditionBlock).ifTrue(trueBlock).ifFalse(notMatch));
  return block;
}
