{
  final TaskInfo taskInfo=this.taskInfo.get();
  if ((taskInfo.getState() == TaskState.PLANNED) || taskInfo.getState().isDone()) {
    return Futures.immediateFuture(null);
  }
  URI statusUri=uriBuilderFrom(taskInfo.getSelf()).build();
  Request request=prepareGet().setUri(statusUri).build();
  ListenableFuture<JsonResponse<TaskInfo>> future=httpClient.executeAsync(request,createFullJsonResponseHandler(taskInfoCodec));
  return chainedCallback(future,new FutureCallback<JsonResponse<TaskInfo>>(){
    @Override public void onSuccess(    JsonResponse<TaskInfo> response){
      if (response.getStatusCode() == Status.GONE.getStatusCode()) {
        updateTaskInfo(new TaskInfo(taskInfo.getQueryId(),taskInfo.getStageId(),taskInfo.getTaskId(),taskInfo.getVersion(),TaskState.CANCELED,taskInfo.getSelf(),taskInfo.getOutputBuffers(),taskInfo.getNoMoreSplits(),taskInfo.getStats(),ImmutableList.<FailureInfo>of()));
      }
 else {
        checkState(response.getStatusCode() == Status.OK.getStatusCode(),"Expected response code to be 201, but was %s: %s",response.getStatusCode(),response.getStatusMessage());
        updateTaskInfo(response.getValue());
      }
    }
    @Override public void onFailure(    Throwable t){
      log.debug(t,"Error updating task info");
    }
  }
);
}
