{
  Preconditions.checkNotNull(session,"session is null");
  Preconditions.checkNotNull(queryId,"queryId is null");
  Preconditions.checkNotNull(stageId,"stageId is null");
  Preconditions.checkNotNull(taskId,"taskId is null");
  Preconditions.checkNotNull(planFragment,"planFragment is null");
  Preconditions.checkNotNull(fixedSources,"fixedSources is null");
  Preconditions.checkNotNull(initialOutputIds,"initialOutputIds is null");
  Preconditions.checkNotNull(httpClient,"httpClient is null");
  Preconditions.checkNotNull(taskInfoCodec,"taskInfoCodec is null");
  Preconditions.checkNotNull(queryFragmentRequestCodec,"queryFragmentRequestCodec is null");
  Preconditions.checkNotNull(splitCodec,"splitCodec is null");
  this.session=session;
  this.planFragment=planFragment;
  this.fixedSources=fixedSources;
  this.httpClient=httpClient;
  this.taskInfoCodec=taskInfoCodec;
  this.queryFragmentRequestCodec=queryFragmentRequestCodec;
  this.splitCodec=splitCodec;
  List<BufferInfo> bufferStates=ImmutableList.copyOf(transform(initialOutputIds,new Function<String,BufferInfo>(){
    @Override public BufferInfo apply(    String outputId){
      return new BufferInfo(outputId,false,0);
    }
  }
));
  ExecutionStats stats=new ExecutionStats();
  taskInfo.set(new TaskInfo(queryId,stageId,taskId,TaskState.PLANNED,location,bufferStates,stats,ImmutableList.<FailureInfo>of()));
}
