{
  checkNotNull(partitions,"partitions is null");
  if (partitions.isEmpty()) {
    return ImmutableList.of();
  }
  Partition partition=Iterables.getOnlyElement(partitions);
  checkArgument(partition instanceof SystemPartition,"Partition must be a system partition");
  SystemPartition systemPartition=(SystemPartition)partition;
  SystemTable systemTable=tables.get(systemPartition.getTableHandle().getSchemaTableName());
  checkArgument(systemTable != null,"Table %s does not exist",systemPartition.getTableHandle().getTableName());
  ImmutableMap.Builder<String,Object> filters=ImmutableMap.builder();
  for (  Entry<ColumnHandle,Object> entry : systemPartition.getFilters().entrySet()) {
    SystemColumnHandle systemColumnHandle=(SystemColumnHandle)entry.getKey();
    filters.put(systemColumnHandle.getColumnName(),entry.getValue());
  }
  if (systemTable.isDistributed()) {
    ImmutableList.Builder<Split> splits=ImmutableList.builder();
    for (    Node node : nodeManager.getActiveNodes()) {
      splits.add(new SystemSplit(systemPartition.tableHandle,filters.build(),ImmutableList.of(node.getHostAndPort())));
    }
    return splits.build();
  }
 else {
    Optional<Node> currentNode=nodeManager.getCurrentNode();
    Preconditions.checkState(currentNode.isPresent(),"current node is not in the active set");
    Split split=new SystemSplit(systemPartition.tableHandle,filters.build(),ImmutableList.of(currentNode.get().getHostAndPort()));
    return ImmutableList.of(split);
  }
}
