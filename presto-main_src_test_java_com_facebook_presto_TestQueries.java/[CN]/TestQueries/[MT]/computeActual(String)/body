{
  Statement statement;
  try {
    statement=SqlParser.createStatement(sql);
  }
 catch (  RecognitionException e) {
    throw Throwables.propagate(e);
  }
  Session session=new Session(TpchSchema.CATALOG_NAME,TpchSchema.SCHEMA_NAME);
  Analyzer analyzer=new Analyzer(session,metadata);
  AnalysisResult analysis=analyzer.analyze(statement);
  Planner planner=new Planner();
  PlanNode plan=planner.plan((Query)statement,analysis);
  new PlanPrinter().print(plan,analysis.getTypes());
  FragmentPlanner fragmentPlanner=new FragmentPlanner(metadata);
  List<PlanFragment> fragments=fragmentPlanner.createFragments(plan,analysis.getSymbolAllocator(),true);
  ImmutableMap.Builder<TableHandle,TableScanPlanFragmentSource> builder=ImmutableMap.builder();
  for (  PlanNode source : Iterables.getOnlyElement(fragments).getSources()) {
    TableScanNode tableScan=(TableScanNode)source;
    TpchTableHandle handle=(TpchTableHandle)tableScan.getTable();
    builder.put(handle,new TableScanPlanFragmentSource(new TpchSplit(handle)));
  }
  LocalExecutionPlanner executionPlanner=new LocalExecutionPlanner(metadata,new HackPlanFragmentSourceProvider(dataProvider,null,QUERY_TASK_INFO_CODEC),analysis.getTypes(),null,builder.build(),ImmutableMap.<String,ExchangePlanFragmentSource>of(),new SourceHashProviderFactory());
  Operator operator=executionPlanner.plan(plan);
  TupleInfo outputTupleInfo=LocalExecutionPlanner.toTupleInfo(analysis,plan.getOutputSymbols());
  ImmutableList.Builder<Tuple> output=ImmutableList.builder();
  for (  Page page : operator) {
    ImmutableList.Builder<BlockCursor> cursorBuilder=ImmutableList.builder();
    for (    Block block : page.getBlocks()) {
      cursorBuilder.add(block.cursor());
    }
    List<BlockCursor> cursors=cursorBuilder.build();
    boolean done=false;
    while (!done) {
      TupleInfo.Builder outputBuilder=outputTupleInfo.builder();
      done=true;
      for (      BlockCursor cursor : cursors) {
        if (!cursor.advanceNextPosition()) {
          break;
        }
        done=false;
        outputBuilder.append(cursor.getTuple());
      }
      if (!done) {
        output.add(outputBuilder.build());
      }
    }
  }
  return output.build();
}
