{
  final RecordProjection projection=RecordProjections.createProjection(column.getIndex(),type);
  return new BlockIterable(){
    @Override public TupleInfo getTupleInfo(){
      return new TupleInfo(type);
    }
    @Override public Iterator<Block> iterator(){
      return new AbstractIterator<Block>(){
        RecordIterator iterator=data.iterator();
        @Override protected Block computeNext(){
          BlockBuilder builder=new BlockBuilder(new TupleInfo(type));
          while (iterator.hasNext() && !builder.isFull()) {
            Record record=iterator.next();
            projection.project(record,builder);
          }
          if (builder.isEmpty()) {
            return endOfData();
          }
          return builder.build();
        }
      }
;
    }
  }
;
}
