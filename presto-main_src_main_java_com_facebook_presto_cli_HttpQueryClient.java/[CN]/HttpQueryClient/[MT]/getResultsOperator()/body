{
  QueryInfo queryInfo=getQueryInfo(false);
  if (queryInfo == null || queryInfo.getOutputStage() == null) {
    return new Operator(){
      @Override public int getChannelCount(){
        return 0;
      }
      @Override public List<TupleInfo> getTupleInfos(){
        return ImmutableList.of();
      }
      @Override public PageIterator iterator(      OperatorStats operatorStats){
        return PageIterators.emptyIterator(ImmutableList.<TupleInfo>of());
      }
    }
;
  }
  StageInfo outputStage=queryInfo.getOutputStage();
  ExchangeOperator exchangeOperator=new ExchangeOperator(httpClient,outputStage.getTupleInfos(),100,10,3);
  for (  TaskInfo taskInfo : outputStage.getTasks()) {
    Preconditions.checkState(taskInfo.getOutputBuffers().size() == 1,"Expected a single output buffer for task %s, but found %s",taskInfo.getTaskId(),taskInfo.getOutputBuffers());
    String bufferId=Iterables.getOnlyElement(taskInfo.getOutputBuffers()).getBufferId();
    URI uri=uriBuilderFrom(taskInfo.getSelf()).appendPath("results").appendPath(bufferId).build();
    exchangeOperator.addSplit(new RemoteSplit(uri,outputStage.getTupleInfos()));
  }
  exchangeOperator.noMoreSplits();
  return exchangeOperator;
}
