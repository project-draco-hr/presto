{
  PlanNode source=node.getSource();
  source.accept(this,boundSymbols);
  verifyUniqueId(node);
  Set<Symbol> inputs=createInputs(source,boundSymbols);
  checkDependencies(inputs,node.getPartitionBy(),"Invalid node. Partition by symbols (%s) not in source plan output (%s)",node.getPartitionBy(),node.getSource().getOutputSymbols());
  checkDependencies(inputs,node.getOrderBy(),"Invalid node. Order by symbols (%s) not in source plan output (%s)",node.getOrderBy(),node.getSource().getOutputSymbols());
  ImmutableList.Builder<Symbol> bounds=ImmutableList.builder();
  if (node.getFrame().getStartValue().isPresent()) {
    bounds.add(node.getFrame().getStartValue().get());
  }
  if (node.getFrame().getEndValue().isPresent()) {
    bounds.add(node.getFrame().getEndValue().get());
  }
  checkDependencies(inputs,bounds.build(),"Invalid node. Frame bounds (%s) not in source plan output (%s)",bounds.build(),node.getSource().getOutputSymbols());
  for (  WindowNode.Function function : node.getWindowFunctions().values()) {
    Set<Symbol> dependencies=DependencyExtractor.extractUnique(function.getFunctionCall());
    checkDependencies(inputs,dependencies,"Invalid node. Window function dependencies (%s) not in source plan output (%s)",dependencies,node.getSource().getOutputSymbols());
  }
  return null;
}
