{
  this.connectorId=checkNotNull(connectorId,"connectorId is null");
  this.session=checkNotNull(session,"cassandraSession is null");
  checkNotNull(executor,"executor is null");
  long expiresAfterWriteMillis=checkNotNull(cacheTtl,"cacheTtl is null").toMillis();
  long refreshMills=checkNotNull(refreshInterval,"refreshInterval is null").toMillis();
  schemaNamesCache=CacheBuilder.newBuilder().expireAfterWrite(expiresAfterWriteMillis,MILLISECONDS).refreshAfterWrite(refreshMills,MILLISECONDS).build(asyncReloading(new CacheLoader<String,Map<String,String>>(){
    @Override public Map<String,String> load(    String key) throws Exception {
      return loadAllSchemas();
    }
  }
,executor));
  tableNamesCache=CacheBuilder.newBuilder().expireAfterWrite(expiresAfterWriteMillis,MILLISECONDS).refreshAfterWrite(refreshMills,MILLISECONDS).build(asyncReloading(new CacheLoader<String,Map<String,String>>(){
    @Override public Map<String,String> load(    String databaseName) throws Exception {
      return loadAllTables(databaseName);
    }
  }
,executor));
  tableCache=CacheBuilder.newBuilder().expireAfterWrite(expiresAfterWriteMillis,MILLISECONDS).refreshAfterWrite(refreshMills,MILLISECONDS).build(asyncReloading(new CacheLoader<SchemaTableName,CassandraTable>(){
    @Override public CassandraTable load(    SchemaTableName tableName) throws Exception {
      return loadTable(tableName);
    }
  }
,executor));
  partitionsCache=CacheBuilder.newBuilder().expireAfterWrite(expiresAfterWriteMillis,MILLISECONDS).refreshAfterWrite(refreshMills,MILLISECONDS).build(asyncReloading(new CacheLoader<PartitionListKey,List<CassandraPartition>>(){
    @Override public List<CassandraPartition> load(    PartitionListKey key) throws Exception {
      return loadPartitions(key);
    }
  }
,executor));
  partitionsCacheFull=CacheBuilder.newBuilder().expireAfterWrite(expiresAfterWriteMillis,MILLISECONDS).build(asyncReloading(new CacheLoader<PartitionListKey,List<CassandraPartition>>(){
    @Override public List<CassandraPartition> load(    PartitionListKey key) throws Exception {
      return loadPartitions(key);
    }
  }
,executor));
}
