{
  filter=ExpressionTreeRewriter.rewriteWith(new SymbolToInputRewriter(INPUT_MAPPING),filter);
  projection=ExpressionTreeRewriter.rewriteWith(new SymbolToInputRewriter(INPUT_MAPPING),projection);
  IdentityHashMap<Expression,Type> expressionTypes=getExpressionTypesFromInput(SESSION,metadata,SQL_PARSER,INPUT_TYPES,ImmutableList.of(filter,projection));
  try {
    CursorProcessor cursorProcessor=compiler.compileCursorProcessor(SqlToRowExpressionTranslator.translate(filter,expressionTypes,metadata,session,false),ImmutableList.of(SqlToRowExpressionTranslator.translate(projection,expressionTypes,metadata,session,false)),SOURCE_ID);
    PageProcessor pageProcessor=compiler.compilePageProcessor(SqlToRowExpressionTranslator.translate(filter,expressionTypes,metadata,session,false),ImmutableList.of(SqlToRowExpressionTranslator.translate(projection,expressionTypes,metadata,session,false)));
    return new ScanFilterAndProjectOperator.ScanFilterAndProjectOperatorFactory(0,SOURCE_ID,DATA_STREAM_PROVIDER,cursorProcessor,pageProcessor,ImmutableList.<ColumnHandle>of(),ImmutableList.of(expressionTypes.get(projection)));
  }
 catch (  Throwable e) {
    if (e instanceof UncheckedExecutionException) {
      e=e.getCause();
    }
    throw new RuntimeException("Error compiling " + projection + ": "+ e.getMessage(),e);
  }
}
