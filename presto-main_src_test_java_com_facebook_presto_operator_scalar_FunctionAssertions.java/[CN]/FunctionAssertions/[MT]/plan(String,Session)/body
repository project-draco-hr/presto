{
  Statement statement=SqlParser.createStatement(sql);
  Analyzer analyzer=new Analyzer(session,METADATA);
  AnalysisResult analysis=analyzer.analyze(statement);
  PlanNodeIdAllocator idAllocator=new PlanNodeIdAllocator();
  PlanNode plan=new LogicalPlanner(session,METADATA,idAllocator).plan(analysis);
  SubPlan subplan=new DistributedLogicalPlanner(METADATA,idAllocator).createSubplans(plan,analysis.getSymbolAllocator(),true);
  assertTrue(subplan.getChildren().isEmpty(),"Expected subplan to have no children");
  ImmutableMap.Builder<PlanNodeId,TableScanPlanFragmentSource> builder=ImmutableMap.builder();
  for (  PlanNode source : subplan.getFragment().getSources()) {
    TableScanNode tableScan=(TableScanNode)source;
    InternalTableHandle handle=(InternalTableHandle)tableScan.getTable();
    builder.put(tableScan.getId(),new TableScanPlanFragmentSource(new InternalSplit(handle)));
  }
  DataSize maxOperatorMemoryUsage=new DataSize(50,MEGABYTE);
  LocalExecutionPlanner executionPlanner=new LocalExecutionPlanner(session,METADATA,new HackPlanFragmentSourceProvider(DATA_PROVIDER,null,new QueryManagerConfig()),analysis.getTypes(),null,builder.build(),ImmutableMap.<PlanNodeId,ExchangePlanFragmentSource>of(),new OperatorStats(),new SourceHashProviderFactory(maxOperatorMemoryUsage),maxOperatorMemoryUsage);
  return executionPlanner.plan(plan);
}
