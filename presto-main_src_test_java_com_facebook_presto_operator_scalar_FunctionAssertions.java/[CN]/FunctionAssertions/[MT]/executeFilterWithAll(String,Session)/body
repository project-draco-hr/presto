{
  checkNotNull(filter,"filter is null");
  Expression filterExpression=createExpression(filter);
  List<Boolean> results=new ArrayList<>();
  OperatorFactory operatorFactory=compileFilterProject(filterExpression,TRUE_LITERAL);
  Type expressionType=Type.fromRaw(operatorFactory.getTupleInfos().get(0).getType());
  results.add(executeFilter(operatorFactory,session));
  boolean interpretedValue=executeFilter(interpretedFilterProject(filterExpression,TRUE_LITERAL,expressionType,session));
  results.add(interpretedValue);
  SourceOperatorFactory scanProjectOperatorFactory=compileScanFilterProject(filterExpression,TRUE_LITERAL);
  boolean scanOperatorValue=executeFilter(scanProjectOperatorFactory,createNormalSplit(),session);
  results.add(scanOperatorValue);
  boolean recordValue=executeFilter(scanProjectOperatorFactory,createRecordSetSplit(),session);
  results.add(recordValue);
  if (!needsBoundValue(filterExpression)) {
    try {
      LocalQueryRunner runner=createDualLocalQueryRunner(session,EXECUTOR);
      MaterializedResult result=runner.execute("SELECT TRUE FROM dual WHERE " + filter);
      assertEquals(result.getTupleInfos().size(),1);
      Boolean queryResult;
      if (result.getMaterializedTuples().isEmpty()) {
        queryResult=false;
      }
 else {
        assertEquals(result.getMaterializedTuples().size(),1);
        queryResult=(Boolean)Iterables.getOnlyElement(result.getMaterializedTuples()).getField(0);
      }
      results.add(queryResult);
    }
 catch (    SemanticException e) {
    }
  }
  return results;
}
