{
  checkNotNull(projection,"projection is null");
  Operator compiledOperator=createCompiledOperator(projection,session);
  Object compiledValue=execute(compiledOperator);
  Type expressionType=Type.fromRaw(compiledOperator.getTupleInfos().get(0).getTypes().get(0));
  FilterAndProjectOperator interpretedOperator=createInterpretedOperator(projection,expressionType,session);
  Object interpretedValue=execute(interpretedOperator);
  assertEquals(interpretedValue,compiledValue);
  boolean needsBoundValues=parseExpression(projection).accept(new AstVisitor<Boolean,Object>(){
    @Override public Boolean visitInputReference(    InputReference node,    Object context){
      return true;
    }
  }
,null) == Boolean.TRUE;
  if (!needsBoundValues) {
    MaterializedResult result=runner.execute("SELECT " + projection + " FROM dual");
    assertEquals(result.getTupleInfo().getFieldCount(),1);
    assertEquals(result.getMaterializedTuples().size(),1);
    Object queryResult=Iterables.getOnlyElement(result.getMaterializedTuples()).getField(0);
    assertEquals(compiledValue,queryResult);
  }
  return compiledValue;
}
