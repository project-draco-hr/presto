{
  Type projectionType=getExpressionType(projection);
  filter=ExpressionTreeRewriter.rewriteWith(new SymbolToInputRewriter(INPUT_MAPPING),filter);
  projection=ExpressionTreeRewriter.rewriteWith(new SymbolToInputRewriter(INPUT_MAPPING),projection);
  try {
    return compiler.compileFilterAndProjectOperator(0,filter,ImmutableList.of(projection),INPUT_TYPES,ImmutableList.of(projectionType));
  }
 catch (  Throwable e) {
    if (e instanceof UncheckedExecutionException) {
      e=e.getCause();
    }
    throw new RuntimeException("Error compiling " + projection + ": "+ e.getMessage(),e);
  }
}
