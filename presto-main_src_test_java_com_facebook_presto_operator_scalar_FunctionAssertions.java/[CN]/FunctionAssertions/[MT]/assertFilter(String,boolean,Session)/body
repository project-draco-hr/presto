{
  Expression parsedExpression=FunctionAssertions.parseExpression(expression);
  OperatorFactory operatorFactory;
  try {
    operatorFactory=compiler.compileFilterAndProjectOperator(parsedExpression,ImmutableList.<Expression>of(TRUE_LITERAL),INPUT_TYPES);
  }
 catch (  Throwable e) {
    throw new RuntimeException("Error compiling " + expression,e);
  }
  List<Page> input=rowPagesBuilder(SINGLE_LONG,SINGLE_VARBINARY,SINGLE_DOUBLE,SINGLE_BOOLEAN,SINGLE_LONG,SINGLE_VARBINARY,SINGLE_VARBINARY).row(1234L,"hello",12.34,true,MILLISECONDS.toSeconds(new DateTime(2001,8,22,3,4,5,321,DateTimeZone.UTC).getMillis()),"%el%",null).build();
  Operator source=createOperator(input);
  Operator operator=operatorFactory.createOperator(source,session);
  PageIterator pageIterator=operator.iterator(new OperatorStats());
  boolean value;
  if (pageIterator.hasNext()) {
    Page page=pageIterator.next();
    assertEquals(page.getPositionCount(),1);
    assertEquals(page.getChannelCount(),1);
    BlockCursor cursor=page.getBlock(0).cursor();
    assertTrue(cursor.advanceNextPosition());
    assertTrue(cursor.getBoolean(0));
    value=true;
  }
 else {
    value=false;
  }
  assertEquals(value,expected);
}
