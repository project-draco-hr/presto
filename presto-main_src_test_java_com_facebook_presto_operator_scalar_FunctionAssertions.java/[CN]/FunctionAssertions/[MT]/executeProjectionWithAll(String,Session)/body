{
  checkNotNull(projection,"projection is null");
  Expression projectionExpression=createExpression(projection);
  List<Object> results=new ArrayList<>();
  OperatorFactory operatorFactory=compileFilterProject(TRUE_LITERAL,projectionExpression);
  Type expressionType=Type.fromRaw(operatorFactory.getTupleInfos().get(0).getTypes().get(0));
  Object directOperatorValue=selectSingleValue(operatorFactory,session);
  results.add(directOperatorValue);
  Object interpretedValue=selectSingleValue(interpretedFilterProject(TRUE_LITERAL,projectionExpression,expressionType,session));
  results.add(interpretedValue);
  SourceOperatorFactory scanProjectOperatorFactory=compileScanFilterProject(TRUE_LITERAL,projectionExpression);
  Object scanOperatorValue=selectSingleValue(scanProjectOperatorFactory,createNormalSplit(),session);
  results.add(scanOperatorValue);
  Object recordValue=selectSingleValue(scanProjectOperatorFactory,createRecordSetSplit(),session);
  results.add(recordValue);
  if (!needsBoundValue(projectionExpression)) {
    try {
      LocalQueryRunner runner=createDualLocalQueryRunner(session,EXECUTOR);
      MaterializedResult result=runner.execute("SELECT " + projection + " FROM dual");
      assertEquals(result.getTupleInfo().getFieldCount(),1);
      assertEquals(result.getMaterializedTuples().size(),1);
      Object queryResult=Iterables.getOnlyElement(result.getMaterializedTuples()).getField(0);
      results.add(queryResult);
    }
 catch (    RuntimeException e) {
    }
  }
  return results;
}
