{
  filter=ExpressionTreeRewriter.rewriteWith(new SymbolToInputRewriter(INPUT_MAPPING),filter);
  projection=ExpressionTreeRewriter.rewriteWith(new SymbolToInputRewriter(INPUT_MAPPING),projection);
  IdentityHashMap<Expression,Type> expressionTypes=getExpressionTypesFromInput(TEST_SESSION,metadata,SQL_PARSER,INPUT_TYPES,ImmutableList.of(filter,projection));
  try {
    List<RowExpression> projections=ImmutableList.of(toRowExpression(projection,expressionTypes));
    PageProcessor processor=compiler.compilePageProcessor(toRowExpression(filter,expressionTypes),projections);
    return new FilterAndProjectOperator.FilterAndProjectOperatorFactory(0,new PlanNodeId("test"),processor,ImmutableList.of(expressionTypes.get(projection)));
  }
 catch (  Throwable e) {
    if (e instanceof UncheckedExecutionException) {
      e=e.getCause();
    }
    throw new RuntimeException("Error compiling " + projection + ": "+ e.getMessage(),e);
  }
}
