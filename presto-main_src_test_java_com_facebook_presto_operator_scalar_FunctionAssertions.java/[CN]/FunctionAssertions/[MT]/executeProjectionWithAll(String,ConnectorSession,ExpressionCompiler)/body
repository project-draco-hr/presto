{
  checkNotNull(projection,"projection is null");
  Expression projectionExpression=createExpression(projection,metadata,SYMBOL_TYPES);
  List<Object> results=new ArrayList<>();
  if (!needsBoundValue(projectionExpression)) {
    MaterializedResult result=runner.execute("SELECT " + projection);
    assertEquals(result.getTypes().size(),1);
    assertEquals(result.getMaterializedRows().size(),1);
    Object queryResult=Iterables.getOnlyElement(result.getMaterializedRows()).getField(0);
    results.add(queryResult);
  }
  OperatorFactory operatorFactory=compileFilterProject(TRUE_LITERAL,projectionExpression,compiler);
  Object directOperatorValue=selectSingleValue(operatorFactory,session);
  results.add(directOperatorValue);
  Object interpretedValue=selectSingleValue(interpretedFilterProject(TRUE_LITERAL,projectionExpression,session));
  results.add(interpretedValue);
  SourceOperatorFactory scanProjectOperatorFactory=compileScanFilterProject(TRUE_LITERAL,projectionExpression,compiler);
  Object scanOperatorValue=selectSingleValue(scanProjectOperatorFactory,createNormalSplit(),session);
  results.add(scanOperatorValue);
  Object recordValue=selectSingleValue(scanProjectOperatorFactory,createRecordSetSplit(),session);
  results.add(recordValue);
  if (!needsBoundValue(projectionExpression)) {
    MaterializedResult result=runner.execute("SELECT " + projection);
    assertEquals(result.getTypes().size(),1);
    assertEquals(result.getMaterializedRows().size(),1);
    Object queryResult=Iterables.getOnlyElement(result.getMaterializedRows()).getField(0);
    results.add(queryResult);
  }
  return results;
}
