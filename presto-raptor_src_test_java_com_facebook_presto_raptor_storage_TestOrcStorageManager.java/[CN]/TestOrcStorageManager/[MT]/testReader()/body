{
  OrcStorageManager manager=new OrcStorageManager(storageService,ORC_MERGE_DISTANCE,recoveryManager,SHARD_RECOVERY_TIMEOUT,ROWS_PER_SHARD,MAX_BUFFER_SIZE);
  List<Long> columnIds=ImmutableList.of(2L,4L,6L,7L,8L,9L);
  List<Type> columnTypes=ImmutableList.<Type>of(BIGINT,VARCHAR,VARBINARY,DATE,BOOLEAN,DOUBLE);
  byte[] bytes1=octets(0x00,0xFE,0xFF);
  byte[] bytes3=octets(0x01,0x02,0x19,0x80);
  StorageOutputHandle handle=manager.createStorageOutputHandle(columnIds,columnTypes);
  List<Page> pages=RowPagesBuilder.rowPagesBuilder(columnTypes).row(123,"hello",wrappedBuffer(bytes1),dateValue(new DateTime(2001,8,22,0,0,0,0,UTC)),true,123.45).row(null,null,null,null,null,null).row(456,"bye",wrappedBuffer(bytes3),dateValue(new DateTime(2005,4,22,0,0,0,0,UTC)),false,987.65).build();
  StoragePageSink storagePageSink=handle.createStoragePageSink();
  storagePageSink.appendPages(pages);
  storagePageSink.close();
  manager.commit(handle);
  TupleDomain<RaptorColumnHandle> tupleDomain=TupleDomain.all();
  try (ConnectorPageSource pageSource=manager.getPageSource(Iterables.getOnlyElement(handle.getShardUuids()),columnIds,columnTypes,tupleDomain)){
    MaterializedResult result=materializeSourceDataStream(SESSION,pageSource,columnTypes);
    assertEquals(result.getRowCount(),3);
    MaterializedResult expected=resultBuilder(SESSION,columnTypes).row(123,"hello",sqlBinary(bytes1),sqlDate(2001,8,22),true,123.45).row(null,null,null,null,null,null).row(456,"bye",sqlBinary(bytes3),sqlDate(2005,4,22),false,987.65).build();
    assertEquals(result,expected);
  }
   tupleDomain=TupleDomain.withFixedValues(ImmutableMap.<RaptorColumnHandle,Comparable<?>>builder().put(new RaptorColumnHandle("test","c1",2,BIGINT),124L).build());
  try (ConnectorPageSource pageSource=manager.getPageSource(Iterables.getOnlyElement(handle.getShardUuids()),columnIds,columnTypes,tupleDomain)){
    MaterializedResult result=materializeSourceDataStream(SESSION,pageSource,columnTypes);
    assertEquals(result.getRowCount(),3);
  }
   tupleDomain=TupleDomain.withFixedValues(ImmutableMap.<RaptorColumnHandle,Comparable<?>>builder().put(new RaptorColumnHandle("test","c1",2,BIGINT),122L).build());
  try (ConnectorPageSource pageSource=manager.getPageSource(Iterables.getOnlyElement(handle.getShardUuids()),columnIds,columnTypes,tupleDomain)){
    MaterializedResult result=materializeSourceDataStream(SESSION,pageSource,columnTypes);
    assertEquals(result.getRowCount(),0);
  }
 }
