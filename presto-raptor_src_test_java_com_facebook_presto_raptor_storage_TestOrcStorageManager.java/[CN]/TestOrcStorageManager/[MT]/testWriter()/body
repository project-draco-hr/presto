{
  OrcStorageManager manager=createOrcStorageManager();
  List<Long> columnIds=ImmutableList.of(3L,7L);
  List<Type> columnTypes=ImmutableList.<Type>of(BIGINT,VARCHAR);
  StoragePageSink sink=createStoragePageSink(manager,columnIds,columnTypes);
  List<Page> pages=rowPagesBuilder(columnTypes).row(123,"hello").row(456,"bye").build();
  sink.appendPages(pages);
  assertEquals(shardRecorder.getShards().size(),0);
  sink.flush();
  List<RecordedShard> recordedShards=shardRecorder.getShards();
  assertEquals(recordedShards.size(),1);
  List<ShardInfo> shards=sink.commit();
  assertEquals(shards.size(),1);
  ShardInfo shardInfo=Iterables.getOnlyElement(shards);
  UUID shardUuid=shardInfo.getShardUuid();
  File file=storageService.getStorageFile(shardUuid);
  File backupFile=fileBackupStore.getBackupFile(shardUuid);
  assertEquals(recordedShards.get(0).getTransactionId(),TRANSACTION_ID);
  assertEquals(recordedShards.get(0).getShardUuid(),shardUuid);
  assertEquals(recordedShards.get(0).getNodeIdentifier(),CURRENT_NODE);
  assertEquals(shardInfo.getRowCount(),2);
  assertEquals(shardInfo.getCompressedSize(),file.length());
  assertFile(file,"primary shard");
  assertFile(backupFile,"backup shard");
  assertFileEquals(file,backupFile);
  assertTrue(file.delete());
  assertTrue(file.getParentFile().delete());
  assertFalse(file.exists());
  recoveryManager.restoreFromBackup(shardUuid,OptionalLong.empty());
  try (OrcDataSource dataSource=manager.openShard(shardUuid,READER_ATTRIBUTES)){
    OrcRecordReader reader=createReader(dataSource,columnIds,columnTypes);
    assertEquals(reader.nextBatch(),2);
    Block column0=reader.readBlock(BIGINT,0);
    assertEquals(column0.isNull(0),false);
    assertEquals(column0.isNull(1),false);
    assertEquals(BIGINT.getLong(column0,0),123L);
    assertEquals(BIGINT.getLong(column0,1),456L);
    Block column1=reader.readBlock(VARCHAR,1);
    assertEquals(VARCHAR.getSlice(column1,0),utf8Slice("hello"));
    assertEquals(VARCHAR.getSlice(column1,1),utf8Slice("bye"));
    assertEquals(reader.nextBatch(),-1);
  }
 }
