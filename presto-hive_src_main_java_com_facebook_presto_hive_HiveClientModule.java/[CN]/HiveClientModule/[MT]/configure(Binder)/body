{
  binder.bind(HiveConnectorId.class).toInstance(new HiveConnectorId(connectorId));
  binder.bind(HdfsConfiguration.class).in(Scopes.SINGLETON);
  binder.bind(HdfsEnvironment.class).in(Scopes.SINGLETON);
  binder.bind(DirectoryLister.class).to(HadoopDirectoryLister.class).in(Scopes.SINGLETON);
  bindConfig(binder).to(HiveClientConfig.class);
  bindConfig(binder).to(HivePluginConfig.class);
  if (metastore != null) {
    binder.bind(HiveMetastore.class).toInstance(metastore);
  }
 else {
    binder.bind(HiveMetastore.class).to(CachingHiveMetastore.class).in(Scopes.SINGLETON);
    newExporter(binder).export(HiveMetastore.class).as(generatedNameOf(CachingHiveMetastore.class,connectorId));
  }
  binder.bind(NamenodeStats.class).in(Scopes.SINGLETON);
  newExporter(binder).export(NamenodeStats.class).as(generatedNameOf(NamenodeStats.class));
  binder.bind(DiscoveryLocatedHiveCluster.class).in(Scopes.SINGLETON);
  binder.bind(HiveMetastoreClientFactory.class).in(Scopes.SINGLETON);
  discoveryBinder(binder).bindSelector("hive-metastore");
  binder.bind(TypeManager.class).toInstance(typeManager);
  Multibinder<HiveRecordCursorProvider> recordCursorProviderBinder=Multibinder.newSetBinder(binder,HiveRecordCursorProvider.class);
  recordCursorProviderBinder.addBinding().to(OrcRecordCursorProvider.class).in(Scopes.SINGLETON);
  recordCursorProviderBinder.addBinding().to(ParquetRecordCursorProvider.class).in(Scopes.SINGLETON);
  recordCursorProviderBinder.addBinding().to(DwrfRecordCursorProvider.class).in(Scopes.SINGLETON);
  recordCursorProviderBinder.addBinding().to(ColumnarTextHiveRecordCursorProvider.class).in(Scopes.SINGLETON);
  recordCursorProviderBinder.addBinding().to(ColumnarBinaryHiveRecordCursorProvider.class).in(Scopes.SINGLETON);
  recordCursorProviderBinder.addBinding().to(GenericHiveRecordCursorProvider.class).in(Scopes.SINGLETON);
  binder.bind(ConnectorMetadata.class).to(HiveMetadata.class).in(Scopes.SINGLETON);
  binder.bind(ConnectorSplitManager.class).to(HiveSplitManager.class).in(Scopes.SINGLETON);
  binder.bind(ConnectorPageSourceProvider.class).to(HivePageSourceProvider.class).in(Scopes.SINGLETON);
  binder.bind(ConnectorRecordSinkProvider.class).to(HiveRecordSinkProvider.class).in(Scopes.SINGLETON);
  binder.bind(ConnectorHandleResolver.class).to(HiveHandleResolver.class).in(Scopes.SINGLETON);
  Multibinder<HivePageSourceFactory> pageSourceFactoryBinder=Multibinder.newSetBinder(binder,HivePageSourceFactory.class);
  pageSourceFactoryBinder.addBinding().to(RcFilePageSourceFactory.class).in(Scopes.SINGLETON);
  pageSourceFactoryBinder.addBinding().to(OrcPageSourceFactory.class).in(Scopes.SINGLETON);
  pageSourceFactoryBinder.addBinding().to(DwrfPageSourceFactory.class).in(Scopes.SINGLETON);
}
