{
  List<ResourceGroupSpec> candidates=rootGroups;
  List<String> segments=group.getId().getSegments();
  ResourceGroupSpec match=null;
  for (int i=0; i < segments.size(); i++) {
    List<ResourceGroupSpec> nextCandidates=null;
    ResourceGroupSpec nextCandidatesParent=null;
    for (    ResourceGroupSpec candidate : candidates) {
      if (candidate.getName().expandTemplate(context).equals(segments.get(i))) {
        if (i == segments.size() - 1) {
          if (match != null) {
            throw new IllegalStateException(format("Ambiguous configuration for %s. Matches %s and %s",group.getId(),match.getName(),candidate.getName()));
          }
          match=candidate;
        }
 else {
          if (nextCandidatesParent != null) {
            throw new IllegalStateException(format("Ambiguous configuration for %s. Matches %s and %s",group.getId(),nextCandidatesParent.getName(),candidate.getName()));
          }
          nextCandidates=candidate.getSubGroups();
          nextCandidatesParent=candidate;
        }
      }
    }
    if (nextCandidates == null) {
      break;
    }
    candidates=nextCandidates;
  }
  checkState(match != null,"No matching configuration found for: %s",group.getId());
  if (match.getSoftMemoryLimit().isPresent()) {
    group.setSoftMemoryLimit(match.getSoftMemoryLimit().get());
  }
 else {
synchronized (generalPoolMemoryFraction) {
      double fraction=match.getSoftMemoryLimitFraction().get();
      generalPoolMemoryFraction.put(group,fraction);
      group.setSoftMemoryLimit(new DataSize(generalPoolBytes * fraction,BYTE));
    }
  }
  group.setMaxQueuedQueries(match.getMaxQueued());
  group.setMaxRunningQueries(match.getMaxRunning());
  if (match.getSchedulingPolicy().isPresent()) {
    group.setSchedulingPolicy(match.getSchedulingPolicy().get());
  }
  if (match.getSchedulingWeight().isPresent()) {
    group.setSchedulingWeight(match.getSchedulingWeight().get());
  }
  if (match.getJmxExport().isPresent()) {
    group.setJmxExport(match.getJmxExport().get());
  }
  if (match.getSoftCpuLimit().isPresent() || match.getHardCpuLimit().isPresent()) {
    checkState(cpuQuotaPeriodMillis.isPresent());
    Duration limit;
    if (match.getHardCpuLimit().isPresent()) {
      limit=match.getHardCpuLimit().get();
    }
 else {
      limit=match.getSoftCpuLimit().get();
    }
    long rate=(long)Math.min(1000.0 * limit.toMillis() / (double)cpuQuotaPeriodMillis.get().toMillis(),Long.MAX_VALUE);
    rate=Math.max(1,rate);
    group.setCpuQuotaGenerationMillisPerSecond(rate);
  }
  if (match.getSoftCpuLimit().isPresent()) {
    group.setSoftCpuLimit(match.getSoftCpuLimit().get());
  }
  if (match.getHardCpuLimit().isPresent()) {
    group.setHardCpuLimit(match.getHardCpuLimit().get());
  }
}
