{
  BlockBuilder blockBuilder=new BlockBuilder(outputPosition,TupleInfo.SINGLE_LONG);
  while (!blockBuilder.isFull()) {
    if (block.getRange().getEnd() < startPosition) {
      if (!blocks.hasNext()) {
        break;
      }
      block=blocks.next();
    }
    long rows=block.getRange().length();
    BlockCursor cpuMsecCursor=block.cursor();
    for (int position=0; position < rows; position++) {
      checkState(cpuMsecCursor.advanceNextPosition());
      blockBuilder.append(eval(cpuMsecCursor.getLong(0),cpuMsecCursor.getLong(0),cpuMsecCursor.getLong(0)));
    }
    startPosition=block.getRange().getEnd() + 1;
  }
  if (blockBuilder.isEmpty()) {
    return endOfData();
  }
  UncompressedBlock block=blockBuilder.build();
  outputPosition+=block.getCount();
  return block;
}
