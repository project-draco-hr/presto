{
  BlockBuilder blockBuilder=new BlockBuilder(outputPosition,TupleInfo.SINGLE_LONG);
  while (!blockBuilder.isFull()) {
    long endPosition;
    Range partitionBlockRange=partitionBlock.getRange();
    if (partitionBlockRange.getEnd() < startPosition) {
      if (!partitionBlocks.hasNext()) {
        checkState(!startTimeBlocks.hasNext());
        checkState(!endTimeBlocks.hasNext());
        checkState(!cpuMsecBlocks.hasNext());
        break;
      }
      partitionBlock=partitionBlocks.next();
      partitionBlockRange=partitionBlock.getRange();
    }
    endPosition=partitionBlockRange.getEnd();
    Range startTimeBlockRange=startTimeBlock.getRange();
    if (startTimeBlockRange.getEnd() < startPosition) {
      startTimeBlock=startTimeBlocks.next();
      startTimeBlockRange=startTimeBlock.getRange();
    }
    endPosition=Math.min(endPosition,startTimeBlockRange.getEnd());
    Range endTimeBlockRange=endTimeBlock.getRange();
    if (endTimeBlockRange.getEnd() < startPosition) {
      endTimeBlock=endTimeBlocks.next();
      endTimeBlockRange=endTimeBlock.getRange();
    }
    endPosition=Math.min(endPosition,endTimeBlockRange.getEnd());
    Range cpuMsecBlockRange=cpuMsecBlock.getRange();
    if (cpuMsecBlockRange.getEnd() < startPosition) {
      cpuMsecBlock=cpuMsecBlocks.next();
      cpuMsecBlockRange=cpuMsecBlock.getRange();
    }
    endPosition=Math.min(endPosition,cpuMsecBlockRange.getEnd());
    Range range=new Range(startPosition,endPosition);
    filterAndProjectRowOriented(new RangeBoundedBlock(range,partitionBlock.cursor()),new RangeBoundedBlock(range,startTimeBlock.cursor()),new RangeBoundedBlock(range,endTimeBlock.cursor()),new RangeBoundedBlock(range,cpuMsecBlock.cursor()),blockBuilder);
    startPosition=endPosition + 1;
  }
  if (blockBuilder.isEmpty()) {
    return endOfData();
  }
  UncompressedBlock block=blockBuilder.build();
  outputPosition+=block.getCount();
  return block;
}
