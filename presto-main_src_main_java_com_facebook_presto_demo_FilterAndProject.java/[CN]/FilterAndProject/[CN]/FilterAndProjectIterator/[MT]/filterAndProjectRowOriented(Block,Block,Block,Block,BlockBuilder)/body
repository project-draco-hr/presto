{
  int rows=(int)partitionChunk.getRange().length();
  BlockCursor partitionCursor=partitionChunk.cursor();
  BlockCursor startTimeCursor=startTimeChunk.cursor();
  BlockCursor endTimeCursor=endTimeChunk.cursor();
  BlockCursor cpuMsecCursor=cpuMsecChunk.cursor();
  for (int position=0; position < rows; position++) {
    checkState(partitionCursor.advanceNextPosition());
    checkState(startTimeCursor.advanceNextPosition());
    checkState(endTimeCursor.advanceNextPosition());
    checkState(cpuMsecCursor.advanceNextPosition());
    if (filter(partitionCursor.getSlice(0),startTimeCursor.getLong(0),endTimeCursor.getLong(0))) {
      blockBuilder.append(eval(cpuMsecCursor.getLong(0),startTimeCursor.getLong(0),endTimeCursor.getLong(0)));
    }
  }
  checkState(!partitionCursor.advanceNextPosition());
  checkState(!startTimeCursor.advanceNextPosition());
  checkState(!endTimeCursor.advanceNextPosition());
  checkState(!cpuMsecCursor.advanceNextPosition());
}
