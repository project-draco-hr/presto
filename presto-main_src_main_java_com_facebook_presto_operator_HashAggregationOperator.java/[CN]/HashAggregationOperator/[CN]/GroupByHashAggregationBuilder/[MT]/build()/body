{
  List<Type> types=new ArrayList<>(groupByHash.getTypes());
  for (  Aggregator aggregator : aggregators) {
    types.add(aggregator.getType());
  }
  final PageBuilder pageBuilder=new PageBuilder(types);
  return new AbstractIterator<Page>(){
    private final int groupCount=groupByHash.getGroupCount();
    private int groupId;
    @Override protected Page computeNext(){
      if (groupId >= groupCount) {
        return endOfData();
      }
      pageBuilder.reset();
      List<Type> types=groupByHash.getTypes();
      BlockBuilder[] groupByBlockBuilders=new BlockBuilder[types.size()];
      for (int i=0; i < types.size(); i++) {
        groupByBlockBuilders[i]=pageBuilder.getBlockBuilder(i);
      }
      while (!pageBuilder.isFull() && groupId < groupCount) {
        groupByHash.appendValuesTo(groupId,groupByBlockBuilders);
        for (int i=0; i < aggregators.size(); i++) {
          Aggregator aggregator=aggregators.get(i);
          BlockBuilder output=pageBuilder.getBlockBuilder(types.size() + i);
          aggregator.evaluate(groupId,output);
        }
        groupId++;
      }
      Page page=pageBuilder.build();
      return page;
    }
  }
;
}
