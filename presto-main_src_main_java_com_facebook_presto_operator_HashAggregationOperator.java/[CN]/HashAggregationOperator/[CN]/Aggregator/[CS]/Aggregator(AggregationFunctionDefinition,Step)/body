{
  AggregationFunction function=functionDefinition.getFunction();
  if (step == Step.FINAL) {
    checkArgument(functionDefinition.getInputs().size() == 1,"Expected a single input for an intermediate aggregation");
    intermediateChannel=functionDefinition.getInputs().get(0).getChannel();
    aggregation=function.createGroupedIntermediateAggregation();
  }
 else {
    int[] argumentChannels=new int[functionDefinition.getInputs().size()];
    for (int i=0; i < argumentChannels.length; i++) {
      argumentChannels[i]=functionDefinition.getInputs().get(i).getChannel();
    }
    intermediateChannel=-1;
    Optional<Integer> maskChannel=Optional.absent();
    if (functionDefinition.getMask().isPresent()) {
      maskChannel=Optional.of(functionDefinition.getMask().get().getChannel());
    }
    aggregation=function.createGroupedAggregation(maskChannel,argumentChannels);
  }
  this.step=step;
}
