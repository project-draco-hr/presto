{
  if (!aggregations.hasNext()) {
    endOfData();
    return null;
  }
  BlockBuilder[] outputs=new BlockBuilder[projections.size()];
  for (int i=0; i < outputs.length; i++) {
    outputs[i]=new BlockBuilder(projections.get(i).getTupleInfo());
  }
  while (!isFull(outputs) && aggregations.hasNext()) {
    Entry<Tuple,AggregationFunctionStep[]> aggregation=aggregations.next();
    Tuple[] results=new Tuple[aggregationFunctionCount + 1];
    results[0]=aggregation.getKey();
    AggregationFunctionStep[] aggregations=aggregation.getValue();
    for (int i=1; i < results.length; i++) {
      results[i]=aggregations[i - 1].evaluate();
    }
    for (int i=0; i < projections.size(); i++) {
      projections.get(i).project(results,outputs[i]);
    }
  }
  if (outputs[0].isEmpty()) {
    return endOfData();
  }
  Block[] blocks=new Block[projections.size()];
  for (int i=0; i < blocks.length; i++) {
    blocks[i]=outputs[i].build();
  }
  Page page=new Page(blocks);
  return page;
}
