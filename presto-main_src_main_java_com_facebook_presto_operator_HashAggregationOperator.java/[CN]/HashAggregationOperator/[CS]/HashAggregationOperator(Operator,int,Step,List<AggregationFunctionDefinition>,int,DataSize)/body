{
  Preconditions.checkNotNull(source,"source is null");
  Preconditions.checkArgument(groupByChannel >= 0,"groupByChannel is negative");
  Preconditions.checkNotNull(functionDefinitions,"functionDefinitions is null");
  this.source=source;
  this.groupByChannel=groupByChannel;
  this.step=step;
  this.functionDefinitions=ImmutableList.copyOf(functionDefinitions);
  this.expectedGroups=expectedGroups;
  this.maxSize=maxSize;
  ImmutableList.Builder<TupleInfo> tupleInfos=ImmutableList.builder();
  tupleInfos.add(source.getTupleInfos().get(groupByChannel));
  for (  AggregationFunctionDefinition functionDefinition : functionDefinitions) {
    if (step != Step.PARTIAL) {
      tupleInfos.add(functionDefinition.getFunction().getFinalTupleInfo());
    }
 else {
      tupleInfos.add(functionDefinition.getFunction().getIntermediateTupleInfo());
    }
  }
  this.tupleInfos=tupleInfos.build();
}
