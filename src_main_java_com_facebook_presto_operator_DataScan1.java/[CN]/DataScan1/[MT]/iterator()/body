{
  return new AbstractIterator<Block>(){
    Iterator<? extends Block> sourceIterator=source.iterator();
    @Override protected Block computeNext(){
      int rangesCount=0;
      ImmutableList.Builder<Range> ranges=ImmutableList.builder();
      while (rangesCount < RANGES_PER_BLOCK && sourceIterator.hasNext()) {
        BlockCursor blockCursor=sourceIterator.next().blockCursor();
        while (blockCursor.advanceToNextValue()) {
          if (predicate.apply(blockCursor)) {
            ranges.add(new Range(blockCursor.getPosition(),blockCursor.getValuePositionEnd()));
            rangesCount++;
          }
        }
      }
      if (rangesCount == 0) {
        endOfData();
        return null;
      }
      return new PositionsBlock(ranges.build());
    }
  }
;
}
