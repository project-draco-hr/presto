{
  return new AbstractIterator<TupleStream>(){
    Cursor cursor=source.cursor();
    @Override protected TupleStream computeNext(){
      int rangesCount=0;
      ImmutableList.Builder<Range> ranges=ImmutableList.builder();
      while (rangesCount < RANGES_PER_BLOCK && cursor.advanceNextValue()) {
        if (predicate.apply(cursor)) {
          ranges.add(new Range(cursor.getPosition(),cursor.getCurrentValueEndPosition()));
          rangesCount++;
        }
      }
      if (rangesCount == 0) {
        endOfData();
        return null;
      }
      return new PositionsBlock(ranges.build());
    }
  }
;
}
