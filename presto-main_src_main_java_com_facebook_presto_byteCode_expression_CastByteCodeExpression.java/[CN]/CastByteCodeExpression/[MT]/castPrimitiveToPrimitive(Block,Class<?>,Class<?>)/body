{
  if (sourceType == byte.class) {
    if (targetType == byte.class) {
      return block;
    }
    if (targetType == char.class) {
      return block;
    }
    if (targetType == short.class) {
      return block;
    }
    if (targetType == int.class) {
      return block;
    }
    if (targetType == long.class) {
      return block.append(OpCode.I2L);
    }
    if (targetType == float.class) {
      return block.append(OpCode.I2F);
    }
    if (targetType == double.class) {
      return block.append(OpCode.I2D);
    }
  }
  if (sourceType == char.class) {
    if (targetType == byte.class) {
      return block.append(OpCode.I2B);
    }
    if (targetType == char.class) {
      return block;
    }
    if (targetType == short.class) {
      return block;
    }
    if (targetType == int.class) {
      return block;
    }
    if (targetType == long.class) {
      return block.append(OpCode.I2L);
    }
    if (targetType == float.class) {
      return block.append(OpCode.I2F);
    }
    if (targetType == double.class) {
      return block.append(OpCode.I2D);
    }
  }
  if (sourceType == short.class) {
    if (targetType == byte.class) {
      return block.append(OpCode.I2B);
    }
    if (targetType == char.class) {
      return block.append(OpCode.I2C);
    }
    if (targetType == short.class) {
      return block;
    }
    if (targetType == int.class) {
      return block;
    }
    if (targetType == long.class) {
      return block.append(OpCode.I2L);
    }
    if (targetType == float.class) {
      return block.append(OpCode.I2F);
    }
    if (targetType == double.class) {
      return block.append(OpCode.I2D);
    }
  }
  if (sourceType == int.class) {
    if (targetType == boolean.class) {
      return block;
    }
    if (targetType == byte.class) {
      return block.append(OpCode.I2B);
    }
    if (targetType == char.class) {
      return block.append(OpCode.I2C);
    }
    if (targetType == short.class) {
      return block.append(OpCode.I2S);
    }
    if (targetType == int.class) {
      return block;
    }
    if (targetType == long.class) {
      return block.append(OpCode.I2L);
    }
    if (targetType == float.class) {
      return block.append(OpCode.I2F);
    }
    if (targetType == double.class) {
      return block.append(OpCode.I2D);
    }
  }
  if (sourceType == long.class) {
    if (targetType == byte.class) {
      return block.append(OpCode.L2I).append(OpCode.I2B);
    }
    if (targetType == char.class) {
      return block.append(OpCode.L2I).append(OpCode.I2C);
    }
    if (targetType == short.class) {
      return block.append(OpCode.L2I).append(OpCode.I2S);
    }
    if (targetType == int.class) {
      return block.append(OpCode.L2I);
    }
    if (targetType == long.class) {
      return block;
    }
    if (targetType == float.class) {
      return block.append(OpCode.L2F);
    }
    if (targetType == double.class) {
      return block.append(OpCode.L2D);
    }
  }
  if (sourceType == float.class) {
    if (targetType == byte.class) {
      return block.append(OpCode.F2I).append(OpCode.I2B);
    }
    if (targetType == char.class) {
      return block.append(OpCode.F2I).append(OpCode.I2C);
    }
    if (targetType == short.class) {
      return block.append(OpCode.F2I).append(OpCode.I2S);
    }
    if (targetType == int.class) {
      return block.append(OpCode.F2I);
    }
    if (targetType == long.class) {
      return block.append(OpCode.F2L);
    }
    if (targetType == float.class) {
      return block;
    }
    if (targetType == double.class) {
      return block.append(OpCode.F2D);
    }
  }
  if (sourceType == double.class) {
    if (targetType == byte.class) {
      return block.append(OpCode.D2I).append(OpCode.I2B);
    }
    if (targetType == char.class) {
      return block.append(OpCode.D2I).append(OpCode.I2C);
    }
    if (targetType == short.class) {
      return block.append(OpCode.D2I).append(OpCode.I2S);
    }
    if (targetType == int.class) {
      return block.append(OpCode.D2I);
    }
    if (targetType == long.class) {
      return block.append(OpCode.D2L);
    }
    if (targetType == float.class) {
      return block.append(OpCode.D2F);
    }
    if (targetType == double.class) {
      return block;
    }
  }
  throw new IllegalArgumentException(format("Type %s can not be cast to %s",sourceType,targetType));
}
