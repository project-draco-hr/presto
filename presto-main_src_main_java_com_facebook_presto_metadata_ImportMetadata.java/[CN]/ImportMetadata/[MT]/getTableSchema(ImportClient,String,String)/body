{
  return retry().stopOn(ObjectNotFoundException.class).stopOnIllegalExceptions().runUnchecked(new Callable<List<ColumnMetadata>>(){
    @Override public List<ColumnMetadata> call() throws Exception {
      ImmutableList.Builder<ColumnMetadata> builder=ImmutableList.builder();
      for (      SchemaField schemaField : client.getTableSchema(database,table)) {
        Type type;
switch (schemaField.getPrimitiveType()) {
case LONG:
          type=TupleInfo.Type.FIXED_INT_64;
        break;
case DOUBLE:
      type=TupleInfo.Type.DOUBLE;
    break;
case STRING:
  type=TupleInfo.Type.VARIABLE_BINARY;
break;
default :
throw new IllegalArgumentException("Unhandled type: " + schemaField.getPrimitiveType());
}
builder.add(new ColumnMetadata(schemaField.getFieldName(),type,schemaField.getFieldId()));
}
return builder.build();
}
}
);
}
