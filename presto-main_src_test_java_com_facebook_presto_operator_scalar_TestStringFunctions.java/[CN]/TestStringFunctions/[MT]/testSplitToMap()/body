{
  MapType expectedType=new MapType(VARCHAR,VARCHAR);
  assertFunction("SPLIT_TO_MAP('', ',', '=')",expectedType,ImmutableMap.of());
  assertFunction("SPLIT_TO_MAP('a=123,b=.4,c=,=d', ',', '=')",expectedType,ImmutableMap.of("a","123","b",".4","c","","","d"));
  assertFunction("SPLIT_TO_MAP('=', ',', '=')",expectedType,ImmutableMap.of("",""));
  assertFunction("SPLIT_TO_MAP('key=>value', ',', '=>')",expectedType,ImmutableMap.of("key","value"));
  assertFunction("SPLIT_TO_MAP('key => value', ',', '=>')",expectedType,ImmutableMap.of("key "," value"));
  assertFunction("SPLIT_TO_MAP('\u4EA0\u4EFF\u4EA1', '\u4E00', '\u4EFF')",expectedType,ImmutableMap.of("\u4EA0","\u4EA1"));
  assertFunction("SPLIT_TO_MAP('\u4EC0\u4EFF', '\u4E00', '\u4EFF')",expectedType,ImmutableMap.of("\u4EC0",""));
  assertFunction("SPLIT_TO_MAP('\u4EFF\u4EC1', '\u4E00', '\u4EFF')",expectedType,ImmutableMap.of("","\u4EC1"));
  assertInvalidFunction("SPLIT_TO_MAP('', '\u4EFF', '\u4EFF')","entryDelimiter and keyValueDelimiter must not be the same");
  assertInvalidFunction("SPLIT_TO_MAP('a=123,b=.4,c=', '=', '=')","entryDelimiter and keyValueDelimiter must not be the same");
  assertInvalidFunction("SPLIT_TO_MAP('a=123,a=.4', ',', '=')","Duplicate keys (a) are not allowed");
  assertInvalidFunction("SPLIT_TO_MAP('\u4EA0\u4EFF\u4EA1\u4E00\u4EA0\u4EFF\u4EB1', '\u4E00', '\u4EFF')","Duplicate keys (\u4EA0) are not allowed");
  assertInvalidFunction("SPLIT_TO_MAP('key', ',', '=')","Key-value delimiter must appear exactly once in each entry. Bad input: 'key'");
  assertInvalidFunction("SPLIT_TO_MAP('key==value', ',', '=')","Key-value delimiter must appear exactly once in each entry. Bad input: 'key==value'");
  assertInvalidFunction("SPLIT_TO_MAP('key=va=lue', ',', '=')","Key-value delimiter must appear exactly once in each entry. Bad input: 'key=va=lue'");
}
