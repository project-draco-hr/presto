{
  assertFunction("REPLACE('aaa', 'a', 'aa')",VARCHAR,"aaaaaa");
  assertFunction("REPLACE('abcdefabcdef', 'cd', 'XX')",VARCHAR,"abXXefabXXef");
  assertFunction("REPLACE('abcdefabcdef', 'cd')",VARCHAR,"abefabef");
  assertFunction("REPLACE('123123tech', '123')",VARCHAR,"tech");
  assertFunction("REPLACE('123tech123', '123')",VARCHAR,"tech");
  assertFunction("REPLACE('222tech', '2', '3')",VARCHAR,"333tech");
  assertFunction("REPLACE('0000123', '0')",VARCHAR,"123");
  assertFunction("REPLACE('0000123', '0', ' ')",VARCHAR,"    123");
  assertFunction("REPLACE('foo', '')",VARCHAR,"foo");
  assertFunction("REPLACE('foo', '', '')",VARCHAR,"foo");
  assertFunction("REPLACE('foo', 'foo', '')",VARCHAR,"");
  assertFunction("REPLACE('abc', '', 'xx')",VARCHAR,"xxaxxbxxcxx");
  assertFunction("REPLACE('', '', 'xx')",VARCHAR,"xx");
  assertFunction("REPLACE('', '')",VARCHAR,"");
  assertFunction("REPLACE('', '', '')",VARCHAR,"");
  assertFunction("REPLACE('\u4FE1\u5FF5,\u7231,\u5E0C\u671B', ',', '\u2014')",VARCHAR,"\u4FE1\u5FF5\u2014\u7231\u2014\u5E0C\u671B");
  assertFunction("REPLACE('::\uD801\uDC2D::', ':', '')",VARCHAR,"\uD801\uDC2D");
  assertFunction("REPLACE('\u00D6sterreich', '\u00D6', 'Oe')",VARCHAR,"Oesterreich");
  assertFunction("CAST(REPLACE(utf8(from_hex('CE')), '', 'X') AS VARBINARY)",VARBINARY,new SqlVarbinary(new byte[]{'X',(byte)0xCE,'X'}));
  assertFunction("CAST(REPLACE('abc' || utf8(from_hex('CE')), '', 'X') AS VARBINARY)",VARBINARY,new SqlVarbinary(new byte[]{'X','a','X','b','X','c','X',(byte)0xCE,'X'}));
  assertFunction("CAST(REPLACE(utf8(from_hex('CE')) || 'xyz', '', 'X') AS VARBINARY)",VARBINARY,new SqlVarbinary(new byte[]{'X',(byte)0xCE,'X','x','X','y','X','z','X'}));
  assertFunction("CAST(REPLACE('abc' || utf8(from_hex('CE')) || 'xyz', '', 'X') AS VARBINARY)",VARBINARY,new SqlVarbinary(new byte[]{'X','a','X','b','X','c','X',(byte)0xCE,'X','x','X','y','X','z','X'}));
}
