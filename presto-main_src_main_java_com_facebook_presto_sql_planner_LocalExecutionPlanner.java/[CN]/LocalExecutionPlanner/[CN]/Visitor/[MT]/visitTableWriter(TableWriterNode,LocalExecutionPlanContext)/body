{
  PhysicalOperation query=node.getSource().accept(this,context);
  ImmutableList.Builder<ColumnHandle> columns=ImmutableList.builder();
  ImmutableList.Builder<Symbol> symbols=ImmutableList.builder();
  for (  Map.Entry<Symbol,ColumnHandle> entry : node.getColumns().entrySet()) {
    symbols.add(entry.getKey());
    columns.add(entry.getValue());
  }
  IdentityProjectionInfo mappings=computeIdentityMapping(symbols.build(),query.getLayout(),context.getTypes());
  Operator sourceOperator=new FilterAndProjectOperator(query.getOperator(),FilterFunctions.TRUE_FUNCTION,mappings.getProjections());
  Symbol outputSymbol=Iterables.getOnlyElement(node.getOutputSymbols());
  TableWriterOperator operator=new TableWriterOperator(storageManager,nodeInfo.getNodeId(),columns.build(),sourceOperator);
  context.addSourceOperator(node,operator);
  context.addOutputOperator(node,operator);
  return new PhysicalOperation(operator,ImmutableMultimap.of(outputSymbol,new Input(0,0)));
}
