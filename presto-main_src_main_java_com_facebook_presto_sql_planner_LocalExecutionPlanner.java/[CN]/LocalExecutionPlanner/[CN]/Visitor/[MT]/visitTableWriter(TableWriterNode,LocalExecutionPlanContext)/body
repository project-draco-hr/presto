{
  PhysicalOperation exchange=createInMemoryExchange(node.getSource(),context);
  Optional<Integer> sampleWeightChannel=node.getSampleWeightSymbol().transform(exchange.channelGetter());
  RecordSink recordSink=recordSinkManager.getRecordSink(node.getTarget());
  List<TupleInfo.Type> outputTypes=new ArrayList<>(FluentIterable.from(exchange.getTupleInfos()).transform(new Function<TupleInfo,TupleInfo.Type>(){
    @Override public TupleInfo.Type apply(    TupleInfo input){
      return input.getType();
    }
  }
).toList());
  if (sampleWeightChannel.isPresent()) {
    outputTypes.remove((int)sampleWeightChannel.get());
  }
  OperatorFactory operatorFactory=new TableWriterOperatorFactory(context.getNextOperatorId(),recordSink,outputTypes,sampleWeightChannel);
  Map<Symbol,Input> layout=ImmutableMap.<Symbol,Input>builder().put(node.getOutputSymbols().get(0),new Input(0)).put(node.getOutputSymbols().get(1),new Input(1)).build();
  return new PhysicalOperation(operatorFactory,layout,exchange);
}
