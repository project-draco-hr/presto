{
  LocalExecutionPlanContext subContext=context.createSubContext();
  PhysicalOperation source=node.getSource().accept(this,subContext);
  InMemoryExchange exchange=new InMemoryExchange(getSourceOperatorTupleInfos(node,context.getTypes()));
  List<OperatorFactory> factories=ImmutableList.<OperatorFactory>builder().addAll(source.getOperatorFactories()).add(exchange.createSinkFactory(subContext.getNextOperatorId())).build();
  context.addDriverFactory(new DriverFactory(subContext.isInputDriver(),false,factories));
  exchange.noMoreSinkFactories();
  context.setInputDriver(false);
  List<Symbol> layout=node.getOutputSymbols();
  ImmutableMap.Builder<Symbol,Input> outputMappings=ImmutableMap.builder();
  for (int i=0; i < layout.size(); i++) {
    outputMappings.put(layout.get(i),new Input(i));
  }
  OperatorFactory factory=new InMemoryExchangeSourceOperatorFactory(context.getNextOperatorId(),exchange);
  return new PhysicalOperation(factory,outputMappings.build());
}
