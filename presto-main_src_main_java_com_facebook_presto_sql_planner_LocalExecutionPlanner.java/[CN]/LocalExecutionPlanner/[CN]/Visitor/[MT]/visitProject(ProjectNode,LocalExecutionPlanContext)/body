{
  PhysicalOperation source;
  FilterFunction filter;
  if (node.getSource() instanceof FilterNode) {
    FilterNode filterNode=(FilterNode)node.getSource();
    source=filterNode.getSource().accept(this,context);
    filter=new InterpretedFilterFunction(filterNode.getPredicate(),source.getLayout(),metadata,context.getSession());
  }
 else {
    source=node.getSource().accept(this,context);
    filter=FilterFunctions.TRUE_FUNCTION;
  }
  Map<Symbol,Input> outputMappings=new HashMap<>();
  List<ProjectionFunction> projections=new ArrayList<>();
  for (int i=0; i < node.getExpressions().size(); i++) {
    Symbol symbol=node.getOutputSymbols().get(i);
    Expression expression=node.getExpressions().get(i);
    ProjectionFunction function;
    if (expression instanceof QualifiedNameReference) {
      Symbol reference=Symbol.fromQualifiedName(((QualifiedNameReference)expression).getName());
      function=ProjectionFunctions.singleColumn(context.getTypes().get(reference).getRawType(),source.getLayout().get(symbol));
    }
 else {
      function=new InterpretedProjectionFunction(context.getTypes().get(symbol),expression,source.getLayout(),metadata,context.getSession());
    }
    projections.add(function);
    outputMappings.put(symbol,new Input(i,0));
  }
  FilterAndProjectOperator operator=new FilterAndProjectOperator(source.getOperator(),filter,projections);
  return new PhysicalOperation(operator,outputMappings);
}
