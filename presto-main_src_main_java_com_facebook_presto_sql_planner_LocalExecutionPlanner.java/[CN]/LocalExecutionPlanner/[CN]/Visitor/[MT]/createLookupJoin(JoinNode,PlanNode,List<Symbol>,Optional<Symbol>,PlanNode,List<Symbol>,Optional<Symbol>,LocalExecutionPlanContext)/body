{
  LookupSourceSupplier lookupSourceSupplier=createLookupJoinSource(node,buildNode,buildSymbols,buildHashSymbol,context);
  PhysicalOperation probeSource;
  LocalExecutionPlanContext parallelParentContext=null;
  int joinConcurrency=getTaskJoinConcurrency(session);
  if (context.isAllowLocalParallel() && context.getDriverInstanceCount() == 1 && joinConcurrency > 1) {
    parallelParentContext=context;
    context=context.createSubContext();
    probeSource=createInMemoryExchange(probeNode,context);
    context.setDriverInstanceCount(joinConcurrency);
  }
 else   if (context.isSingleNode() && isBuildOuter(node)) {
    parallelParentContext=context;
    context=context.createSubContext();
    probeSource=probeNode.accept(this,context);
  }
 else {
    probeSource=probeNode.accept(this,context);
  }
  OperatorFactory operator=createLookupJoin(node,probeSource,probeSymbols,probeHashSymbol,lookupSourceSupplier,context);
  ImmutableMap.Builder<Symbol,Integer> outputMappings=ImmutableMap.builder();
  List<Symbol> outputSymbols=node.getOutputSymbols();
  for (int i=0; i < outputSymbols.size(); i++) {
    Symbol symbol=outputSymbols.get(i);
    outputMappings.put(symbol,i);
  }
  PhysicalOperation operation=new PhysicalOperation(operator,outputMappings.build(),probeSource);
  if (parallelParentContext != null) {
    operation=addInMemoryExchange(parallelParentContext,node.getId(),operation,context);
  }
  return operation;
}
