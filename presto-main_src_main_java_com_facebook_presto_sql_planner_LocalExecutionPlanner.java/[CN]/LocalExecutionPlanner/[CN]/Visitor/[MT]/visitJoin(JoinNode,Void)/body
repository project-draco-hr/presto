{
  ComparisonExpression comparison=(ComparisonExpression)node.getCriteria();
  Symbol first=Symbol.fromQualifiedName(((QualifiedNameReference)comparison.getLeft()).getName());
  Symbol second=Symbol.fromQualifiedName(((QualifiedNameReference)comparison.getRight()).getName());
  Map<Symbol,Integer> probeMappings=mapSymbolsToChannels(node.getLeft().getOutputSymbols());
  Map<Symbol,Integer> buildMappings=mapSymbolsToChannels(node.getRight().getOutputSymbols());
  int probeChannel;
  int buildChannel;
  if (node.getLeft().getOutputSymbols().contains(first)) {
    probeChannel=probeMappings.get(first);
    buildChannel=buildMappings.get(second);
  }
 else {
    probeChannel=probeMappings.get(second);
    buildChannel=buildMappings.get(first);
  }
  SourceHashProvider hashProvider=joinHashFactory.getSourceHashProvider(node,LocalExecutionPlanner.this,buildChannel,operatorStats);
  Operator leftOperator=plan(node.getLeft());
  HashJoinOperator operator=new HashJoinOperator(hashProvider,leftOperator,probeChannel);
  return operator;
}
