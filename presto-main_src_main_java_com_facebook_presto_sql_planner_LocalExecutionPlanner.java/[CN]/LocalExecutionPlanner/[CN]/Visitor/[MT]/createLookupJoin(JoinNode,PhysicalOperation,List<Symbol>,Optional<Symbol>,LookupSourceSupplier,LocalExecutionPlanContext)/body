{
  List<Type> probeTypes=probeSource.getTypes();
  List<Integer> probeJoinChannels=ImmutableList.copyOf(getChannelsForSymbols(probeSymbols,probeSource.getLayout()));
  Optional<Integer> probeHashChannel=probeHashSymbol.map(channelGetter(probeSource));
switch (node.getType()) {
case INNER:
    return LookupJoinOperators.innerJoin(context.getNextOperatorId(),node.getId(),lookupSourceSupplier,probeTypes,probeJoinChannels,probeHashChannel,node.getFilter().isPresent());
case LEFT:
  return LookupJoinOperators.probeOuterJoin(context.getNextOperatorId(),node.getId(),lookupSourceSupplier,probeTypes,probeJoinChannels,probeHashChannel,node.getFilter().isPresent());
case RIGHT:
return LookupJoinOperators.lookupOuterJoin(context.getNextOperatorId(),node.getId(),lookupSourceSupplier,probeTypes,probeJoinChannels,probeHashChannel,node.getFilter().isPresent());
case FULL:
return LookupJoinOperators.fullOuterJoin(context.getNextOperatorId(),node.getId(),lookupSourceSupplier,probeTypes,probeJoinChannels,probeHashChannel,node.getFilter().isPresent());
default :
throw new UnsupportedOperationException("Unsupported join type: " + node.getType());
}
}
