{
  PhysicalOperation source=node.getSource().accept(this,context);
  List<Symbol> orderBySymbols=node.getOrderBy();
  List<Integer> sortChannels=new ArrayList<>();
  List<SortOrder> sortOrders=new ArrayList<>();
  for (  Symbol symbol : orderBySymbols) {
    sortChannels.add(source.getLayout().get(symbol).getChannel());
    sortOrders.add(node.getOrderings().get(symbol));
  }
  Ordering<TupleReadable[]> ordering=Ordering.from(new FieldOrderedTupleComparator(sortChannels,sortOrders));
  IdentityProjectionInfo mappings=computeIdentityMapping(node.getOutputSymbols(),source.getLayout(),context.getTypes());
  OperatorFactory operator=new TopNOperatorFactory(context.getNextOperatorId(),(int)node.getCount(),mappings.getProjections(),ordering,node.isPartial());
  return new PhysicalOperation(operator,mappings.getOutputLayout(),source);
}
