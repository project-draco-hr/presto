{
  PhysicalOperation source=node.getSource().accept(this,context);
  Ordering<Input> comparator=inputOrdering();
  List<Symbol> sourceSymbols=IterableTransformer.on(source.getLayout().entrySet()).orderBy(comparator.onResultOf(MoreFunctions.<Symbol,Input>valueGetter())).transform(MoreFunctions.<Symbol,Input>keyGetter()).list();
  List<Symbol> resultSymbols=node.getOutputSymbols();
  if (resultSymbols.equals(sourceSymbols) && resultSymbols.size() == source.getTypes().size()) {
    return source;
  }
  IdentityProjectionInfo mappings=computeIdentityMapping(resultSymbols,source.getLayout(),context.getTypes());
  OperatorFactory operatorFactory=new FilterAndProjectOperatorFactory(context.getNextOperatorId(),FilterFunctions.TRUE_FUNCTION,mappings.getProjections());
  return new PhysicalOperation(operatorFactory,mappings.getOutputLayout(),source);
}
