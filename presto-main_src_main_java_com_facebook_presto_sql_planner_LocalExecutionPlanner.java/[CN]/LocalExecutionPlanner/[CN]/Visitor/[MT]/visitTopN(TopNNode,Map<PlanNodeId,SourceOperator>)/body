{
  PhysicalOperation source=node.getSource().accept(this,sourceOperators);
  List<Symbol> orderBySymbols=node.getOrderBy();
  Preconditions.checkArgument(orderBySymbols.size() == 1,"ORDER BY multiple fields + LIMIT not yet supported");
  Symbol orderBySymbol=Iterables.getOnlyElement(orderBySymbols);
  int keyChannel=source.getLayout().get(orderBySymbol).getChannel();
  Ordering<TupleReadable> ordering=Ordering.from(FieldOrderedTupleComparator.INSTANCE);
  if (node.getOrderings().get(orderBySymbol) == SortItem.Ordering.ASCENDING) {
    ordering=ordering.reverse();
  }
  IdentityProjectionInfo mappings=computeIdentityMapping(node.getOutputSymbols(),source.getLayout(),types);
  TopNOperator operator=new TopNOperator(source.getOperator(),(int)node.getCount(),keyChannel,mappings.getProjections(),ordering);
  return new PhysicalOperation(operator,mappings.getOutputLayout());
}
