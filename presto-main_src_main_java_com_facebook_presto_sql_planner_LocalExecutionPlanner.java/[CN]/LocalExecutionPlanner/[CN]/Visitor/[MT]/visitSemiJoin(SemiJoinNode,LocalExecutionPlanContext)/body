{
  PhysicalOperation source=node.getSource().accept(this,context);
  PhysicalOperation filteringSource=node.getFilteringSource().accept(this,context);
  source=packIfNecessary(ImmutableList.of(node.getSourceJoinSymbol()),source,context.getTypes());
  filteringSource=packIfNecessary(ImmutableList.of(node.getFilteringSourceJoinSymbol()),filteringSource,context.getTypes());
  int probeChannel=Iterables.getOnlyElement(getChannelSetForSymbols(ImmutableList.of(node.getSourceJoinSymbol()),source.getLayout()));
  int buildChannel=Iterables.getOnlyElement(getChannelSetForSymbols(ImmutableList.of(node.getFilteringSourceJoinSymbol()),filteringSource.getLayout()));
  JoinBuildSourceSupplierFactory joinBuildSourceSupplierFactory=context.getJoinBuildSourceSupplierFactory();
  int offset=source.getOperator().getChannelCount();
  ImmutableMultimap<Symbol,Input> outputMappings=ImmutableMultimap.<Symbol,Input>builder().putAll(source.getLayout()).put(node.getSemiJoinOutput(),new Input(offset,0)).build();
  SourceSetSupplier setProvider=joinBuildSourceSupplierFactory.getSourceSetSupplier(node,filteringSource.getOperator(),buildChannel,context.getOperatorStats());
  Operator operator=new HashSemiJoinOperator(source.getOperator(),probeChannel,setProvider);
  return new PhysicalOperation(operator,outputMappings);
}
