{
  ClassDefinition classDefinition=new ClassDefinition(new CompilerContext(bootstrapMethod),a(PUBLIC,FINAL),typeFromPathName("ScanFilterAndProjectOperator_" + CLASS_ID.incrementAndGet()),type(NewAbstractScanFilterAndProjectOperator.class));
  FieldDefinition sessionField=classDefinition.declareField(a(PRIVATE,FINAL),"session",Session.class);
  classDefinition.declareConstructor(new CompilerContext(bootstrapMethod),a(PUBLIC),arg("operatorContext",OperatorContext.class),arg("sourceId",PlanNodeId.class),arg("dataStreamProvider",DataStreamProvider.class),arg("columns",type(Iterable.class,ColumnHandle.class)),arg("tupleInfos",type(Iterable.class,TupleInfo.class))).getBody().comment("super(operatorContext, sourceId, dataStreamProvider, columns, tupleInfos);").pushThis().getVariable("operatorContext").getVariable("sourceId").getVariable("dataStreamProvider").getVariable("columns").getVariable("tupleInfos").invokeConstructor(NewAbstractScanFilterAndProjectOperator.class,OperatorContext.class,PlanNodeId.class,DataStreamProvider.class,Iterable.class,Iterable.class).comment("this.session = operatorContext.getSession();").pushThis().getVariable("operatorContext").invokeVirtual(OperatorContext.class,"getSession",Session.class).putField(sessionField).ret();
  generateFilterAndProjectRowOriented(classDefinition,projections,inputTypes);
  generateFilterAndProjectCursorMethod(classDefinition,projections);
  generateFilterMethod(classDefinition,filter,inputTypes,true);
  generateFilterMethod(classDefinition,filter,inputTypes,false);
  List<TupleInfo> tupleInfos=new ArrayList<>();
  int projectionIndex=0;
  for (  Expression projection : projections) {
    Class<?> type=generateProjectMethod(classDefinition,"project_" + projectionIndex,projection,inputTypes,true);
    generateProjectMethod(classDefinition,"project_" + projectionIndex,projection,inputTypes,false);
    if (type == boolean.class) {
      tupleInfos.add(TupleInfo.SINGLE_BOOLEAN);
    }
 else     if (type == long.class || type == void.class) {
      tupleInfos.add(TupleInfo.SINGLE_LONG);
    }
 else     if (type == double.class) {
      tupleInfos.add(TupleInfo.SINGLE_DOUBLE);
    }
 else     if (type == Slice.class) {
      tupleInfos.add(TupleInfo.SINGLE_VARBINARY);
    }
 else {
      throw new IllegalStateException("Type " + type.getName() + "can be output");
    }
    projectionIndex++;
  }
  classDefinition.declareMethod(new CompilerContext(bootstrapMethod),a(PUBLIC),"toString",type(String.class)).getBody().push(toStringHelper(classDefinition.getType().getJavaClassName()).add("filter",filter).add("projections",projections).toString()).retObject();
  Class<? extends NewSourceOperator> filterAndProjectClass=defineClass(classDefinition,NewSourceOperator.class,classLoader);
  return new TypedNewOperatorClass(filterAndProjectClass,tupleInfos);
}
