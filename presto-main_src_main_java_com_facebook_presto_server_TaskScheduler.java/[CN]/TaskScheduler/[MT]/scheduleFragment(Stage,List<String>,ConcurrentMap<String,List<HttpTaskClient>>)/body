{
  for (  Stage dependency : stage.getDependencies()) {
    scheduleFragment(dependency,toOutputIds(stage.getPartitions()),stages);
  }
  List<HttpTaskClient> taskClients=ImmutableList.copyOf(transform(stage.getPartitions(),new Function<Partition,HttpTaskClient>(){
    @Override public HttpTaskClient apply(    Partition partition){
      Map<String,ExchangePlanFragmentSource> exchangeSources=getExchangeSources(partition.getNode(),stage,stages);
      Node node=partition.getNode();
      QueryFragmentRequest queryFragmentRequest=new QueryFragmentRequest(stage.getFragment(),partition.getSplits(),exchangeSources,outputIds);
      Request request=preparePost().setUri(uriBuilderFrom(node.getHttpUri()).replacePath("/v1/presto/task").build()).setHeader(HttpHeaders.CONTENT_TYPE,MediaType.APPLICATION_JSON).setBodyGenerator(jsonBodyGenerator(queryFragmentRequestCodec,queryFragmentRequest)).build();
      JsonResponse<TaskInfo> response=httpClient.execute(request,createFullJsonResponseHandler(jsonCodec(TaskInfo.class)));
      checkState(response.getStatusCode() == 201,"Expected response code from %s to be 201, but was %d: %s",request.getUri(),response.getStatusCode(),response.getStatusMessage());
      String location=response.getHeader("Location");
      checkState(location != null);
      TaskInfo taskInfo=response.getValue();
      return new HttpTaskClient(taskInfo.getTaskId(),URI.create(location),"unused",taskInfo.getTupleInfos(),httpClient,executor,taskInfoCodec);
    }
  }
));
  stages.put(stage.getStageId(),taskClients);
}
