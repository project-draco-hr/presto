{
  PlanNode leftPlan=createRelationPlan(ImmutableList.of(join.getLeft()),analysis);
  PlanNode rightPlan=createRelationPlan(ImmutableList.of(join.getRight()),analysis);
  Map<Symbol,Expression> leftProjections=new HashMap<>();
  Map<Symbol,Expression> rightProjections=new HashMap<>();
  for (  Symbol symbol : leftPlan.getOutputSymbols()) {
    leftProjections.put(symbol,new QualifiedNameReference(symbol.toQualifiedName()));
  }
  for (  Symbol symbol : rightPlan.getOutputSymbols()) {
    rightProjections.put(symbol,new QualifiedNameReference(symbol.toQualifiedName()));
  }
  List<AnalyzedJoinClause> criteria=analysis.getJoinCriteria(join);
  ImmutableList.Builder<JoinNode.EquiJoinClause> equiJoinClauses=ImmutableList.builder();
  for (  AnalyzedJoinClause analyzedClause : criteria) {
    AnalyzedExpression left=analyzedClause.getLeft();
    Symbol leftSymbol=analysis.getSymbolAllocator().newSymbol(left.getRewrittenExpression(),left.getType());
    leftProjections.put(leftSymbol,left.getRewrittenExpression());
    AnalyzedExpression right=analyzedClause.getRight();
    Symbol rightSymbol=analysis.getSymbolAllocator().newSymbol(right.getRewrittenExpression(),right.getType());
    rightProjections.put(rightSymbol,right.getRewrittenExpression());
    equiJoinClauses.add(new JoinNode.EquiJoinClause(leftSymbol,rightSymbol));
  }
  leftPlan=new ProjectNode(idAllocator.getNextId(),leftPlan,leftProjections);
  rightPlan=new ProjectNode(idAllocator.getNextId(),rightPlan,rightProjections);
  return new JoinNode(idAllocator.getNextId(),leftPlan,rightPlan,equiJoinClauses.build());
}
