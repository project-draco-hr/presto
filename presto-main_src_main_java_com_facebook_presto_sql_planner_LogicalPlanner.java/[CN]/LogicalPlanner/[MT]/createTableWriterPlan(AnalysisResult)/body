{
  checkState(analysis.getDestinations().size() == 1,"only a single table destination is currently supported");
  QualifiedTableName destination=Iterables.getOnlyElement(analysis.getDestinations());
  AnalysisResult queryAnalysis=analysis.getAnalysis(destination);
  PlanNode queryNode=createQueryPlan(queryAnalysis);
  TableMetadata dstTableMetadata=metadata.getTable(destination);
  checkState(dstTableMetadata != null,"Destination table %s must exist!",destination);
  Optional<TableHandle> dstTableHandle=dstTableMetadata.getTableHandle();
  checkState(dstTableHandle.isPresent(),"can not import into a table without table handle");
  checkState(dstTableHandle.get().getDataSourceType() == DataSourceType.NATIVE,"can not import into non-native table %s",dstTableMetadata.getTable());
  ImmutableMap.Builder<Symbol,ColumnHandle> columnHandlesBuilder=ImmutableMap.builder();
  ImmutableMap.Builder<Symbol,Type> inputTypesBuilder=ImmutableMap.builder();
  ImmutableList.Builder<Symbol> inputSymbolsBuilder=ImmutableList.builder();
  for (  Field field : queryAnalysis.getOutputDescriptor().getFields()) {
    inputTypesBuilder.put(field.getSymbol(),field.getType());
    inputSymbolsBuilder.add(field.getSymbol());
    ColumnHandle columnHandle=findColumnHandle(field,dstTableMetadata);
    checkState(columnHandle != null,"Could not match symbol %s to any table column!",field.getSymbol());
    columnHandlesBuilder.put(field.getSymbol(),columnHandle);
  }
  ImmutableMap.Builder<Symbol,Type> outputTypesBuilder=ImmutableMap.builder();
  for (  Field field : analysis.getOutputDescriptor().getFields()) {
    outputTypesBuilder.put(field.getSymbol(),field.getType());
  }
  Symbol outputSymbol=Iterables.getOnlyElement(analysis.getOutputExpressions().keySet());
  TableWriterNode writerNode=new TableWriterNode(idAllocator.getNextId(),queryNode,dstTableHandle.get(),columnHandlesBuilder.build(),outputSymbol);
  return writerNode;
}
