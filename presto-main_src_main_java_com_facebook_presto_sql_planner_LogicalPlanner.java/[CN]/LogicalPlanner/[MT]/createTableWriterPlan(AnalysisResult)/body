{
  checkState(analysis.getDestinations().size() == 1,"only a single table destination is currently supported");
  QualifiedTableName destination=Iterables.getOnlyElement(analysis.getDestinations());
  AnalysisResult queryAnalysis=analysis.getAnalysis(destination);
  PlanNode queryNode=createQueryPlan(queryAnalysis);
  ImmutableList.Builder<ColumnMetadata> columns=ImmutableList.builder();
  for (  Field field : queryAnalysis.getOutputDescriptor().getFields()) {
    ColumnMetadata columnMetadata=new ColumnMetadata(field.getAttribute().get(),field.getType().getRawType());
    columns.add(columnMetadata);
  }
  TableMetadata dstTableMetadata=createTable(metadata,destination,columns.build());
  checkState(dstTableMetadata.getTableHandle().isPresent(),"can not import into a table without table handle");
  checkState(dstTableMetadata.getTableHandle().get().getDataSourceType() == DataSourceType.NATIVE,"can not import into non-native table %s",dstTableMetadata.getTable());
  QualifiedTableName srcTableName=getTableNameFromQuery(session,queryAnalysis);
  storageManager.insertSourceTable(((NativeTableHandle)dstTableMetadata.getTableHandle().get()),srcTableName);
  ImmutableMap.Builder<Symbol,ColumnHandle> columnHandlesBuilder=ImmutableMap.builder();
  ImmutableMap.Builder<Symbol,Type> inputTypesBuilder=ImmutableMap.builder();
  ImmutableList.Builder<Symbol> inputSymbolsBuilder=ImmutableList.builder();
  for (  Field field : queryAnalysis.getOutputDescriptor().getFields()) {
    inputTypesBuilder.put(field.getSymbol(),field.getType());
    inputSymbolsBuilder.add(field.getSymbol());
    ColumnHandle columnHandle=findColumnHandle(field,dstTableMetadata);
    checkState(columnHandle != null,"Could not match symbol %s to any table column!",field.getSymbol());
    columnHandlesBuilder.put(field.getSymbol(),columnHandle);
  }
  ImmutableMap.Builder<Symbol,Type> outputTypesBuilder=ImmutableMap.builder();
  for (  Field field : analysis.getOutputDescriptor().getFields()) {
    outputTypesBuilder.put(field.getSymbol(),field.getType());
  }
  TableWriterNode writerNode=new TableWriterNode(idAllocator.getNextId(),queryNode,dstTableMetadata.getTableHandle().get(),inputSymbolsBuilder.build(),inputTypesBuilder.build(),columnHandlesBuilder.build(),outputTypesBuilder.build());
  Map<Symbol,AnalyzedExpression> outputExpressions=analysis.getOutputExpressions();
  checkState(outputExpressions.size() == 1,"only a single output symbol is supported");
  Symbol outputSymbol=Iterables.getOnlyElement(outputExpressions.keySet());
  FunctionInfo sum=metadata.getFunction(QualifiedName.of("sum"),Lists.transform(ImmutableList.of(Type.LONG),Type.toRaw()));
  FunctionCall sumCall=new FunctionCall(QualifiedName.of(outputSymbol.getName()),ImmutableList.of(nameReference(outputSymbol.getName())));
  PlanNode aggregationNode=new AggregationNode(idAllocator.getNextId(),writerNode,ImmutableList.<Symbol>of(),ImmutableMap.of(outputSymbol,sumCall),ImmutableMap.of(outputSymbol,sum.getHandle()));
  return aggregationNode;
}
