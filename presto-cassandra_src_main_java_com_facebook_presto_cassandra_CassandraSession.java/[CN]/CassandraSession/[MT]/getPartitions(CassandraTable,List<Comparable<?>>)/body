{
  Iterable<Row> rows;
  try {
    rows=queryPartitionKeys(table,filterPrefix);
  }
 catch (  NoHostAvailableException e) {
    session=clusterBuilder.build().connect();
    rows=queryPartitionKeys(table,filterPrefix);
  }
  if (rows == null) {
    return ImmutableList.of(CassandraPartition.UNPARTITIONED);
  }
  List<CassandraColumnHandle> partitionKeyColumns=table.getPartitionKeyColumns();
  ByteBuffer buffer=ByteBuffer.allocate(1000);
  HashMap<ConnectorColumnHandle,Comparable<?>> map=new HashMap<>();
  Set<String> uniquePartitionIds=new HashSet<>();
  StringBuilder stringBuilder=new StringBuilder();
  boolean isComposite=partitionKeyColumns.size() > 1;
  ImmutableList.Builder<CassandraPartition> partitions=ImmutableList.builder();
  for (  Row row : rows) {
    buffer.clear();
    map.clear();
    stringBuilder.setLength(0);
    for (int i=0; i < partitionKeyColumns.size(); i++) {
      ByteBuffer component=row.getBytesUnsafe(i);
      if (isComposite) {
        short len=(short)component.limit();
        buffer.putShort(len);
        buffer.put(component);
        buffer.put((byte)0);
      }
 else {
        buffer.put(component);
      }
      CassandraColumnHandle columnHandle=partitionKeyColumns.get(i);
      Comparable<?> keyPart=CassandraType.getColumnValue(row,i,columnHandle.getCassandraType(),columnHandle.getTypeArguments());
      map.put(columnHandle,keyPart);
      if (i > 0) {
        stringBuilder.append(" AND ");
      }
      stringBuilder.append(CassandraCqlUtils.validColumnName(columnHandle.getName()));
      stringBuilder.append(" = ");
      stringBuilder.append(CassandraType.getColumnValueForCql(row,i,columnHandle.getCassandraType()));
    }
    buffer.flip();
    byte[] key=new byte[buffer.limit()];
    buffer.get(key);
    TupleDomain<ConnectorColumnHandle> tupleDomain=TupleDomain.withFixedValues(map);
    String partitionId=stringBuilder.toString();
    if (uniquePartitionIds.add(partitionId)) {
      partitions.add(new CassandraPartition(key,partitionId,tupleDomain));
    }
  }
  return partitions.build();
}
