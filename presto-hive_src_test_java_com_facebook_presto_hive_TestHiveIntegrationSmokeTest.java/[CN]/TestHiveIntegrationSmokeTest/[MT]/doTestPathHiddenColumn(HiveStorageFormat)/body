{
  @Language("SQL") String createTable="CREATE TABLE test_path " + "WITH (" + "format = '" + storageFormat + "',"+ "partitioned_by = ARRAY['col1']"+ ") AS "+ "SELECT * FROM (VALUES "+ "(0, 0), (3, 0), (6, 0), "+ "(1, 1), (4, 1), (7, 1), "+ "(2, 2), (5, 2) "+ " ) t(col0, col1) ";
  assertUpdate(createTable,8);
  assertTrue(queryRunner.tableExists(getSession(),"test_path"));
  TableMetadata tableMetadata=getTableMetadata(catalog,TPCH_SCHEMA,"test_path");
  assertEquals(tableMetadata.getMetadata().getProperties().get(STORAGE_FORMAT_PROPERTY),storageFormat);
  List<String> columnNames=ImmutableList.of("col0","col1",PATH_COLUMN_NAME);
  List<ColumnMetadata> columnMetadatas=tableMetadata.getColumns();
  assertEquals(columnMetadatas.size(),columnNames.size());
  for (int i=0; i < columnMetadatas.size(); i++) {
    ColumnMetadata columnMetadata=columnMetadatas.get(i);
    assertEquals(columnMetadata.getName(),columnNames.get(i));
    if (columnMetadata.getName().equals(PATH_COLUMN_NAME)) {
      assertTrue(columnMetadata.isHidden());
    }
  }
  assertEquals(getPartitions("test_path").size(),3);
  MaterializedResult results=computeActual(format("SELECT *, \"%s\" FROM test_path",PATH_COLUMN_NAME));
  Map<Integer,String> partitionPathMap=new HashMap<>();
  for (int i=0; i < results.getRowCount(); i++) {
    MaterializedRow row=results.getMaterializedRows().get(i);
    int col0=(int)row.getField(0);
    int col1=(int)row.getField(1);
    String pathName=(String)row.getField(2);
    String parentDirectory=new Path(pathName).getParent().toString();
    assertTrue(pathName.length() > 0);
    assertEquals((int)(col0 % 3),col1);
    if (partitionPathMap.containsKey(col1)) {
      assertEquals(partitionPathMap.get(col1),parentDirectory);
    }
 else {
      partitionPathMap.put(col1,parentDirectory);
    }
  }
  assertEquals(partitionPathMap.size(),3);
  assertUpdate("DROP TABLE test_path");
  assertFalse(queryRunner.tableExists(getSession(),"test_path"));
}
