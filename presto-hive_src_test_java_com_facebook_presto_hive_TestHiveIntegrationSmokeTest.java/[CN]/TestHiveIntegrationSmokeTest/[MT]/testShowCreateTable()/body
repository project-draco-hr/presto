{
  String createTableSql=format("" + "CREATE TABLE %s.%s.%s (\n" + "   c1 bigint,\n"+ "   c2 double,\n"+ "   \"c 3\" varchar,\n"+ "   \"c'4\" array(bigint),\n"+ "   c5 map(bigint, varchar)\n"+ ")\n"+ "WITH (\n"+ "   format = 'RCBINARY'\n"+ ")",getSession().getCatalog().get(),getSession().getSchema().get(),"test_show_create_table");
  assertUpdate(createTableSql);
  MaterializedResult actualResult=computeActual("SHOW CREATE TABLE test_show_create_table");
  assertEquals(getOnlyElement(actualResult.getOnlyColumnAsSet()),createTableSql);
  createTableSql=format("" + "CREATE TABLE %s.%s.%s (\n" + "   c1 bigint,\n"+ "   \"c 2\" varchar,\n"+ "   \"c'3\" array(bigint),\n"+ "   c4 map(bigint, varchar),\n"+ "   c5 double\n)\n"+ "WITH (\n"+ "   format = 'ORC',\n"+ "   partitioned_by = ARRAY['c4','c5']\n"+ ")",getSession().getCatalog().get(),getSession().getSchema().get(),"\"test_show_create_table'2\"");
  assertUpdate(createTableSql);
  actualResult=computeActual("SHOW CREATE TABLE \"test_show_create_table'2\"");
  assertEquals(getOnlyElement(actualResult.getOnlyColumnAsSet()),createTableSql);
}
