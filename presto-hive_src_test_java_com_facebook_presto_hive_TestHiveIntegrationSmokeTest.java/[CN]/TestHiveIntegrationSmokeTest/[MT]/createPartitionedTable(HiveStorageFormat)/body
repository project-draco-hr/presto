{
  @Language("SQL") String createTable="" + "CREATE TABLE test_partitioned_table (" + "  _string VARCHAR"+ ",  _varchar VARCHAR(65535)"+ ", _char CHAR(10)"+ ", _bigint BIGINT"+ ", _integer INTEGER"+ ", _smallint SMALLINT"+ ", _tinyint TINYINT"+ ", _double DOUBLE"+ ", _boolean BOOLEAN"+ ", _decimal_short DECIMAL(3,2)"+ ", _decimal_long DECIMAL(30,10)"+ ", _partition_string VARCHAR"+ ", _partition_varchar VARCHAR(65535)"+ ", _partition_tinyint TINYINT"+ ", _partition_smallint SMALLINT"+ ", _partition_integer INTEGER"+ ", _partition_bigint BIGINT"+ ", _partition_decimal_short DECIMAL(3,2)"+ ", _partition_decimal_long DECIMAL(30,10)"+ ") "+ "WITH ("+ "format = '" + storageFormat + "', "+ "partitioned_by = ARRAY[ '_partition_string', '_partition_varchar', '_partition_tinyint', '_partition_smallint', '_partition_integer', '_partition_bigint', '_partition_decimal_short', '_partition_decimal_long' ]"+ ") ";
  assertUpdate(createTable);
  TableMetadata tableMetadata=getTableMetadata(catalog,TPCH_SCHEMA,"test_partitioned_table");
  assertEquals(tableMetadata.getMetadata().getProperties().get(STORAGE_FORMAT_PROPERTY),storageFormat);
  List<String> partitionedBy=ImmutableList.of("_partition_string","_partition_varchar","_partition_tinyint","_partition_smallint","_partition_integer","_partition_bigint","_partition_decimal_short","_partition_decimal_long");
  assertEquals(tableMetadata.getMetadata().getProperties().get(PARTITIONED_BY_PROPERTY),partitionedBy);
  for (  ColumnMetadata columnMetadata : tableMetadata.getColumns()) {
    boolean partitionKey=partitionedBy.contains(columnMetadata.getName());
    assertEquals(columnMetadata.getComment(),annotateColumnComment(Optional.empty(),partitionKey));
  }
  assertColumnType(tableMetadata,"_string",createUnboundedVarcharType());
  assertColumnType(tableMetadata,"_varchar",createVarcharType(65535));
  assertColumnType(tableMetadata,"_char",createCharType(10));
  assertColumnType(tableMetadata,"_partition_string",createUnboundedVarcharType());
  assertColumnType(tableMetadata,"_partition_varchar",createVarcharType(65535));
  MaterializedResult result=computeActual("SELECT * from test_partitioned_table");
  assertEquals(result.getRowCount(),0);
  @Language("SQL") String select="" + "SELECT" + " 'foo' _string"+ ", 'bar' _varchar"+ ", CAST('boo' AS CHAR(10)) _char"+ ", CAST(1 AS BIGINT) _bigint"+ ", 2 _integer"+ ", CAST (3 AS SMALLINT) _smallint"+ ", CAST (4 AS TINYINT) _tinyint"+ ", CAST('3.14' AS DOUBLE) _double"+ ", true _boolean"+ ", CAST('3.14' AS DECIMAL(3,2)) _decimal_short"+ ", CAST('12345678901234567890.0123456789' AS DECIMAL(30,10)) _decimal_long"+ ", 'foo' _partition_string"+ ", 'bar' _partition_varchar"+ ", CAST(1 AS TINYINT) _partition_tinyint"+ ", CAST(1 AS SMALLINT) _partition_smallint"+ ", 1 _partition_integer"+ ", CAST (1 AS BIGINT) _partition_bigint"+ ", CAST('3.14' AS DECIMAL(3,2)) _partition_decimal_short"+ ", CAST('12345678901234567890.0123456789' AS DECIMAL(30,10)) _partition_decimal_long";
  assertUpdate("INSERT INTO test_partitioned_table " + select,1);
  assertQuery("SELECT * from test_partitioned_table",select);
  assertUpdate("DROP TABLE test_partitioned_table");
  assertFalse(queryRunner.tableExists(getSession(),"test_partitioned_table"));
}
