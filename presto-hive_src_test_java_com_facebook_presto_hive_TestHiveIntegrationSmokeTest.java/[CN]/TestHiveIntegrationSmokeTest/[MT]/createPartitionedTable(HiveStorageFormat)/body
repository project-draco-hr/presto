{
  @Language("SQL") String createTable="" + "CREATE TABLE test_partitioned_table (" + "  _partition_varchar VARCHAR"+ ", _partition_bigint BIGINT"+ ", _varchar VARCHAR"+ ", _varbinary VARBINARY"+ ", _bigint BIGINT"+ ", _double DOUBLE"+ ", _boolean BOOLEAN"+ ") "+ "WITH ("+ "format = '" + storageFormat + "', "+ "partitioned_by = ARRAY[ '_partition_varchar', '_partition_bigint' ]"+ ") ";
  assertUpdate(createTable);
  TableMetadata tableMetadata=getTableMetadata("test_partitioned_table");
  assertEquals(tableMetadata.getMetadata().getProperties().get(STORAGE_FORMAT_PROPERTY),storageFormat);
  List<String> partitionedBy=ImmutableList.of("_partition_varchar","_partition_bigint");
  assertEquals(tableMetadata.getMetadata().getProperties().get(PARTITIONED_BY_PROPERTY),partitionedBy);
  for (  ColumnMetadata columnMetadata : tableMetadata.getColumns()) {
    assertEquals(columnMetadata.isPartitionKey(),partitionedBy.contains(columnMetadata.getName()));
  }
  MaterializedResult result=computeActual("SELECT * from test_partitioned_table");
  assertEquals(result.getRowCount(),0);
  assertUpdate("DROP TABLE test_partitioned_table");
  assertFalse(queryRunner.tableExists(getSession(),"test_partitioned_table"));
}
