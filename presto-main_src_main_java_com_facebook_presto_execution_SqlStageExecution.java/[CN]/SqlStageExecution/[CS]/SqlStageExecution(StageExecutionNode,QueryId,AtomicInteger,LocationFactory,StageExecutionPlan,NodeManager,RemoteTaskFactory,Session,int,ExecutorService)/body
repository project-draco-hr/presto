{
  Preconditions.checkNotNull(queryId,"queryId is null");
  Preconditions.checkNotNull(nextStageId,"nextStageId is null");
  Preconditions.checkNotNull(locationFactory,"locationFactory is null");
  Preconditions.checkNotNull(plan,"plan is null");
  Preconditions.checkNotNull(nodeManager,"nodeManager is null");
  Preconditions.checkNotNull(remoteTaskFactory,"remoteTaskFactory is null");
  Preconditions.checkNotNull(session,"session is null");
  Preconditions.checkArgument(maxPendingSplitsPerNode > 0,"maxPendingSplitsPerNode must be greater than 0");
  Preconditions.checkNotNull(executor,"executor is null");
  this.parent=parent;
  this.stageId=new StageId(queryId,String.valueOf(nextStageId.getAndIncrement()));
  this.location=locationFactory.createStageLocation(stageId);
  this.fragment=plan.getFragment();
  this.outputReceivers=plan.getOutputReceivers();
  this.splits=plan.getSplits();
  this.nodeManager=nodeManager;
  this.remoteTaskFactory=remoteTaskFactory;
  this.session=session;
  this.maxPendingSplitsPerNode=maxPendingSplitsPerNode;
  this.executor=executor;
  tupleInfos=fragment.getTupleInfos();
  ImmutableMap.Builder<PlanFragmentId,StageExecutionNode> subStages=ImmutableMap.builder();
  for (  StageExecutionPlan subStagePlan : plan.getSubStages()) {
    PlanFragmentId subStageFragmentId=subStagePlan.getFragment().getId();
    StageExecutionNode subStage=new SqlStageExecution(this,queryId,nextStageId,locationFactory,subStagePlan,nodeManager,remoteTaskFactory,session,maxPendingSplitsPerNode,executor);
    subStages.put(subStageFragmentId,subStage);
  }
  this.subStages=subStages.build();
}
