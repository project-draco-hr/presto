{
  Preconditions.checkNotNull(queryId,"queryId is null");
  Preconditions.checkNotNull(nextStageId,"nextStageId is null");
  Preconditions.checkNotNull(locationFactory,"locationFactory is null");
  Preconditions.checkNotNull(plan,"plan is null");
  Preconditions.checkNotNull(nodeManager,"nodeManager is null");
  Preconditions.checkNotNull(remoteTaskFactory,"remoteTaskFactory is null");
  Preconditions.checkNotNull(session,"session is null");
  Preconditions.checkNotNull(queryState,"queryState is null");
  this.queryId=queryId;
  this.stageId=queryId + "." + nextStageId.getAndIncrement();
  this.location=locationFactory.createStageLocation(queryId,stageId);
  this.fragment=plan.getFragment();
  this.splits=plan.getSplits();
  this.nodeManager=nodeManager;
  this.remoteTaskFactory=remoteTaskFactory;
  this.session=session;
  this.queryState=queryState;
  tupleInfos=ImmutableList.copyOf(IterableTransformer.on(fragment.getRoot().getOutputSymbols()).transform(Functions.forMap(fragment.getSymbols())).transform(com.facebook.presto.sql.analyzer.Type.toRaw()).transform(new Function<Type,TupleInfo>(){
    @Override public TupleInfo apply(    Type input){
      return new TupleInfo(input);
    }
  }
).list());
  ImmutableMap.Builder<PlanFragmentId,SqlStageExecution> subStages=ImmutableMap.builder();
  for (  StageExecutionPlan subStagePlan : plan.getSubStages()) {
    PlanFragmentId subStageFragmentId=subStagePlan.getFragment().getId();
    SqlStageExecution subStage=new SqlStageExecution(queryId,nextStageId,locationFactory,subStagePlan,nodeManager,remoteTaskFactory,session,queryState);
    subStages.put(subStageFragmentId,subStage);
  }
  this.subStages=subStages.build();
}
