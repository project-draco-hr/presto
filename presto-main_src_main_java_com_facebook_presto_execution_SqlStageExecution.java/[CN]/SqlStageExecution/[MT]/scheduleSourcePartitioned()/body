{
  AtomicInteger nextTaskId=new AtomicInteger(0);
  long getSplitStart=System.nanoTime();
  for (  Split split : dataSource.get().getSplits()) {
    getSplitDistribution.add(System.nanoTime() - getSplitStart);
    long scheduleSplitStart=System.nanoTime();
    Node chosen=chooseNode(nodeSelector,split,nextTaskId);
    if (getState().isDone()) {
      break;
    }
    RemoteTask task=tasks.get(chosen);
    if (task == null) {
      scheduleTask(nextTaskId.getAndIncrement(),chosen,fragment.getPartitionedSource(),split);
      scheduleTaskDistribution.add(System.nanoTime() - scheduleSplitStart);
    }
 else {
      task.addSplit(fragment.getPartitionedSource(),split);
      addSplitDistribution.add(System.nanoTime() - scheduleSplitStart);
    }
    getSplitStart=System.nanoTime();
  }
  for (  RemoteTask task : tasks.values()) {
    task.noMoreSplits(fragment.getPartitionedSource());
  }
  completeSources.add(fragment.getPartitionedSource());
}
