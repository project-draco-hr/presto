{
  AtomicInteger nextTaskId=new AtomicInteger(0);
  long getSplitStart=System.nanoTime();
  SplitSource splitSource=this.dataSource.get();
  while (!splitSource.isFinished()) {
    getSplitDistribution.add(System.nanoTime() - getSplitStart);
    if (getState().isDone()) {
      break;
    }
    Set<Split> pendingSplits=ImmutableSet.copyOf(splitSource.getNextBatch(splitBatchSize));
    while (!pendingSplits.isEmpty() && !getState().isDone()) {
      Multimap<Node,Split> splitAssignment=nodeSelector.computeAssignments(pendingSplits);
      pendingSplits=ImmutableSet.copyOf(Sets.difference(pendingSplits,ImmutableSet.copyOf(splitAssignment.values())));
      assignSplits(nextTaskId,splitAssignment);
      if (!pendingSplits.isEmpty()) {
        waitForFreeNode(nextTaskId);
      }
    }
  }
  for (  RemoteTask task : tasks.values()) {
    task.noMoreSplits(fragment.getPartitionedSource());
  }
  completeSources.add(fragment.getPartitionedSource());
  setNoMoreStageNodes();
}
