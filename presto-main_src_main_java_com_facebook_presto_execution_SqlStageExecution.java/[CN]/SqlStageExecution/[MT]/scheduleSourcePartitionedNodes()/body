{
  AtomicInteger nextTaskId=new AtomicInteger(0);
  long getSplitStart=System.nanoTime();
  SplitSource splitSource=this.dataSource.get();
  while (!splitSource.isFinished()) {
    getSplitDistribution.add(System.nanoTime() - getSplitStart);
    if (getState().isDone()) {
      break;
    }
    Multimap<Node,Split> nodeSplits=ArrayListMultimap.create();
    for (    Split split : splitSource.getNextBatch(splitBatchSize)) {
      Node node=chooseNode(nodeSelector,split,nextTaskId);
      nodeSplits.put(node,split);
    }
    for (    Entry<Node,Collection<Split>> taskSplits : nodeSplits.asMap().entrySet()) {
      long scheduleSplitStart=System.nanoTime();
      Node node=taskSplits.getKey();
      RemoteTask task=tasks.get(node);
      if (task == null) {
        scheduleTask(nextTaskId.getAndIncrement(),node,fragment.getPartitionedSource(),taskSplits.getValue());
        addStageNode(node);
        scheduleTaskDistribution.add(System.nanoTime() - scheduleSplitStart);
      }
 else {
        task.addSplits(fragment.getPartitionedSource(),taskSplits.getValue());
        addSplitDistribution.add(System.nanoTime() - scheduleSplitStart);
      }
      getSplitStart=System.nanoTime();
    }
  }
  for (  RemoteTask task : tasks.values()) {
    task.noMoreSplits(fragment.getPartitionedSource());
  }
  completeSources.add(fragment.getPartitionedSource());
  setNoMoreStageNodes();
}
