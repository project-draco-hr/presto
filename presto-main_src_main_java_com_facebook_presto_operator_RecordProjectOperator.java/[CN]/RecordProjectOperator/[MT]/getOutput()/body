{
  if (!finishing) {
    int i;
    for (i=0; i < ROWS_PER_REQUEST; i++) {
      if (pageBuilder.isFull()) {
        break;
      }
      if (!cursor.advanceNextPosition()) {
        finishing=true;
        break;
      }
      for (int column=0; column < types.size(); column++) {
        BlockBuilder output=pageBuilder.getBlockBuilder(column);
        if (cursor.isNull(column)) {
          output.appendNull();
        }
 else {
          Type type=getTypes().get(column);
          Class<?> javaType=type.getJavaType();
          if (javaType == boolean.class) {
            output.appendBoolean(cursor.getBoolean(column));
          }
 else           if (javaType == long.class) {
            output.appendLong(cursor.getLong(column));
          }
 else           if (javaType == double.class) {
            output.appendDouble(cursor.getDouble(column));
          }
 else           if (javaType == Slice.class) {
            output.appendSlice(Slices.wrappedBuffer(cursor.getString(column)));
          }
 else {
            throw new AssertionError("Unimplemented type: " + javaType.getName());
          }
        }
      }
    }
    long bytesProcessed=cursor.getCompletedBytes() - completedBytes;
    long endReadTimeNanos=cursor.getReadTimeNanos();
    operatorContext.recordGeneratedInput(new DataSize(bytesProcessed,BYTE),i,endReadTimeNanos - readTimeNanos);
    completedBytes+=bytesProcessed;
    readTimeNanos=endReadTimeNanos;
  }
  if (pageBuilder.isEmpty() || (!finishing && !pageBuilder.isFull())) {
    return null;
  }
  Page page=pageBuilder.build();
  pageBuilder.reset();
  operatorContext.recordGeneratedInput(page.getDataSize(),page.getPositionCount());
  return page;
}
