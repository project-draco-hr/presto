{
  DatabaseShardManager shardManager=new DatabaseShardManager(dbi);
  long tableId=1;
  UUID uuid1=UUID.randomUUID();
  UUID uuid2=UUID.randomUUID();
  UUID uuid3=UUID.randomUUID();
  ShardInfo shardInfo1=new ShardInfo(uuid1,ImmutableSet.of("node1"),ImmutableList.of(),1,10,100);
  ShardInfo shardInfo2=new ShardInfo(uuid2,ImmutableSet.of("node2"),ImmutableList.of(),2,20,200);
  ShardInfo shardInfo3=new ShardInfo(uuid3,ImmutableSet.of("node3"),ImmutableList.of(),3,30,300);
  List<ShardInfo> shards=ImmutableList.of(shardInfo1,shardInfo2,shardInfo3);
  shardManager.commitShards(tableId,ImmutableList.of(new ColumnInfo(1,BIGINT),new ColumnInfo(2,DATE)),shards,Optional.empty());
  Slice schema=utf8Slice(DEFAULT_TEST_ORDERS.getSchemaName());
  Slice table=utf8Slice(DEFAULT_TEST_ORDERS.getTableName());
  DateTime date1=DateTime.parse("2015-01-01T00:00");
  DateTime date2=DateTime.parse("2015-01-02T00:00");
  TupleDomain<Integer> tupleDomain=TupleDomain.withColumnDomains(ImmutableMap.<Integer,Domain>builder().put(0,Domain.singleValue(schema)).put(1,Domain.create(SortedRangeSet.of(lessThanOrEqual(table)),true)).put(6,Domain.create(SortedRangeSet.of(lessThanOrEqual(date1.getMillis()),greaterThan(date2.getMillis())),true)).put(7,Domain.create(SortedRangeSet.of(lessThanOrEqual(date1.getMillis()),greaterThan(date2.getMillis())),true)).build());
  List<MaterializedRow> actual;
  try (RecordCursor cursor=new ShardMetadataSystemTable(dbi).cursor(SESSION,tupleDomain)){
    actual=getMaterializedResults(cursor,SHARD_METADATA.getColumns());
  }
   assertEquals(actual.size(),3);
  List<MaterializedRow> expected=ImmutableList.of(new MaterializedRow(DEFAULT_PRECISION,schema,table,utf8Slice(uuid1.toString()),100,10,1),new MaterializedRow(DEFAULT_PRECISION,schema,table,utf8Slice(uuid2.toString()),200,20,2),new MaterializedRow(DEFAULT_PRECISION,schema,table,utf8Slice(uuid3.toString()),300,30,3));
  assertEquals(actual,expected);
}
