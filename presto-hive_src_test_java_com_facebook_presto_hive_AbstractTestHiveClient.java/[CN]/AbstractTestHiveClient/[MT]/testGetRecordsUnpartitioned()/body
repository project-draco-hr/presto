{
  ConnectorTableHandle tableHandle=getTableHandle(tableUnpartitioned);
  List<ConnectorColumnHandle> columnHandles=ImmutableList.copyOf(metadata.getColumnHandles(tableHandle).values());
  Map<String,Integer> columnIndex=indexColumns(columnHandles);
  ConnectorPartitionResult partitionResult=splitManager.getPartitions(tableHandle,TupleDomain.<ConnectorColumnHandle>all());
  List<ConnectorSplit> splits=getAllSplits(splitManager.getPartitionSplits(tableHandle,partitionResult.getPartitions()));
  assertEquals(splits.size(),1);
  for (  ConnectorSplit split : splits) {
    HiveSplit hiveSplit=(HiveSplit)split;
    assertEquals(hiveSplit.getPartitionKeys(),ImmutableList.of());
    long rowNumber=0;
    try (ConnectorPageSource pageSource=pageSourceProvider.createPageSource(split,columnHandles)){
      assertPageSourceType(pageSource,TEXTFILE);
      MaterializedResult result=materializeSourceDataStream(SESSION,pageSource,getTypes(columnHandles));
      assertEquals(pageSource.getTotalBytes(),hiveSplit.getLength());
      for (      MaterializedRow row : result) {
        rowNumber++;
        if (rowNumber % 19 == 0) {
          assertNull(row.getField(columnIndex.get("t_string")));
        }
 else         if (rowNumber % 19 == 1) {
          assertEquals(row.getField(columnIndex.get("t_string")),"");
        }
 else {
          assertEquals(row.getField(columnIndex.get("t_string")),"unpartitioned");
        }
        assertEquals(row.getField(columnIndex.get("t_tinyint")),1 + rowNumber);
      }
    }
     assertEquals(rowNumber,100);
  }
}
