{
  TableHandle tableHandle=client.getTableHandle(TABLE_UNPARTITIONED);
  SchemaTableMetadata tableMetadata=client.getTableMetadata(tableHandle);
  List<PartitionChunk> partitions=ImmutableList.copyOf(client.getPartitionChunks(TABLE_UNPARTITIONED,PARTITIONS,Lists.transform(tableMetadata.getColumns(),columnNameGetter())));
  assertEquals(partitions.size(),1);
  for (  PartitionChunk partitionChunk : partitions) {
    HivePartitionChunk chunk=(HivePartitionChunk)partitionChunk;
    byte[] bytes=client.serializePartitionChunk(chunk);
    chunk=(HivePartitionChunk)client.deserializePartitionChunk(bytes);
    Map<String,ColumnMetadata> map=uniqueIndex(tableMetadata.getColumns(),columnNameGetter());
    assertEquals(chunk.getPartitionKeys(),ImmutableList.of());
    long rowNumber=0;
    try (RecordCursor cursor=client.getRecords(chunk)){
      assertEquals(cursor.getTotalBytes(),chunk.getLength());
      while (cursor.advanceNextPosition()) {
        rowNumber++;
        if (rowNumber % 19 == 0) {
          assertTrue(cursor.isNull(map.get("t_string").getOrdinalPosition()));
        }
 else {
          assertEquals(cursor.getString(map.get("t_string").getOrdinalPosition()),"unpartitioned".getBytes(Charsets.UTF_8));
        }
        assertEquals(cursor.getLong(map.get("t_tinyint").getOrdinalPosition()),1 + rowNumber);
      }
    }
     assertEquals(rowNumber,100);
  }
}
