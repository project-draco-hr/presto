{
  ConnectorTableHandle tableHandle=getTableHandle(tablePartitionFormat);
  ConnectorTableMetadata tableMetadata=metadata.getTableMetadata(tableHandle);
  List<ConnectorColumnHandle> columnHandles=ImmutableList.copyOf(metadata.getColumnHandles(tableHandle).values());
  Map<String,Integer> columnIndex=indexColumns(columnHandles);
  ConnectorPartitionResult partitionResult=splitManager.getPartitions(tableHandle,TupleDomain.<ConnectorColumnHandle>all());
  List<ConnectorSplit> splits=getAllSplits(splitManager.getPartitionSplits(tableHandle,partitionResult.getPartitions()));
  assertEquals(splits.size(),this.partitions.size());
  for (  ConnectorSplit split : splits) {
    HiveSplit hiveSplit=(HiveSplit)split;
    List<HivePartitionKey> partitionKeys=hiveSplit.getPartitionKeys();
    String ds=partitionKeys.get(0).getValue();
    String fileFormat=partitionKeys.get(1).getValue();
    HiveStorageFormat fileType=HiveStorageFormat.valueOf(fileFormat.toUpperCase());
    long dummyPartition=Long.parseLong(partitionKeys.get(2).getValue());
    long rowNumber=0;
    long completedBytes=0;
    try (ConnectorPageSource pageSource=pageSourceProvider.createPageSource(hiveSplit,columnHandles)){
      MaterializedResult result=materializeSourceDataStream(SESSION,pageSource,getTypes(columnHandles));
      assertPageSourceType(pageSource,fileType);
      for (      MaterializedRow row : result) {
        try {
          assertValueTypes(row,tableMetadata.getColumns());
        }
 catch (        RuntimeException e) {
          throw new RuntimeException("row " + rowNumber,e);
        }
        rowNumber++;
        if (rowNumber % 19 == 0) {
          assertNull(row.getField(columnIndex.get("t_string")));
        }
 else         if (rowNumber % 19 == 1) {
          assertEquals(row.getField(columnIndex.get("t_string")),"");
        }
 else {
          assertEquals(row.getField(columnIndex.get("t_string")),"test");
        }
        assertEquals(row.getField(columnIndex.get("t_tinyint")),1 + rowNumber);
        assertEquals(row.getField(columnIndex.get("t_smallint")),2 + rowNumber);
        assertEquals(row.getField(columnIndex.get("t_int")),3 + rowNumber);
        if (rowNumber % 13 == 0) {
          assertNull(row.getField(columnIndex.get("t_bigint")));
        }
 else {
          assertEquals(row.getField(columnIndex.get("t_bigint")),4 + rowNumber);
        }
        assertEquals((Double)row.getField(columnIndex.get("t_float")),5.1 + rowNumber,0.001);
        assertEquals(row.getField(columnIndex.get("t_double")),6.2 + rowNumber);
        if (rowNumber % 3 == 2) {
          assertNull(row.getField(columnIndex.get("t_boolean")));
        }
 else {
          assertEquals(row.getField(columnIndex.get("t_boolean")),rowNumber % 3 != 0);
        }
        assertEquals(row.getField(columnIndex.get("ds")),ds);
        assertEquals(row.getField(columnIndex.get("file_format")),fileFormat);
        assertEquals(row.getField(columnIndex.get("dummy")),dummyPartition);
        long newCompletedBytes=pageSource.getCompletedBytes();
        assertTrue(newCompletedBytes >= completedBytes);
        assertTrue(newCompletedBytes <= hiveSplit.getLength());
        completedBytes=newCompletedBytes;
      }
      assertTrue(completedBytes <= hiveSplit.getLength());
      assertEquals(rowNumber,100);
    }
   }
}
