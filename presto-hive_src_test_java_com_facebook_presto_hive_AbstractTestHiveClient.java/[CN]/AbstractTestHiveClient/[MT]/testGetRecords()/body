{
  ConnectorTableHandle tableHandle=getTableHandle(tablePartitionFormat);
  ConnectorTableMetadata tableMetadata=metadata.getTableMetadata(tableHandle);
  List<ConnectorColumnHandle> columnHandles=ImmutableList.copyOf(metadata.getColumnHandles(tableHandle).values());
  Map<String,Integer> columnIndex=indexColumns(columnHandles);
  ConnectorPartitionResult partitionResult=splitManager.getPartitions(tableHandle,TupleDomain.<ConnectorColumnHandle>all());
  List<ConnectorSplit> splits=getAllSplits(splitManager.getPartitionSplits(tableHandle,partitionResult.getPartitions()));
  assertEquals(splits.size(),this.partitions.size());
  for (  ConnectorSplit split : splits) {
    HiveSplit hiveSplit=(HiveSplit)split;
    List<HivePartitionKey> partitionKeys=hiveSplit.getPartitionKeys();
    String ds=partitionKeys.get(0).getValue();
    String fileType=partitionKeys.get(1).getValue();
    long dummyPartition=Long.parseLong(partitionKeys.get(2).getValue());
    long rowNumber=0;
    long completedBytes=0;
    try (RecordCursor cursor=recordSetProvider.getRecordSet(hiveSplit,columnHandles).cursor()){
      assertRecordCursorType(cursor,fileType);
      assertEquals(cursor.getTotalBytes(),hiveSplit.getLength());
      while (cursor.advanceNextPosition()) {
        try {
          assertReadFields(cursor,tableMetadata.getColumns());
        }
 catch (        RuntimeException e) {
          throw new RuntimeException("row " + rowNumber,e);
        }
        rowNumber++;
        if (rowNumber % 19 == 0) {
          assertTrue(cursor.isNull(columnIndex.get("t_string")));
        }
 else         if (rowNumber % 19 == 1) {
          assertEquals(cursor.getSlice(columnIndex.get("t_string")).toStringUtf8(),"");
        }
 else {
          assertEquals(cursor.getSlice(columnIndex.get("t_string")).toStringUtf8(),"test");
        }
        assertEquals(cursor.getLong(columnIndex.get("t_tinyint")),1 + rowNumber);
        assertEquals(cursor.getLong(columnIndex.get("t_smallint")),2 + rowNumber);
        assertEquals(cursor.getLong(columnIndex.get("t_int")),3 + rowNumber);
        if (rowNumber % 13 == 0) {
          assertTrue(cursor.isNull(columnIndex.get("t_bigint")));
        }
 else {
          assertEquals(cursor.getLong(columnIndex.get("t_bigint")),4 + rowNumber);
        }
        assertEquals(cursor.getDouble(columnIndex.get("t_float")),5.1 + rowNumber,0.001);
        assertEquals(cursor.getDouble(columnIndex.get("t_double")),6.2 + rowNumber);
        if (rowNumber % 3 == 2) {
          assertTrue(cursor.isNull(columnIndex.get("t_boolean")));
        }
 else {
          assertEquals(cursor.getBoolean(columnIndex.get("t_boolean")),rowNumber % 3 != 0);
        }
        assertEquals(cursor.getSlice(columnIndex.get("ds")).toStringUtf8(),ds);
        assertEquals(cursor.getSlice(columnIndex.get("file_format")).toStringUtf8(),fileType);
        assertEquals(cursor.getLong(columnIndex.get("dummy")),dummyPartition);
        long newCompletedBytes=cursor.getCompletedBytes();
        assertTrue(newCompletedBytes >= completedBytes);
        assertTrue(newCompletedBytes <= hiveSplit.getLength());
        completedBytes=newCompletedBytes;
      }
    }
     assertTrue(completedBytes <= hiveSplit.getLength());
    assertEquals(rowNumber,100);
  }
}
