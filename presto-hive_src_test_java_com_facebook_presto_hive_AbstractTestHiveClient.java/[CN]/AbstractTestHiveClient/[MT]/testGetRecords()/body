{
  TableHandle tableHandle=client.getTableHandle(TABLE);
  SchemaTableMetadata tableMetadata=client.getTableMetadata(tableHandle);
  List<PartitionChunk> partitions=ImmutableList.copyOf(client.getPartitionChunks(TABLE,PARTITIONS,Lists.transform(tableMetadata.getColumns(),columnNameGetter())));
  assertEquals(partitions.size(),PARTITIONS.size());
  for (  PartitionChunk partitionChunk : partitions) {
    HivePartitionChunk chunk=(HivePartitionChunk)partitionChunk;
    byte[] bytes=client.serializePartitionChunk(chunk);
    chunk=(HivePartitionChunk)client.deserializePartitionChunk(bytes);
    Map<String,ColumnMetadata> map=uniqueIndex(tableMetadata.getColumns(),columnNameGetter());
    List<HivePartitionKey> partitionKeys=chunk.getPartitionKeys();
    String ds=partitionKeys.get(0).getValue();
    String fileType=partitionKeys.get(1).getValue();
    long dummy=Long.parseLong(partitionKeys.get(2).getValue());
    long baseValue=getBaseValueForFileType(fileType);
    long rowNumber=0;
    long completedBytes=0;
    try (RecordCursor cursor=client.getRecords(chunk)){
      assertEquals(cursor.getTotalBytes(),chunk.getLength());
      while (cursor.advanceNextPosition()) {
        try {
          assertReadFields(cursor,tableMetadata.getColumns());
        }
 catch (        Exception e) {
          throw new RuntimeException("row " + rowNumber,e);
        }
        rowNumber++;
        if (rowNumber % 19 == 0) {
          assertTrue(cursor.isNull(map.get("t_string").getOrdinalPosition()));
        }
 else {
          assertEquals(cursor.getString(map.get("t_string").getOrdinalPosition()),(fileType + " test").getBytes(Charsets.UTF_8));
        }
        assertEquals(cursor.getLong(map.get("t_tinyint").getOrdinalPosition()),(long)((byte)(baseValue + 1 + rowNumber)));
        assertEquals(cursor.getLong(map.get("t_smallint").getOrdinalPosition()),baseValue + 2 + rowNumber);
        assertEquals(cursor.getLong(map.get("t_int").getOrdinalPosition()),baseValue + 3 + rowNumber);
        if (rowNumber % 13 == 0) {
          assertTrue(cursor.isNull(map.get("t_bigint").getOrdinalPosition()));
        }
 else {
          assertEquals(cursor.getLong(map.get("t_bigint").getOrdinalPosition()),baseValue + 4 + rowNumber);
        }
        assertEquals(cursor.getDouble(map.get("t_float").getOrdinalPosition()),baseValue + 5.1 + rowNumber,0.001);
        assertEquals(cursor.getDouble(map.get("t_double").getOrdinalPosition()),baseValue + 6.2 + rowNumber);
        if (rowNumber % 3 == 2) {
          assertTrue(cursor.isNull(map.get("t_boolean").getOrdinalPosition()));
        }
 else {
          assertEquals(cursor.getLong(map.get("t_boolean").getOrdinalPosition()),rowNumber % 3,String.format("row = %s",rowNumber));
        }
        if (rowNumber % 29 == 0) {
          assertTrue(cursor.isNull(map.get("t_map").getOrdinalPosition()));
        }
 else {
          String expectedJson="{\"format\":\"" + fileType + "\"}";
          assertEquals(cursor.getString(map.get("t_map").getOrdinalPosition()),expectedJson.getBytes(Charsets.UTF_8));
        }
        if (rowNumber % 27 == 0) {
          assertTrue(cursor.isNull(map.get("t_array_string").getOrdinalPosition()));
        }
 else {
          String expectedJson="[\"" + fileType + "\",\"test\",\"data\"]";
          assertEquals(cursor.getString(map.get("t_array_string").getOrdinalPosition()),expectedJson.getBytes(Charsets.UTF_8));
        }
        if (rowNumber % 31 == 0) {
          assertTrue(cursor.isNull(map.get("t_complex").getOrdinalPosition()));
        }
 else {
          String expectedJson="{1:[{\"s_string\":\"" + fileType + "-a\",\"s_double\":0.1},{\"s_string\":\""+ fileType+ "-b\",\"s_double\":0.2}]}";
          assertEquals(cursor.getString(map.get("t_complex").getOrdinalPosition()),expectedJson.getBytes(Charsets.UTF_8));
        }
        assertEquals(cursor.getString(map.get("ds").getOrdinalPosition()),ds.getBytes(Charsets.UTF_8));
        assertEquals(cursor.getString(map.get("file_format").getOrdinalPosition()),fileType.getBytes(Charsets.UTF_8));
        assertEquals(cursor.getLong(map.get("dummy").getOrdinalPosition()),dummy);
        long newCompletedBytes=cursor.getCompletedBytes();
        assertTrue(newCompletedBytes >= completedBytes);
        assertTrue(newCompletedBytes <= chunk.getLength());
        completedBytes=newCompletedBytes;
      }
    }
     assertTrue(completedBytes <= chunk.getLength());
    assertEquals(rowNumber,100);
  }
}
