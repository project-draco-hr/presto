{
  try (Transaction transaction=newTransaction()){
    ConnectorMetadata metadata=transaction.getMetadata();
    ConnectorSession session=newSession();
    ConnectorTableHandle tableHandle=getTableHandle(metadata,tablePartitionFormat);
    ConnectorTableMetadata tableMetadata=metadata.getTableMetadata(session,tableHandle);
    List<ColumnHandle> columnHandles=ImmutableList.copyOf(metadata.getColumnHandles(session,tableHandle).values());
    Map<String,Integer> columnIndex=indexColumns(columnHandles);
    List<ConnectorSplit> splits=getAllSplits(tableHandle,TupleDomain.all());
    assertEquals(splits.size(),partitionCount);
    for (    ConnectorSplit split : splits) {
      HiveSplit hiveSplit=(HiveSplit)split;
      List<HivePartitionKey> partitionKeys=hiveSplit.getPartitionKeys();
      String ds=partitionKeys.get(0).getValue();
      String fileFormat=partitionKeys.get(1).getValue();
      HiveStorageFormat fileType=HiveStorageFormat.valueOf(fileFormat.toUpperCase());
      int dummyPartition=Integer.parseInt(partitionKeys.get(2).getValue());
      long rowNumber=0;
      long completedBytes=0;
      try (ConnectorPageSource pageSource=pageSourceProvider.createPageSource(transaction.getTransactionHandle(),session,hiveSplit,columnHandles)){
        MaterializedResult result=materializeSourceDataStream(session,pageSource,getTypes(columnHandles));
        assertPageSourceType(pageSource,fileType);
        for (        MaterializedRow row : result) {
          try {
            assertValueTypes(row,tableMetadata.getColumns());
          }
 catch (          RuntimeException e) {
            throw new RuntimeException("row " + rowNumber,e);
          }
          rowNumber++;
          Object value;
          value=row.getField(columnIndex.get("t_string"));
          if (rowNumber % 19 == 0) {
            assertNull(value);
          }
 else           if (rowNumber % 19 == 1) {
            assertEquals(value,"");
          }
 else {
            assertEquals(value,"test");
          }
          assertEquals(row.getField(columnIndex.get("t_tinyint")),(byte)(1 + rowNumber));
          assertEquals(row.getField(columnIndex.get("t_smallint")),(short)(2 + rowNumber));
          assertEquals(row.getField(columnIndex.get("t_int")),3 + (int)rowNumber);
          if (rowNumber % 13 == 0) {
            assertNull(row.getField(columnIndex.get("t_bigint")));
          }
 else {
            assertEquals(row.getField(columnIndex.get("t_bigint")),4 + rowNumber);
          }
          assertEquals((Float)row.getField(columnIndex.get("t_float")),5.1f + rowNumber,0.001);
          assertEquals(row.getField(columnIndex.get("t_double")),6.2 + rowNumber);
          if (rowNumber % 3 == 2) {
            assertNull(row.getField(columnIndex.get("t_boolean")));
          }
 else {
            assertEquals(row.getField(columnIndex.get("t_boolean")),rowNumber % 3 != 0);
          }
          assertEquals(row.getField(columnIndex.get("ds")),ds);
          assertEquals(row.getField(columnIndex.get("file_format")),fileFormat);
          assertEquals(row.getField(columnIndex.get("dummy")),dummyPartition);
          long newCompletedBytes=pageSource.getCompletedBytes();
          assertTrue(newCompletedBytes >= completedBytes);
          assertTrue(newCompletedBytes <= hiveSplit.getLength());
          completedBytes=newCompletedBytes;
        }
        assertTrue(completedBytes <= hiveSplit.getLength());
        assertEquals(rowNumber,100);
      }
     }
  }
 }
