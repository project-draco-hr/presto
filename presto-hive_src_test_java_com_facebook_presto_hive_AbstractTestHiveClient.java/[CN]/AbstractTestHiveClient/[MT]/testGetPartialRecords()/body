{
  ConnectorTableHandle tableHandle=getTableHandle(table);
  List<ConnectorColumnHandle> columnHandles=ImmutableList.copyOf(metadata.getColumnHandles(tableHandle).values());
  Map<String,Integer> columnIndex=indexColumns(columnHandles);
  ConnectorPartitionResult partitionResult=splitManager.getPartitions(tableHandle,TupleDomain.<ConnectorColumnHandle>all());
  List<ConnectorSplit> splits=getAllSplits(splitManager.getPartitionSplits(tableHandle,partitionResult.getPartitions()));
  assertEquals(splits.size(),this.partitions.size());
  for (  ConnectorSplit split : splits) {
    HiveSplit hiveSplit=(HiveSplit)split;
    List<HivePartitionKey> partitionKeys=hiveSplit.getPartitionKeys();
    String ds=partitionKeys.get(0).getValue();
    String fileType=partitionKeys.get(1).getValue();
    long dummy=Long.parseLong(partitionKeys.get(2).getValue());
    long baseValue=getBaseValueForFileType(fileType);
    long rowNumber=0;
    try (RecordCursor cursor=recordSetProvider.getRecordSet(hiveSplit,columnHandles).cursor()){
      assertRecordCursorType(cursor,fileType);
      while (cursor.advanceNextPosition()) {
        rowNumber++;
        assertEquals(cursor.getDouble(columnIndex.get("t_double")),baseValue + 6.2 + rowNumber);
        assertEquals(cursor.getSlice(columnIndex.get("ds")).toStringUtf8(),ds);
        assertEquals(cursor.getSlice(columnIndex.get("file_format")).toStringUtf8(),fileType);
        assertEquals(cursor.getLong(columnIndex.get("dummy")),dummy);
      }
    }
     assertEquals(rowNumber,100);
  }
}
