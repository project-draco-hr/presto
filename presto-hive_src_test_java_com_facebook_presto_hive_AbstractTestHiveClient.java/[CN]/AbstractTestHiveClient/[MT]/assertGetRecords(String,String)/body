{
  ConnectorTableHandle tableHandle=getTableHandle(new SchemaTableName(database,tableName));
  ConnectorTableMetadata tableMetadata=metadata.getTableMetadata(tableHandle);
  List<ConnectorColumnHandle> columnHandles=ImmutableList.copyOf(metadata.getColumnHandles(tableHandle).values());
  Map<String,Integer> columnIndex=indexColumns(columnHandles);
  ConnectorPartitionResult partitionResult=splitManager.getPartitions(tableHandle,TupleDomain.<ConnectorColumnHandle>all());
  List<ConnectorSplit> splits=getAllSplits(splitManager.getPartitionSplits(tableHandle,partitionResult.getPartitions()));
  assertEquals(splits.size(),1);
  HiveSplit hiveSplit=checkType(getOnlyElement(splits),HiveSplit.class,"split");
  long rowNumber=0;
  long completedBytes=0;
  try (RecordCursor cursor=recordSetProvider.getRecordSet(hiveSplit,columnHandles).cursor()){
    assertRecordCursorType(cursor,fileType);
    assertEquals(cursor.getTotalBytes(),hiveSplit.getLength());
    while (cursor.advanceNextPosition()) {
      try {
        assertReadFields(cursor,tableMetadata.getColumns());
      }
 catch (      RuntimeException e) {
        throw new RuntimeException("row " + rowNumber,e);
      }
      rowNumber++;
      Integer index;
      index=columnIndex.get("t_string");
      if ((rowNumber % 19) == 0) {
        assertTrue(cursor.isNull(index));
      }
 else {
        String stringValue=cursor.getSlice(index).toStringUtf8();
        assertEquals(stringValue,((rowNumber % 19) == 1) ? "" : "test");
      }
      assertEquals(cursor.getLong(columnIndex.get("t_tinyint")),1 + rowNumber);
      assertEquals(cursor.getLong(columnIndex.get("t_smallint")),2 + rowNumber);
      assertEquals(cursor.getLong(columnIndex.get("t_int")),3 + rowNumber);
      if ((rowNumber % 13) == 0) {
        assertTrue(cursor.isNull(columnIndex.get("t_bigint")));
      }
 else {
        assertEquals(cursor.getLong(columnIndex.get("t_bigint")),4 + rowNumber);
      }
      assertEquals(cursor.getDouble(columnIndex.get("t_float")),5.1 + rowNumber,0.001);
      assertEquals(cursor.getDouble(columnIndex.get("t_double")),6.2 + rowNumber);
      index=columnIndex.get("t_boolean");
      if ((rowNumber % 3) == 2) {
        assertTrue(cursor.isNull(index));
      }
 else {
        assertEquals(cursor.getBoolean(index),(rowNumber % 3) != 0);
      }
      index=columnIndex.get("t_timestamp");
      if (index != null) {
        if ((rowNumber % 17) == 0) {
          assertTrue(cursor.isNull(index));
        }
 else {
          long millis=new DateTime(2011,5,6,7,8,9,123,timeZone).getMillis();
          assertEquals(cursor.getLong(index),millis);
        }
      }
      index=columnIndex.get("t_binary");
      if (index != null) {
        if ((rowNumber % 23) == 0) {
          assertTrue(cursor.isNull(index));
        }
 else {
          assertEquals(cursor.getSlice(index).toStringUtf8(),"test binary");
        }
      }
      index=columnIndex.get("t_date");
      if (index != null) {
        if ((rowNumber % 37) == 0) {
          assertTrue(cursor.isNull(index));
        }
 else {
          long millis=new DateTime(2013,8,9,0,0,0,DateTimeZone.UTC).getMillis();
          assertEquals(cursor.getLong(index),millis);
        }
      }
      index=columnIndex.get("t_map");
      if (index != null) {
        if ((rowNumber % 27) == 0) {
          assertTrue(cursor.isNull(index));
        }
 else {
          assertEquals(cursor.getSlice(index).toStringUtf8(),"{\"test key\":\"test value\"}");
        }
      }
      index=columnIndex.get("t_array_string");
      if (index != null) {
        if ((rowNumber % 29) == 0) {
          assertTrue(cursor.isNull(index));
        }
 else {
          assertEquals(cursor.getSlice(index).toStringUtf8(),"[\"abc\",\"xyz\",\"data\"]");
        }
      }
      index=columnIndex.get("t_array_struct");
      if (index != null) {
        if ((rowNumber % 31) == 0) {
          assertTrue(cursor.isNull(index));
        }
 else {
          String expectedJson="[" + "{\"s_string\":\"test abc\",\"s_double\":0.1}," + "{\"s_string\":\"test xyz\",\"s_double\":0.2}]";
          assertEquals(cursor.getSlice(index).toStringUtf8(),expectedJson);
        }
      }
      index=columnIndex.get("t_complex");
      if (index != null) {
        if ((rowNumber % 33) == 0) {
          assertTrue(cursor.isNull(index));
        }
 else {
          String expectedJson="{\"1\":[" + "{\"s_string\":\"test abc\",\"s_double\":0.1}," + "{\"s_string\":\"test xyz\",\"s_double\":0.2}]}";
          assertEquals(cursor.getSlice(index).toStringUtf8(),expectedJson);
        }
      }
      assertTrue(cursor.isNull(columnIndex.get("new_column")));
      long newCompletedBytes=cursor.getCompletedBytes();
      assertTrue(newCompletedBytes >= completedBytes);
      assertTrue(newCompletedBytes <= hiveSplit.getLength());
      completedBytes=newCompletedBytes;
    }
  }
   assertTrue(completedBytes <= hiveSplit.getLength());
  assertEquals(rowNumber,100);
}
