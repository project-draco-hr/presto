{
  ConnectorMetadata metadata=newMetadata();
  ConnectorSession session=newSession();
  ConnectorTableHandle tableHandle=getTableHandle(metadata,tableBucketedStringInt);
  List<ColumnHandle> columnHandles=ImmutableList.copyOf(metadata.getColumnHandles(session,tableHandle).values());
  Map<String,Integer> columnIndex=indexColumns(columnHandles);
  assertTableIsBucketed(tableHandle);
  String testString="test";
  Integer testInt=13;
  Integer testSmallint=12;
  ImmutableMap<ColumnHandle,NullableValue> bindings=ImmutableMap.<ColumnHandle,NullableValue>builder().put(columnHandles.get(columnIndex.get("t_int")),NullableValue.of(INTEGER,(long)testInt)).put(columnHandles.get(columnIndex.get("t_string")),NullableValue.of(VARCHAR,utf8Slice(testString))).put(columnHandles.get(columnIndex.get("t_smallint")),NullableValue.of(INTEGER,(long)testSmallint)).build();
  MaterializedResult result=readTable(tableHandle,columnHandles,session,TupleDomain.fromFixedValues(bindings),OptionalInt.of(1),Optional.empty());
  boolean rowFound=false;
  for (  MaterializedRow row : result) {
    if (testString.equals(row.getField(columnIndex.get("t_string"))) && testInt.equals(row.getField(columnIndex.get("t_int"))) && testSmallint.equals(row.getField(columnIndex.get("t_smallint")))) {
      rowFound=true;
    }
  }
  assertTrue(rowFound);
}
