{
  ConnectorTableHandle tableHandle=getTableHandle(tableBucketedStringInt);
  List<ColumnHandle> columnHandles=ImmutableList.copyOf(metadata.getColumnHandles(SESSION,tableHandle).values());
  Map<String,Integer> columnIndex=indexColumns(columnHandles);
  assertTableIsBucketed(tableHandle);
  String testString="test";
  Long testInt=13L;
  Long testSmallint=12L;
  ImmutableMap<ColumnHandle,SerializableNativeValue> bindings=ImmutableMap.<ColumnHandle,SerializableNativeValue>builder().put(columnHandles.get(columnIndex.get("t_int")),new SerializableNativeValue(Long.class,testInt)).put(columnHandles.get(columnIndex.get("t_string")),new SerializableNativeValue(Slice.class,utf8Slice(testString))).put(columnHandles.get(columnIndex.get("t_smallint")),new SerializableNativeValue(Long.class,testSmallint)).build();
  MaterializedResult result=readTable(tableHandle,columnHandles,SESSION,TupleDomain.withNullableFixedValues(bindings),OptionalInt.of(1),Optional.empty());
  boolean rowFound=false;
  for (  MaterializedRow row : result) {
    if (testString.equals(row.getField(columnIndex.get("t_string"))) && testInt.equals(row.getField(columnIndex.get("t_int"))) && testSmallint.equals(row.getField(columnIndex.get("t_smallint")))) {
      rowFound=true;
    }
  }
  assertTrue(rowFound);
}
