{
  try {
    MaterializedResult result=materializeSourceDataStream(SESSION,pageSource,getTypes(columnHandles));
    assertPageSourceType(pageSource,hiveStorageFormat);
    ImmutableMap<String,Integer> columnIndex=indexColumns(tableMetadata);
    long rowNumber=0;
    long completedBytes=0;
    for (    MaterializedRow row : result) {
      try {
        assertValueTypes(row,tableMetadata.getColumns());
      }
 catch (      RuntimeException e) {
        throw new RuntimeException("row " + rowNumber,e);
      }
      rowNumber++;
      Integer index;
      index=columnIndex.get("t_string");
      if ((rowNumber % 19) == 0) {
        assertNull(row.getField(index));
      }
 else {
        assertEquals(row.getField(index),((rowNumber % 19) == 1) ? "" : "test");
      }
      assertEquals(row.getField(columnIndex.get("t_tinyint")),1 + rowNumber);
      assertEquals(row.getField(columnIndex.get("t_smallint")),2 + rowNumber);
      assertEquals(row.getField(columnIndex.get("t_int")),3 + rowNumber);
      index=columnIndex.get("t_bigint");
      if ((rowNumber % 13) == 0) {
        assertNull(row.getField(index));
      }
 else {
        assertEquals(row.getField(index),4 + rowNumber);
      }
      assertEquals((Double)row.getField(columnIndex.get("t_float")),5.1 + rowNumber,0.001);
      assertEquals(row.getField(columnIndex.get("t_double")),6.2 + rowNumber);
      index=columnIndex.get("t_boolean");
      if ((rowNumber % 3) == 2) {
        assertNull(row.getField(index));
      }
 else {
        assertEquals(row.getField(index),(rowNumber % 3) != 0);
      }
      index=columnIndex.get("t_timestamp");
      if (index != null) {
        if ((rowNumber % 17) == 0) {
          assertNull(row.getField(index));
        }
 else {
          SqlTimestamp expected=new SqlTimestamp(new DateTime(2011,5,6,7,8,9,123,timeZone).getMillis(),UTC_KEY);
          assertEquals(row.getField(index),expected);
        }
      }
      index=columnIndex.get("t_binary");
      if (index != null) {
        if ((rowNumber % 23) == 0) {
          assertNull(row.getField(index));
        }
 else {
          assertEquals(row.getField(index),new SqlVarbinary("test binary".getBytes(UTF_8)));
        }
      }
      index=columnIndex.get("t_date");
      if (index != null) {
        if ((rowNumber % 37) == 0) {
          assertNull(row.getField(index));
        }
 else {
          SqlDate expected=new SqlDate(new DateTime(2013,8,9,0,0,0,DateTimeZone.UTC).getMillis(),UTC_KEY);
          assertEquals(row.getField(index),expected);
        }
      }
      index=columnIndex.get("t_map");
      if (index != null) {
        if ((rowNumber % 27) == 0) {
          assertNull(row.getField(index));
        }
 else {
          assertEquals(row.getField(index),ImmutableMap.of("test key","test value"));
        }
      }
      index=columnIndex.get("t_array_string");
      if (index != null) {
        if ((rowNumber % 29) == 0) {
          assertNull(row.getField(index));
        }
 else {
          assertEquals(row.getField(index),ImmutableList.of("abc","xyz","data"));
        }
      }
      index=columnIndex.get("t_array_struct");
      if (index != null) {
        if ((rowNumber % 31) == 0) {
          assertNull(row.getField(index));
        }
 else {
          String expectedJson1="{\"s_string\":\"test abc\",\"s_double\":0.1}";
          String expectedJson2="{\"s_string\":\"test xyz\",\"s_double\":0.2}";
          assertEquals(row.getField(index),ImmutableList.of(expectedJson1,expectedJson2));
        }
      }
      index=columnIndex.get("t_complex");
      if (index != null) {
        if ((rowNumber % 33) == 0) {
          assertNull(row.getField(index));
        }
 else {
          String expectedJson1="{\"s_string\":\"test abc\",\"s_double\":0.1}";
          String expectedJson2="{\"s_string\":\"test xyz\",\"s_double\":0.2}";
          assertEquals(row.getField(index),ImmutableMap.of(1L,ImmutableList.of(expectedJson1,expectedJson2)));
        }
      }
      assertNull(row.getField(columnIndex.get("new_column")));
      long newCompletedBytes=pageSource.getCompletedBytes();
      assertTrue(newCompletedBytes >= completedBytes);
      assertTrue(newCompletedBytes <= hiveSplit.getLength());
      completedBytes=newCompletedBytes;
    }
    assertTrue(completedBytes <= hiveSplit.getLength());
    assertEquals(rowNumber,100);
  }
  finally {
    pageSource.close();
  }
}
