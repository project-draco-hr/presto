{
  List<ColumnMetadata> columns=ImmutableList.<ColumnMetadata>builder().add(new ColumnMetadata("sales",BIGINT,1,false)).build();
  ConnectorTableMetadata tableMetadata=new ConnectorTableMetadata(temporaryCreateSampledTable,columns,tableOwner,true);
  ConnectorOutputTableHandle outputHandle=metadata.beginCreateTable(tableMetadata);
  RecordSink sink=recordSinkProvider.getRecordSink(outputHandle);
  sink.beginRecord(8);
  sink.appendLong(2);
  sink.finishRecord();
  sink.beginRecord(5);
  sink.appendLong(3);
  sink.finishRecord();
  sink.beginRecord(7);
  sink.appendLong(4);
  sink.finishRecord();
  String fragment=sink.commit();
  metadata.commitCreateTable(outputHandle,ImmutableList.of(fragment));
  ConnectorTableHandle tableHandle=getTableHandle(temporaryCreateSampledTable);
  List<ConnectorColumnHandle> columnHandles=ImmutableList.<ConnectorColumnHandle>builder().addAll(metadata.getColumnHandles(tableHandle).values()).add(metadata.getSampleWeightColumnHandle(tableHandle)).build();
  assertEquals(columnHandles.size(),2);
  tableMetadata=metadata.getTableMetadata(getTableHandle(temporaryCreateSampledTable));
  assertEquals(tableMetadata.getOwner(),tableOwner);
  Map<String,ColumnMetadata> columnMap=uniqueIndex(tableMetadata.getColumns(),columnNameGetter());
  assertEquals(columnMap.size(),1);
  assertPrimitiveField(columnMap,0,"sales",BIGINT,false);
  ConnectorPartitionResult partitionResult=splitManager.getPartitions(tableHandle,TupleDomain.<ConnectorColumnHandle>all());
  assertEquals(partitionResult.getPartitions().size(),1);
  ConnectorSplitSource splitSource=splitManager.getPartitionSplits(tableHandle,partitionResult.getPartitions());
  ConnectorSplit split=getOnlyElement(getAllSplits(splitSource));
  try (RecordCursor cursor=recordSetProvider.getRecordSet(split,columnHandles).cursor()){
    assertRecordCursorType(cursor,"rcfile-binary");
    assertTrue(cursor.advanceNextPosition());
    assertEquals(cursor.getLong(0),2);
    assertEquals(cursor.getLong(1),8);
    assertTrue(cursor.advanceNextPosition());
    assertEquals(cursor.getLong(0),3);
    assertEquals(cursor.getLong(1),5);
    assertTrue(cursor.advanceNextPosition());
    assertEquals(cursor.getLong(0),4);
    assertEquals(cursor.getLong(1),7);
    assertFalse(cursor.advanceNextPosition());
  }
 }
