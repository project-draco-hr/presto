{
  for (int columnIndex=0; columnIndex < schema.size(); columnIndex++) {
    ColumnMetadata column=schema.get(columnIndex);
    Object value=row.getField(columnIndex);
    if (value != null) {
      if (BOOLEAN.equals(column.getType())) {
        assertInstanceOf(value,Boolean.class);
      }
 else       if (TINYINT.equals(column.getType())) {
        assertInstanceOf(value,Byte.class);
      }
 else       if (SMALLINT.equals(column.getType())) {
        assertInstanceOf(value,Short.class);
      }
 else       if (INTEGER.equals(column.getType())) {
        assertInstanceOf(value,Integer.class);
      }
 else       if (BIGINT.equals(column.getType())) {
        assertInstanceOf(value,Long.class);
      }
 else       if (DOUBLE.equals(column.getType())) {
        assertInstanceOf(value,Double.class);
      }
 else       if (isVarcharType(column.getType())) {
        assertInstanceOf(value,String.class);
      }
 else       if (isCharType(column.getType())) {
        assertInstanceOf(value,String.class);
      }
 else       if (VARBINARY.equals(column.getType())) {
        assertInstanceOf(value,SqlVarbinary.class);
      }
 else       if (TIMESTAMP.equals(column.getType())) {
        assertInstanceOf(value,SqlTimestamp.class);
      }
 else       if (DATE.equals(column.getType())) {
        assertInstanceOf(value,SqlDate.class);
      }
 else       if (column.getType() instanceof ArrayType) {
        assertInstanceOf(value,List.class);
      }
 else       if (column.getType() instanceof MapType) {
        assertInstanceOf(value,Map.class);
      }
 else {
        fail("Unknown primitive type " + columnIndex);
      }
    }
  }
}
