{
  List<ColumnMetadata> columns=ImmutableList.<ColumnMetadata>builder().add(new ColumnMetadata("id",BIGINT,1,false)).add(new ColumnMetadata("t_string",VARCHAR,2,false)).add(new ColumnMetadata("t_bigint",BIGINT,3,false)).add(new ColumnMetadata("t_double",DOUBLE,4,false)).add(new ColumnMetadata("t_boolean",BOOLEAN,5,false)).build();
  ConnectorTableMetadata tableMetadata=new ConnectorTableMetadata(temporaryCreateTable,columns,tableOwner);
  OutputTableHandle outputHandle=metadata.beginCreateTable(tableMetadata);
  RecordSink sink=recordSinkProvider.getRecordSink(outputHandle);
  sink.beginRecord(1);
  sink.appendLong(1);
  sink.appendString("hello".getBytes(UTF_8));
  sink.appendLong(123);
  sink.appendDouble(43.5);
  sink.appendBoolean(true);
  sink.finishRecord();
  sink.beginRecord(1);
  sink.appendLong(2);
  sink.appendNull();
  sink.appendNull();
  sink.appendNull();
  sink.appendNull();
  sink.finishRecord();
  sink.beginRecord(1);
  sink.appendLong(3);
  sink.appendString("bye".getBytes(UTF_8));
  sink.appendLong(456);
  sink.appendDouble(98.1);
  sink.appendBoolean(false);
  sink.finishRecord();
  String fragment=sink.commit();
  metadata.commitCreateTable(outputHandle,ImmutableList.of(fragment));
  TableHandle tableHandle=getTableHandle(temporaryCreateTable);
  List<ColumnHandle> columnHandles=ImmutableList.copyOf(metadata.getColumnHandles(tableHandle).values());
  tableMetadata=metadata.getTableMetadata(getTableHandle(temporaryCreateTable));
  assertEquals(tableMetadata.getOwner(),tableOwner);
  Map<String,ColumnMetadata> columnMap=uniqueIndex(tableMetadata.getColumns(),columnNameGetter());
  assertPrimitiveField(columnMap,0,"id",BIGINT,false);
  assertPrimitiveField(columnMap,1,"t_string",VARCHAR,false);
  assertPrimitiveField(columnMap,2,"t_bigint",BIGINT,false);
  assertPrimitiveField(columnMap,3,"t_double",DOUBLE,false);
  assertPrimitiveField(columnMap,4,"t_boolean",BOOLEAN,false);
  PartitionResult partitionResult=splitManager.getPartitions(tableHandle,TupleDomain.<ColumnHandle>all());
  assertEquals(partitionResult.getPartitions().size(),1);
  SplitSource splitSource=splitManager.getPartitionSplits(tableHandle,partitionResult.getPartitions());
  Split split=getOnlyElement(getAllSplits(splitSource));
  try (RecordCursor cursor=recordSetProvider.getRecordSet(split,columnHandles).cursor()){
    assertRecordCursorType(cursor,"rcfile-binary");
    assertTrue(cursor.advanceNextPosition());
    assertEquals(cursor.getLong(0),1);
    assertEquals(cursor.getString(1),"hello".getBytes(UTF_8));
    assertEquals(cursor.getLong(2),123);
    assertEquals(cursor.getDouble(3),43.5);
    assertEquals(cursor.getBoolean(4),true);
    assertTrue(cursor.advanceNextPosition());
    assertEquals(cursor.getLong(0),2);
    assertTrue(cursor.isNull(1));
    assertTrue(cursor.isNull(2));
    assertTrue(cursor.isNull(3));
    assertTrue(cursor.isNull(4));
    assertTrue(cursor.advanceNextPosition());
    assertEquals(cursor.getLong(0),3);
    assertEquals(cursor.getString(1),"bye".getBytes(UTF_8));
    assertEquals(cursor.getLong(2),456);
    assertEquals(cursor.getDouble(3),98.1);
    assertEquals(cursor.getBoolean(4),false);
    assertFalse(cursor.advanceNextPosition());
  }
 }
