{
  Symbol symbol=new Symbol("symbol");
  ImmutableMap<Symbol,Integer> symbolToInputMappings=ImmutableMap.of(symbol,0);
  assertProjection("symbol",true,symbolToInputMappings,ImmutableMap.<Symbol,Type>of(symbol,BOOLEAN),0,createBlock(BOOLEAN,true));
  assertProjection("symbol",null,symbolToInputMappings,ImmutableMap.<Symbol,Type>of(symbol,BOOLEAN),0,createBlock(BOOLEAN,null));
  assertProjection("symbol",42L,symbolToInputMappings,ImmutableMap.<Symbol,Type>of(symbol,BIGINT),0,createBlock(BIGINT,42));
  assertProjection("symbol",null,symbolToInputMappings,ImmutableMap.<Symbol,Type>of(symbol,BIGINT),0,createBlock(BIGINT,null));
  assertProjection("symbol",11.1,symbolToInputMappings,ImmutableMap.<Symbol,Type>of(symbol,DOUBLE),0,createBlock(DOUBLE,11.1));
  assertProjection("symbol",null,symbolToInputMappings,ImmutableMap.<Symbol,Type>of(symbol,DOUBLE),0,createBlock(DOUBLE,null));
  assertProjection("symbol","foo",symbolToInputMappings,ImmutableMap.<Symbol,Type>of(symbol,VARCHAR),0,createBlock(VARCHAR,"foo"));
  assertProjection("symbol",null,symbolToInputMappings,ImmutableMap.<Symbol,Type>of(symbol,VARCHAR),0,createBlock(VARCHAR,null));
}
