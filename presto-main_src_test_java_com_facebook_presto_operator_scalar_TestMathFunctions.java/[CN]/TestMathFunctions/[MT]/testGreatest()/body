{
  assertFunction("greatest(INTEGER'1', INTEGER'2')",INTEGER,2);
  assertFunction("greatest(INTEGER'-1', INTEGER'-2')",INTEGER,-1);
  assertFunction("greatest(INTEGER'5', INTEGER'4', INTEGER'3', INTEGER'2', INTEGER'1', INTEGER'2', INTEGER'3', INTEGER'4', INTEGER'1', INTEGER'5')",INTEGER,5);
  assertFunction("greatest(INTEGER'-1')",INTEGER,-1);
  assertFunction("greatest(INTEGER'5', INTEGER'4', CAST(NULL AS INTEGER), INTEGER'3')",INTEGER,null);
  assertFunction("greatest(1, 2)",BIGINT,2L);
  assertFunction("greatest(-1, -2)",BIGINT,-1L);
  assertFunction("greatest(5, 4, 3, 2, 1, 2, 3, 4, 1, 5)",BIGINT,5L);
  assertFunction("greatest(-1)",BIGINT,-1L);
  assertFunction("greatest(5, 4, CAST(NULL as BIGINT), 3)",BIGINT,null);
  assertFunction("greatest(1.5, 2.3)",DOUBLE,2.3);
  assertFunction("greatest(-1.5, -2.3)",DOUBLE,-1.5);
  assertFunction("greatest(-1.5, -2.3, -5/3)",DOUBLE,-1.0);
  assertFunction("greatest(1.5, -1.0 / 0.0, 1.0 / 0.0)",DOUBLE,Double.POSITIVE_INFINITY);
  assertFunction("greatest(5, 4, CAST(NULL as DOUBLE), 3)",DOUBLE,null);
  assertFunction("greatest(INTEGER'1', 2)",BIGINT,2L);
  assertFunction("greatest(1.0, INTEGER'2')",DOUBLE,2.0);
  assertFunction("greatest(1, 2.0)",DOUBLE,2.0);
  assertFunction("greatest(1.0, 2)",DOUBLE,2.0);
  assertFunction("greatest(5.0, 4, CAST(NULL as DOUBLE), 3)",DOUBLE,null);
  assertFunction("greatest(5.0, 4, CAST(NULL as BIGINT), 3)",DOUBLE,null);
  assertInvalidFunction("greatest(1.5, 0.0 / 0.0)","Invalid argument to greatest(): NaN");
}
