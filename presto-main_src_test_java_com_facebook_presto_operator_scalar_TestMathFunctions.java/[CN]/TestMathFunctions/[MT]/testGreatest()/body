{
  assertFunction("greatest(1, 2)",INTEGER,2);
  assertFunction("greatest(-1, -2)",INTEGER,-1);
  assertFunction("greatest(5, 4, 3, 2, 1, 2, 3, 4, 1, 5)",INTEGER,5);
  assertFunction("greatest(-1)",INTEGER,-1);
  assertFunction("greatest(5, 4, CAST(NULL AS INTEGER), 3)",INTEGER,null);
  assertFunction("greatest(10000000000, 20000000000)",BIGINT,20000000000L);
  assertFunction("greatest(-10000000000, -20000000000)",BIGINT,-10000000000L);
  assertFunction("greatest(5000000000, 4, 3, 2, 1000000000, 2, 3, 4, 1, 5000000000)",BIGINT,5000000000L);
  assertFunction("greatest(-10000000000)",BIGINT,-10000000000L);
  assertFunction("greatest(5000000000, 4000000000, CAST(NULL as BIGINT), 3000000000)",BIGINT,null);
  assertFunction("greatest(1.5, 2.3)",DOUBLE,2.3);
  assertFunction("greatest(-1.5, -2.3)",DOUBLE,-1.5);
  assertFunction("greatest(-1.5, -2.3, -5/3)",DOUBLE,-1.0);
  assertFunction("greatest(1.5, -1.0 / 0.0, 1.0 / 0.0)",DOUBLE,Double.POSITIVE_INFINITY);
  assertFunction("greatest(5, 4, CAST(NULL as DOUBLE), 3)",DOUBLE,null);
  assertFunction("greatest(1, 20000000000)",BIGINT,20000000000L);
  assertFunction("greatest(1, BIGINT '2')",BIGINT,2L);
  assertFunction("greatest(1.0, 2)",DOUBLE,2.0);
  assertFunction("greatest(1, 2.0)",DOUBLE,2.0);
  assertFunction("greatest(1.0, 2)",DOUBLE,2.0);
  assertFunction("greatest(5.0, 4, CAST(NULL as DOUBLE), 3)",DOUBLE,null);
  assertFunction("greatest(5.0, 4, CAST(NULL as BIGINT), 3)",DOUBLE,null);
  assertInvalidFunction("greatest(1.5, 0.0 / 0.0)","Invalid argument to greatest(): NaN");
}
