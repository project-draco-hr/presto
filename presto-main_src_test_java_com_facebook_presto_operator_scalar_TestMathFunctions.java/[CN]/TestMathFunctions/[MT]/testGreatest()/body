{
  assertFunction("greatest(1, 2)",BIGINT,2);
  assertFunction("greatest(-1, -2)",BIGINT,-1);
  assertFunction("greatest(5, 4, 3, 2, 1, 2, 3, 4, 1, 5)",BIGINT,5);
  assertFunction("greatest(-1)",BIGINT,-1);
  assertFunction("greatest(1.5, 2.3)",DOUBLE,2.3);
  assertFunction("greatest(-1.5, -2.3)",DOUBLE,-1.5);
  assertFunction("greatest(-1.5, -2.3, -5/3)",DOUBLE,-1.0);
  assertFunction("greatest(1.5, -1.0 / 0.0, 1.0 / 0.0)",DOUBLE,Double.POSITIVE_INFINITY);
  assertFunction("greatest(1, 2.0)",DOUBLE,2.0);
  assertFunction("greatest(1.0, 2)",DOUBLE,2.0);
  assertInvalidFunction("greatest(1.5, 0.0 / 0.0)",DOUBLE,"Invalid argument to greatest(): NaN");
}
