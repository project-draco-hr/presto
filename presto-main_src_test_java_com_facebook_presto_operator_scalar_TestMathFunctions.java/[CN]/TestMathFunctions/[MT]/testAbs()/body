{
  assertFunction("abs(TINYINT'123')",TINYINT,(byte)123);
  assertFunction("abs(TINYINT'-123')",TINYINT,(byte)123);
  assertFunction("abs(CAST(NULL AS TINYINT))",TINYINT,null);
  assertFunction("abs(SMALLINT'123')",SMALLINT,(short)123);
  assertFunction("abs(SMALLINT'-123')",SMALLINT,(short)123);
  assertFunction("abs(CAST(NULL AS SMALLINT))",SMALLINT,null);
  assertFunction("abs(123)",INTEGER,123);
  assertFunction("abs(-123)",INTEGER,123);
  assertFunction("abs(CAST(NULL AS INTEGER))",INTEGER,null);
  assertFunction("abs(BIGINT '123')",BIGINT,123L);
  assertFunction("abs(BIGINT '-123')",BIGINT,123L);
  assertFunction("abs(12300000000)",BIGINT,12300000000L);
  assertFunction("abs(-12300000000)",BIGINT,12300000000L);
  assertFunction("abs(CAST(NULL AS BIGINT))",BIGINT,null);
  assertFunction("abs(123.0)",DOUBLE,123.0);
  assertFunction("abs(-123.0)",DOUBLE,123.0);
  assertFunction("abs(123.45)",DOUBLE,123.45);
  assertFunction("abs(-123.45)",DOUBLE,123.45);
  assertFunction("abs(CAST(NULL AS DOUBLE))",DOUBLE,null);
  assertFunction("abs(REAL '-754.1985')",REAL,754.1985f);
  assertInvalidFunction("abs(TINYINT'" + Byte.MIN_VALUE + "')",NUMERIC_VALUE_OUT_OF_RANGE);
  assertInvalidFunction("abs(SMALLINT'" + Short.MIN_VALUE + "')",NUMERIC_VALUE_OUT_OF_RANGE);
  assertInvalidFunction("abs(INTEGER'" + Integer.MIN_VALUE + "')",NUMERIC_VALUE_OUT_OF_RANGE);
  assertInvalidFunction("abs(-9223372036854775807 - if(rand() < 10, 1, 1))",NUMERIC_VALUE_OUT_OF_RANGE);
  assertFunction("abs(DECIMAL '123.45')",createDecimalType(5,2),SqlDecimal.of("12345",5,2));
  assertFunction("abs(DECIMAL '-123.45')",createDecimalType(5,2),SqlDecimal.of("12345",5,2));
  assertFunction("abs(DECIMAL '1234567890123456.78')",createDecimalType(18,2),SqlDecimal.of("123456789012345678",18,2));
  assertFunction("abs(DECIMAL '-1234567890123456.78')",createDecimalType(18,2),SqlDecimal.of("123456789012345678",18,2));
  assertFunction("abs(CAST(NULL AS DECIMAL(1,0)))",createDecimalType(1,0),null);
}
