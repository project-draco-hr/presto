{
  assertFunction("width_bucket(3.14, 0, 4, 3)",BIGINT,3L);
  assertFunction("width_bucket(2, 0, 4, 3)",BIGINT,2L);
  assertFunction("width_bucket(infinity(), 0, 4, 3)",BIGINT,4L);
  assertFunction("width_bucket(-1, 0, 3.2, 4)",BIGINT,0L);
  assertFunction("width_bucket(3.14, 4, 0, 3)",BIGINT,1L);
  assertFunction("width_bucket(2, 4, 0, 3)",BIGINT,2L);
  assertFunction("width_bucket(infinity(), 4, 0, 3)",BIGINT,0L);
  assertFunction("width_bucket(-1, 3.2, 0, 4)",BIGINT,5L);
  assertInvalidFunction("width_bucket(3.14, 0, 4, 0)","bucketCount must be greater than 0");
  assertInvalidFunction("width_bucket(3.14, 0, 4, -1)","bucketCount must be greater than 0");
  assertInvalidFunction("width_bucket(nan(), 0, 4, 3)","operand must not be NaN");
  assertInvalidFunction("width_bucket(3.14, -1, -1, 3)","bounds cannot equal each other");
  assertInvalidFunction("width_bucket(3.14, nan(), -1, 3)","first bound must be finite");
  assertInvalidFunction("width_bucket(3.14, -1, nan(), 3)","second bound must be finite");
  assertInvalidFunction("width_bucket(3.14, infinity(), -1, 3)","first bound must be finite");
  assertInvalidFunction("width_bucket(3.14, -1, infinity(), 3)","second bound must be finite");
}
