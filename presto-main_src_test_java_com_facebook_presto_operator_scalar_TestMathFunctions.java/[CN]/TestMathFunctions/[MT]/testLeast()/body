{
  assertFunction("least(TINYINT'1', TINYINT'2')",TINYINT,(byte)1);
  assertFunction("least(TINYINT'-1', TINYINT'-2')",TINYINT,(byte)-2);
  assertFunction("least(TINYINT'5', TINYINT'4', TINYINT'3', TINYINT'2', TINYINT'1', TINYINT'2', TINYINT'3', TINYINT'4', TINYINT'1', TINYINT'5')",TINYINT,(byte)1);
  assertFunction("least(TINYINT'-1')",TINYINT,(byte)-1);
  assertFunction("least(TINYINT'5', TINYINT'4', CAST(NULL AS TINYINT), TINYINT'3')",TINYINT,null);
  assertFunction("least(SMALLINT'1', SMALLINT'2')",SMALLINT,(short)1);
  assertFunction("least(SMALLINT'-1', SMALLINT'-2')",SMALLINT,(short)-2);
  assertFunction("least(SMALLINT'5', SMALLINT'4', SMALLINT'3', SMALLINT'2', SMALLINT'1', SMALLINT'2', SMALLINT'3', SMALLINT'4', SMALLINT'1', SMALLINT'5')",SMALLINT,(short)1);
  assertFunction("least(SMALLINT'-1')",SMALLINT,(short)-1);
  assertFunction("least(SMALLINT'5', SMALLINT'4', CAST(NULL AS SMALLINT), SMALLINT'3')",SMALLINT,null);
  assertFunction("least(1, 2)",INTEGER,1);
  assertFunction("least(-1, -2)",INTEGER,-2);
  assertFunction("least(5, 4, 3, 2, 1, 2, 3, 4, 1, 5)",INTEGER,1);
  assertFunction("least(-1)",INTEGER,-1);
  assertFunction("least(5, 4, CAST(NULL AS INTEGER), 3)",INTEGER,null);
  assertFunction("least(10000000000, 20000000000)",BIGINT,10000000000L);
  assertFunction("least(-10000000000, -20000000000)",BIGINT,-20000000000L);
  assertFunction("least(50000000000, 40000000000, 30000000000, 20000000000, 50000000000)",BIGINT,20000000000L);
  assertFunction("least(-10000000000)",BIGINT,-10000000000L);
  assertFunction("least(500000000, 400000000, CAST(NULL as BIGINT), 300000000)",BIGINT,null);
  assertFunction("least(1.5, 2.3)",DOUBLE,1.5);
  assertFunction("least(-1.5, -2.3)",DOUBLE,-2.3);
  assertFunction("least(-1.5, -2.3, -5/3)",DOUBLE,-2.3);
  assertFunction("least(1.5, -1.0 / 0.0, 1.0 / 0.0)",DOUBLE,Double.NEGATIVE_INFINITY);
  assertFunction("least(5, 4, CAST(NULL as DOUBLE), 3)",DOUBLE,null);
  assertFunction("least(REAL '1.5', 2.3)",DOUBLE,(double)1.5f);
  assertFunction("least(REAL '-1.5', -2.3)",DOUBLE,-2.3);
  assertFunction("least(-2.3, REAL '-0.4', -5/3)",DOUBLE,-2.3);
  assertFunction("least(1.5, REAL '-1.0' / 0.0, 1.0 / 0.0)",DOUBLE,(double)(-1.0f / 0.0f));
  assertFunction("least(REAL '5', 4, CAST(NULL as DOUBLE), 3)",DOUBLE,null);
  assertFunction("least(1, 20000000000)",BIGINT,1L);
  assertFunction("least(1, BIGINT '2')",BIGINT,1L);
  assertFunction("least(1.0, 2)",DOUBLE,1.0);
  assertFunction("least(1, 2.0)",DOUBLE,1.0);
  assertFunction("least(1.0, 2)",DOUBLE,1.0);
  assertFunction("least(5.0, 4, CAST(NULL as DOUBLE), 3)",DOUBLE,null);
  assertFunction("least(5.0, 4, CAST(NULL as BIGINT), 3)",DOUBLE,null);
  assertInvalidFunction("least(1.5, 0.0 / 0.0)","Invalid argument to least(): NaN");
}
