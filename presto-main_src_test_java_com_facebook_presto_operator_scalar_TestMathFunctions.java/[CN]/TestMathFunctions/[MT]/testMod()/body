{
  for (  int left : intLefts) {
    for (    int right : intRights) {
      assertFunction("mod(" + left + ", "+ right+ ")",INTEGER,(left % right));
    }
  }
  for (  int left : intLefts) {
    for (    int right : intRights) {
      assertFunction("mod( BIGINT '" + left + "' , BIGINT '"+ right+ "')",BIGINT,(long)(left % right));
    }
  }
  for (  long left : intLefts) {
    for (    long right : intRights) {
      assertFunction("mod(" + left * 10000000000L + ", " + right * 10000000000L + ")",BIGINT,(left * 10000000000L) % (right * 10000000000L));
    }
  }
  for (  int left : intLefts) {
    for (    double right : doubleRights) {
      assertFunction("mod(" + left + ", "+ right+ ")",DOUBLE,left % right);
    }
  }
  for (  int left : intLefts) {
    for (    double right : doubleRights) {
      assertFunction("mod(" + left + ", REAL '"+ (float)right+ "')",REAL,left % (float)right);
    }
  }
  for (  double left : doubleLefts) {
    for (    long right : intRights) {
      assertFunction("mod(" + left + ", "+ right+ ")",DOUBLE,left % right);
    }
  }
  for (  double left : doubleLefts) {
    for (    long right : intRights) {
      assertFunction("mod(REAL '" + (float)left + "', "+ right+ ")",REAL,(float)left % right);
    }
  }
  for (  double left : doubleLefts) {
    for (    double right : doubleRights) {
      assertFunction("mod(" + left + ", "+ right+ ")",DOUBLE,left % right);
    }
  }
  for (  double left : doubleLefts) {
    for (    double right : doubleRights) {
      assertFunction("mod(REAL '" + (float)left + "', REAL '"+ (float)right+ "')",REAL,(float)left % (float)right);
    }
  }
  assertFunction("mod(5.0, NULL)",DOUBLE,null);
  assertFunction("mod(NULL, 5.0)",DOUBLE,null);
  assertFunction("mod(DECIMAL '0.0', DECIMAL '2.0')",createDecimalType(1,1),SqlDecimal.of("0.0"));
  assertFunction("mod(DECIMAL '13.0', DECIMAL '5.0')",createDecimalType(2,1),SqlDecimal.of("3.0"));
  assertFunction("mod(DECIMAL '-13.0', DECIMAL '5.0')",createDecimalType(2,1),SqlDecimal.of("-3.0"));
  assertFunction("mod(DECIMAL '13.0', DECIMAL '-5.0')",createDecimalType(2,1),SqlDecimal.of("3.0"));
  assertFunction("mod(DECIMAL '-13.0', DECIMAL '-5.0')",createDecimalType(2,1),SqlDecimal.of("-3.0"));
  assertFunction("mod(DECIMAL '5.0', DECIMAL '2.5')",createDecimalType(2,1),SqlDecimal.of("0.0"));
  assertFunction("mod(DECIMAL '5.0', DECIMAL '2.05')",createDecimalType(3,2),SqlDecimal.of("0.90"));
  assertFunction("mod(DECIMAL '5.0', DECIMAL '2.55')",createDecimalType(3,2),SqlDecimal.of("2.45"));
  assertFunction("mod(DECIMAL '5.0001', DECIMAL '2.55')",createDecimalType(5,4),SqlDecimal.of("2.4501"));
  assertFunction("mod(DECIMAL '12345678901234567.90', DECIMAL '12345678901234567.89')",createDecimalType(19,2),SqlDecimal.of("0.01"));
  assertFunction("mod(DECIMAL '5.0', CAST(NULL as DECIMAL(1,0)))",createDecimalType(2,1),null);
  assertFunction("mod(CAST(NULL as DECIMAL(1,0)), DECIMAL '5.0')",createDecimalType(2,1),null);
  assertInvalidFunction("mod(DECIMAL '5.0', DECIMAL '0')",DIVISION_BY_ZERO);
  assertFunction("mod(DOUBLE '5.0', NULL)",DOUBLE,null);
  assertFunction("mod(NULL, DOUBLE '5.0')",DOUBLE,null);
}
