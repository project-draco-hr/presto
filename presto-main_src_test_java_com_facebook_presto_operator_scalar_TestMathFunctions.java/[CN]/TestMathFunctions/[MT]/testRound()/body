{
  assertFunction("round( 3)",BIGINT,3);
  assertFunction("round(-3)",BIGINT,-3);
  assertFunction("round( 3.0)",DOUBLE,3.0);
  assertFunction("round(-3.0)",DOUBLE,-3.0);
  assertFunction("round( 3.499)",DOUBLE,3.0);
  assertFunction("round(-3.499)",DOUBLE,-3.0);
  assertFunction("round( 3.5)",DOUBLE,4.0);
  assertFunction("round(-3.5)",DOUBLE,-4.0);
  assertFunction("round(-3.5001)",DOUBLE,-4.0);
  assertFunction("round(-3.99)",DOUBLE,-4.0);
  assertFunction("round( 3, 0)",BIGINT,3);
  assertFunction("round(-3, 0)",BIGINT,-3);
  assertFunction("round( 3.0, 0)",DOUBLE,3.0);
  assertFunction("round(-3.0, 0)",DOUBLE,-3.0);
  assertFunction("round( 3.499, 0)",DOUBLE,3.0);
  assertFunction("round(-3.499, 0)",DOUBLE,-3.0);
  assertFunction("round( 3.5, 0)",DOUBLE,4.0);
  assertFunction("round(-3.5, 0)",DOUBLE,-4.0);
  assertFunction("round(-3.5001, 0)",DOUBLE,-4.0);
  assertFunction("round(-3.99, 0)",DOUBLE,-4.0);
  assertFunction("round( 3, 1)",BIGINT,3);
  assertFunction("round(-3, 1)",BIGINT,-3);
  assertFunction("round( 3.0, 1)",DOUBLE,3.0);
  assertFunction("round(-3.0, 1)",DOUBLE,-3.0);
  assertFunction("round( 3.499, 1)",DOUBLE,3.5);
  assertFunction("round(-3.499, 1)",DOUBLE,-3.5);
  assertFunction("round( 3.5, 1)",DOUBLE,3.5);
  assertFunction("round(-3.5, 1)",DOUBLE,-3.5);
  assertFunction("round(-3.5001, 1)",DOUBLE,-3.5);
  assertFunction("round(-3.99, 1)",DOUBLE,-4.0);
}
