{
  BytecodeBlock block=new BytecodeBlock().setDescription("Constructor for " + rowType.toString());
  CallSiteBinder binder=context.getCallSiteBinder();
  Scope scope=context.getScope();
  List<Type> types=rowType.getTypeParameters();
  block.comment("BlockBuilder blockBuilder = new InterleavedBlockBuilder(types, new BlockBuilderStatus(), 1);");
  Variable blockBuilder=scope.createTempVariable(BlockBuilder.class);
  Binding typesBinding=binder.bind(types,List.class);
  block.append(blockBuilder.set(newInstance(InterleavedBlockBuilder.class,loadConstant(typesBinding),newInstance(BlockBuilderStatus.class),constantInt(1))));
  for (int i=0; i < arguments.size(); ++i) {
    Type fieldType=types.get(i);
    Class<?> javaType=fieldType.getJavaType();
    if (javaType == void.class) {
      block.comment(i + "-th field type of row is undefined");
      block.append(blockBuilder.invoke("appendNull",BlockBuilder.class).pop());
    }
 else {
      Variable field=scope.createTempVariable(javaType);
      block.comment("Clean wasNull and Generate + " + i + "-th field of row");
      block.append(context.wasNull().set(constantFalse()));
      block.append(context.generate(arguments.get(i)));
      block.putVariable(field);
      block.append(new IfStatement().condition(context.wasNull()).ifTrue(blockBuilder.invoke("appendNull",BlockBuilder.class).pop()).ifFalse(constantType(binder,fieldType).writeValue(blockBuilder,field).pop()));
    }
  }
  block.comment("put (Block) blockBuilder.build(); wasNull = false;");
  block.append(blockBuilder.invoke("build",Block.class));
  block.append(context.wasNull().set(constantFalse()));
  return block;
}
