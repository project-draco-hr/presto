{
  OperatorStats operatorStats=new OperatorStats();
  CpuTimer cpuTimer=new CpuTimer();
  long[] outputStats=execute(operatorStats);
  CpuDuration executionTime=cpuTimer.elapsedTime();
  SplitExecutionStats snapshot=operatorStats.snapshot();
  long inputRows=snapshot.getCompletedPositions().getTotalCount();
  long inputBytes=snapshot.getCompletedDataSize().getTotalCount();
  long outputRows=outputStats[0];
  long outputBytes=outputStats[1];
  double inputMegaBytes=new DataSize(inputBytes,BYTE).getValue(MEGABYTE);
  return ImmutableMap.<String,Long>builder().put("elapsed_millis",(long)executionTime.getWall().toMillis()).put("input_rows_per_second",(long)(inputRows / executionTime.getWall().convertTo(SECONDS))).put("output_rows_per_second",(long)(outputRows / executionTime.getWall().convertTo(SECONDS))).put("input_megabytes",(long)inputMegaBytes).put("input_megabytes_per_second",(long)(inputMegaBytes / executionTime.getWall().convertTo(SECONDS))).put("wall_nanos",(long)executionTime.getWall().convertTo(NANOSECONDS)).put("cpu_nanos",(long)executionTime.getCpu().convertTo(NANOSECONDS)).put("user_nanos",(long)executionTime.getUser().convertTo(NANOSECONDS)).put("input_rows",inputRows).put("input_bytes",inputBytes).put("output_rows",outputRows).put("output_bytes",outputBytes).build();
}
