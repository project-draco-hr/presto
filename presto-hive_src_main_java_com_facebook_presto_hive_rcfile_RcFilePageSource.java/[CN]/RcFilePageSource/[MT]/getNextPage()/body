{
  try {
    pageId++;
    positionInBatch+=currentPageSize;
    if (positionInBatch >= currentBatchSize) {
      if (!recordReader.nextColumnsBatch()) {
        close();
        return null;
      }
      currentBatchSize=recordReader.getCurrentKeyBufferObj().getNumberRows();
      positionInBatch=0;
      Arrays.fill(columnBatchLoaded,false);
    }
    currentPageSize=Ints.checkedCast(Math.min(currentBatchSize - positionInBatch,MAX_PAGE_SIZE));
    RcFileColumnsBatch rcFileColumnsBatch=new RcFileColumnsBatch(pageId,positionInBatch);
    Block[] blocks=new Block[hiveColumnIndexes.length];
    for (int fieldId=0; fieldId < blocks.length; fieldId++) {
      Type type=types.get(fieldId);
      if (constantBlocks[fieldId] != null) {
        blocks[fieldId]=constantBlocks[fieldId].getRegion(0,currentPageSize);
      }
 else       if (type instanceof FixedWidthType) {
        LazyBlockLoader<LazyFixedWidthBlock> loader=blockLoader.fixedWidthBlockLoader(rcFileColumnsBatch,fieldId,hiveTypes.get(fieldId));
        blocks[fieldId]=new LazyFixedWidthBlock(((FixedWidthType)type).getFixedSize(),currentPageSize,loader);
      }
 else {
        LazyBlockLoader<LazySliceArrayBlock> loader=blockLoader.variableWidthBlockLoader(rcFileColumnsBatch,fieldId,hiveTypes.get(fieldId),fieldInspectors[fieldId]);
        blocks[fieldId]=new LazySliceArrayBlock(currentPageSize,loader);
      }
    }
    Page page=new Page(currentPageSize,blocks);
    completedBytes=recordReader.getPosition() - startFilePosition;
    return page;
  }
 catch (  IOException|RuntimeException e) {
    closeWithSuppression(e);
    throw new PrestoException(HIVE_CURSOR_ERROR,e);
  }
}
