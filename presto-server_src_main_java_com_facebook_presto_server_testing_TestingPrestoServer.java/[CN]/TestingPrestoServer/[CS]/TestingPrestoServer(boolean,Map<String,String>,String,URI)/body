{
  baseDataDir=Files.createTempDirectory("PrestoTest");
  ImmutableMap.Builder<String,String> serverProperties=ImmutableMap.<String,String>builder().putAll(properties).put("coordinator",String.valueOf(coordinator)).put("storage-manager.data-directory",baseDataDir.toString()).put("presto-metastore.db.type","h2").put("presto-metastore.db.filename",baseDataDir.resolve("db/MetaStore").toString()).put("presto.version","testversion").put("analyzer.experimental-syntax-enabled","true");
  if (coordinator) {
    serverProperties.put("failure-detector.enabled","false");
  }
  ImmutableList.Builder<Module> modules=ImmutableList.<Module>builder().add(new TestingNodeModule(Optional.fromNullable(environment))).add(new TestingHttpServerModule()).add(new JsonModule()).add(new JaxrsModule()).add(new MBeanModule()).add(new TestingJmxModule()).add(new InMemoryEventModule()).add(new TraceTokenModule()).add(new ServerMainModule());
  if (discoveryUri != null) {
    checkNotNull(environment,"environment required when discoveryUri is present");
    serverProperties.put("discovery.uri",discoveryUri.toString());
    modules.add(new DiscoveryModule());
  }
 else {
    modules.add(new TestingDiscoveryModule());
  }
  Bootstrap app=new Bootstrap(modules.build());
  Injector injector=app.strictConfig().doNotInitializeLogging().setRequiredConfigurationProperties(serverProperties.build()).initialize();
  injector.getInstance(Announcer.class).start();
  lifeCycleManager=injector.getInstance(LifeCycleManager.class);
  pluginManager=injector.getInstance(PluginManager.class);
  connectorManager=injector.getInstance(ConnectorManager.class);
  connectorManager.createConnection("default","native",ImmutableMap.<String,String>of());
  server=injector.getInstance(TestingHttpServer.class);
  metadata=injector.getInstance(Metadata.class);
  nodeManager=injector.getInstance(InternalNodeManager.class);
  serviceSelectorManager=injector.getInstance(ServiceSelectorManager.class);
  refreshNodes();
}
