{
  ImmutableList.Builder<String> parts=ImmutableList.builder();
  if (domain.isNullAllowed()) {
    parts.add("NULL");
  }
  try {
    ColumnMetadata columnMetadata=metadata.getColumnMetadata(table,column);
    MethodHandle method=metadata.getExactOperator(OperatorInfo.OperatorType.CAST,VarcharType.VARCHAR,ImmutableList.of(columnMetadata.getType())).getMethodHandle();
    for (    Range range : domain.getRanges()) {
      StringBuilder builder=new StringBuilder();
      if (range.isSingleValue()) {
        String value=((Slice)method.invokeWithArguments(range.getSingleValue())).toStringUtf8();
        builder.append('[').append(value).append(']');
      }
 else {
        builder.append((range.getLow().getBound() == Marker.Bound.EXACTLY) ? '[' : '(');
        if (range.getLow().isLowerUnbounded()) {
          builder.append("<min>");
        }
 else {
          builder.append(((Slice)method.invokeWithArguments(range.getLow().getValue())).toStringUtf8());
        }
        builder.append(", ");
        if (range.getHigh().isUpperUnbounded()) {
          builder.append("<max>");
        }
 else {
          builder.append(((Slice)method.invokeWithArguments(range.getHigh().getValue())).toStringUtf8());
        }
        builder.append((range.getHigh().getBound() == Marker.Bound.EXACTLY) ? ']' : ')');
      }
      parts.add(builder.toString());
    }
  }
 catch (  OperatorNotFoundException e) {
    parts.add("<UNREPRESENTABLE VALUE>");
  }
catch (  Throwable e) {
    throw Throwables.propagate(e);
  }
  return "[" + Joiner.on(", ").join(parts.build()) + "]";
}
