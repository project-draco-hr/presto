{
  List<String> partitionBy=Lists.transform(node.getPartitionBy(),Functions.toStringFunction());
  List<String> orderBy=Lists.transform(node.getOrderBy(),new Function<Symbol,String>(){
    @Override public String apply(    Symbol input){
      return input + " " + node.getOrderings().get(input);
    }
  }
);
  List<String> args=new ArrayList<>();
  if (!partitionBy.isEmpty()) {
    args.add(format("partition by (%s)",Joiner.on(", ").join(partitionBy)));
  }
  if (!orderBy.isEmpty()) {
    args.add(format("order by (%s)",Joiner.on(", ").join(orderBy)));
  }
  print(indent,"- Window[%s] => [%s]",Joiner.on(", ").join(args),formatOutputs(node.getOutputSymbols()));
  return processChildren(node,indent + 1);
}
