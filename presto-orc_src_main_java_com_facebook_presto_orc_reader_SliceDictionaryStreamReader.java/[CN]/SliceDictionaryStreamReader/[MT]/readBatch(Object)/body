{
  if (!rowGroupOpen) {
    openRowGroup();
  }
  if (readOffset > 0) {
    if (presentStream != null) {
      readOffset=presentStream.countBitsSet(readOffset);
    }
    if (readOffset > 0) {
      if (dataStream == null) {
        throw new OrcCorruptionException("Value is not null but data stream is not present");
      }
      if (inDictionaryStream != null) {
        inDictionaryStream.skip(readOffset);
      }
      dataStream.skip(readOffset);
    }
  }
  SliceVector sliceVector=castOrcVector(vector,SliceVector.class);
  if (presentStream == null) {
    if (dataStream == null) {
      throw new OrcCorruptionException("Value is not null but data stream is not present");
    }
    Arrays.fill(isNullVector,false);
    dataStream.nextIntVector(nextBatchSize,dataVector);
  }
 else {
    int nullValues=presentStream.getUnsetBits(nextBatchSize,isNullVector);
    if (nullValues != nextBatchSize) {
      if (dataStream == null) {
        throw new OrcCorruptionException("Value is not null but data stream is not present");
      }
      dataStream.nextIntVector(nextBatchSize,dataVector,isNullVector);
    }
  }
  if (inDictionaryStream == null) {
    Arrays.fill(inDictionary,true);
  }
 else {
    inDictionaryStream.getSetBits(nextBatchSize,inDictionary,isNullVector);
  }
  for (int i=0; i < nextBatchSize; i++) {
    if (isNullVector[i]) {
      sliceVector.vector[i]=null;
    }
 else     if (inDictionary[i]) {
      sliceVector.vector[i]=dictionary[dataVector[i]];
    }
 else {
      sliceVector.vector[i]=rowGroupDictionary[dataVector[i]];
    }
  }
  readOffset=0;
  nextBatchSize=0;
}
