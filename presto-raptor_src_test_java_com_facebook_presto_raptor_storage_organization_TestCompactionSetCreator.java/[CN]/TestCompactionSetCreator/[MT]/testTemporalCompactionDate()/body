{
  long day1=Duration.ofNanos(System.nanoTime()).toDays();
  long day2=day1 + 1;
  long day3=day1 + 2;
  List<ShardIndexInfo> inputShards=ImmutableList.of(shardWithTemporalRange(DATE,day1,day1),shardWithTemporalRange(DATE,day2,day2),shardWithTemporalRange(DATE,day3,day3),shardWithTemporalRange(DATE,day1,day3),shardWithTemporalRange(DATE,day2,day3),shardWithTemporalRange(DATE,day1,day2));
  long tableId=temporalTableInfo.getTableId();
  Set<OrganizationSet> actual=compactionSetCreator.createCompactionSets(temporalTableInfo,inputShards);
  assertEquals(actual.size(),2);
  Set<OrganizationSet> expected=ImmutableSet.of(new OrganizationSet(tableId,extractIndexes(inputShards,0,3,5),OptionalInt.empty()),new OrganizationSet(tableId,extractIndexes(inputShards,1,4),OptionalInt.empty()));
  assertEquals(actual,expected);
}
