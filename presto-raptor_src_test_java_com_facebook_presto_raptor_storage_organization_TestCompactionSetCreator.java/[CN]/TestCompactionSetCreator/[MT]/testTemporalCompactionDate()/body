{
  CompactionSetCreator compactionSetCreator=new TemporalCompactionSetCreator(new DataSize(100,BYTE),MAX_SHARD_ROWS,DATE);
  long tableId=1L;
  long day1=Duration.ofNanos(System.nanoTime()).toDays();
  long day2=day1 + 1;
  long day3=day1 + 2;
  List<ShardMetadata> inputShards=ImmutableList.of(shardWithRange(10,day1,day1),shardWithRange(10,day2,day2),shardWithRange(10,day3,day3),shardWithRange(10,day1,day3),shardWithRange(10,day2,day3),shardWithRange(10,day1,day2));
  Set<CompactionSet> actual=compactionSetCreator.createCompactionSets(tableId,ImmutableSet.copyOf(inputShards));
  assertEquals(actual.size(),3);
  Set<CompactionSet> expected=ImmutableSet.of(new CompactionSet(tableId,ImmutableSet.of(inputShards.get(0),inputShards.get(3),inputShards.get(5))),new CompactionSet(tableId,ImmutableSet.of(inputShards.get(1),inputShards.get(4))),new CompactionSet(tableId,ImmutableSet.of(inputShards.get(2))));
  assertEquals(actual,expected);
}
