{
  TupleDomain tupleDomain1=TupleDomain.withColumnDomains(ImmutableMap.<ColumnHandle,Domain>builder().put(A,Domain.all(String.class)).put(B,Domain.notNull(Double.class)).put(C,Domain.singleValue(1L)).put(D,Domain.create(SortedRangeSet.of(Range.greaterThanOrEqual(0.0)),true)).build());
  TupleDomain tupleDomain2=TupleDomain.withColumnDomains(ImmutableMap.<ColumnHandle,Domain>builder().put(A,Domain.singleValue("value")).put(B,Domain.singleValue(0.0)).put(C,Domain.singleValue(1L)).put(D,Domain.create(SortedRangeSet.of(Range.lessThan(10.0)),false)).build());
  TupleDomain expectedTupleDomain=TupleDomain.withColumnDomains(ImmutableMap.<ColumnHandle,Domain>builder().put(A,Domain.singleValue("value")).put(B,Domain.singleValue(0.0)).put(C,Domain.singleValue(1L)).put(D,Domain.create(SortedRangeSet.of(Range.range(0.0,true,10.0,false)),false)).build());
  Assert.assertEquals(tupleDomain1.intersect(tupleDomain2),expectedTupleDomain);
}
