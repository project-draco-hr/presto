{
  final ObjectMapper mapper=new ObjectMapper();
  mapper.registerModule(new SimpleModule().addDeserializer(ColumnHandle.class,new JsonDeserializer<ColumnHandle>(){
    @Override public ColumnHandle deserialize(    JsonParser jsonParser,    DeserializationContext deserializationContext) throws IOException {
      return mapper.readValue(jsonParser,TestingColumnHandle.class);
    }
  }
));
  TupleDomain<ColumnHandle> tupleDomain=TupleDomain.all();
  Assert.assertEquals(tupleDomain,mapper.readValue(mapper.writeValueAsString(tupleDomain),new TypeReference<TupleDomain<ColumnHandle>>(){
  }
));
  tupleDomain=TupleDomain.none();
  Assert.assertEquals(tupleDomain,mapper.readValue(mapper.writeValueAsString(tupleDomain),new TypeReference<TupleDomain<ColumnHandle>>(){
  }
));
  tupleDomain=TupleDomain.withFixedValues(ImmutableMap.<ColumnHandle,Comparable<?>>of(A,1L,B,"abc"));
  Assert.assertEquals(tupleDomain,mapper.readValue(mapper.writeValueAsString(tupleDomain),new TypeReference<TupleDomain<ColumnHandle>>(){
  }
));
}
