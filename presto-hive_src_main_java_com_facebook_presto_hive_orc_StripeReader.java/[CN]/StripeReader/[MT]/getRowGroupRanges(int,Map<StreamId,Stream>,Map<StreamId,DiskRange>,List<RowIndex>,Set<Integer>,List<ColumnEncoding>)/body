{
  Set<Integer> columnsWithNulls=new HashSet<>();
  for (  Stream stream : streams.values()) {
    if (stream.getKind() == PRESENT) {
      columnsWithNulls.add(stream.getColumn());
    }
  }
  ImmutableList.Builder<RowGroupLayout> rowGroupLayouts=ImmutableList.builder();
  for (  Integer rowGroupId : selectedRowGroups) {
    ImmutableList.Builder<StreamLayout> streamLayouts=ImmutableList.builder();
    for (    Entry<StreamId,Stream> entry : streams.entrySet()) {
      StreamId streamId=entry.getKey();
      Stream stream=entry.getValue();
      int column=stream.getColumn();
      ColumnEncoding encoding=encodings.get(column);
      if (isIndexStream(stream) || isDictionary(stream,encoding)) {
        continue;
      }
      boolean hasNulls=columnsWithNulls.contains(column);
      RowIndex rowIndex=indexes.get(column);
      DiskRange diskRange=getRowGroupStreamDiskRange(rowIndex,diskRanges.get(streamId),hasNulls,rowGroupId,streamId,encoding.getKind());
      List<Long> offsetPositions=getOffsetPositions(streamId,encoding.getKind(),hasNulls,rowIndex.getEntry(rowGroupId).getPositionsList());
      StreamLayout streamLayout=new StreamLayout(streamId,rowGroupId,types.get(column).getKind(),encoding.getKind(),compressionKind,diskRange,checkedCastToInteger(offsetPositions));
      streamLayouts.add(streamLayout);
    }
    int rowsInGroup=Math.min(rowsInStripe - (rowGroupId * rowsInRowGroup),rowsInRowGroup);
    rowGroupLayouts.add(new RowGroupLayout(rowGroupId,rowsInGroup,streamLayouts.build()));
  }
  return rowGroupLayouts.build();
}
