{
  plugin.setNodeManager(nodeManager);
  plugin.setTypeManager(typeRegistry);
  plugin.setBlockEncodingSerde(blockEncodingManager);
  plugin.setPageSorter(pageSorter);
  plugin.setPageIndexerFactory(pageIndexerFactory);
  plugin.setOptionalConfig(optionalConfig);
  for (  BlockEncodingFactory<?> blockEncodingFactory : plugin.getServices(BlockEncodingFactory.class)) {
    log.info("Registering block encoding %s",blockEncodingFactory.getName());
    blockEncodingManager.addBlockEncodingFactory(blockEncodingFactory);
  }
  for (  Type type : plugin.getServices(Type.class)) {
    log.info("Registering type %s",type.getTypeSignature());
    typeRegistry.addType(type);
  }
  for (  ParametricType parametricType : plugin.getServices(ParametricType.class)) {
    log.info("Registering parametric type %s",parametricType.getName());
    typeRegistry.addParametricType(parametricType);
  }
  for (  com.facebook.presto.spi.ConnectorFactory connectorFactory : plugin.getServices(com.facebook.presto.spi.ConnectorFactory.class)) {
    log.info("Registering legacy connector %s",connectorFactory.getName());
    connectorManager.addConnectorFactory(connectorFactory);
  }
  for (  ConnectorFactory connectorFactory : plugin.getServices(ConnectorFactory.class)) {
    log.info("Registering connector %s",connectorFactory.getName());
    connectorManager.addConnectorFactory(connectorFactory);
  }
  for (  Class<?> functionClass : plugin.getFunctions()) {
    log.info("Registering functions from %s",functionClass.getName());
    metadata.addFunctions(extractFunctions(functionClass));
  }
  for (  SystemAccessControlFactory accessControlFactory : plugin.getServices(SystemAccessControlFactory.class)) {
    log.info("Registering system access control %s",accessControlFactory.getName());
    accessControlManager.addSystemAccessControlFactory(accessControlFactory);
  }
}
