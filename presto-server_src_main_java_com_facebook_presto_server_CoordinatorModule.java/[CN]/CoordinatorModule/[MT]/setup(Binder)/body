{
  httpServerBinder(binder).bindResource("/","webapp").withWelcomeFile("index.html");
  discoveryBinder(binder).bindSelector("presto");
  binder.bind(QueryResource.class).in(Scopes.SINGLETON);
  binder.bind(StageResource.class).in(Scopes.SINGLETON);
  binder.bind(QueryIdGenerator.class).in(Scopes.SINGLETON);
  binder.bind(QueryManager.class).to(SqlQueryManager.class).in(Scopes.SINGLETON);
  newExporter(binder).export(QueryManager.class).withGeneratedName();
  bindConfig(binder).to(QueryManagerConfig.class);
  bindConfig(binder).to(AnalyzerConfig.class);
  binder.bind(NativeConnectorId.class).toInstance(new NativeConnectorId("default"));
  binder.bind(NativeMetadata.class).in(Scopes.SINGLETON);
  binder.bind(NativeSplitManager.class).in(Scopes.SINGLETON);
  binder.bind(NativeDataStreamProvider.class).in(Scopes.SINGLETON);
  binder.bind(NativeRecordSinkProvider.class).in(Scopes.SINGLETON);
  binder.bind(SplitManager.class).in(Scopes.SINGLETON);
  binder.bind(InternalNodeManager.class).to(DiscoveryNodeManager.class).in(Scopes.SINGLETON);
  binder.bind(NodeManager.class).to(Key.get(InternalNodeManager.class)).in(Scopes.SINGLETON);
  bindConfig(binder).to(NodeSchedulerConfig.class);
  binder.bind(NodeScheduler.class).in(Scopes.SINGLETON);
  newExporter(binder).export(NodeScheduler.class).withGeneratedName();
  binder.bind(ShardManager.class).to(DatabaseShardManager.class).in(Scopes.SINGLETON);
  bindConfig(binder).to(ShardCleanerConfig.class);
  binder.bind(ShardCleaner.class).in(Scopes.SINGLETON);
  httpClientBinder(binder).bindHttpClient("shard-cleaner",ForShardCleaner.class);
  binder.bind(ShardResource.class).in(Scopes.SINGLETON);
  binder.bind(StorageManager.class).to(DatabaseStorageManager.class).in(Scopes.SINGLETON);
  bindConfig(binder).to(PeriodicImportConfig.class);
  binder.bind(PeriodicImportJobResource.class).in(Scopes.SINGLETON);
  binder.bind(PeriodicImportManager.class).to(DatabasePeriodicImportManager.class).in(Scopes.SINGLETON);
  binder.bind(PeriodicImportController.class).in(Scopes.SINGLETON);
  binder.bind(JobStateFactory.class).in(Scopes.SINGLETON);
  binder.bind(PeriodicImportRunnable.PeriodicImportRunnableFactory.class).in(Scopes.SINGLETON);
  newExporter(binder).export(PeriodicImportController.class).as("com.facebook.presto:name=periodic-import");
  httpClientBinder(binder).bindAsyncHttpClient("periodic-importer",ForPeriodicImport.class).withTracing();
  binder.bind(SqlQueryExecution.SqlQueryExecutionFactory.class).in(Scopes.SINGLETON);
  newExporter(binder).export(SqlQueryExecution.SqlQueryExecutionFactory.class).withGeneratedName();
  MapBinder<Class<? extends Statement>,QueryExecution.QueryExecutionFactory<?>> executionBinder=newMapBinder(binder,new TypeLiteral<Class<? extends Statement>>(){
  }
,new TypeLiteral<QueryExecution.QueryExecutionFactory<?>>(){
  }
);
  binder.bind(DropTableExecution.DropTableExecutionFactory.class).in(Scopes.SINGLETON);
  executionBinder.addBinding(DropTable.class).to(DropTableExecution.DropTableExecutionFactory.class).in(Scopes.SINGLETON);
  newExporter(binder).export(DropTableExecution.DropTableExecutionFactory.class).withGeneratedName();
  binder.bind(CreateAliasExecution.CreateAliasExecutionFactory.class).in(Scopes.SINGLETON);
  executionBinder.addBinding(CreateAlias.class).to(CreateAliasExecution.CreateAliasExecutionFactory.class).in(Scopes.SINGLETON);
  newExporter(binder).export(CreateAliasExecution.CreateAliasExecutionFactory.class).withGeneratedName();
  binder.bind(DropAliasExecution.DropAliasExecutionFactory.class).in(Scopes.SINGLETON);
  executionBinder.addBinding(DropAlias.class).to(DropAliasExecution.DropAliasExecutionFactory.class).in(Scopes.SINGLETON);
  newExporter(binder).export(DropAliasExecution.DropAliasExecutionFactory.class).withGeneratedName();
  executionBinder.addBinding(Query.class).to(SqlQueryExecution.SqlQueryExecutionFactory.class).in(Scopes.SINGLETON);
  executionBinder.addBinding(Explain.class).to(SqlQueryExecution.SqlQueryExecutionFactory.class).in(Scopes.SINGLETON);
  executionBinder.addBinding(ShowColumns.class).to(SqlQueryExecution.SqlQueryExecutionFactory.class).in(Scopes.SINGLETON);
  executionBinder.addBinding(ShowPartitions.class).to(SqlQueryExecution.SqlQueryExecutionFactory.class).in(Scopes.SINGLETON);
  executionBinder.addBinding(ShowFunctions.class).to(SqlQueryExecution.SqlQueryExecutionFactory.class).in(Scopes.SINGLETON);
  executionBinder.addBinding(ShowTables.class).to(SqlQueryExecution.SqlQueryExecutionFactory.class).in(Scopes.SINGLETON);
  executionBinder.addBinding(ShowSchemas.class).to(SqlQueryExecution.SqlQueryExecutionFactory.class).in(Scopes.SINGLETON);
  executionBinder.addBinding(ShowCatalogs.class).to(SqlQueryExecution.SqlQueryExecutionFactory.class).in(Scopes.SINGLETON);
  executionBinder.addBinding(UseCollection.class).to(SqlQueryExecution.SqlQueryExecutionFactory.class).in(Scopes.SINGLETON);
  executionBinder.addBinding(CreateMaterializedView.class).to(SqlQueryExecution.SqlQueryExecutionFactory.class).in(Scopes.SINGLETON);
  executionBinder.addBinding(RefreshMaterializedView.class).to(SqlQueryExecution.SqlQueryExecutionFactory.class).in(Scopes.SINGLETON);
  executionBinder.addBinding(CreateTable.class).to(SqlQueryExecution.SqlQueryExecutionFactory.class).in(Scopes.SINGLETON);
}
