{
  if (UnknownType.NAME.equals(firstType.getBase())) {
    return Optional.of(secondType);
  }
  if (UnknownType.NAME.equals(secondType.getBase())) {
    return Optional.of(firstType);
  }
  List<TypeSignatureParameter> firstTypeTypeParameters=firstType.getParameters();
  List<TypeSignatureParameter> secondTypeTypeParameters=secondType.getParameters();
  if (firstTypeTypeParameters.size() != secondTypeTypeParameters.size()) {
    return Optional.empty();
  }
  Optional<String> commonSuperTypeBase=getCommonSuperTypeBase(firstType.getBase(),secondType.getBase());
  if (!commonSuperTypeBase.isPresent()) {
    return Optional.empty();
  }
  ImmutableList.Builder<TypeSignatureParameter> typeParameters=ImmutableList.builder();
  for (int i=0; i < firstTypeTypeParameters.size(); i++) {
    TypeSignatureParameter firstParameter=firstTypeTypeParameters.get(i);
    TypeSignatureParameter secondParameter=secondTypeTypeParameters.get(i);
    if (firstParameter.getKind() == secondParameter.getKind() && firstParameter.getKind() == ParameterKind.LONG_LITERAL) {
      typeParameters.add(TypeSignatureParameter.of(Math.max(firstParameter.getLongLiteral(),secondParameter.getLongLiteral())));
    }
 else     if (isCovariantParameterPosition(commonSuperTypeBase.get(),i)) {
      Optional<TypeSignature> firstParameterSignature=firstParameter.getTypeSignatureOrNamedTypeSignature();
      Optional<TypeSignature> secondParameterSignature=secondParameter.getTypeSignatureOrNamedTypeSignature();
      if (!firstParameterSignature.isPresent() || !secondParameterSignature.isPresent()) {
        return Optional.empty();
      }
      Optional<TypeSignature> commonSuperType=getCommonSuperTypeSignature(firstParameterSignature.get(),secondParameterSignature.get());
      if (!commonSuperType.isPresent()) {
        return Optional.empty();
      }
      typeParameters.add(TypeSignatureParameter.of(commonSuperType.get()));
    }
 else {
      if (!firstParameter.equals(secondParameter)) {
        return Optional.empty();
      }
      typeParameters.add(firstParameter);
    }
  }
  return Optional.of(new TypeSignature(commonSuperTypeBase.get(),typeParameters.build()));
}
