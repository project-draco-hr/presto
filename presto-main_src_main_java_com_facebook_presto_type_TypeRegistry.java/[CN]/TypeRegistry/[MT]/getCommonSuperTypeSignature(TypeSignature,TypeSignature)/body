{
  if (UnknownType.NAME.equals(firstType.getBase())) {
    return Optional.of(secondType);
  }
  if (UnknownType.NAME.equals(secondType.getBase())) {
    return Optional.of(firstType);
  }
  List<TypeSignature> firstTypeTypeParameters=firstType.getParameters();
  List<TypeSignature> secondTypeTypeParameters=secondType.getParameters();
  if (firstTypeTypeParameters.size() != secondTypeTypeParameters.size()) {
    return Optional.empty();
  }
  if (!firstType.getLiteralParameters().equals(secondType.getLiteralParameters())) {
    return Optional.empty();
  }
  Optional<String> commonSuperTypeBase=getCommonSuperTypeBase(firstType.getBase(),secondType.getBase());
  if (!commonSuperTypeBase.isPresent()) {
    return Optional.empty();
  }
  ImmutableList.Builder<TypeSignature> typeParameters=ImmutableList.builder();
  for (int i=0; i < firstTypeTypeParameters.size(); i++) {
    if (isCovariantParameterPosition(commonSuperTypeBase.get(),i)) {
      Optional<TypeSignature> commonSuperType=getCommonSuperTypeSignature(firstTypeTypeParameters.get(i),secondTypeTypeParameters.get(i));
      if (!commonSuperType.isPresent()) {
        return Optional.empty();
      }
      typeParameters.add(commonSuperType.get());
    }
 else {
      if (!firstTypeTypeParameters.get(i).equals(secondTypeTypeParameters.get(i))) {
        return Optional.empty();
      }
      typeParameters.add(firstTypeTypeParameters.get(i));
    }
  }
  return Optional.of(new TypeSignature(commonSuperTypeBase.get(),typeParameters.build(),firstType.getLiteralParameters()));
}
