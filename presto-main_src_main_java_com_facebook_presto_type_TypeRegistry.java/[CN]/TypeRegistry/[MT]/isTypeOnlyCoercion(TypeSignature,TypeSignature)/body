{
  if (actualType.equals(expectedType)) {
    return true;
  }
 else   if (actualType.getBase().equals(StandardTypes.VARCHAR) && expectedType.getBase().equals(StandardTypes.VARCHAR)) {
    return true;
  }
  if (actualType.getBase().equals(DECIMAL) && expectedType.getBase().equals(DECIMAL)) {
    long actualPrecision=actualType.getParameters().get(0).getLongLiteral();
    long expectedPrecision=(long)expectedType.getParameters().get(0).getLongLiteral();
    long actualScale=(long)actualType.getParameters().get(1).getLongLiteral();
    long expectedScale=(long)expectedType.getParameters().get(1).getLongLiteral();
    if (actualPrecision <= Decimals.MAX_SHORT_PRECISION ^ expectedPrecision <= Decimals.MAX_SHORT_PRECISION) {
      return false;
    }
    return actualScale == expectedScale && actualPrecision <= expectedPrecision;
  }
  if (actualType.getBase().equals(expectedType.getBase()) && actualType.getParameters().size() == expectedType.getParameters().size()) {
    for (int i=0; i < actualType.getParameters().size(); i++) {
      if (!isCovariantParameterPosition(actualType.getBase(),i)) {
        return false;
      }
      TypeSignatureParameter actualParameter=actualType.getParameters().get(i);
      TypeSignatureParameter expectedParameter=expectedType.getParameters().get(i);
      if (actualParameter.equals(expectedParameter)) {
        continue;
      }
      Optional<TypeSignature> actualParameterSignature=actualParameter.getTypeSignatureOrNamedTypeSignature();
      Optional<TypeSignature> expectedParameterSignature=expectedParameter.getTypeSignatureOrNamedTypeSignature();
      if (!actualParameterSignature.isPresent() || !expectedParameterSignature.isPresent()) {
        return false;
      }
      if (!isTypeOnlyCoercion(actualParameterSignature.get(),expectedParameterSignature.get())) {
        return false;
      }
    }
    return true;
  }
  return false;
}
