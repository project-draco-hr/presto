{
  if (!context.isDefaultRewrite()) {
    Expression result=rewriter.rewriteFunctionCall(node,context.get(),ExpressionTreeRewriter.this);
    if (result != null) {
      return result;
    }
  }
  Window rewrittenWindow=node.getWindow().orElse(null);
  if (rewrittenWindow != null) {
    ImmutableList.Builder<Expression> partitionBy=ImmutableList.builder();
    for (    Expression expression : rewrittenWindow.getPartitionBy()) {
      partitionBy.add(rewrite(expression,context.get()));
    }
    ImmutableList.Builder<SortItem> orderBy=ImmutableList.builder();
    for (    SortItem sortItem : rewrittenWindow.getOrderBy()) {
      Expression sortKey=rewrite(sortItem.getSortKey(),context.get());
      if (sortItem.getSortKey() != sortKey) {
        orderBy.add(new SortItem(sortKey,sortItem.getOrdering(),sortItem.getNullOrdering()));
      }
 else {
        orderBy.add(sortItem);
      }
    }
    WindowFrame frame=rewrittenWindow.getFrame().orElse(null);
    if (frame != null) {
      FrameBound start=frame.getStart();
      if (start.getValue().isPresent()) {
        Expression value=rewrite(start.getValue().get(),context.get());
        if (value != start.getValue().get()) {
          start=new FrameBound(start.getType(),value);
        }
      }
      FrameBound end=frame.getEnd().orElse(null);
      if ((end != null) && end.getValue().isPresent()) {
        Expression value=rewrite(end.getValue().get(),context.get());
        if (value != end.getValue().get()) {
          end=new FrameBound(end.getType(),value);
        }
      }
      if ((frame.getStart() != start) || (frame.getEnd().orElse(null) != end)) {
        frame=new WindowFrame(frame.getType(),start,end);
      }
    }
    if (!sameElements(rewrittenWindow.getPartitionBy(),partitionBy.build()) || !sameElements(rewrittenWindow.getOrderBy(),orderBy.build()) || rewrittenWindow.getFrame().orElse(null) != frame) {
      rewrittenWindow=new Window(partitionBy.build(),orderBy.build(),frame);
    }
  }
  ImmutableList.Builder<Expression> arguments=ImmutableList.builder();
  for (  Expression expression : node.getArguments()) {
    arguments.add(rewrite(expression,context.get()));
  }
  if (!sameElements(node.getArguments(),arguments.build()) || (rewrittenWindow != node.getWindow().orElse(null))) {
    return new FunctionCall(node.getName(),rewrittenWindow,node.isDistinct(),arguments.build());
  }
  return node;
}
