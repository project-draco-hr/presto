{
  if (node.getWith().isPresent()) {
    With with=node.getWith().get();
    append(indent,"WITH ");
    if (with.isRecursive()) {
      builder.append("RECURSIVE ");
    }
    builder.append('\n');
    Iterator<WithQuery> queries=with.getQueries().iterator();
    while (queries.hasNext()) {
      WithQuery query=queries.next();
      builder.append(query.getName());
      appendAliasColumns(builder,query.getColumnNames());
      builder.append(" AS ");
      process(new Subquery(query.getQuery()),indent);
      if (queries.hasNext()) {
        builder.append(", ");
      }
    }
  }
  process(node.getSelect(),indent);
  append(indent,"FROM ");
  if (node.getFrom().size() > 1) {
    builder.append('\n');
    Iterator<Relation> relations=node.getFrom().iterator();
    while (relations.hasNext()) {
      process(relations.next(),indent);
      if (relations.hasNext()) {
        builder.append(", ");
      }
    }
  }
 else {
    process(Iterables.getOnlyElement(node.getFrom()),indent);
  }
  builder.append('\n');
  if (node.getWhere().isPresent()) {
    append(indent,"WHERE " + ExpressionFormatter.toString(node.getWhere().get())).append('\n');
  }
  if (!node.getGroupBy().isEmpty()) {
    append(indent,"GROUP BY " + Joiner.on(", ").join(Iterables.transform(node.getGroupBy(),expressionFormatterFunction()))).append('\n');
  }
  if (node.getHaving().isPresent()) {
    append(indent,"HAVING " + ExpressionFormatter.toString(node.getHaving().get())).append('\n');
  }
  if (!node.getOrderBy().isEmpty()) {
    append(indent,"ORDER BY " + Joiner.on(", ").join(Iterables.transform(node.getOrderBy(),orderByFormatterFunction())));
  }
  if (node.getLimit().isPresent()) {
    append(indent,"LIMIT " + node.getLimit().get());
  }
  return null;
}
