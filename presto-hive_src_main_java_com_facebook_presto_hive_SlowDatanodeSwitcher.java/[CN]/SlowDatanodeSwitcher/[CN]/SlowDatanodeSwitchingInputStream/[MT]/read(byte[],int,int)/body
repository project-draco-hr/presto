{
  long start=System.nanoTime();
  int result=in.read(b,off,len);
  if (result > minMonitorThreshold.toBytes()) {
    Duration duration=Duration.nanosSince(start);
    long byteRate=(long)(result / duration.convertTo(SECONDS));
    globalDistribution.add(byteRate,result);
    streamByteRate.add(result,(long)duration.convertTo(TimeUnit.MILLISECONDS));
    if (streamByteRate.getMillis() > minStreamSamplingTime.toMillis()) {
      List<Long> percentileValues=globalDistribution.getPercentiles(ImmutableList.of(slowStreamPercentile / 100.0,0.50));
      if (streamByteRate.getBytesPerSecond() < minStreamRate.toBytes() || globalDistribution.getCount() > minGlobalSamples && streamByteRate.getBytesPerSecond() < percentileValues.get(0)) {
        log.warn("Stream ID: %s, Slow Node: %s, Current Block ID: %s, Avg File Stream Rate: %sB/s, Stream Data: %sB, Stream Time: %ss, Last Read Rate: %sB/s, Last Read Size %sB, p%s Rate: %sB/s, p50 Rate: %sB/s, Read Distribution Count: %s",System.identityHashCode(this),dfsDataInputStream.getCurrentDatanode().getName(),dfsDataInputStream.getCurrentBlock().getBlockName(),(long)streamByteRate.getBytesPerSecond(),(long)streamByteRate.getBytes(),streamByteRate.getMillis() / 1000,byteRate,result,slowStreamPercentile,percentileValues.get(0),percentileValues.get(1),globalDistribution.getCount());
        DatanodeInfo currentDatanode=dfsDataInputStream.getCurrentDatanode();
        unfavoredNodes.put(currentDatanode,currentDatanode);
        setUnfavoredNodes(dfsDataInputStream,unfavoredNodes.asMap().keySet());
        streamByteRate=new ByteRateDecayCounter(streamRateDecayAlpha);
        slowNodeCounter.update(1);
      }
    }
  }
  return result;
}
