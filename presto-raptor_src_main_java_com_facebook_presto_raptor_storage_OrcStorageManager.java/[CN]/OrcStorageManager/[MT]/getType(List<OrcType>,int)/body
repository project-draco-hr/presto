{
  OrcType type=types.get(index);
switch (type.getOrcTypeKind()) {
case BOOLEAN:
    return BOOLEAN;
case LONG:
  return BIGINT;
case DOUBLE:
return DOUBLE;
case STRING:
return createUnboundedVarcharType();
case BINARY:
return VARBINARY;
case DECIMAL:
return DecimalType.createDecimalType(type.getPrecision().get(),type.getScale().get());
case LIST:
TypeSignature elementType=getType(types,type.getFieldTypeIndex(0)).getTypeSignature();
return typeManager.getParameterizedType(StandardTypes.ARRAY,ImmutableList.of(TypeSignatureParameter.of(elementType)));
case MAP:
TypeSignature keyType=getType(types,type.getFieldTypeIndex(0)).getTypeSignature();
TypeSignature valueType=getType(types,type.getFieldTypeIndex(1)).getTypeSignature();
return typeManager.getParameterizedType(StandardTypes.MAP,ImmutableList.of(TypeSignatureParameter.of(keyType),TypeSignatureParameter.of(valueType)));
case STRUCT:
List<String> fieldNames=type.getFieldNames();
ImmutableList.Builder<TypeSignatureParameter> fieldTypes=ImmutableList.builder();
for (int i=0; i < type.getFieldCount(); i++) {
fieldTypes.add(TypeSignatureParameter.of(new NamedTypeSignature(fieldNames.get(i),getType(types,type.getFieldTypeIndex(i)).getTypeSignature())));
}
return typeManager.getParameterizedType(StandardTypes.ROW,fieldTypes.build());
}
throw new PrestoException(RAPTOR_ERROR,"Unhandled ORC type: " + type);
}
