{
  final Semaphore semaphore=new Semaphore(partitionBatchSize);
  try (ThreadContextClassLoader threadContextClassLoader=new ThreadContextClassLoader(classLoader)){
    ImmutableList.Builder<ListenableFuture<Void>> futureBuilder=ImmutableList.builder();
    Iterator<String> nameIterator=partitionNames.iterator();
    for (    Partition partition : partitions) {
      checkState(nameIterator.hasNext(),"different number of partitions and partition names!");
      semaphore.acquire();
      final String partitionName=nameIterator.next();
      final Properties schema=getPartitionSchema(table,partition);
      final List<HivePartitionKey> partitionKeys=getPartitionKeys(table,partition);
      final InputFormat<?,?> inputFormat=getInputFormat(fileSystemCache.getConfiguration(),schema,false);
      Path partitionPath=new CachingPath(getPartitionLocation(table,partition),fileSystemCache);
      final FileSystem fs=partitionPath.getFileSystem(fileSystemCache.getConfiguration());
      final PartitionChunkPoisoner chunkPoisoner=new PartitionChunkPoisoner(partitionChunkQueue);
      if (inputFormat instanceof SymlinkTextInputFormat) {
        JobConf jobConf=new JobConf(fileSystemCache.getConfiguration());
        FileInputFormat.setInputPaths(jobConf,partitionPath);
        InputSplit[] splits=inputFormat.getSplits(jobConf,0);
        for (        InputSplit rawSplit : splits) {
          FileSplit split=((SymlinkTextInputSplit)rawSplit).getTargetSplit();
          chunkPoisoner.writeChunks(createHivePartitionChunks(partitionName,fs.getFileStatus(split.getPath()),split.getStart(),split.getLength(),schema,partitionKeys,fs,false));
        }
        chunkPoisoner.finish();
        continue;
      }
      ListenableFuture<Void> partitionFuture=new AsyncRecursiveWalker(fs,suspendingExecutor).beginWalk(partitionPath,new FileStatusCallback(){
        @Override public void process(        FileStatus file){
          try {
            boolean splittable=isSplittable(inputFormat,file.getPath().getFileSystem(fileSystemCache.getConfiguration()),file.getPath());
            chunkPoisoner.writeChunks(createHivePartitionChunks(partitionName,file,0,file.getLen(),schema,partitionKeys,fs,splittable));
          }
 catch (          IOException e) {
            partitionChunkQueue.fail(e);
          }
        }
      }
);
      Futures.addCallback(partitionFuture,new FutureCallback<Void>(){
        @Override public void onSuccess(        Void result){
          chunkPoisoner.finish();
          semaphore.release();
        }
        @Override public void onFailure(        Throwable t){
          chunkPoisoner.finish();
          semaphore.release();
        }
      }
);
      futureBuilder.add(partitionFuture);
    }
    Futures.addCallback(Futures.allAsList(futureBuilder.build()),new FutureCallback<List<Void>>(){
      @Override public void onSuccess(      List<Void> result){
        partitionChunkQueue.finished();
      }
      @Override public void onFailure(      Throwable t){
        partitionChunkQueue.fail(t);
      }
    }
);
  }
 catch (  IOException e) {
    throw Throwables.propagate(e);
  }
}
