{
  return new Function<String,HivePartition>(){
    @Override public HivePartition apply(    String partitionId){
      try {
        if (partitionId.equals(UNPARTITIONED_ID)) {
          return new HivePartition(tableName);
        }
        LinkedHashMap<String,String> keys=Warehouse.makeSpecFromName(partitionId);
        ImmutableMap.Builder<ColumnHandle,Comparable<?>> builder=ImmutableMap.builder();
        for (        Entry<String,String> entry : keys.entrySet()) {
          ColumnHandle columnHandle=columnsByName.get(entry.getKey());
          checkArgument(columnHandle != null,"Invalid partition key %s in partition %s",entry.getKey(),partitionId);
          checkArgument(columnHandle instanceof HiveColumnHandle,"columnHandle is not an instance of HiveColumnHandle");
          HiveColumnHandle hiveColumnHandle=(HiveColumnHandle)columnHandle;
          String value=entry.getValue();
switch (hiveColumnHandle.getType()) {
case BOOLEAN:
            if (value.isEmpty()) {
              builder.put(columnHandle,false);
            }
 else {
              builder.put(columnHandle,parseBoolean(value));
            }
          break;
case LONG:
        if (value.isEmpty()) {
          builder.put(columnHandle,0L);
        }
 else         if (hiveColumnHandle.getHiveType() == HiveType.TIMESTAMP) {
          builder.put(columnHandle,parseHiveTimestamp(value));
        }
 else {
          builder.put(columnHandle,parseLong(value));
        }
      break;
case DOUBLE:
    if (value.isEmpty()) {
      builder.put(columnHandle,0.0);
    }
 else {
      builder.put(columnHandle,parseDouble(value));
    }
  break;
case STRING:
builder.put(columnHandle,value);
break;
}
}
return new HivePartition(tableName,partitionId,builder.build(),bucket);
}
 catch (MetaException e) {
throw Throwables.propagate(e);
}
}
}
;
}
