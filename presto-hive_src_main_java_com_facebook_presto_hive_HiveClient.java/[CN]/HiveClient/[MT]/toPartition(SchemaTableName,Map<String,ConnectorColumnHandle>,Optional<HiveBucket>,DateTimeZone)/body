{
  return new Function<String,HivePartition>(){
    @Override public HivePartition apply(    String partitionId){
      try {
        if (partitionId.equals(UNPARTITIONED_ID)) {
          return new HivePartition(tableName);
        }
        ImmutableMap.Builder<ConnectorColumnHandle,Comparable<?>> builder=ImmutableMap.builder();
        for (        Entry<String,String> entry : makeSpecFromName(partitionId).entrySet()) {
          ConnectorColumnHandle handle=columnsByName.get(entry.getKey());
          checkArgument(handle != null,"Invalid partition key %s in partition %s",entry.getKey(),partitionId);
          HiveColumnHandle columnHandle=checkType(handle,HiveColumnHandle.class,"handle");
          String value=entry.getValue();
          Type type=columnHandle.getType();
          if (BOOLEAN.equals(type)) {
            if (value.isEmpty()) {
              builder.put(columnHandle,false);
            }
 else {
              builder.put(columnHandle,parseBoolean(value));
            }
          }
 else           if (BIGINT.equals(type)) {
            if (value.isEmpty()) {
              builder.put(columnHandle,0L);
            }
 else             if (columnHandle.getHiveType() == HiveType.TIMESTAMP) {
              builder.put(columnHandle,parseHiveTimestamp(value,timeZone));
            }
 else {
              builder.put(columnHandle,parseLong(value));
            }
          }
 else           if (DOUBLE.equals(type)) {
            if (value.isEmpty()) {
              builder.put(columnHandle,0.0);
            }
 else {
              builder.put(columnHandle,parseDouble(value));
            }
          }
 else           if (VARCHAR.equals(type)) {
            builder.put(columnHandle,utf8Slice(value));
          }
 else {
            throw new IllegalArgumentException(format("Unsupported partition type [%s] for partition: %s",type,partitionId));
          }
        }
        return new HivePartition(tableName,partitionId,builder.build(),bucket);
      }
 catch (      MetaException e) {
        throw Throwables.propagate(e);
      }
    }
  }
;
}
