{
  Deserializer deserializer=MetaStoreUtils.getDeserializer(null,schema);
  ObjectInspector inspector=deserializer.getObjectInspector();
  checkArgument(inspector.getCategory() == ObjectInspector.Category.STRUCT,"expected STRUCT: %s",inspector.getCategory());
  StructObjectInspector structObjectInspector=(StructObjectInspector)inspector;
  ImmutableList.Builder<SchemaField> schemaFields=ImmutableList.builder();
  for (int i=0; i < partitionKeys.size(); i++) {
    FieldSchema field=partitionKeys.get(i);
    SchemaField.Type type=convertHiveType(field.getType());
    schemaFields.add(SchemaField.createPrimitive(field.getName(),i,type));
  }
  List<? extends StructField> fields=structObjectInspector.getAllStructFieldRefs();
  int columnIndex=partitionKeys.size();
  for (  StructField field : fields) {
    ObjectInspector fieldInspector=field.getFieldObjectInspector();
    if (fieldInspector.getCategory() == Category.PRIMITIVE) {
      Type type=getPrimitiveType(((PrimitiveObjectInspector)fieldInspector).getPrimitiveCategory());
      if (type != null) {
        schemaFields.add(SchemaField.createPrimitive(field.getFieldName(),columnIndex,type));
      }
    }
    columnIndex++;
  }
  return schemaFields.build();
}
