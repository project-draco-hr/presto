{
  checkNotNull(tableHandle,"tableHandle is null");
  checkNotNull(effectivePredicate,"effectivePredicate is null");
  if (effectivePredicate.isNone()) {
    return new ConnectorPartitionResult(ImmutableList.<ConnectorPartition>of(),TupleDomain.<ConnectorColumnHandle>none());
  }
  SchemaTableName tableName=getTableName(tableHandle);
  Table table=getTable(tableName);
  Optional<HiveBucket> bucket=getHiveBucket(table,effectivePredicate.extractFixedValues());
  TupleDomain<HiveColumnHandle> compactEffectivePredicate=toCompactTupleDomain(effectivePredicate);
  if (table.getPartitionKeys().isEmpty()) {
    return new ConnectorPartitionResult(ImmutableList.<ConnectorPartition>of(new HivePartition(tableName,compactEffectivePredicate)),effectivePredicate);
  }
 else {
    List<HiveColumnHandle> partitionColumns=getPartitionKeyColumnHandles(table,0);
    List<String> partitionNames=getFilteredPartitionNames(tableName,partitionColumns,effectivePredicate);
    ImmutableList.Builder<ConnectorPartition> partitions=ImmutableList.builder();
    for (    String partitionName : partitionNames) {
      Optional<Map<ConnectorColumnHandle,SerializableNativeValue>> values=parseValuesAndFilterPartition(partitionName,partitionColumns,effectivePredicate);
      if (values.isPresent()) {
        partitions.add(new HivePartition(tableName,compactEffectivePredicate,partitionName,values.get(),bucket));
      }
    }
    TupleDomain<ConnectorColumnHandle> remainingTupleDomain=TupleDomain.withColumnDomains(Maps.filterKeys(effectivePredicate.getDomains(),not(Predicates.<ConnectorColumnHandle>in(partitionColumns))));
    return new ConnectorPartitionResult(partitions.build(),remainingTupleDomain);
  }
}
