{
  long tableId0=1;
  long tableId1=2;
  String partitionName0="ds=2013-06-01";
  String partitionName1="foo=bar";
  dao.insertPartition(tableId0,partitionName0);
  dao.insertPartition(tableId1,partitionName1);
  PartitionKey testKey0=new NativePartitionKey(partitionName0,"ds",ColumnType.STRING,"2013-06-01");
  PartitionKey testKey1=new NativePartitionKey(partitionName1,"foo",ColumnType.STRING,"bar");
  long keyId0=dao.insertPartitionKey(tableId0,partitionName0,testKey0.getName(),testKey0.getType().toString(),testKey0.getValue());
  long keyId1=dao.insertPartitionKey(tableId0,partitionName0,testKey1.getName(),testKey1.getType().toString(),testKey1.getValue());
  assertNotEquals(keyId1,keyId0);
  long keyId2=dao.insertPartitionKey(tableId1,partitionName1,testKey1.getName(),testKey1.getType().toString(),testKey1.getValue());
  assertNotEquals(keyId2,keyId0);
  Set<NativePartitionKey> filteredKeys=ImmutableSet.copyOf(Collections2.filter(dao.getPartitionKeys(tableId1),NativePartitionKey.partitionNamePredicate(partitionName1)));
  assertEquals(filteredKeys.size(),1);
  Set<NativePartitionKey> retrievedKeys=dao.getPartitionKeys(tableId1);
  assertNotNull(retrievedKeys);
  assertEquals(retrievedKeys.size(),1);
  assertEquals(Iterables.getOnlyElement(retrievedKeys),testKey1);
}
