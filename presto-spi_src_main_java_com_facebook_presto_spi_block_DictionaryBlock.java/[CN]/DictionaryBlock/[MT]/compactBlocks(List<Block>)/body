{
  verifyEligibleToCompact(blocks);
  DictionaryBlock dictionaryBlock=(DictionaryBlock)blocks.get(0);
  Block dictionary=dictionaryBlock.getDictionary();
  Slice ids=dictionaryBlock.getIds();
  int positionCount=dictionaryBlock.getPositionCount();
  int dictionarySize=dictionary.getPositionCount();
  List<Integer> dictionaryPositionsToCopy=new ArrayList<>(dictionarySize);
  int[] remapIndex=new int[dictionarySize];
  Arrays.fill(remapIndex,-1);
  int newIndex=0;
  boolean[] copied=new boolean[dictionarySize];
  for (int i=0; i < positionCount; i++) {
    int position=getIndex(ids,i);
    if (!copied[position]) {
      dictionaryPositionsToCopy.add(position);
      remapIndex[position]=newIndex;
      newIndex++;
      copied[position]=true;
    }
  }
  if (dictionaryPositionsToCopy.size() == dictionarySize) {
    return blocks;
  }
  Slice newIdsSlice=wrappedIntArray(getNewIds(positionCount,ids,remapIndex));
  List<Block> outputDictionaryBlocks=new ArrayList<>(blocks.size());
  DictionaryId dictionaryId=randomDictionaryId();
  for (  Block block : blocks) {
    dictionaryBlock=((DictionaryBlock)block);
    try {
      Block compactDictionary=dictionaryBlock.getDictionary().copyPositions(dictionaryPositionsToCopy);
      outputDictionaryBlocks.add(new DictionaryBlock(positionCount,compactDictionary,newIdsSlice,true,dictionaryId));
    }
 catch (    UnsupportedOperationException e) {
      outputDictionaryBlocks.add(new DictionaryBlock(positionCount,dictionaryBlock.getDictionary(),dictionaryBlock.getIds()));
    }
  }
  return outputDictionaryBlocks;
}
