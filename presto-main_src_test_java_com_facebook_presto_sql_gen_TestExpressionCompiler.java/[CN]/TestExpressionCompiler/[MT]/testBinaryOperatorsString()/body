{
  for (  String left : stringLefts) {
    for (    String right : stringRights) {
      assertExecute(generateExpression("%s = %s",left,right),BOOLEAN,left == null || right == null ? null : left.equals(right));
      assertExecute(generateExpression("%s <> %s",left,right),BOOLEAN,left == null || right == null ? null : !left.equals(right));
      assertExecute(generateExpression("%s > %s",left,right),BOOLEAN,left == null || right == null ? null : left.compareTo(right) > 0);
      assertExecute(generateExpression("%s < %s",left,right),BOOLEAN,left == null || right == null ? null : left.compareTo(right) < 0);
      assertExecute(generateExpression("%s >= %s",left,right),BOOLEAN,left == null || right == null ? null : left.compareTo(right) >= 0);
      assertExecute(generateExpression("%s <= %s",left,right),BOOLEAN,left == null || right == null ? null : left.compareTo(right) <= 0);
      assertExecute(generateExpression("%s || %s",left,right),VARCHAR,left == null || right == null ? null : left + right);
      assertExecute(generateExpression("%s is distinct from %s",left,right),BOOLEAN,!Objects.equals(left,right));
      assertExecute(generateExpression("nullif(%s, %s)",left,right),varcharType(left),nullIf(left,right));
    }
  }
  Futures.allAsList(futures).get();
}
