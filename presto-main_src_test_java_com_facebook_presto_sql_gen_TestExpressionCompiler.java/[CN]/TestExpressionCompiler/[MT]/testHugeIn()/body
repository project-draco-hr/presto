{
  ContiguousSet<Integer> longValues=ContiguousSet.create(Range.openClosed(2000,7000),DiscreteDomain.integers());
  assertExecute("bound_long in (1234, " + Joiner.on(", ").join(longValues) + ")",true);
  assertExecute("bound_long in (" + Joiner.on(", ").join(longValues) + ")",false);
  Iterable<Object> doubleValues=transform(ContiguousSet.create(Range.openClosed(2000,7000),DiscreteDomain.integers()),new Function<Integer,Object>(){
    @Override public Object apply(    Integer i){
      return (double)i;
    }
  }
);
  assertExecute("bound_double in (12.34, " + Joiner.on(", ").join(doubleValues) + ")",true);
  assertExecute("bound_double in (" + Joiner.on(", ").join(doubleValues) + ")",false);
  Iterable<Object> stringValues=transform(ContiguousSet.create(Range.openClosed(2000,7000),DiscreteDomain.integers()),new Function<Integer,Object>(){
    @Override public Object apply(    Integer i){
      return "'" + i + "'";
    }
  }
);
  assertExecute("bound_string in ('hello', " + Joiner.on(", ").join(stringValues) + ")",true);
  assertExecute("bound_string in (" + Joiner.on(", ").join(stringValues) + ")",false);
  Futures.allAsList(futures).get();
}
