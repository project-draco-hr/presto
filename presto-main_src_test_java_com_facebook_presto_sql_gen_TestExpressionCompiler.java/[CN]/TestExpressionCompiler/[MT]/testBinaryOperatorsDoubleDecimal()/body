{
  for (  Double left : doubleLefts) {
    for (    BigDecimal right : decimalRights) {
      assertExecute(generateExpression("%s = %s",left,right),BOOLEAN,left == null || right == null ? null : left == right.doubleValue());
      assertExecute(generateExpression("%s <> %s",left,right),BOOLEAN,left == null || right == null ? null : left != right.doubleValue());
      assertExecute(generateExpression("%s > %s",left,right),BOOLEAN,left == null || right == null ? null : left > right.doubleValue());
      assertExecute(generateExpression("%s < %s",left,right),BOOLEAN,left == null || right == null ? null : left < right.doubleValue());
      assertExecute(generateExpression("%s >= %s",left,right),BOOLEAN,left == null || right == null ? null : left >= right.doubleValue());
      assertExecute(generateExpression("%s <= %s",left,right),BOOLEAN,left == null || right == null ? null : left <= right.doubleValue());
      assertExecute(generateExpression("nullif(%s, %s)",left,right),DOUBLE,nullIf(left,right));
      assertExecute(generateExpression("%s is distinct from %s",left,right),BOOLEAN,!Objects.equals(left,right == null ? null : right.doubleValue()));
      assertExecute(generateExpression("%s + %s",left,right),DOUBLE,left == null || right == null ? null : left + right.doubleValue());
      assertExecute(generateExpression("%s - %s",left,right),DOUBLE,left == null || right == null ? null : left - right.doubleValue());
      assertExecute(generateExpression("%s * %s",left,right),DOUBLE,left == null || right == null ? null : left * right.doubleValue());
      assertExecute(generateExpression("%s / %s",left,right),DOUBLE,left == null || right == null ? null : left / right.doubleValue());
      assertExecute(generateExpression("%s %% %s",left,right),DOUBLE,left == null || right == null ? null : left % right.doubleValue());
    }
  }
  Futures.allAsList(futures).get();
}
