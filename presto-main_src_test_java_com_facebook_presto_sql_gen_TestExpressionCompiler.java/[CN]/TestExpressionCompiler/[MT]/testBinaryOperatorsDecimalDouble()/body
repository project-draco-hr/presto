{
  for (  BigDecimal left : decimalLefts) {
    for (    Double right : doubleRights) {
      assertExecute(generateExpression("%s = %s",left,right),BOOLEAN,left == null || right == null ? null : left.doubleValue() == right);
      assertExecute(generateExpression("%s <> %s",left,right),BOOLEAN,left == null || right == null ? null : left.doubleValue() != right);
      assertExecute(generateExpression("%s > %s",left,right),BOOLEAN,left == null || right == null ? null : left.doubleValue() > right);
      assertExecute(generateExpression("%s < %s",left,right),BOOLEAN,left == null || right == null ? null : left.doubleValue() < right);
      assertExecute(generateExpression("%s >= %s",left,right),BOOLEAN,left == null || right == null ? null : left.doubleValue() >= right);
      assertExecute(generateExpression("%s <= %s",left,right),BOOLEAN,left == null || right == null ? null : left.doubleValue() <= right);
      assertExecute(generateExpression("nullif(%s, %s)",left,right),BigDecimal.class.cast(nullIf(left,right)));
      assertExecute(generateExpression("%s is distinct from %s",left,right),BOOLEAN,!Objects.equals(left == null ? null : left.doubleValue(),right));
      assertExecute(generateExpression("%s + %s",left,right),DOUBLE,left == null || right == null ? null : left.doubleValue() + right);
      assertExecute(generateExpression("%s - %s",left,right),DOUBLE,left == null || right == null ? null : left.doubleValue() - right);
      assertExecute(generateExpression("%s * %s",left,right),DOUBLE,left == null || right == null ? null : left.doubleValue() * right);
      assertExecute(generateExpression("%s / %s",left,right),DOUBLE,left == null || right == null ? null : left.doubleValue() / right);
      assertExecute(generateExpression("%s %% %s",left,right),DOUBLE,left == null || right == null ? null : left.doubleValue() % right);
    }
  }
  Futures.allAsList(futures).get();
}
