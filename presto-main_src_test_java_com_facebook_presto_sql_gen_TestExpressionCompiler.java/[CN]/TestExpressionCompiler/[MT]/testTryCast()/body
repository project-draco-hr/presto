{
  assertExecute("try_cast(null as integer)",INTEGER,null);
  assertExecute("try_cast('123' as integer)",INTEGER,123);
  assertExecute("try_cast(null as bigint)",BIGINT,null);
  assertExecute("try_cast('123' as bigint)",BIGINT,123L);
  assertExecute("try_cast('foo' as varchar)",VARCHAR,"foo");
  assertExecute("try_cast('foo' as bigint)",BIGINT,null);
  assertExecute("try_cast('foo' as integer)",INTEGER,null);
  assertExecute("try_cast('2001-08-22' as timestamp)",TIMESTAMP,new SqlTimestamp(new DateTime(2001,8,22,0,0,0,0,UTC).getMillis(),UTC_KEY));
  assertExecute("try_cast(bound_string as bigint)",BIGINT,null);
  assertExecute("try_cast(cast(null as varchar) as bigint)",BIGINT,null);
  assertExecute("try_cast(bound_long / 13  as bigint)",BIGINT,94L);
  assertExecute("coalesce(try_cast('123' as bigint), 456)",BIGINT,123L);
  assertExecute("coalesce(try_cast('foo' as bigint), 456)",BIGINT,456L);
  assertExecute("concat('foo', cast('bar' as varchar))",VARCHAR,"foobar");
  assertExecute("try_cast(try_cast(123 as varchar) as bigint)",BIGINT,123L);
  assertExecute("try_cast('foo' as varchar) || try_cast('bar' as varchar)",VARCHAR,"foobar");
  Futures.allAsList(futures).get();
}
