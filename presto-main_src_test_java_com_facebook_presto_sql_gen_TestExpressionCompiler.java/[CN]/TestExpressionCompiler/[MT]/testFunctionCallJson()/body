{
  for (  String value : jsonValues) {
    for (    String pattern : jsonPatterns) {
      assertExecute(generateExpression("json_extract(%s, %s)",value,pattern),JSON,value == null || pattern == null ? null : JsonFunctions.jsonExtract(utf8Slice(value),new JsonPath(pattern)));
      assertExecute(generateExpression("json_extract_scalar(%s, %s)",value,pattern),VARCHAR,value == null || pattern == null ? null : JsonFunctions.jsonExtractScalar(utf8Slice(value),new JsonPath(pattern)));
      assertExecute(generateExpression("json_extract(%s, %s || '')",value,pattern),JSON,value == null || pattern == null ? null : JsonFunctions.jsonExtract(utf8Slice(value),new JsonPath(pattern)));
      assertExecute(generateExpression("json_extract_scalar(%s, %s || '')",value,pattern),VARCHAR,value == null || pattern == null ? null : JsonFunctions.jsonExtractScalar(utf8Slice(value),new JsonPath(pattern)));
    }
  }
  assertExecute("json_array_contains('[1, 2, 3]', 2)",BOOLEAN,true);
  assertExecute("json_array_contains('[1, 2, 3]', BIGINT '2')",BOOLEAN,true);
  assertExecute("json_array_contains('[2.5]', 2.5)",BOOLEAN,true);
  assertExecute("json_array_contains('[false, true]', true)",BOOLEAN,true);
  assertExecute("json_array_contains('[5]', 3)",BOOLEAN,false);
  assertExecute("json_array_contains('[', 9)",BOOLEAN,null);
  assertExecute("json_array_length('[')",BIGINT,null);
  Futures.allAsList(futures).get();
}
