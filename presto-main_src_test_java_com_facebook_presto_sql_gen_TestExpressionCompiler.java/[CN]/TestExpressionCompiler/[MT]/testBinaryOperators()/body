{
  for (  Boolean left : booleanValues) {
    for (    Boolean right : booleanValues) {
      assertExecute(generateExpression("%s = %s",left,right),left == null || right == null ? null : left == right);
      assertExecute(generateExpression("%s <> %s",left,right),left == null || right == null ? null : left != right);
      assertExecute(generateExpression("nullif(%s, %s)",left,right),nullIf(boolean.class,left,right));
    }
  }
  for (  Long left : longLefts) {
    for (    Long right : longRights) {
      assertExecute(generateExpression("%s = %s",left,right),left == null || right == null ? null : (long)left == right);
      assertExecute(generateExpression("%s <> %s",left,right),left == null || right == null ? null : (long)left != right);
      assertExecute(generateExpression("%s > %s",left,right),left == null || right == null ? null : (long)left > right);
      assertExecute(generateExpression("%s < %s",left,right),left == null || right == null ? null : (long)left < right);
      assertExecute(generateExpression("%s >= %s",left,right),left == null || right == null ? null : (long)left >= right);
      assertExecute(generateExpression("%s <= %s",left,right),left == null || right == null ? null : (long)left <= right);
      assertExecute(generateExpression("nullif(%s, %s)",left,right),nullIf(long.class,left,right));
      assertExecute(generateExpression("%s + %s",left,right),left == null || right == null ? null : left + right);
      assertExecute(generateExpression("%s - %s",left,right),left == null || right == null ? null : left - right);
      assertExecute(generateExpression("%s * %s",left,right),left == null || right == null ? null : left * right);
      assertExecute(generateExpression("%s / %s",left,right),left == null || right == null ? null : left / right);
      assertExecute(generateExpression("%s %% %s",left,right),left == null || right == null ? null : left % right);
    }
  }
  for (  Long left : longLefts) {
    for (    Double right : doubleRights) {
      assertExecute(generateExpression("%s = %s",left,right),left == null || right == null ? null : (double)left == right);
      assertExecute(generateExpression("%s <> %s",left,right),left == null || right == null ? null : (double)left != right);
      assertExecute(generateExpression("%s > %s",left,right),left == null || right == null ? null : (double)left > right);
      assertExecute(generateExpression("%s < %s",left,right),left == null || right == null ? null : (double)left < right);
      assertExecute(generateExpression("%s >= %s",left,right),left == null || right == null ? null : (double)left >= right);
      assertExecute(generateExpression("%s <= %s",left,right),left == null || right == null ? null : (double)left <= right);
      Object expectedNullIf=nullIf(double.class,left,right);
      for (      String expression : generateExpression("nullif(%s, %s)",left,right)) {
        try {
          Object actual=execute(expression);
          if (!Objects.equals(actual,expectedNullIf)) {
            if (left != null && right == null) {
              expectedNullIf=((Number)expectedNullIf).doubleValue();
              actual=((Number)expectedNullIf).doubleValue();
            }
            assertEquals(actual,expectedNullIf,expression);
          }
        }
 catch (        Exception e) {
          throw new RuntimeException("Error processing " + expression,e);
        }
      }
      assertExecute(generateExpression("%s + %s",left,right),left == null || right == null ? null : left + right);
      assertExecute(generateExpression("%s - %s",left,right),left == null || right == null ? null : left - right);
      assertExecute(generateExpression("%s * %s",left,right),left == null || right == null ? null : left * right);
      assertExecute(generateExpression("%s / %s",left,right),left == null || right == null ? null : left / right);
      assertExecute(generateExpression("%s %% %s",left,right),left == null || right == null ? null : left % right);
    }
  }
  for (  Double left : doubleLefts) {
    for (    Long right : longRights) {
      assertExecute(generateExpression("%s = %s",left,right),left == null || right == null ? null : left == (double)right);
      assertExecute(generateExpression("%s <> %s",left,right),left == null || right == null ? null : left != (double)right);
      assertExecute(generateExpression("%s > %s",left,right),left == null || right == null ? null : left > (double)right);
      assertExecute(generateExpression("%s < %s",left,right),left == null || right == null ? null : left < (double)right);
      assertExecute(generateExpression("%s >= %s",left,right),left == null || right == null ? null : left >= (double)right);
      assertExecute(generateExpression("%s <= %s",left,right),left == null || right == null ? null : left <= (double)right);
      assertExecute(generateExpression("nullif(%s, %s)",left,right),nullIf(double.class,left,right));
      assertExecute(generateExpression("%s + %s",left,right),left == null || right == null ? null : left + right);
      assertExecute(generateExpression("%s - %s",left,right),left == null || right == null ? null : left - right);
      assertExecute(generateExpression("%s * %s",left,right),left == null || right == null ? null : left * right);
      assertExecute(generateExpression("%s / %s",left,right),left == null || right == null ? null : left / right);
      assertExecute(generateExpression("%s %% %s",left,right),left == null || right == null ? null : left % right);
    }
  }
  for (  Double left : doubleLefts) {
    for (    Double right : doubleRights) {
      assertExecute(generateExpression("%s = %s",left,right),left == null || right == null ? null : (double)left == right);
      assertExecute(generateExpression("%s <> %s",left,right),left == null || right == null ? null : (double)left != right);
      assertExecute(generateExpression("%s > %s",left,right),left == null || right == null ? null : (double)left > right);
      assertExecute(generateExpression("%s < %s",left,right),left == null || right == null ? null : (double)left < right);
      assertExecute(generateExpression("%s >= %s",left,right),left == null || right == null ? null : (double)left >= right);
      assertExecute(generateExpression("%s <= %s",left,right),left == null || right == null ? null : (double)left <= right);
      assertExecute(generateExpression("nullif(%s, %s)",left,right),nullIf(double.class,left,right));
      assertExecute(generateExpression("%s + %s",left,right),left == null || right == null ? null : left + right);
      assertExecute(generateExpression("%s - %s",left,right),left == null || right == null ? null : left - right);
      assertExecute(generateExpression("%s * %s",left,right),left == null || right == null ? null : left * right);
      assertExecute(generateExpression("%s / %s",left,right),left == null || right == null ? null : left / right);
      assertExecute(generateExpression("%s %% %s",left,right),left == null || right == null ? null : left % right);
    }
  }
  for (  String left : stringLefts) {
    for (    String right : stringRights) {
      assertExecute(generateExpression("%s = %s",left,right),left == null || right == null ? null : left.equals(right));
      assertExecute(generateExpression("%s <> %s",left,right),left == null || right == null ? null : !left.equals(right));
      assertExecute(generateExpression("%s > %s",left,right),left == null || right == null ? null : left.compareTo(right) > 0);
      assertExecute(generateExpression("%s < %s",left,right),left == null || right == null ? null : left.compareTo(right) < 0);
      assertExecute(generateExpression("%s >= %s",left,right),left == null || right == null ? null : left.compareTo(right) >= 0);
      assertExecute(generateExpression("%s <= %s",left,right),left == null || right == null ? null : left.compareTo(right) <= 0);
      assertExecute(generateExpression("nullif(%s, %s)",left,right),nullIf(String.class,left,right));
    }
  }
}
