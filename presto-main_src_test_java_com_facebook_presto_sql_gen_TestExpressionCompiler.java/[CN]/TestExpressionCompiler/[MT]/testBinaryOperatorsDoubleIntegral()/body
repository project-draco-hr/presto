{
  for (  Double left : doubleLefts) {
    for (    Integer right : intRights) {
      assertExecute(generateExpression("%s = %s",left,right),BOOLEAN,left == null || right == null ? null : left == (double)right);
      assertExecute(generateExpression("%s <> %s",left,right),BOOLEAN,left == null || right == null ? null : left != (double)right);
      assertExecute(generateExpression("%s > %s",left,right),BOOLEAN,left == null || right == null ? null : left > (double)right);
      assertExecute(generateExpression("%s < %s",left,right),BOOLEAN,left == null || right == null ? null : left < (double)right);
      assertExecute(generateExpression("%s >= %s",left,right),BOOLEAN,left == null || right == null ? null : left >= (double)right);
      assertExecute(generateExpression("%s <= %s",left,right),BOOLEAN,left == null || right == null ? null : left <= (double)right);
      assertExecute(generateExpression("nullif(%s, %s)",left,right),DOUBLE,nullIf(left,right));
      assertExecute(generateExpression("%s is distinct from %s",left,right),BOOLEAN,!Objects.equals(left,right == null ? null : right.doubleValue()));
      assertExecute(generateExpression("%s + %s",left,right),DOUBLE,left == null || right == null ? null : left + right);
      assertExecute(generateExpression("%s - %s",left,right),DOUBLE,left == null || right == null ? null : left - right);
      assertExecute(generateExpression("%s * %s",left,right),DOUBLE,left == null || right == null ? null : left * right);
      assertExecute(generateExpression("%s / %s",left,right),DOUBLE,left == null || right == null ? null : left / right);
      assertExecute(generateExpression("%s %% %s",left,right),DOUBLE,left == null || right == null ? null : left % right);
    }
  }
  Futures.allAsList(futures).get();
}
