{
  for (  Boolean value : booleanValues) {
    assertExecute(generateExpression("cast(%s as boolean)",value),BOOLEAN,value == null ? null : (value ? true : false));
    assertExecute(generateExpression("cast(%s as bigint)",value),BIGINT,value == null ? null : (value ? 1L : 0L));
    assertExecute(generateExpression("cast(%s as double)",value),DOUBLE,value == null ? null : (value ? 1.0 : 0.0));
    assertExecute(generateExpression("cast(%s as varchar)",value),VARCHAR,value == null ? null : (value ? "true" : "false"));
  }
  for (  Long value : longLefts) {
    assertExecute(generateExpression("cast(%s as boolean)",value),BOOLEAN,value == null ? null : (value != 0L ? true : false));
    assertExecute(generateExpression("cast(%s as bigint)",value),BIGINT,value == null ? null : value);
    assertExecute(generateExpression("cast(%s as double)",value),DOUBLE,value == null ? null : value.doubleValue());
    assertExecute(generateExpression("cast(%s as varchar)",value),VARCHAR,value == null ? null : String.valueOf(value));
  }
  for (  Double value : doubleLefts) {
    assertExecute(generateExpression("cast(%s as boolean)",value),BOOLEAN,value == null ? null : (value != 0.0 ? true : false));
    assertExecute(generateExpression("cast(%s as bigint)",value),BIGINT,value == null ? null : value.longValue());
    assertExecute(generateExpression("cast(%s as double)",value),DOUBLE,value == null ? null : value);
    assertExecute(generateExpression("cast(%s as varchar)",value),VARCHAR,value == null ? null : String.valueOf(value));
  }
  assertExecute("cast('true' as boolean)",BOOLEAN,true);
  assertExecute("cast('true' as BOOLEAN)",BOOLEAN,true);
  assertExecute("cast('tRuE' as BOOLEAN)",BOOLEAN,true);
  assertExecute("cast('false' as BOOLEAN)",BOOLEAN,false);
  assertExecute("cast('fAlSe' as BOOLEAN)",BOOLEAN,false);
  assertExecute("cast('t' as BOOLEAN)",BOOLEAN,true);
  assertExecute("cast('T' as BOOLEAN)",BOOLEAN,true);
  assertExecute("cast('f' as BOOLEAN)",BOOLEAN,false);
  assertExecute("cast('F' as BOOLEAN)",BOOLEAN,false);
  assertExecute("cast('1' as BOOLEAN)",BOOLEAN,true);
  assertExecute("cast('0' as BOOLEAN)",BOOLEAN,false);
  for (  Long value : longLefts) {
    if (value != null) {
      assertExecute(generateExpression("cast(%s as bigint)",String.valueOf(value)),BIGINT,value == null ? null : value);
    }
  }
  for (  Double value : doubleLefts) {
    if (value != null) {
      assertExecute(generateExpression("cast(%s as double)",String.valueOf(value)),DOUBLE,value == null ? null : value);
    }
  }
  for (  String value : stringLefts) {
    assertExecute(generateExpression("cast(%s as varchar)",value),VARCHAR,value == null ? null : value);
  }
  Futures.allAsList(futures).get();
}
