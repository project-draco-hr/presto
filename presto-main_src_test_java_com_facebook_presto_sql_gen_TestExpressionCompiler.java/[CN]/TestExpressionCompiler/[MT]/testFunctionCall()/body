{
  for (  Long left : longLefts) {
    for (    Long right : longRights) {
      assertExecute(generateExpression("log(%s, %s)",left,right),left == null || right == null ? null : MathFunctions.log(left,right));
    }
  }
  for (  Long left : longLefts) {
    for (    Double right : doubleRights) {
      assertExecute(generateExpression("log(%s, %s)",left,right),left == null || right == null ? null : MathFunctions.log(left,right));
    }
  }
  for (  Double left : doubleLefts) {
    for (    Long right : longRights) {
      assertExecute(generateExpression("log(%s, %s)",left,right),left == null || right == null ? null : MathFunctions.log(left,right));
    }
  }
  for (  Double left : doubleLefts) {
    for (    Double right : doubleRights) {
      assertExecute(generateExpression("log(%s, %s)",left,right),left == null || right == null ? null : MathFunctions.log(left,right));
    }
  }
  for (  String value : stringLefts) {
    for (    Long start : longLefts) {
      for (      Long length : longRights) {
        String expected;
        if (value == null || start == null || length == null) {
          expected=null;
        }
 else {
          expected=StringFunctions.substr(Slices.copiedBuffer(value,UTF_8),start,length).toString(UTF_8);
        }
        assertExecute(generateExpression("substr(%s, %s, %s)",value,start,length),expected);
      }
    }
  }
  for (  String value : stringLefts) {
    for (    String pattern : stringRights) {
      assertExecute(generateExpression("regexp_like(%s, %s)",value,pattern),value == null || pattern == null ? null : RegexpFunctions.regexpLike(Slices.copiedBuffer(value,UTF_8),Slices.copiedBuffer(pattern,UTF_8)));
      assertExecute(generateExpression("regexp_replace(%s, %s)",value,pattern),value == null || pattern == null ? null : RegexpFunctions.regexpReplace(Slices.copiedBuffer(value,UTF_8),Slices.copiedBuffer(pattern,UTF_8)));
      assertExecute(generateExpression("regexp_extract(%s, %s)",value,pattern),value == null || pattern == null ? null : RegexpFunctions.regexpExtract(Slices.copiedBuffer(value,UTF_8),Slices.copiedBuffer(pattern,UTF_8)));
    }
  }
  for (  String value : jsonValues) {
    for (    String pattern : jsonPatterns) {
      assertExecute(generateExpression("json_extract(%s, %s)",value,pattern),value == null || pattern == null ? null : JsonFunctions.jsonExtract(Slices.copiedBuffer(value,UTF_8),Slices.copiedBuffer(pattern,UTF_8)));
      assertExecute(generateExpression("json_extract_scalar(%s, %s)",value,pattern),value == null || pattern == null ? null : JsonFunctions.jsonExtractScalar(Slices.copiedBuffer(value,UTF_8),Slices.copiedBuffer(pattern,UTF_8)));
      assertExecute(generateExpression("json_extract(%s, %s || '')",value,pattern),value == null || pattern == null ? null : JsonFunctions.jsonExtract(Slices.copiedBuffer(value,UTF_8),Slices.copiedBuffer(pattern,UTF_8)));
      assertExecute(generateExpression("json_extract_scalar(%s, %s || '')",value,pattern),value == null || pattern == null ? null : JsonFunctions.jsonExtractScalar(Slices.copiedBuffer(value,UTF_8),Slices.copiedBuffer(pattern,UTF_8)));
    }
  }
}
