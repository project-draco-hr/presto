{
  for (  Integer left : intLefts) {
    for (    Integer right : intRights) {
      assertExecute(generateExpression("log(%s, %s)",left,right),DOUBLE,left == null || right == null ? null : MathFunctions.log(left,right));
    }
  }
  for (  Integer left : intLefts) {
    for (    Double right : doubleRights) {
      assertExecute(generateExpression("log(%s, %s)",left,right),DOUBLE,left == null || right == null ? null : MathFunctions.log(left,right));
    }
  }
  for (  Double left : doubleLefts) {
    for (    Integer right : intRights) {
      assertExecute(generateExpression("log(%s, %s)",left,right),DOUBLE,left == null || right == null ? null : MathFunctions.log(left,right));
    }
  }
  for (  Double left : doubleLefts) {
    for (    Double right : doubleRights) {
      assertExecute(generateExpression("log(%s, %s)",left,right),DOUBLE,left == null || right == null ? null : MathFunctions.log(left,right));
    }
  }
  for (  String value : stringLefts) {
    for (    Integer start : intLefts) {
      for (      Integer length : intRights) {
        String expected;
        if (value == null || start == null || length == null) {
          expected=null;
        }
 else {
          expected=StringFunctions.substr(utf8Slice(value),start,length).toStringUtf8();
        }
        VarcharType expectedType=value != null ? createVarcharType(value.length()) : VARCHAR;
        assertExecute(generateExpression("substr(%s, %s, %s)",value,start,length),expectedType,expected);
      }
    }
  }
  Futures.allAsList(futures).get();
}
