{
  JobConf jobConf=new JobConf();
  Properties tableProperties=new Properties();
  tableProperties.setProperty("columns",COLUMN_NAMES_STRING);
  tableProperties.setProperty("columns.types",COLUMN_TYPES);
  serDe.initialize(new Configuration(),tableProperties);
  if (compressionCodec != null) {
    CompressionCodec codec=new CompressionCodecFactory(new Configuration()).getCodecByName(compressionCodec);
    jobConf.set(COMPRESS_CODEC,codec.getClass().getName());
    jobConf.set(COMPRESS_TYPE,SequenceFile.CompressionType.BLOCK.toString());
  }
  RecordWriter recordWriter=outputFormat.getHiveRecordWriter(jobConf,new Path(filePath),Text.class,compressionCodec != null,tableProperties,new Progressable(){
    @Override public void progress(){
    }
  }
);
  try {
    serDe.initialize(new Configuration(),tableProperties);
    SettableStructObjectInspector objectInspector=getStandardStructObjectInspector(COLUMN_NAMES,FIELD_INSPECTORS);
    Object row=objectInspector.create();
    List<StructField> fields=ImmutableList.copyOf(objectInspector.getAllStructFieldRefs());
    for (int rowNumber=0; rowNumber < NUM_ROWS; rowNumber++) {
      for (int i=0; i < TEST_VALUES.size(); i++) {
        objectInspector.setStructFieldData(row,fields.get(i),TEST_VALUES.get(i).getKey());
      }
      Writable record=serDe.serialize(row,objectInspector);
      recordWriter.write(record);
    }
  }
  finally {
    recordWriter.close(false);
  }
  Path path=new Path(filePath);
  path.getFileSystem(new Configuration()).setVerifyChecksum(true);
  File file=new File(filePath);
  return new FileSplit(path,0,file.length(),new String[0]);
}
