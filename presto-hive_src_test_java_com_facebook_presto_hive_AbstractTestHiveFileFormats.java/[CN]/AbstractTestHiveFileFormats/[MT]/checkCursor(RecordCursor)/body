{
  for (int row=0; row < NUM_ROWS; row++) {
    assertTrue(cursor.advanceNextPosition());
    assertTrue(cursor.isNull(0));
    assertTrue(cursor.isNull(1));
    for (int i=2; i < TEST_VALUES.size(); i++) {
      Object fieldFromCursor;
      Type type=HiveType.getHiveType(FIELD_INSPECTORS.get(i)).getNativeType();
      if (BOOLEAN.equals(type)) {
        fieldFromCursor=cursor.getBoolean(i);
      }
 else       if (BIGINT.equals(type)) {
        fieldFromCursor=cursor.getLong(i);
      }
 else       if (DOUBLE.equals(type)) {
        fieldFromCursor=cursor.getDouble(i);
      }
 else       if (VARCHAR.equals(type)) {
        fieldFromCursor=cursor.getSlice(i);
      }
 else       if (TimestampType.TIMESTAMP.equals(type)) {
        fieldFromCursor=cursor.getLong(i);
      }
 else {
        throw new RuntimeException("unknown type");
      }
      if (FIELD_INSPECTORS.get(i).getTypeName().equals("float") || FIELD_INSPECTORS.get(i).getTypeName().equals("double")) {
        assertEquals((double)fieldFromCursor,(double)TEST_VALUES.get(i).getValue(),EPSILON);
      }
 else       if (FIELD_INSPECTORS.get(i).getCategory() == ObjectInspector.Category.PRIMITIVE) {
        assertEquals(fieldFromCursor,TEST_VALUES.get(i).getValue(),String.format("Wrong value for column %d",i));
      }
 else {
        ObjectMapper mapper=new ObjectMapper();
        JsonNode expected=mapper.readTree((String)TEST_VALUES.get(i).getValue());
        JsonNode actual=mapper.readTree(((Slice)fieldFromCursor).getBytes());
        assertEquals(actual,expected,String.format("Wrong value for column %s",COLUMN_NAMES.get(i)));
      }
    }
  }
}
