{
  PhysicalOperation query=node.getSource().accept(this,context);
  ImmutableList.Builder<ColumnHandle> columns=ImmutableList.builder();
  ImmutableList.Builder<Symbol> symbols=ImmutableList.builder();
  for (  Map.Entry<Symbol,ColumnHandle> entry : node.getColumns().entrySet()) {
    symbols.add(entry.getKey());
    columns.add(entry.getValue());
  }
  IdentityProjectionInfo mappings=computeIdentityMapping(symbols.build(),query.getLayout(),context.getTypes());
  NewOperatorFactory sourceOperator=new NewFilterAndProjectOperatorFactory(FilterFunctions.TRUE_FUNCTION,mappings.getProjections());
  PhysicalOperation source=new PhysicalOperation(sourceOperator,mappings.getOutputLayout(),query);
  Symbol outputSymbol=Iterables.getOnlyElement(node.getOutputSymbols());
  NewTableWriterOperatorFactory operator=new NewTableWriterOperatorFactory(node.getId(),storageManager,nodeInfo.getNodeId(),columns.build());
  return new PhysicalOperation(operator,ImmutableMultimap.of(outputSymbol,new Input(0,0)),source);
}
