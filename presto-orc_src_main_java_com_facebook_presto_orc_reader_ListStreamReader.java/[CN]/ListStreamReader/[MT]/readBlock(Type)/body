{
  if (!rowGroupOpen) {
    openRowGroup();
  }
  if (readOffset > 0) {
    if (presentStream != null) {
      readOffset=presentStream.countBitsSet(readOffset);
    }
    if (readOffset > 0) {
      if (lengthStream == null) {
        throw new OrcCorruptionException("Value is not null but data stream is not present");
      }
      long elementSkipSize=lengthStream.sum(readOffset);
      elementStreamReader.prepareNextRead(Ints.checkedCast(elementSkipSize));
    }
  }
  int[] offsets=new int[nextBatchSize];
  boolean[] nullVector=new boolean[nextBatchSize];
  if (presentStream == null) {
    if (lengthStream == null) {
      throw new OrcCorruptionException("Value is not null but data stream is not present");
    }
    lengthStream.nextIntVector(nextBatchSize,offsets);
  }
 else {
    int nullValues=presentStream.getUnsetBits(nextBatchSize,nullVector);
    if (nullValues != nextBatchSize) {
      if (lengthStream == null) {
        throw new OrcCorruptionException("Value is not null but data stream is not present");
      }
      lengthStream.nextIntVector(nextBatchSize,offsets,nullVector);
    }
  }
  for (int i=1; i < offsets.length; i++) {
    offsets[i]+=offsets[i - 1];
  }
  Type elementType=type.getTypeParameters().get(0);
  int elementCount=offsets[offsets.length - 1];
  Block elements;
  if (elementCount > 0) {
    elementStreamReader.prepareNextRead(elementCount);
    elements=elementStreamReader.readBlock(elementType);
  }
 else {
    elements=elementType.createBlockBuilder(new BlockBuilderStatus(),0).build();
  }
  ArrayBlock arrayBlock=new ArrayBlock(elements,Slices.wrappedIntArray(offsets),0,Slices.wrappedBooleanArray(nullVector));
  readOffset=0;
  nextBatchSize=0;
  return arrayBlock;
}
