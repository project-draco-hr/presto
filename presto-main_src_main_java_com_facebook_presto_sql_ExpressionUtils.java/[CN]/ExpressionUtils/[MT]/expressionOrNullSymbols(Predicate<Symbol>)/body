{
  return new Function<Expression,Expression>(){
    @Override public Expression apply(    Expression expression){
      Iterable<Symbol> symbols=filter(DependencyExtractor.extractUnique(expression),nullSymbolScope);
      if (Iterables.isEmpty(symbols)) {
        return expression;
      }
      ImmutableList.Builder<Expression> nullConjuncts=ImmutableList.builder();
      for (      Symbol symbol : symbols) {
        nullConjuncts.add(new IsNullPredicate(new QualifiedNameReference(symbol.toQualifiedName())));
      }
      return or(expression,and(nullConjuncts.build()));
    }
  }
;
}
