{
  if (compressedPages.isEmpty()) {
    return null;
  }
  ParquetDataPage compressedPage=compressedPages.remove(0);
  try {
    if (compressedPage instanceof ParquetDataPageV1) {
      ParquetDataPageV1 dataPageV1=(ParquetDataPageV1)compressedPage;
      return new ParquetDataPageV1(decompress(codec,dataPageV1.getSlice(),dataPageV1.getUncompressedSize()),dataPageV1.getValueCount(),dataPageV1.getUncompressedSize(),dataPageV1.getStatistics(),dataPageV1.getRepetitionLevelEncoding(),dataPageV1.getDefinitionLevelEncoding(),dataPageV1.getValueEncoding());
    }
 else {
      ParquetDataPageV2 dataPageV2=(ParquetDataPageV2)compressedPage;
      if (!dataPageV2.isCompressed()) {
        return dataPageV2;
      }
      int uncompressedSize=Ints.checkedCast(dataPageV2.getUncompressedSize() - dataPageV2.getDefinitionLevels().length() - dataPageV2.getRepetitionLevels().length());
      return new ParquetDataPageV2(dataPageV2.getRowCount(),dataPageV2.getNullCount(),dataPageV2.getValueCount(),dataPageV2.getRepetitionLevels(),dataPageV2.getDefinitionLevels(),dataPageV2.getDataEncoding(),decompress(codec,dataPageV2.getSlice(),uncompressedSize),dataPageV2.getUncompressedSize(),dataPageV2.getStatistics(),false);
    }
  }
 catch (  IOException e) {
    throw new RuntimeException("Could not decompress page",e);
  }
}
