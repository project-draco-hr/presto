{
  ScalarOperator scalarOperator=method.getAnnotation(ScalarOperator.class);
  if (scalarOperator == null) {
    return false;
  }
  checkValidMethod(method);
  MethodHandle methodHandle=lookup().unreflect(method);
  OperatorType operatorType=scalarOperator.value();
  List<Type> parameterTypes=parameterTypes(typeManager,method);
  Type returnType;
  if (operatorType == OperatorType.HASH_CODE) {
    returnType=BIGINT;
  }
 else {
    SqlType explicitType=method.getAnnotation(SqlType.class);
    checkArgument(explicitType != null,"Method %s return type does not have a @SqlType annotation",method);
    returnType=type(typeManager,explicitType);
    verifyMethodSignature(method,returnType.getName(),Lists.transform(parameterTypes,nameGetter()),typeManager);
  }
  List<Boolean> nullableArguments=getNullableArguments(method);
  operator(operatorType,returnType,parameterTypes,methodHandle,method.isAnnotationPresent(Nullable.class),nullableArguments);
  return true;
}
