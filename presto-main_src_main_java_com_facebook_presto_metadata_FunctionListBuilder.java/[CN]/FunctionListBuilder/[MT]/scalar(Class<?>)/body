{
  ScalarFunction scalarAnnotation=clazz.getAnnotation(ScalarFunction.class);
  ScalarOperator operatorAnnotation=clazz.getAnnotation(ScalarOperator.class);
  if (scalarAnnotation != null || operatorAnnotation != null) {
    functions.add(ReflectionParametricScalar.parseDefinition(clazz));
    return this;
  }
  try {
    boolean foundOne=false;
    for (    Method method : clazz.getMethods()) {
      foundOne=processScalarFunction(method) || foundOne;
      foundOne=processScalarOperator(method) || foundOne;
    }
    checkArgument(foundOne,"Expected class %s to be annotated with @%s, or contain at least one method annotated with @%s",clazz.getName(),ScalarFunction.class.getSimpleName(),ScalarFunction.class.getSimpleName());
  }
 catch (  IllegalAccessException e) {
    throw Throwables.propagate(e);
  }
  return this;
}
