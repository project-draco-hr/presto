{
  if (blocks[0].getRange().getEnd() < startPosition && !iterators[0].hasNext()) {
    for (    Iterator<? extends Block> iterator : iterators) {
      checkState(!iterator.hasNext());
    }
    return endOfData();
  }
  long endPosition=Long.MAX_VALUE;
  for (int i=0; i < iterators.length; i++) {
    Iterator<? extends Block> iterator=iterators[i];
    Block block=blocks[i];
    Range range=block.getRange();
    if (range.getEnd() < startPosition) {
      block=iterator.next();
      range=block.getRange();
      blocks[i]=block;
    }
    endPosition=Math.min(endPosition,range.getEnd());
  }
  Range range=new Range(startPosition,endPosition);
  startPosition=endPosition + 1;
  Block[] page=new Block[blocks.length];
  for (int i=0; i < page.length; i++) {
    page[i]=new RangeBoundedBlock(range,blocks[i].cursor());
  }
  return new Page(page);
}
