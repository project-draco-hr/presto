{
  assertEquals(getDomain(REAL,0,null),none(REAL));
  assertEquals(getDomain(REAL,10,null),all(REAL));
  assertEquals(getDomain(REAL,0,doubleColumnStats(null,null,null)),none(REAL));
  assertEquals(getDomain(REAL,0,doubleColumnStats(0L,null,null)),none(REAL));
  assertEquals(getDomain(REAL,0,doubleColumnStats(0L,(double)42.24f,(double)42.24f)),none(REAL));
  assertEquals(getDomain(REAL,10,doubleColumnStats(0L,null,null)),onlyNull(REAL));
  assertEquals(getDomain(REAL,10,doubleColumnStats(10L,null,null)),notNull(REAL));
  assertEquals(getDomain(REAL,10,doubleColumnStats(10L,(double)42.24f,(double)42.24f)),singleValue(REAL,(long)floatToRawIntBits(42.24f)));
  assertEquals(getDomain(REAL,10,doubleColumnStats(10L,3.3,(double)42.24f)),create(ValueSet.ofRanges(range(REAL,(long)floatToRawIntBits(3.3f),true,(long)floatToRawIntBits(42.24f),true)),false));
  assertEquals(getDomain(REAL,10,doubleColumnStats(10L,null,(double)42.24f)),create(ValueSet.ofRanges(lessThanOrEqual(REAL,(long)floatToRawIntBits(42.24f))),false));
  assertEquals(getDomain(REAL,10,doubleColumnStats(10L,3.3,null)),create(ValueSet.ofRanges(greaterThanOrEqual(REAL,(long)floatToRawIntBits(3.3f))),false));
  assertEquals(getDomain(REAL,10,doubleColumnStats(5L,3.3,(double)42.24f)),create(ValueSet.ofRanges(range(REAL,(long)floatToRawIntBits(3.3f),true,(long)floatToRawIntBits(42.24f),true)),true));
  assertEquals(getDomain(REAL,10,doubleColumnStats(5L,null,(double)42.24f)),create(ValueSet.ofRanges(lessThanOrEqual(REAL,(long)floatToRawIntBits(42.24f))),true));
  assertEquals(getDomain(REAL,10,doubleColumnStats(5L,3.3,null)),create(ValueSet.ofRanges(greaterThanOrEqual(REAL,(long)floatToRawIntBits(3.3f))),true));
}
