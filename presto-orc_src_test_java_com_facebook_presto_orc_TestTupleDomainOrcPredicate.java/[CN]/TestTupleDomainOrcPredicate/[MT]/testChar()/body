{
  assertEquals(getDomain(CHAR,0,null),none(CHAR));
  assertEquals(getDomain(CHAR,10,null),all(CHAR));
  assertEquals(getDomain(CHAR,0,stringColumnStats(null,null,null)),none(CHAR));
  assertEquals(getDomain(CHAR,0,stringColumnStats(0L,null,null)),none(CHAR));
  assertEquals(getDomain(CHAR,0,stringColumnStats(0L,"taco      ","taco      ")),none(CHAR));
  assertEquals(getDomain(CHAR,0,stringColumnStats(0L,"taco      ","taco")),none(CHAR));
  assertEquals(getDomain(CHAR,10,stringColumnStats(0L,null,null)),onlyNull(CHAR));
  assertEquals(getDomain(CHAR,10,stringColumnStats(10L,null,null)),notNull(CHAR));
  assertEquals(getDomain(CHAR,10,stringColumnStats(10L,"taco      ","taco      ")),singleValue(CHAR,utf8Slice("taco")));
  assertEquals(getDomain(CHAR,10,stringColumnStats(10L,"taco      ","taco")),singleValue(CHAR,utf8Slice("taco")));
  assertEquals(getDomain(CHAR,10,stringColumnStats(10L,"apple     ","taco      ")),create(ValueSet.ofRanges(range(CHAR,utf8Slice("apple"),true,utf8Slice("taco"),true)),false));
  assertEquals(getDomain(CHAR,10,stringColumnStats(10L,"apple     ","taco")),create(ValueSet.ofRanges(range(CHAR,utf8Slice("apple"),true,utf8Slice("taco"),true)),false));
  assertEquals(getDomain(CHAR,10,stringColumnStats(10L,null,"taco      ")),create(ValueSet.ofRanges(lessThanOrEqual(CHAR,utf8Slice("taco"))),false));
  assertEquals(getDomain(CHAR,10,stringColumnStats(10L,null,"taco")),create(ValueSet.ofRanges(lessThanOrEqual(CHAR,utf8Slice("taco"))),false));
  assertEquals(getDomain(CHAR,10,stringColumnStats(10L,"apple     ",null)),create(ValueSet.ofRanges(greaterThanOrEqual(CHAR,utf8Slice("apple"))),false));
  assertEquals(getDomain(CHAR,10,stringColumnStats(10L,"apple",null)),create(ValueSet.ofRanges(greaterThanOrEqual(CHAR,utf8Slice("apple"))),false));
  assertEquals(getDomain(CHAR,10,stringColumnStats(5L,"apple     ","taco      ")),create(ValueSet.ofRanges(range(CHAR,utf8Slice("apple"),true,utf8Slice("taco"),true)),true));
  assertEquals(getDomain(CHAR,10,stringColumnStats(5L,"apple     ","taco")),create(ValueSet.ofRanges(range(CHAR,utf8Slice("apple"),true,utf8Slice("taco"),true)),true));
  assertEquals(getDomain(CHAR,10,stringColumnStats(5L,null,"taco      ")),create(ValueSet.ofRanges(lessThanOrEqual(CHAR,utf8Slice("taco"))),true));
  assertEquals(getDomain(CHAR,10,stringColumnStats(5L,null,"taco")),create(ValueSet.ofRanges(lessThanOrEqual(CHAR,utf8Slice("taco"))),true));
  assertEquals(getDomain(CHAR,10,stringColumnStats(5L,"apple     ",null)),create(ValueSet.ofRanges(greaterThanOrEqual(CHAR,utf8Slice("apple"))),true));
  assertEquals(getDomain(CHAR,10,stringColumnStats(5L,"apple",null)),create(ValueSet.ofRanges(greaterThanOrEqual(CHAR,utf8Slice("apple"))),true));
}
