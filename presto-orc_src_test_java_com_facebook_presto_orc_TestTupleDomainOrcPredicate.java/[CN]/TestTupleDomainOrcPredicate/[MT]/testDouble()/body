{
  assertEquals(getDomain(DOUBLE,0,null),none(DOUBLE));
  assertEquals(getDomain(DOUBLE,10,null),all(DOUBLE));
  assertEquals(getDomain(DOUBLE,0,doubleColumnStats(null,null,null)),none(DOUBLE));
  assertEquals(getDomain(DOUBLE,0,doubleColumnStats(0L,null,null)),none(DOUBLE));
  assertEquals(getDomain(DOUBLE,0,doubleColumnStats(0L,42.24,42.24)),none(DOUBLE));
  assertEquals(getDomain(DOUBLE,10,doubleColumnStats(0L,null,null)),onlyNull(DOUBLE));
  assertEquals(getDomain(DOUBLE,10,doubleColumnStats(10L,null,null)),notNull(DOUBLE));
  assertEquals(getDomain(DOUBLE,10,doubleColumnStats(10L,42.24,42.24)),singleValue(DOUBLE,42.24));
  assertEquals(getDomain(DOUBLE,10,doubleColumnStats(10L,3.3,42.24)),create(ValueSet.ofRanges(range(DOUBLE,3.3,true,42.24,true)),false));
  assertEquals(getDomain(DOUBLE,10,doubleColumnStats(10L,null,42.24)),create(ValueSet.ofRanges(lessThanOrEqual(DOUBLE,42.24)),false));
  assertEquals(getDomain(DOUBLE,10,doubleColumnStats(10L,3.3,null)),create(ValueSet.ofRanges(greaterThanOrEqual(DOUBLE,3.3)),false));
  assertEquals(getDomain(DOUBLE,10,doubleColumnStats(5L,3.3,42.24)),create(ValueSet.ofRanges(range(DOUBLE,3.3,true,42.24,true)),true));
  assertEquals(getDomain(DOUBLE,10,doubleColumnStats(5L,null,42.24)),create(ValueSet.ofRanges(lessThanOrEqual(DOUBLE,42.24)),true));
  assertEquals(getDomain(DOUBLE,10,doubleColumnStats(5L,3.3,null)),create(ValueSet.ofRanges(greaterThanOrEqual(DOUBLE,3.3)),true));
}
