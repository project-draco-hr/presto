{
  assertEquals(getDomain(DATE,0,null),none(Long.class));
  assertEquals(getDomain(DATE,10,null),all(Long.class));
  assertEquals(getDomain(DATE,0,dateColumnStats(null,null,null)),none(Long.class));
  assertEquals(getDomain(DATE,0,dateColumnStats(0L,null,null)),none(Long.class));
  assertEquals(getDomain(DATE,0,dateColumnStats(0L,100,100)),none(Long.class));
  assertEquals(getDomain(DATE,10,dateColumnStats(0L,null,null)),onlyNull(Long.class));
  assertEquals(getDomain(DATE,10,dateColumnStats(10L,null,null)),notNull(Long.class));
  assertEquals(getDomain(DATE,10,dateColumnStats(10L,100,100)),singleValue(100L));
  assertEquals(getDomain(DATE,10,dateColumnStats(10L,0,100)),create(SortedRangeSet.of(range(0L,true,100L,true)),false));
  assertEquals(getDomain(DATE,10,dateColumnStats(10L,null,100)),create(SortedRangeSet.of(lessThanOrEqual(100L)),false));
  assertEquals(getDomain(DATE,10,dateColumnStats(10L,0,null)),create(SortedRangeSet.of(greaterThanOrEqual(0L)),false));
  assertEquals(getDomain(DATE,10,dateColumnStats(5L,0,100)),create(SortedRangeSet.of(range(0L,true,100L,true)),true));
  assertEquals(getDomain(DATE,10,dateColumnStats(5L,null,100)),create(SortedRangeSet.of(lessThanOrEqual(100L)),true));
  assertEquals(getDomain(DATE,10,dateColumnStats(5L,0,null)),create(SortedRangeSet.of(greaterThanOrEqual(0L)),true));
}
