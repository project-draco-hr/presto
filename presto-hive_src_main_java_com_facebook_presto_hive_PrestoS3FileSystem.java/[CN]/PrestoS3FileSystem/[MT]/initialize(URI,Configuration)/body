{
  checkNotNull(uri,"uri is null");
  checkNotNull(conf,"conf is null");
  super.initialize(uri,conf);
  setConf(conf);
  this.uri=URI.create(uri.getScheme() + "://" + uri.getAuthority());
  this.workingDirectory=new Path("/").makeQualified(this.uri,new Path("/"));
  HiveClientConfig defaults=new HiveClientConfig();
  this.stagingDirectory=new File(conf.get(S3_STAGING_DIRECTORY,defaults.getS3StagingDirectory().toString()));
  this.maxClientRetries=conf.getInt(S3_MAX_CLIENT_RETRIES,defaults.getS3MaxClientRetries());
  this.maxBackoffTime=Duration.valueOf(conf.get(S3_MAX_BACKOFF_TIME,defaults.getS3MaxBackoffTime().toString()));
  this.maxRetryTime=Duration.valueOf(conf.get(S3_MAX_RETRY_TIME,defaults.getS3MaxRetryTime().toString()));
  int maxErrorRetries=conf.getInt(S3_MAX_ERROR_RETRIES,defaults.getS3MaxErrorRetries());
  boolean sslEnabled=conf.getBoolean(S3_SSL_ENABLED,defaults.isS3SslEnabled());
  Duration connectTimeout=Duration.valueOf(conf.get(S3_CONNECT_TIMEOUT,defaults.getS3ConnectTimeout().toString()));
  Duration socketTimeout=Duration.valueOf(conf.get(S3_SOCKET_TIMEOUT,defaults.getS3SocketTimeout().toString()));
  int maxConnections=conf.getInt(S3_MAX_CONNECTIONS,defaults.getS3MaxConnections());
  long minFileSize=conf.getLong(S3_MULTIPART_MIN_FILE_SIZE,defaults.getS3MultipartMinFileSize().toBytes());
  long minPartSize=conf.getLong(S3_MULTIPART_MIN_PART_SIZE,defaults.getS3MultipartMinPartSize().toBytes());
  ClientConfiguration configuration=new ClientConfiguration().withMaxErrorRetry(maxErrorRetries).withProtocol(sslEnabled ? Protocol.HTTPS : Protocol.HTTP).withConnectionTimeout(Ints.checkedCast(connectTimeout.toMillis())).withSocketTimeout(Ints.checkedCast(socketTimeout.toMillis())).withMaxConnections(maxConnections);
  this.s3=new AmazonS3Client(getAwsCredentials(uri,conf),configuration);
  transferConfig.setMultipartUploadThreshold(minFileSize);
  transferConfig.setMinimumUploadPartSize(minPartSize);
}
