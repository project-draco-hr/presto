{
  assertEquals(cursor.getPosition(),position);
  assertEquals(cursor.getObjectValue(),value);
  assertEquals(cursor.getObjectValue(),value);
  assertEquals(cursor.isNull(),value == null);
  if (cursor.isNull()) {
    return;
  }
switch (cursor.getTupleInfo().getType()) {
case BOOLEAN:
    assertEquals(cursor.getBoolean(),value);
  try {
    cursor.getSlice();
    fail("Expected IllegalStateException or UnsupportedOperationException");
  }
 catch (  IllegalStateException|UnsupportedOperationException expected) {
  }
try {
  cursor.getSlice();
  fail("Expected IllegalStateException or UnsupportedOperationException");
}
 catch (IllegalStateException|UnsupportedOperationException expected) {
}
break;
case FIXED_INT_64:
assertEquals(cursor.getLong(),value);
try {
cursor.getDouble();
fail("Expected IllegalStateException or UnsupportedOperationException");
}
 catch (IllegalStateException|UnsupportedOperationException expected) {
}
try {
cursor.getSlice();
fail("Expected IllegalStateException or UnsupportedOperationException");
}
 catch (IllegalStateException|UnsupportedOperationException expected) {
}
break;
case VARIABLE_BINARY:
assertEquals(cursor.getSlice().toStringUtf8(),value);
try {
cursor.getDouble();
fail("Expected IllegalStateException or UnsupportedOperationException");
}
 catch (IllegalStateException|UnsupportedOperationException expected) {
}
try {
cursor.getLong();
fail("Expected IllegalStateException or UnsupportedOperationException");
}
 catch (IllegalStateException|UnsupportedOperationException expected) {
}
break;
case DOUBLE:
assertEquals(cursor.getDouble(),value);
try {
cursor.getSlice();
fail("Expected IllegalStateException or UnsupportedOperationException");
}
 catch (IllegalStateException|UnsupportedOperationException expected) {
}
try {
cursor.getSlice();
fail("Expected IllegalStateException or UnsupportedOperationException");
}
 catch (IllegalStateException|UnsupportedOperationException expected) {
}
break;
}
}
