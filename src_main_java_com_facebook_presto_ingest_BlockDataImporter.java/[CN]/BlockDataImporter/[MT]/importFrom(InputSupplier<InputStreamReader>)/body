{
  checkNotNull(inputSupplier,"inputSupplier is null");
  ImmutableList.Builder<OutputStream> outputStreamBuilder=ImmutableList.builder();
  ImmutableList.Builder<TupleStreamWriter> tupleStreamWriterBuilder=ImmutableList.builder();
  for (  ColumnImportSpec columnImportSpec : columnImportSpecs) {
    OutputStream outputStream=columnImportSpec.getOutputSupplier().getOutput();
    outputStreamBuilder.add(outputStream);
    tupleStreamWriterBuilder.add(columnImportSpec.getTupleStreamSerde().createTupleStreamWriter(new OutputStreamSliceOutput(outputStream)));
  }
  List<OutputStream> outputStreams=outputStreamBuilder.build();
  List<TupleStreamWriter> tupleStreamWriters=tupleStreamWriterBuilder.build();
  try (Reader reader=inputSupplier.getInput()){
    Iterator<UncompressedBlock> iterator=blockExtractor.extract(reader);
    while (iterator.hasNext()) {
      UncompressedBlock block=iterator.next();
      checkState(columnImportSpecs.size() == block.getTupleInfo().getFieldCount(),"spec mismatch with tuple info");
      for (int index=0; index < columnImportSpecs.size(); index++) {
        tupleStreamWriters.get(index).append(ColumnMappingTupleStream.map(block,index));
      }
    }
  }
   for (  TupleStreamWriter tupleStreamWriter : tupleStreamWriters) {
    tupleStreamWriter.close();
  }
  for (  OutputStream outputStream : outputStreams) {
    outputStream.close();
  }
}
