{
  checkNotNull(partitions,"partitions is null");
  if (partitions.isEmpty()) {
    return new DataSource("native",ImmutableList.<Split>of());
  }
  Partition partition=Iterables.getOnlyElement(partitions);
  checkArgument(partition instanceof NativePartition,"Partition must be a native partition");
  NativePartition nativePartition=(NativePartition)partition;
  Map<String,Node> nodesById=uniqueIndex(nodeManager.getActiveNodes(),Node.getIdentifierFunction());
  Multimap<Long,String> shardNodes=shardManager.getCommittedShardNodes(nativePartition.getTable().getTableId());
  ImmutableList.Builder<Split> splits=ImmutableList.builder();
  for (  Map.Entry<Long,Collection<String>> entry : shardNodes.asMap().entrySet()) {
    List<HostAddress> addresses=getAddressesForNodes(nodesById,entry.getValue());
    Split split=new NativeSplit(entry.getKey(),addresses);
    splits.add(split);
  }
  return new DataSource("native",splits.build());
}
