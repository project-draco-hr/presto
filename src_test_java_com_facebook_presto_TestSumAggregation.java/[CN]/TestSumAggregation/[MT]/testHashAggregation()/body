{
  GroupBy groupBy=new GroupBy(newGroupColumn());
  HashAggregation aggregation=new HashAggregation(groupBy,new ForwardingSeekableIterator<>(newAggregateColumn()),new Provider<AggregationFunction>(){
    @Override public AggregationFunction get(){
      return new SumAggregation();
    }
  }
);
  Map<Object,Object> expected=ImmutableMap.<Object,Object>of("a",new Tuple("a",10L),"b",new Tuple("b",17L),"c",new Tuple("c",15L),"d",new Tuple("d",6L));
  Map<Object,Object> actual=new HashMap<>();
  while (aggregation.hasNext()) {
    ValueBlock block=aggregation.next();
    PeekingIterator<Pair> pairs=block.pairIterator();
    while (pairs.hasNext()) {
      Pair pair=pairs.next();
      Tuple tuple=(Tuple)pair.getValue();
      actual.put(tuple.getValues().get(0),tuple);
    }
  }
  Assert.assertEquals(actual,expected);
}
