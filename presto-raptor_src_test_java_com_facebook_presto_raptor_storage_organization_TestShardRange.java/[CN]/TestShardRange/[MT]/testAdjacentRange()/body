{
  List<Type> types1=ImmutableList.of(BIGINT);
  ShardRange range1=ShardRange.of(new Tuple(types1,2L),new Tuple(types1,5L));
  ShardRange adjacentRange1=ShardRange.of(new Tuple(types1,5L),new Tuple(types1,10L));
  assertFalse(range1.adjacent(range1));
  assertTrue(adjacentRange1.adjacent(range1));
  assertTrue(range1.adjacent(adjacentRange1));
  List<Type> types2=ImmutableList.of(BIGINT,VARCHAR);
  ShardRange range2=ShardRange.of(new Tuple(types2,2L,"aaa"),new Tuple(types2,5L,"ccc"));
  ShardRange adjacentRange2=ShardRange.of(new Tuple(types2,5L,"ccc"),new Tuple(types2,10L,"ccc"));
  ShardRange subsetAdjacentRange2=ShardRange.of(new Tuple(types2,5L,"ddd"),new Tuple(types2,10L,"ccc"));
  ShardRange overlapsRange2=ShardRange.of(new Tuple(types2,3L,"aaa"),new Tuple(types2,10L,"ccc"));
  ShardRange notAdjacentRange2=ShardRange.of(new Tuple(types2,6L,"ccc"),new Tuple(types2,10L,"ccc"));
  assertTrue(adjacentRange2.adjacent(range2));
  assertTrue(subsetAdjacentRange2.adjacent(range2));
  assertFalse(overlapsRange2.adjacent(range2));
  assertFalse(notAdjacentRange2.adjacent(range2));
}
