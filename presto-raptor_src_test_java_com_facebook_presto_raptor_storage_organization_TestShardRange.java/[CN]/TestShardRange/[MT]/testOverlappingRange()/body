{
  List<Type> types1=ImmutableList.of(BIGINT);
  ShardRange range1=ShardRange.of(new Tuple(types1,2L),new Tuple(types1,5L));
  ShardRange enclosesRange1=ShardRange.of(new Tuple(types1,1L),new Tuple(types1,10L));
  ShardRange overlapsRange1=ShardRange.of(new Tuple(types1,1L),new Tuple(types1,4L));
  ShardRange notOverlapsRange1=ShardRange.of(new Tuple(types1,6L),new Tuple(types1,8L));
  assertTrue(enclosesRange1.overlaps(range1));
  assertTrue(overlapsRange1.overlaps(range1));
  assertFalse(notOverlapsRange1.overlaps(range1));
  List<Type> types2=ImmutableList.of(BIGINT,VARCHAR);
  ShardRange range2=ShardRange.of(new Tuple(types2,2L,"aaa"),new Tuple(types2,5L,"ccc"));
  ShardRange enclosesRange2=ShardRange.of(new Tuple(types2,1L,"ccc"),new Tuple(types2,10L,"ccc"));
  ShardRange overlapsRange2=ShardRange.of(new Tuple(types2,2L,"aaa"),new Tuple(types2,5L,"bbb"));
  ShardRange notOverlapsRange2=ShardRange.of(new Tuple(types2,6L,"aaa"),new Tuple(types2,8L,"bbb"));
  assertTrue(enclosesRange2.encloses(range2));
  assertTrue(overlapsRange2.overlaps(range2));
  assertFalse(notOverlapsRange2.overlaps(range2));
}
