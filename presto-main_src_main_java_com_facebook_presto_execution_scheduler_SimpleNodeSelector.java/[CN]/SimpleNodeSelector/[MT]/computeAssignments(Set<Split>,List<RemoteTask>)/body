{
  Multimap<Node,Split> assignment=HashMultimap.create();
  NodeMap nodeMap=this.nodeMap.get().get();
  NodeAssignmentStats assignmentStats=new NodeAssignmentStats(nodeTaskMap,nodeMap,existingTasks);
  ResettableRandomizedIterator<Node> randomCandidates=randomizedNodes(nodeMap,includeCoordinator);
  for (  Split split : splits) {
    randomCandidates.reset();
    List<Node> candidateNodes;
    if (!split.isRemotelyAccessible()) {
      candidateNodes=selectExactNodes(nodeMap,split.getAddresses(),includeCoordinator);
    }
 else {
      candidateNodes=selectNodes(minCandidates,randomCandidates,doubleScheduling);
    }
    if (candidateNodes.isEmpty()) {
      log.debug("No nodes available to schedule %s. Available nodes %s",split,nodeMap.getNodesByHost().keys());
      throw new PrestoException(NO_NODES_AVAILABLE,"No nodes available to run query");
    }
    Node chosenNode=null;
    int min=Integer.MAX_VALUE;
    for (    Node node : candidateNodes) {
      int totalSplitCount=assignmentStats.getTotalSplitCount(node);
      if (totalSplitCount < min && totalSplitCount < maxSplitsPerNode) {
        chosenNode=node;
        min=totalSplitCount;
      }
    }
    if (chosenNode == null) {
      for (      Node node : candidateNodes) {
        int totalSplitCount=assignmentStats.getQueuedSplitCountForStage(node);
        if (totalSplitCount < min && totalSplitCount < maxPendingSplitsPerNodePerStageWhenFull) {
          chosenNode=node;
          min=totalSplitCount;
        }
      }
    }
    if (chosenNode != null) {
      assignment.put(chosenNode,split);
      assignmentStats.addAssignedSplit(chosenNode);
    }
  }
  return assignment;
}
