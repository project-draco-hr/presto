{
  Type type=types.get("E");
  checkArgument(type.isOrderable(),"Type must be orderable");
  ImmutableList.Builder<Class<?>> builder=ImmutableList.builder();
  for (int i=0; i < arity; i++) {
    builder.add(type.getJavaType());
  }
  ImmutableList<Class<?>> stackTypes=builder.build();
  Class<?> clazz=generateLeast(stackTypes,type);
  MethodHandle methodHandle=methodHandle(clazz,"least",stackTypes.toArray(new Class<?>[stackTypes.size()]));
  List<Boolean> nullableParameters=ImmutableList.copyOf(Collections.nCopies(stackTypes.size(),false));
  Signature specializedSignature=internalFunction(SIGNATURE.getName(),type.getTypeSignature(),Collections.nCopies(arity,type.getTypeSignature()));
  return new FunctionInfo(specializedSignature,getDescription(),isHidden(),methodHandle,isDeterministic(),false,nullableParameters);
}
