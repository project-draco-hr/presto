{
  requestsCompleted.incrementAndGet();
  if (response.getStatusCode() == Status.GONE.getStatusCode()) {
    bufferFinished();
    return null;
  }
  try {
    if (response.getStatusCode() != Status.NO_CONTENT.getStatusCode()) {
      if (response.getStatusCode() != Status.OK.getStatusCode()) {
        log.debug("Expected response code to be 200, but was %s: request=%s, response=%s",response.getStatusCode(),request,response);
        return null;
      }
      String contentType=response.getHeader("Content-Type");
      if (!MediaType.parse(contentType).is(PRESTO_PAGES_TYPE)) {
        log.debug("Expected %s response from server but got %s: uri=%s, response=%s",PRESTO_PAGES_TYPE,contentType,location,response);
        return null;
      }
      InputStreamSliceInput sliceInput=new InputStreamSliceInput(response.getInputStream());
      Iterator<Page> pageIterator=PagesSerde.readPages(sliceInput);
      while (pageIterator.hasNext()) {
        if (isClosed()) {
          return null;
        }
        Page page=pageIterator.next();
        clientCallback.addPage(HttpPageBufferClient.this,page);
      }
    }
  }
 catch (  Exception e) {
    log.warn(e,"Error fetching pages from  %s: status: %s %s",request.getUri(),response.getStatusCode(),response.getStatusMessage());
  }
 finally {
    requestComplete();
  }
  return null;
}
