{
  assertEquals(Domain.all(BIGINT).intersect(Domain.all(BIGINT)),Domain.all(BIGINT));
  assertEquals(Domain.none(BIGINT).intersect(Domain.none(BIGINT)),Domain.none(BIGINT));
  assertEquals(Domain.all(BIGINT).intersect(Domain.none(BIGINT)),Domain.none(BIGINT));
  assertEquals(Domain.notNull(BIGINT).intersect(Domain.onlyNull(BIGINT)),Domain.none(BIGINT));
  assertEquals(Domain.singleValue(BIGINT,0L).intersect(Domain.all(BIGINT)),Domain.singleValue(BIGINT,0L));
  assertEquals(Domain.singleValue(BIGINT,0L).intersect(Domain.onlyNull(BIGINT)),Domain.none(BIGINT));
  assertEquals(Domain.create(ValueSet.ofRanges(Range.equal(BIGINT,1L)),true).intersect(Domain.create(ValueSet.ofRanges(Range.equal(BIGINT,2L)),true)),Domain.onlyNull(BIGINT));
  assertEquals(Domain.create(ValueSet.ofRanges(Range.equal(BIGINT,1L)),true).intersect(Domain.create(ValueSet.ofRanges(Range.equal(BIGINT,1L),Range.equal(BIGINT,2L)),false)),Domain.singleValue(BIGINT,1L));
}
