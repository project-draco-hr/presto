{
  TestingTypeManager typeManager=new TestingTypeManager();
  TestingBlockEncodingSerde blockEncodingSerde=new TestingBlockEncodingSerde(typeManager);
  ObjectMapper mapper=new ObjectMapperProvider().get().registerModule(new SimpleModule().addDeserializer(Type.class,new TestingTypeDeserializer(typeManager)).addSerializer(Block.class,new TestingBlockJsonSerde.Serializer(blockEncodingSerde)).addDeserializer(Block.class,new TestingBlockJsonSerde.Deserializer(blockEncodingSerde)));
  Domain domain=Domain.all(BIGINT);
  assertEquals(domain,mapper.readValue(mapper.writeValueAsString(domain),Domain.class));
  domain=Domain.none(DOUBLE);
  assertEquals(domain,mapper.readValue(mapper.writeValueAsString(domain),Domain.class));
  domain=Domain.notNull(BOOLEAN);
  assertEquals(domain,mapper.readValue(mapper.writeValueAsString(domain),Domain.class));
  domain=Domain.notNull(HYPER_LOG_LOG);
  assertEquals(domain,mapper.readValue(mapper.writeValueAsString(domain),Domain.class));
  domain=Domain.onlyNull(VARCHAR);
  assertEquals(domain,mapper.readValue(mapper.writeValueAsString(domain),Domain.class));
  domain=Domain.onlyNull(HYPER_LOG_LOG);
  assertEquals(domain,mapper.readValue(mapper.writeValueAsString(domain),Domain.class));
  domain=Domain.singleValue(BIGINT,Long.MIN_VALUE);
  assertEquals(domain,mapper.readValue(mapper.writeValueAsString(domain),Domain.class));
  domain=Domain.singleValue(ID,Long.MIN_VALUE);
  assertEquals(domain,mapper.readValue(mapper.writeValueAsString(domain),Domain.class));
  domain=Domain.create(ValueSet.ofRanges(Range.lessThan(BIGINT,0L),Range.equal(BIGINT,1L),Range.range(BIGINT,2L,true,3L,true)),true);
  assertEquals(domain,mapper.readValue(mapper.writeValueAsString(domain),Domain.class));
}
