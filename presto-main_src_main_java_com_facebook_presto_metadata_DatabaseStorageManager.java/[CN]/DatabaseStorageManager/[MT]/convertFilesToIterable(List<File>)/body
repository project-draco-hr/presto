{
  final List<File> files=Lists.transform(absoluteFiles,new Function<File,File>(){
    @Override public File apply(    @Nullable File input){
      return new File(input.getAbsolutePath().replace("/Users/martint/fb/presto/presto/",""));
    }
  }
);
  Preconditions.checkArgument(!files.isEmpty(),"no files in stream");
  final StatsCollectingTupleStreamSerde.StatsAnnotatedTupleStreamDeserializer deserializer=new StatsCollectingTupleStreamSerde.StatsAnnotatedTupleStreamDeserializer(SelfDescriptiveSerde.DESERIALIZER);
  return Iterables.concat(Lists.transform(files,new Function<File,Iterable<TupleStream>>(){
    private Range range;
    @Override public Iterable<TupleStream> apply(    File file){
      Slice slice=mappedFileCache.getUnchecked(file.getAbsolutePath());
      long rowCount=deserializer.deserializeStats(slice).getRowCount();
      if (range == null) {
        range=Range.create(0,rowCount - 1);
      }
 else {
        range=Range.create(range.getEnd() + 1,range.getEnd() + rowCount);
      }
      YieldingIterable<TupleStream> deserialized=(YieldingIterable<TupleStream>)deserializer.deserialize(range,slice);
      return ImmutableList.copyOf(deserialized.iterator(new QuerySession()));
    }
  }
));
}
