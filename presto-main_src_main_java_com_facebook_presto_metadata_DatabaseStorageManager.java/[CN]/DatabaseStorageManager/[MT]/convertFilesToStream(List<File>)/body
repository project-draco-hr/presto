{
  Preconditions.checkArgument(!files.isEmpty(),"no files in stream");
  final StatsCollectingTupleStreamSerde.StatsAnnotatedTupleStreamDeserializer deserializer=new StatsCollectingTupleStreamSerde.StatsAnnotatedTupleStreamDeserializer(SelfDescriptiveSerde.DESERIALIZER);
  try {
    TupleInfo tupleInfo=deserializer.deserialize(Slices.mapFileReadOnly(files.get(0))).getTupleInfo();
    return new GenericTupleStream<>(tupleInfo,Iterables.transform(files,new Function<File,TupleStream>(){
      private long nextStartingPosition=0;
      @Override public TupleStream apply(      File file){
        try {
          Slice slice=Slices.mapFileReadOnly(file);
          RepositioningTupleStream tupleStream=new RepositioningTupleStream(deserializer.deserialize(slice),nextStartingPosition);
          nextStartingPosition+=deserializer.deserializeStats(slice).getRowCount();
          return tupleStream;
        }
 catch (        IOException e) {
          throw Throwables.propagate(e);
        }
      }
    }
));
  }
 catch (  IOException e) {
    throw Throwables.propagate(e);
  }
}
