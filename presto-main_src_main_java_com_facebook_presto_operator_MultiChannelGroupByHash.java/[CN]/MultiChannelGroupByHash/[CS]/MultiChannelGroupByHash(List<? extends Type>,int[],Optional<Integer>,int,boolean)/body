{
  this.hashTypes=ImmutableList.copyOf(requireNonNull(hashTypes,"hashTypes is null"));
  checkArgument(hashTypes.size() == hashChannels.length,"hashTypes and hashChannels have different sizes");
  checkArgument(expectedSize > 0,"expectedSize must be greater than zero");
  this.inputHashChannel=requireNonNull(inputHashChannel,"inputHashChannel is null");
  this.types=inputHashChannel.isPresent() ? ImmutableList.copyOf(Iterables.concat(hashTypes,ImmutableList.of(BIGINT))) : this.hashTypes;
  this.channels=requireNonNull(hashChannels,"hashChannels is null").clone();
  this.hashGenerator=inputHashChannel.isPresent() ? new PrecomputedHashGenerator(inputHashChannel.get()) : new InterpretedHashGenerator(this.hashTypes,hashChannels);
  this.processDictionary=processDictionary;
  ImmutableList.Builder<Integer> outputChannels=ImmutableList.builder();
  ImmutableList.Builder<ObjectArrayList<Block>> channelBuilders=ImmutableList.builder();
  for (int i=0; i < hashChannels.length; i++) {
    outputChannels.add(i);
    channelBuilders.add(ObjectArrayList.wrap(new Block[1024],0));
  }
  if (inputHashChannel.isPresent()) {
    this.precomputedHashChannel=Optional.of(hashChannels.length);
    channelBuilders.add(ObjectArrayList.wrap(new Block[1024],0));
  }
 else {
    this.precomputedHashChannel=Optional.empty();
  }
  this.channelBuilders=channelBuilders.build();
  PagesHashStrategyFactory pagesHashStrategyFactory=JOIN_COMPILER.compilePagesHashStrategyFactory(this.types,outputChannels.build());
  hashStrategy=pagesHashStrategyFactory.createPagesHashStrategy(this.channelBuilders,this.precomputedHashChannel);
  startNewPage();
  int hashSize=arraySize(expectedSize,FILL_RATIO);
  maxFill=calculateMaxFill(hashSize);
  mask=hashSize - 1;
  groupAddressByHash=new long[hashSize];
  Arrays.fill(groupAddressByHash,-1);
  rawHashByHashPosition=new byte[hashSize];
  groupIdsByHash=new int[hashSize];
  groupAddressByGroupId=new LongBigArray();
  groupAddressByGroupId.ensureCapacity(maxFill);
}
