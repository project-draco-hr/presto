{
  httpServerBinder(binder).bindResource("/","webapp").withWelcomeFile("index.html");
  discoveryBinder(binder).bindSelector("presto");
  jaxrsBinder(binder).bind(QueryResource.class);
  jaxrsBinder(binder).bind(StageResource.class);
  binder.bind(QueryIdGenerator.class).in(Scopes.SINGLETON);
  binder.bind(QueryManager.class).to(SqlQueryManager.class).in(Scopes.SINGLETON);
  binder.bind(QueryQueueManager.class).to(SqlQueryQueueManager.class).in(Scopes.SINGLETON);
  newExporter(binder).export(QueryManager.class).withGeneratedName();
  configBinder(binder).bindConfig(QueryManagerConfig.class);
  configBinder(binder).bindConfig(FeaturesConfig.class);
  binder.bind(SplitManager.class).in(Scopes.SINGLETON);
  binder.bind(SessionPropertyManager.class).in(Scopes.SINGLETON);
  binder.bind(SystemSessionProperties.class).in(Scopes.SINGLETON);
  binder.bind(TablePropertyManager.class).in(Scopes.SINGLETON);
  binder.bind(InternalNodeManager.class).to(DiscoveryNodeManager.class).in(Scopes.SINGLETON);
  binder.bind(NodeManager.class).to(Key.get(InternalNodeManager.class)).in(Scopes.SINGLETON);
  configBinder(binder).bindConfig(NodeSchedulerConfig.class);
  binder.bind(NodeScheduler.class).in(Scopes.SINGLETON);
  binder.bind(NodeTaskMap.class).in(Scopes.SINGLETON);
  newExporter(binder).export(NodeScheduler.class).withGeneratedName();
  binder.bind(ExecutorService.class).annotatedWith(ForQueryExecution.class).toInstance(newCachedThreadPool(threadsNamed("query-execution-%s")));
  binder.bind(QueryExecutionMBean.class).in(Scopes.SINGLETON);
  newExporter(binder).export(QueryExecutionMBean.class).as(generatedNameOf(QueryExecution.class));
  MapBinder<Class<? extends Statement>,QueryExecutionFactory<?>> executionBinder=newMapBinder(binder,new TypeLiteral<Class<? extends Statement>>(){
  }
,new TypeLiteral<QueryExecutionFactory<?>>(){
  }
);
  binder.bind(SqlQueryExecutionFactory.class).in(Scopes.SINGLETON);
  executionBinder.addBinding(Query.class).to(SqlQueryExecutionFactory.class).in(Scopes.SINGLETON);
  executionBinder.addBinding(Explain.class).to(SqlQueryExecutionFactory.class).in(Scopes.SINGLETON);
  executionBinder.addBinding(ShowColumns.class).to(SqlQueryExecutionFactory.class).in(Scopes.SINGLETON);
  executionBinder.addBinding(ShowPartitions.class).to(SqlQueryExecutionFactory.class).in(Scopes.SINGLETON);
  executionBinder.addBinding(ShowFunctions.class).to(SqlQueryExecutionFactory.class).in(Scopes.SINGLETON);
  executionBinder.addBinding(ShowTables.class).to(SqlQueryExecutionFactory.class).in(Scopes.SINGLETON);
  executionBinder.addBinding(ShowSchemas.class).to(SqlQueryExecutionFactory.class).in(Scopes.SINGLETON);
  executionBinder.addBinding(ShowCatalogs.class).to(SqlQueryExecutionFactory.class).in(Scopes.SINGLETON);
  executionBinder.addBinding(Use.class).to(SqlQueryExecutionFactory.class).in(Scopes.SINGLETON);
  executionBinder.addBinding(ShowSession.class).to(SqlQueryExecutionFactory.class).in(Scopes.SINGLETON);
  executionBinder.addBinding(CreateTableAsSelect.class).to(SqlQueryExecutionFactory.class).in(Scopes.SINGLETON);
  executionBinder.addBinding(Insert.class).to(SqlQueryExecutionFactory.class).in(Scopes.SINGLETON);
  executionBinder.addBinding(Delete.class).to(SqlQueryExecutionFactory.class).in(Scopes.SINGLETON);
  binder.bind(DataDefinitionExecutionFactory.class).in(Scopes.SINGLETON);
  bindDataDefinitionTask(binder,executionBinder,CreateTable.class,CreateTableTask.class);
  bindDataDefinitionTask(binder,executionBinder,RenameTable.class,RenameTableTask.class);
  bindDataDefinitionTask(binder,executionBinder,RenameColumn.class,RenameColumnTask.class);
  bindDataDefinitionTask(binder,executionBinder,DropTable.class,DropTableTask.class);
  bindDataDefinitionTask(binder,executionBinder,CreateView.class,CreateViewTask.class);
  bindDataDefinitionTask(binder,executionBinder,DropView.class,DropViewTask.class);
  bindDataDefinitionTask(binder,executionBinder,SetSession.class,SetSessionTask.class);
  bindDataDefinitionTask(binder,executionBinder,ResetSession.class,ResetSessionTask.class);
  MapBinder<String,ExecutionPolicy> executionPolicyBinder=newMapBinder(binder,String.class,ExecutionPolicy.class);
  executionPolicyBinder.addBinding("all-at-once").to(AllAtOnceExecutionPolicy.class);
  jsonCodecBinder(binder).bindJsonCodec(ViewDefinition.class);
}
