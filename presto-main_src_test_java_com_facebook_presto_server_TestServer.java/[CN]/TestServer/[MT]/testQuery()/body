{
  Request request=preparePost().setUri(uriFor("/v1/statement")).setBodyGenerator(createStaticBodyGenerator("show catalogs",UTF_8)).setHeader(PRESTO_USER,"user").setHeader(PRESTO_SOURCE,"source").setHeader(PRESTO_CATALOG,"catalog").setHeader(PRESTO_SCHEMA,"schema").addHeader(PRESTO_SESSION,QUERY_MAX_MEMORY + "=1GB").addHeader(PRESTO_SESSION,DISTRIBUTED_JOIN + "=true," + HASH_PARTITION_COUNT+ " = 43").build();
  QueryResults queryResults=client.execute(request,createJsonResponseHandler(jsonCodec(QueryResults.class)));
  QueryInfo queryInfo=server.getQueryManager().getQueryInfo(new QueryId(queryResults.getId()));
  assertEquals(queryInfo.getSession().getSystemProperties(),ImmutableMap.builder().put(QUERY_MAX_MEMORY,"1GB").put(DISTRIBUTED_JOIN,"true").put(HASH_PARTITION_COUNT,"43").build());
  ImmutableList.Builder<List<Object>> data=ImmutableList.builder();
  if (queryResults.getData() != null) {
    data.addAll(queryResults.getData());
  }
  while (queryResults.getNextUri() != null) {
    queryResults=client.execute(prepareGet().setUri(queryResults.getNextUri()).build(),createJsonResponseHandler(jsonCodec(QueryResults.class)));
    if (queryResults.getData() != null) {
      data.addAll(queryResults.getData());
    }
  }
  List<List<Object>> rows=data.build();
  assertEquals(rows,ImmutableList.of(ImmutableList.of("system")));
}
