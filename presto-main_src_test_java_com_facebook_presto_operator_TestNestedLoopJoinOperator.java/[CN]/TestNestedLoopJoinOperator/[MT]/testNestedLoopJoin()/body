{
  TaskContext taskContext=createTaskContext();
  RowPagesBuilder buildPages=rowPagesBuilder(ImmutableList.of(VARCHAR,BIGINT,BIGINT)).addSequencePage(3,20,30,40);
  NestedLoopJoinPagesSupplier nestedLoopJoinPagesSupplier=buildPageSource(taskContext,buildPages);
  RowPagesBuilder probePages=rowPagesBuilder(ImmutableList.<Type>of(VARCHAR,BIGINT,BIGINT));
  List<Page> probeInput=probePages.addSequencePage(2,0,1000,2000).build();
  NestedLoopJoinOperatorFactory joinOperatorFactory=new NestedLoopJoinOperatorFactory(3,new PlanNodeId("test"),nestedLoopJoinPagesSupplier,ImmutableList.<Type>of(VARCHAR,BIGINT,BIGINT));
  Operator joinOperator=joinOperatorFactory.createOperator(taskContext.addPipelineContext(true,true).addDriverContext());
  MaterializedResult expected=resultBuilder(taskContext.getSession(),concat(probePages.getTypes(),buildPages.getTypes())).row("0",1000L,2000L,"20",30L,40L).row("0",1000L,2000L,"21",31L,41L).row("0",1000L,2000L,"22",32L,42L).row("1",1001L,2001L,"20",30L,40L).row("1",1001L,2001L,"21",31L,41L).row("1",1001L,2001L,"22",32L,42L).build();
  assertOperatorEquals(joinOperator,probeInput,expected);
  buildPages=rowPagesBuilder(ImmutableList.of(VARCHAR,BIGINT,BIGINT)).addSequencePage(2,20,30,40);
  nestedLoopJoinPagesSupplier=buildPageSource(taskContext,buildPages);
  joinOperatorFactory=new NestedLoopJoinOperatorFactory(3,new PlanNodeId("test"),nestedLoopJoinPagesSupplier,ImmutableList.<Type>of(VARCHAR,BIGINT,BIGINT));
  joinOperator=joinOperatorFactory.createOperator(taskContext.addPipelineContext(true,true).addDriverContext());
  probePages=rowPagesBuilder(ImmutableList.<Type>of(VARCHAR,BIGINT,BIGINT));
  probeInput=probePages.addSequencePage(3,0,1000,2000).build();
  expected=resultBuilder(taskContext.getSession(),concat(probePages.getTypes(),buildPages.getTypes())).row("0",1000L,2000L,"20",30L,40L).row("1",1001L,2001L,"20",30L,40L).row("2",1002L,2002L,"20",30L,40L).row("0",1000L,2000L,"21",31L,41L).row("1",1001L,2001L,"21",31L,41L).row("2",1002L,2002L,"21",31L,41L).build();
  assertOperatorEquals(joinOperator,probeInput,expected);
}
