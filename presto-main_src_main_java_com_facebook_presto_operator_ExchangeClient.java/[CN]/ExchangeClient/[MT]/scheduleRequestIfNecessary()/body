{
  if (isClosed() || isFailed()) {
    return;
  }
  if (noMoreLocations && completedClients.size() == locations.size()) {
    if (pageBuffer.peekLast() != NO_MORE_PAGES) {
      checkState(pageBuffer.add(NO_MORE_PAGES),"Could not add no more pages marker");
    }
    if (!closed.get() && pageBuffer.peek() == NO_MORE_PAGES) {
      closed.set(true);
    }
    notifyBlockedCallers();
    return;
  }
  for (  URI location : locations) {
    if (!allClients.containsKey(location)) {
      HttpPageBufferClient client=new HttpPageBufferClient(httpClient,maxResponseSize,minErrorDuration,location,new ExchangeClientCallback(),blockEncodingSerde,executor,Stopwatch.createUnstarted());
      allClients.put(location,client);
      queuedClients.add(client);
    }
  }
  if (bufferBytes > maxBufferedBytes) {
    return;
  }
  long neededBytes=maxBufferedBytes - bufferBytes;
  if (neededBytes <= 0) {
    return;
  }
  int clientCount=(int)((1.0 * neededBytes / averageBytesPerRequest) * concurrentRequestMultiplier);
  clientCount=Math.max(clientCount,1);
  int pendingClients=allClients.size() - queuedClients.size() - completedClients.size();
  clientCount-=pendingClients;
  for (int i=0; i < clientCount; i++) {
    HttpPageBufferClient client=queuedClients.poll();
    if (client == null) {
      return;
    }
    client.scheduleRequest();
  }
}
