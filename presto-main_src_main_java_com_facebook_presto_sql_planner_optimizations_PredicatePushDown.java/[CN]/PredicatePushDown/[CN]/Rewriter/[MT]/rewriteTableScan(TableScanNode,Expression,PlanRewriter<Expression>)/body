{
  Set<Symbol> partitionSymbols=Sets.filter(MapTransformer.of(node.getAssignments()).filterValues(partitionColumn(node.getTable())).immutableMap().keySet(),in(node.getOutputSymbols()));
  EqualityInference equalityInference=new EqualityInference.Builder().addAllEqualities(filter(extractConjuncts(inheritedPredicate),simpleEquality())).build();
  List<Expression> partitionConjuncts=new ArrayList<>();
  List<Expression> postScanConjuncts=new ArrayList<>();
  for (  Expression conjunct : filter(extractConjuncts(inheritedPredicate),not(simpleEquality()))) {
    Expression rewrittenConjunct=equalityInference.rewritePredicate(conjunct,in(partitionSymbols));
    if (rewrittenConjunct != null && DeterminismEvaluator.isDeterministic(rewrittenConjunct)) {
      partitionConjuncts.add(rewrittenConjunct);
    }
 else {
      postScanConjuncts.add(conjunct);
    }
  }
  partitionConjuncts.addAll(equalityInference.scopedEqualityPredicates(in(partitionSymbols)));
  postScanConjuncts.addAll(equalityInference.scopedEqualityPredicates(not(in(partitionSymbols))));
  postScanConjuncts.addAll(equalityInference.scopeBridgePredicates(in(partitionSymbols)));
  PlanNode output=node;
  if (!partitionConjuncts.isEmpty() || !postScanConjuncts.isEmpty()) {
    if (!node.getPartitionPredicate().equals(BooleanLiteral.TRUE_LITERAL)) {
      partitionConjuncts.add(node.getPartitionPredicate());
    }
    output=new TableScanNode(node.getId(),node.getTable(),node.getOutputSymbols(),node.getAssignments(),combineConjuncts(partitionConjuncts),combineConjuncts(postScanConjuncts));
  }
  if (!postScanConjuncts.isEmpty()) {
    output=new FilterNode(idAllocator.getNextId(),output,and(postScanConjuncts));
  }
  return output;
}
