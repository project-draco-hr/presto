{
  Set<Symbol> partitionSymbols=Sets.filter(MapTransformer.of(node.getAssignments()).filterValues(partitionColumn(node.getTable())).immutableMap().keySet(),in(node.getOutputSymbols()));
  EqualityInference equalityInference=createEqualityInference(inheritedPredicate);
  List<Expression> partitionConjuncts=new ArrayList<>();
  List<Expression> postScanConjuncts=new ArrayList<>();
  postScanConjuncts.addAll(ImmutableList.copyOf(filter(extractConjuncts(inheritedPredicate),not(deterministic()))));
  inheritedPredicate=stripNonDeterministicConjuncts(inheritedPredicate);
  for (  Expression conjunct : EqualityInference.nonInferrableConjuncts(inheritedPredicate)) {
    Expression rewrittenConjunct=equalityInference.rewriteExpression(conjunct,in(partitionSymbols));
    if (rewrittenConjunct != null) {
      partitionConjuncts.add(rewrittenConjunct);
    }
 else {
      postScanConjuncts.add(conjunct);
    }
  }
  EqualityInference.EqualityPartition equalityPartition=equalityInference.generateEqualitiesPartitionedBy(in(partitionSymbols));
  partitionConjuncts.addAll(equalityPartition.getScopeEqualities());
  postScanConjuncts.addAll(equalityPartition.getScopeComplementEqualities());
  postScanConjuncts.addAll(equalityPartition.getScopeStraddlingEqualities());
  PlanNode output=node;
  if (!partitionConjuncts.isEmpty() || !postScanConjuncts.isEmpty()) {
    if (!node.getPartitionPredicate().equals(BooleanLiteral.TRUE_LITERAL)) {
      partitionConjuncts.add(node.getPartitionPredicate());
    }
    output=new TableScanNode(node.getId(),node.getTable(),node.getOutputSymbols(),node.getAssignments(),combineConjuncts(partitionConjuncts),combineConjuncts(postScanConjuncts));
  }
  if (!postScanConjuncts.isEmpty()) {
    output=new FilterNode(idAllocator.getNextId(),output,combineConjuncts(postScanConjuncts));
  }
  return output;
}
