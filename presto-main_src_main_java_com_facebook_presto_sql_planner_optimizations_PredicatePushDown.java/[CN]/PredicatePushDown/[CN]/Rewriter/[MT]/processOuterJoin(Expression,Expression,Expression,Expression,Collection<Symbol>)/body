{
  checkArgument(Iterables.all(DependencyExtractor.extractUnique(outerEffectivePredicate),in(outerSymbols)),"outerEffectivePredicate must only contain symbols from outerSymbols");
  checkArgument(Iterables.all(DependencyExtractor.extractUnique(innerEffectivePredicate),not(in(outerSymbols))),"innerEffectivePredicate must not contain symbols from outerSymbols");
  ImmutableList.Builder<Expression> outerPushdownConjuncts=ImmutableList.builder();
  ImmutableList.Builder<Expression> innerPushdownConjuncts=ImmutableList.builder();
  ImmutableList.Builder<Expression> postJoinConjuncts=ImmutableList.builder();
  postJoinConjuncts.addAll(filter(extractConjuncts(inheritedPredicate),not(deterministic())));
  inheritedPredicate=stripNonDeterministicConjuncts(inheritedPredicate);
  outerEffectivePredicate=stripNonDeterministicConjuncts(outerEffectivePredicate);
  innerEffectivePredicate=stripNonDeterministicConjuncts(innerEffectivePredicate);
  joinPredicate=stripNonDeterministicConjuncts(joinPredicate);
  EqualityInference inheritedInference=createEqualityInference(inheritedPredicate);
  EqualityInference outerInference=createEqualityInference(inheritedPredicate,outerEffectivePredicate);
  EqualityInference.EqualityPartition equalityPartition=inheritedInference.generateEqualitiesPartitionedBy(in(outerSymbols));
  Expression outerOnlyInheritedEqualities=combineConjuncts(equalityPartition.getScopeEqualities());
  EqualityInference potentialNullSymbolInference=createEqualityInference(outerOnlyInheritedEqualities,outerEffectivePredicate,innerEffectivePredicate,joinPredicate);
  EqualityInference potentialNullSymbolInferenceWithoutInnerInferred=createEqualityInference(outerOnlyInheritedEqualities,outerEffectivePredicate,joinPredicate);
  for (  Expression conjunct : EqualityInference.nonInferrableConjuncts(inheritedPredicate)) {
    Expression outerRewritten=outerInference.rewriteExpression(conjunct,in(outerSymbols));
    if (outerRewritten != null) {
      outerPushdownConjuncts.add(outerRewritten);
      Expression innerRewritten=potentialNullSymbolInference.rewriteExpression(outerRewritten,not(in(outerSymbols)));
      if (innerRewritten != null) {
        innerPushdownConjuncts.add(innerRewritten);
      }
    }
 else {
      postJoinConjuncts.add(conjunct);
    }
  }
  for (  Expression conjunct : EqualityInference.nonInferrableConjuncts(and(outerEffectivePredicate,joinPredicate))) {
    Expression rewritten=potentialNullSymbolInference.rewriteExpression(conjunct,not(in(outerSymbols)));
    if (rewritten != null) {
      innerPushdownConjuncts.add(rewritten);
    }
  }
  outerPushdownConjuncts.addAll(equalityPartition.getScopeEqualities());
  postJoinConjuncts.addAll(equalityPartition.getScopeComplementEqualities());
  postJoinConjuncts.addAll(equalityPartition.getScopeStraddlingEqualities());
  innerPushdownConjuncts.addAll(potentialNullSymbolInferenceWithoutInnerInferred.generateEqualitiesPartitionedBy(not(in(outerSymbols))).getScopeEqualities());
  return new OuterJoinPushDownResult(combineConjuncts(outerPushdownConjuncts.build()),combineConjuncts(innerPushdownConjuncts.build()),combineConjuncts(postJoinConjuncts.build()));
}
