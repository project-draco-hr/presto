{
  Expression inheritedPredicate=context.get();
  Expression sourceEffectivePredicate=EffectivePredicateExtractor.extract(node.getSource(),symbolAllocator.getTypes());
  List<Expression> sourceConjuncts=new ArrayList<>();
  List<Expression> filteringSourceConjuncts=new ArrayList<>();
  List<Expression> postJoinConjuncts=new ArrayList<>();
  Expression joinPredicate=equalsExpression(node.getSourceJoinSymbol(),node.getFilteringSourceJoinSymbol());
  EqualityInference joinInference=createEqualityInference(inheritedPredicate,sourceEffectivePredicate,joinPredicate);
  for (  Expression conjunct : Iterables.concat(EqualityInference.nonInferrableConjuncts(inheritedPredicate),EqualityInference.nonInferrableConjuncts(sourceEffectivePredicate))) {
    Expression rewrittenConjunct=joinInference.rewriteExpression(conjunct,equalTo(node.getFilteringSourceJoinSymbol()));
    if (rewrittenConjunct != null && DeterminismEvaluator.isDeterministic(rewrittenConjunct)) {
      Expression rewrittenConjunctOrNull=expressionOrNullSymbols(equalTo(node.getFilteringSourceJoinSymbol())).apply(rewrittenConjunct);
      filteringSourceConjuncts.add(rewrittenConjunctOrNull);
    }
  }
  EqualityInference.EqualityPartition joinInferenceEqualityPartition=joinInference.generateEqualitiesPartitionedBy(equalTo(node.getFilteringSourceJoinSymbol()));
  filteringSourceConjuncts.addAll(ImmutableList.copyOf(transform(joinInferenceEqualityPartition.getScopeEqualities(),expressionOrNullSymbols(equalTo(node.getFilteringSourceJoinSymbol())))));
  EqualityInference inheritedInference=createEqualityInference(inheritedPredicate);
  for (  Expression conjunct : EqualityInference.nonInferrableConjuncts(inheritedPredicate)) {
    Expression rewrittenConjunct=inheritedInference.rewriteExpression(conjunct,in(node.getSource().getOutputSymbols()));
    if (rewrittenConjunct != null) {
      sourceConjuncts.add(rewrittenConjunct);
    }
 else {
      postJoinConjuncts.add(conjunct);
    }
  }
  EqualityInference.EqualityPartition equalityPartition=inheritedInference.generateEqualitiesPartitionedBy(in(node.getSource().getOutputSymbols()));
  sourceConjuncts.addAll(equalityPartition.getScopeEqualities());
  postJoinConjuncts.addAll(equalityPartition.getScopeComplementEqualities());
  postJoinConjuncts.addAll(equalityPartition.getScopeStraddlingEqualities());
  PlanNode rewrittenSource=context.rewrite(node.getSource(),combineConjuncts(sourceConjuncts));
  PlanNode rewrittenFilteringSource=context.rewrite(node.getFilteringSource(),combineConjuncts(filteringSourceConjuncts));
  PlanNode output=node;
  if (rewrittenSource != node.getSource() || rewrittenFilteringSource != node.getFilteringSource()) {
    output=new SemiJoinNode(node.getId(),rewrittenSource,rewrittenFilteringSource,node.getSourceJoinSymbol(),node.getFilteringSourceJoinSymbol(),node.getSemiJoinOutput(),node.getSourceHashSymbol(),node.getFilteringSourceHashSymbol());
  }
  if (!postJoinConjuncts.isEmpty()) {
    output=new FilterNode(idAllocator.getNextId(),output,combineConjuncts(postJoinConjuncts));
  }
  return output;
}
