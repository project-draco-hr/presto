{
  EqualityInference equalityInference=createEqualityInference(inheritedPredicate);
  List<Expression> pushdownConjuncts=new ArrayList<>();
  List<Expression> postAggregationConjuncts=new ArrayList<>();
  for (  Expression conjunct : EqualityInference.nonInferrableConjuncts(inheritedPredicate)) {
    Expression rewrittenConjunct=equalityInference.rewriteExpression(conjunct,in(node.getGroupBy()));
    if (rewrittenConjunct != null && DeterminismEvaluator.isDeterministic(rewrittenConjunct)) {
      pushdownConjuncts.add(rewrittenConjunct);
    }
 else {
      postAggregationConjuncts.add(conjunct);
    }
  }
  EqualityInference.EqualityPartition equalityPartition=equalityInference.generateEqualitiesPartitionedBy(in(node.getGroupBy()));
  pushdownConjuncts.addAll(equalityPartition.getScopeEqualities());
  postAggregationConjuncts.addAll(equalityPartition.getInverseScopeEqualities());
  postAggregationConjuncts.addAll(equalityPartition.getScopeStraddlingEqualities());
  PlanNode rewrittenSource=planRewriter.rewrite(node.getSource(),combineConjuncts(pushdownConjuncts));
  PlanNode output=node;
  if (rewrittenSource != node.getSource()) {
    output=new AggregationNode(node.getId(),rewrittenSource,node.getGroupBy(),node.getAggregations(),node.getFunctions(),node.getStep());
  }
  if (!postAggregationConjuncts.isEmpty()) {
    output=new FilterNode(idAllocator.getNextId(),output,combineConjuncts(postAggregationConjuncts));
  }
  return output;
}
