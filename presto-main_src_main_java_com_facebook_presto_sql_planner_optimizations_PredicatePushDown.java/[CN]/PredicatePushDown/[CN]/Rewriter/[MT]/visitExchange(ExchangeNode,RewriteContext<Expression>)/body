{
  boolean modified=false;
  ImmutableList.Builder<PlanNode> builder=ImmutableList.builder();
  for (int i=0; i < node.getSources().size(); i++) {
    Map<Symbol,QualifiedNameReference> outputsToInputs=new HashMap<>();
    for (int index=0; index < node.getInputs().get(i).size(); index++) {
      outputsToInputs.put(node.getOutputSymbols().get(index),node.getInputs().get(i).get(index).toQualifiedNameReference());
    }
    Expression sourcePredicate=ExpressionTreeRewriter.rewriteWith(new ExpressionSymbolInliner(outputsToInputs),context.get());
    PlanNode source=node.getSources().get(i);
    PlanNode rewrittenSource=context.rewrite(source,sourcePredicate);
    if (rewrittenSource != source) {
      modified=true;
    }
    builder.add(rewrittenSource);
  }
  if (modified) {
    return new ExchangeNode(node.getId(),node.getType(),node.getScope(),node.getPartitioningScheme(),builder.build(),node.getInputs());
  }
  return node;
}
