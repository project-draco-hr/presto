{
  TestingTransactionHandle transactionHandle=TestingTransactionHandle.create("foo");
  finalizerService.start();
  NodeTaskMap nodeTaskMap=new NodeTaskMap(finalizerService);
  ImmutableList.Builder<Node> nodeBuilder=ImmutableList.builder();
  for (int i=0; i < NODES; i++) {
    nodeBuilder.add(new PrestoNode("node" + i,URI.create("http://" + addressForHost(i).getHostText()),NodeVersion.UNKNOWN));
  }
  List<Node> nodes=nodeBuilder.build();
  MockRemoteTaskFactory remoteTaskFactory=new MockRemoteTaskFactory(Executors.newCachedThreadPool(daemonThreadsNamed("remoteTaskExecutor-%s")));
  for (int i=0; i < nodes.size(); i++) {
    Node node=nodes.get(i);
    ImmutableList.Builder<Split> initialSplits=ImmutableList.builder();
    for (int j=0; j < MAX_SPLITS_PER_NODE + MAX_PENDING_SPLITS_PER_TASK_PER_NODE; j++) {
      initialSplits.add(new Split("foo",transactionHandle,new TestSplitRemote(i)));
    }
    TaskId taskId=new TaskId("test","1",i);
    MockRemoteTaskFactory.MockRemoteTask remoteTask=remoteTaskFactory.createTableScanTask(taskId,node,initialSplits.build(),nodeTaskMap.createPartitionedSplitCountTracker(node,taskId));
    nodeTaskMap.addTask(node,remoteTask);
    taskMap.put(node,remoteTask);
  }
  for (int i=0; i < SPLITS; i++) {
    splits.add(new Split("foo",transactionHandle,new TestSplitRemote(ThreadLocalRandom.current().nextInt(DATA_NODES))));
  }
  InMemoryNodeManager nodeManager=new InMemoryNodeManager();
  nodeManager.addNode("foo",nodes);
  NodeScheduler nodeScheduler=new NodeScheduler(getNetworkTopology(),nodeManager,getNodeSchedulerConfig(),nodeTaskMap);
  nodeSelector=nodeScheduler.createNodeSelector("foo");
}
