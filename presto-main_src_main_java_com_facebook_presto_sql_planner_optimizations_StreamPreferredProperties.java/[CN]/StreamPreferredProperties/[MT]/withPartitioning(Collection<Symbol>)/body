{
  if (partitionSymbols.isEmpty()) {
    return singleStream();
  }
  Iterable<Symbol> desiredPartitioning=partitionSymbols;
  if (partitioningColumns.isPresent()) {
    if (exactColumnOrder) {
      if (partitioningColumns.get().equals(desiredPartitioning)) {
        return this;
      }
    }
 else {
      Set<Symbol> common=Sets.intersection(ImmutableSet.copyOf(desiredPartitioning),ImmutableSet.copyOf(partitioningColumns.get()));
      if (!common.isEmpty()) {
        desiredPartitioning=common;
      }
    }
  }
  return new StreamPreferredProperties(distribution,streamCount,false,Optional.of(desiredPartitioning),false);
}
