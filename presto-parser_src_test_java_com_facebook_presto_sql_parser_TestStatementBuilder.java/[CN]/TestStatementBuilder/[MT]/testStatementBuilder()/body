{
  printStatement("select * from foo");
  printStatement("explain select * from foo");
  printStatement("explain (type distributed, format graphviz) select * from foo");
  printStatement("select * from foo /* end */");
  printStatement("/* start */ select * from foo");
  printStatement("/* start */ select * /* middle */ from foo /* end */");
  printStatement("-- start\nselect * -- junk\n-- hi\nfrom foo -- done");
  printStatement("select * from foo a (x, y, z)");
  printStatement("select *, 123, * from foo");
  printStatement("select show from foo");
  printStatement("select extract(day from x), extract(dow from x) from y");
  printStatement("select 1 + 13 || '15' from foo");
  printStatement("select x is distinct from y from foo where a is not distinct from b");
  printStatement("select x[1] from my_table");
  printStatement("select x[1][2] from my_table");
  printStatement("select x[cast(10 * sin(x) as bigint)] from my_table");
  printStatement("" + "select depname, empno, salary\n" + ", count(*) over ()\n"+ ", avg(salary) over (partition by depname)\n"+ ", rank() over (partition by depname order by salary desc)\n"+ ", sum(salary) over (order by salary rows unbounded preceding)\n"+ ", sum(salary) over (partition by depname order by salary rows between current row and 3 following)\n"+ ", sum(salary) over (partition by depname range unbounded preceding)\n"+ ", sum(salary) over (rows between 2 preceding and unbounded following)\n"+ "from emp");
  printStatement("" + "with a (id) as (with x as (select 123 from z) select * from x) " + "   , b (id) as (select 999 from z) "+ "select * from a join b using (id)");
  printStatement("with recursive t as (select * from x) select * from t");
  printStatement("select * from information_schema.tables");
  printStatement("show catalogs");
  printStatement("show schemas");
  printStatement("show schemas from sys");
  printStatement("show tables");
  printStatement("show tables from information_schema");
  printStatement("show tables like '%'");
  printStatement("show tables from information_schema like '%'");
  printStatement("show partitions from foo");
  printStatement("show partitions from foo where name = 'foo'");
  printStatement("show partitions from foo order by x");
  printStatement("show partitions from foo limit 10");
  printStatement("show partitions from foo order by x desc limit 10");
  printStatement("show functions");
  printStatement("select cast('123' as bigint), try_cast('foo' as bigint)");
  printStatement("select * from a.b.c");
  printStatement("select * from a.b.c.e.f.g");
  printStatement("select \"TOTALPRICE\" \"my price\" from \"ORDERS\"");
  printStatement("select * from foo tablesample system (10+1)");
  printStatement("select * from foo tablesample system (10) join bar tablesample bernoulli (30) on a.id = b.id");
  printStatement("select * from foo tablesample bernoulli (10) stratify on (id)");
  printStatement("select * from foo tablesample system (50) stratify on (id, name)");
  printStatement("select * from foo tablesample poissonized (100)");
  printStatement("select * from foo approximate at 90 confidence");
  printStatement("create table foo as select * from abc");
  printStatement("drop table foo");
  printStatement("insert into foo select * from abc");
  printStatement("values ('a', 1, 2.2), ('b', 2, 3.3)");
  printStatement("table foo");
  printStatement("table foo order by x limit 10");
  printStatement("(table foo)");
  printStatement("(table foo) limit 10");
  printStatement("(table foo limit 5) limit 10");
  printStatement("select * from a union select * from b");
  printStatement("table a union all table b");
  printStatement("(table foo) union select * from foo union (table foo order by x)");
  printStatement("table a union table b intersect table c");
  printStatement("(table a union table b) intersect table c");
  printStatement("table a union table b except table c intersect table d");
  printStatement("(table a union table b except table c) intersect table d");
  printStatement("((table a union table b) except table c) intersect table d");
  printStatement("(table a union (table b except table c)) intersect table d");
  printStatement("table a intersect table b union table c");
  printStatement("table a intersect (table b union table c)");
  printStatement("alter table foo rename to bar");
  printStatement("alter table a.b.c rename to d.e.f");
  printStatement("create view foo as with a as (select 123) select * from a");
  printStatement("create or replace view foo as select 123 from t");
  printStatement("drop view foo");
}
