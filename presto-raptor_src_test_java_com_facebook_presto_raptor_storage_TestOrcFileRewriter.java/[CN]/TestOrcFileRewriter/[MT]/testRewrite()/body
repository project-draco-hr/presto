{
  ArrayType arrayType=new ArrayType(BIGINT);
  ArrayType arrayOfArrayType=new ArrayType(arrayType);
  MapType mapType=new MapType(VARCHAR,BOOLEAN);
  List<Long> columnIds=ImmutableList.of(3L,7L,9L,10L,11L);
  List<Type> columnTypes=ImmutableList.of(BIGINT,VARCHAR,arrayType,mapType,arrayOfArrayType);
  File file=new File(temporary,randomUUID().toString());
  try (OrcFileWriter writer=new OrcFileWriter(columnIds,columnTypes,file)){
    List<Page> pages=rowPagesBuilder(columnTypes).row(123,"hello",arrayBlockOf(BIGINT,1,2),mapBlockOf(VARCHAR,BOOLEAN,"k1",true),arrayBlockOf(arrayType,arrayBlockOf(BIGINT,5))).row(777,"sky",arrayBlockOf(BIGINT,3,4),mapBlockOf(VARCHAR,BOOLEAN,"k2",false),arrayBlockOf(arrayType,arrayBlockOf(BIGINT,6))).row(456,"bye",arrayBlockOf(BIGINT,5,6),mapBlockOf(VARCHAR,BOOLEAN,"k3",true),arrayBlockOf(arrayType,arrayBlockOf(BIGINT,7))).row(888,"world",arrayBlockOf(BIGINT,7,8),mapBlockOf(VARCHAR,BOOLEAN,"k4",true),arrayBlockOf(arrayType,null,arrayBlockOf(BIGINT,8),null)).row(999,"done",arrayBlockOf(BIGINT,9,10),mapBlockOf(VARCHAR,BOOLEAN,"k5",true),arrayBlockOf(arrayType,arrayBlockOf(BIGINT,9,10))).build();
    writer.appendPages(pages);
  }
   try (OrcDataSource dataSource=fileOrcDataSource(file)){
    OrcRecordReader reader=createReader(dataSource,columnIds,columnTypes);
    assertEquals(reader.getReaderRowCount(),5);
    assertEquals(reader.getFileRowCount(),5);
    assertEquals(reader.getSplitLength(),file.length());
    assertEquals(reader.nextBatch(),5);
    LongVector longVector=new LongVector(5);
    reader.readVector(0,longVector);
    for (int i=0; i < 5; i++) {
      assertEquals(longVector.isNull[i],false);
    }
    assertEquals(longVector.vector[0],123L);
    assertEquals(longVector.vector[1],777L);
    assertEquals(longVector.vector[2],456L);
    assertEquals(longVector.vector[3],888L);
    assertEquals(longVector.vector[4],999L);
    SliceVector stringVector=new SliceVector(5);
    reader.readVector(1,stringVector);
    assertEquals(stringVector.vector[0],utf8Slice("hello"));
    assertEquals(stringVector.vector[1],utf8Slice("sky"));
    assertEquals(stringVector.vector[2],utf8Slice("bye"));
    assertEquals(stringVector.vector[3],utf8Slice("world"));
    assertEquals(stringVector.vector[4],utf8Slice("done"));
    SingleObjectVector arrayVector=new SingleObjectVector();
    reader.readVector(arrayType,2,arrayVector);
    Block block=(Block)arrayVector.object;
    assertEquals(block.getPositionCount(),5);
    assertTrue(arrayBlocksEqual(BIGINT,arrayType.getObject(block,0),arrayBlockOf(BIGINT,1,2)));
    assertTrue(arrayBlocksEqual(BIGINT,arrayType.getObject(block,1),arrayBlockOf(BIGINT,3,4)));
    assertTrue(arrayBlocksEqual(BIGINT,arrayType.getObject(block,2),arrayBlockOf(BIGINT,5,6)));
    assertTrue(arrayBlocksEqual(BIGINT,arrayType.getObject(block,3),arrayBlockOf(BIGINT,7,8)));
    assertTrue(arrayBlocksEqual(BIGINT,arrayType.getObject(block,4),arrayBlockOf(BIGINT,9,10)));
    SingleObjectVector mapVector=new SingleObjectVector();
    reader.readVector(mapType,3,mapVector);
    block=(Block)mapVector.object;
    assertEquals(block.getPositionCount(),5);
    assertTrue(mapBlocksEqual(VARCHAR,BOOLEAN,arrayType.getObject(block,0),mapBlockOf(VARCHAR,BOOLEAN,"k1",true)));
    assertTrue(mapBlocksEqual(VARCHAR,BOOLEAN,arrayType.getObject(block,1),mapBlockOf(VARCHAR,BOOLEAN,"k2",false)));
    assertTrue(mapBlocksEqual(VARCHAR,BOOLEAN,arrayType.getObject(block,2),mapBlockOf(VARCHAR,BOOLEAN,"k3",true)));
    assertTrue(mapBlocksEqual(VARCHAR,BOOLEAN,arrayType.getObject(block,3),mapBlockOf(VARCHAR,BOOLEAN,"k4",true)));
    assertTrue(mapBlocksEqual(VARCHAR,BOOLEAN,arrayType.getObject(block,4),mapBlockOf(VARCHAR,BOOLEAN,"k5",true)));
    SingleObjectVector arrayOfArrayVector=new SingleObjectVector();
    reader.readVector(arrayOfArrayType,4,arrayOfArrayVector);
    block=(Block)arrayOfArrayVector.object;
    assertEquals(block.getPositionCount(),5);
    assertTrue(arrayBlocksEqual(arrayType,arrayOfArrayType.getObject(block,0),arrayBlockOf(arrayType,arrayBlockOf(BIGINT,5))));
    assertTrue(arrayBlocksEqual(arrayType,arrayOfArrayType.getObject(block,1),arrayBlockOf(arrayType,arrayBlockOf(BIGINT,6))));
    assertTrue(arrayBlocksEqual(arrayType,arrayOfArrayType.getObject(block,2),arrayBlockOf(arrayType,arrayBlockOf(BIGINT,7))));
    assertTrue(arrayBlocksEqual(arrayType,arrayOfArrayType.getObject(block,3),arrayBlockOf(arrayType,null,arrayBlockOf(BIGINT,8),null)));
    assertTrue(arrayBlocksEqual(arrayType,arrayOfArrayType.getObject(block,4),arrayBlockOf(arrayType,arrayBlockOf(BIGINT,9,10))));
    assertEquals(reader.nextBatch(),-1);
  }
   BitSet rowsToDelete=new BitSet(5);
  rowsToDelete.set(1);
  rowsToDelete.set(3);
  rowsToDelete.set(4);
  File newFile=new File(temporary,randomUUID().toString());
  OrcFileInfo info=OrcFileRewriter.rewrite(file,newFile,rowsToDelete);
  assertEquals(info.getRowCount(),2);
  assertEquals(info.getUncompressedSize(),78);
  try (OrcDataSource dataSource=fileOrcDataSource(newFile)){
    OrcRecordReader reader=createReader(dataSource,columnIds,columnTypes);
    assertEquals(reader.getReaderRowCount(),2);
    assertEquals(reader.getFileRowCount(),2);
    assertEquals(reader.getSplitLength(),newFile.length());
    assertEquals(reader.nextBatch(),2);
    LongVector longVector=new LongVector(2);
    reader.readVector(0,longVector);
    for (int i=0; i < 2; i++) {
      assertEquals(longVector.isNull[i],false);
    }
    assertEquals(longVector.vector[0],123L);
    assertEquals(longVector.vector[1],456L);
    SliceVector stringVector=new SliceVector(2);
    reader.readVector(1,stringVector);
    assertEquals(stringVector.vector[0],utf8Slice("hello"));
    assertEquals(stringVector.vector[1],utf8Slice("bye"));
    SingleObjectVector arrayVector=new SingleObjectVector();
    reader.readVector(arrayType,2,arrayVector);
    Block block=(Block)arrayVector.object;
    assertEquals(block.getPositionCount(),2);
    assertTrue(arrayBlocksEqual(BIGINT,arrayType.getObject(block,0),arrayBlockOf(BIGINT,1,2)));
    assertTrue(arrayBlocksEqual(BIGINT,arrayType.getObject(block,1),arrayBlockOf(BIGINT,5,6)));
    SingleObjectVector mapVector=new SingleObjectVector();
    reader.readVector(mapType,3,mapVector);
    block=(Block)mapVector.object;
    assertEquals(block.getPositionCount(),2);
    assertTrue(mapBlocksEqual(VARCHAR,BOOLEAN,arrayType.getObject(block,0),mapBlockOf(VARCHAR,BOOLEAN,"k1",true)));
    assertTrue(mapBlocksEqual(VARCHAR,BOOLEAN,arrayType.getObject(block,1),mapBlockOf(VARCHAR,BOOLEAN,"k3",true)));
    SingleObjectVector arrayOfArrayVector=new SingleObjectVector();
    reader.readVector(arrayOfArrayType,4,arrayOfArrayVector);
    block=(Block)arrayOfArrayVector.object;
    assertEquals(block.getPositionCount(),2);
    assertTrue(arrayBlocksEqual(arrayType,arrayOfArrayType.getObject(block,0),arrayBlockOf(arrayType,arrayBlockOf(BIGINT,5))));
    assertTrue(arrayBlocksEqual(arrayType,arrayOfArrayType.getObject(block,1),arrayBlockOf(arrayType,arrayBlockOf(BIGINT,7))));
    assertEquals(reader.nextBatch(),-1);
  }
 }
