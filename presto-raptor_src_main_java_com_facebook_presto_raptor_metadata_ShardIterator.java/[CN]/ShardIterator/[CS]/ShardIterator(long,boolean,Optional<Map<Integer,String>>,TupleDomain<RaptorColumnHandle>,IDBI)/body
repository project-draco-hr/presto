{
  this.merged=merged;
  this.bucketToNode=bucketToNode.orElse(null);
  ShardPredicate predicate=ShardPredicate.create(effectivePredicate,bucketToNode.isPresent());
  String sql;
  if (bucketToNode.isPresent()) {
    sql="SELECT shard_uuid, bucket_number FROM %s WHERE %s ORDER BY bucket_number";
  }
 else {
    sql="SELECT shard_uuid, node_ids FROM %s WHERE %s";
  }
  sql=format(sql,shardIndexTable(tableId),predicate.getPredicate());
  dao=onDemandDao(dbi,ShardDao.class);
  fetchNodes();
  try {
    connection=dbi.open().getConnection();
    statement=connection.prepareStatement(sql);
    enableStreamingResults(statement);
    predicate.bind(statement);
    log.debug("Running query: %s",statement);
    resultSet=statement.executeQuery();
  }
 catch (  SQLException e) {
    close();
    throw metadataError(e);
  }
catch (  Throwable t) {
    close();
    throw t;
  }
}
