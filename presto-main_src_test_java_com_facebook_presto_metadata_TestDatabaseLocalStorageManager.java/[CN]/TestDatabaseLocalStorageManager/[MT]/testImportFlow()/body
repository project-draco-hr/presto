{
  UUID shardUuid=UUID.randomUUID();
  assertFalse(storageManager.shardExists(shardUuid));
  List<ConnectorColumnHandle> columnHandles=ImmutableList.<ConnectorColumnHandle>of(new NativeColumnHandle("column_7",7L),new NativeColumnHandle("column_11",11L));
  List<Page> pages=rowPagesBuilder(VARCHAR,BIGINT).row("alice",0).row("bob",1).row("charlie",2).row("dave",3).pageBreak().row("alice",4).row("bob",5).row("charlie",6).row("dave",7).pageBreak().row("alice",8).row("bob",9).row("charlie",10).row("dave",11).build();
  ColumnFileHandle fileHandles=storageManager.createStagingFileHandles(shardUuid,columnHandles);
  for (  Page page : pages) {
    fileHandles.append(page);
  }
  storageManager.commit(fileHandles);
  assertTrue(storageManager.shardExists(shardUuid));
  AlignmentOperatorFactory factory=new AlignmentOperatorFactory(0,storageManager.getBlocks(shardUuid,columnHandles.get(0)),storageManager.getBlocks(shardUuid,columnHandles.get(1)));
  Operator operator=factory.createOperator(driverContext);
  MaterializedResult expected=toMaterializedResult(operator.getOperatorContext().getSession(),operator.getTypes(),pages);
  OperatorAssertion.assertOperatorEquals(operator,expected);
}
