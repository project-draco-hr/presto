{
  List<TupleInfo.Type> types=o1.getTupleInfo().getTypes();
  for (int index=0; index < sortFields.size(); index++) {
    int field=sortFields.get(index);
    SortItem.Ordering order=sortOrders.get(index);
    TupleInfo.Type type=types.get(field);
    int comparison;
switch (type) {
case BOOLEAN:
      comparison=Boolean.compare(o1.getBoolean(field),o2.getBoolean(field));
    break;
case FIXED_INT_64:
  comparison=Long.compare(o1.getLong(field),o2.getLong(field));
break;
case DOUBLE:
comparison=Double.compare(o1.getDouble(field),o2.getDouble(field));
break;
case VARIABLE_BINARY:
comparison=o1.getSlice(field).compareTo(o2.getSlice(field));
break;
default :
throw new AssertionError("unimplemented type: " + type);
}
if (comparison != 0) {
if (order == SortItem.Ordering.DESCENDING) {
return -comparison;
}
return comparison;
}
}
return 0;
}
