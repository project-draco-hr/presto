{
  checkNotNull(taskId,"taskId is null");
  checkNotNull(outputId,"outputId is null");
  ListenableFuture<BufferResult> bufferResultFuture=taskManager.getTaskResults(taskId,outputId,token,DEFAULT_MAX_SIZE);
  bufferResultFuture=MoreFutures.addTimeout(bufferResultFuture,new Callable<BufferResult>(){
    @Override public BufferResult call(){
      return BufferResult.emptyResults(token,false);
    }
  }
,DEFAULT_MAX_WAIT_TIME,executor);
  ListenableFuture<Response> responseFuture=Futures.transform(bufferResultFuture,new Function<BufferResult,Response>(){
    @Override public Response apply(    BufferResult result){
      List<Page> pages=result.getPages();
      GenericEntity<?> entity=null;
      Status status;
      if (!pages.isEmpty()) {
        entity=new GenericEntity<>(pages,new TypeToken<List<Page>>(){
        }
.getType());
        status=Status.OK;
      }
 else       if (result.isBufferClosed()) {
        status=Status.GONE;
      }
 else {
        status=Status.NO_CONTENT;
      }
      return Response.status(status).entity(entity).header(PRESTO_PAGE_TOKEN,result.getToken()).header(PRESTO_PAGE_NEXT_TOKEN,result.getNextToken()).build();
    }
  }
);
  Duration timeout=new Duration(DEFAULT_MAX_WAIT_TIME.toMillis() + 5000,MILLISECONDS);
  AsyncResponseUtils.registerAsyncResponse(asyncResponse,responseFuture,timeout,executor,Response.status(Status.NO_CONTENT).header(PRESTO_PAGE_TOKEN,token).header(PRESTO_PAGE_NEXT_TOKEN,token).build());
}
