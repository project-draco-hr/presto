{
  List<Page> input=rowPagesBuilder(VARCHAR,BIGINT,VARCHAR,BIGINT,DOUBLE,VARCHAR).addSequencePage(100,0,0,300,500,500,500).build();
  OperatorFactory operatorFactory=new AggregationOperatorFactory(0,Step.SINGLE,ImmutableList.of(aggregation(COUNT,ImmutableList.of(0),Optional.<Integer>absent(),Optional.<Integer>absent(),1.0),aggregation(LONG_SUM,ImmutableList.of(1),Optional.<Integer>absent(),Optional.<Integer>absent(),1.0),aggregation(LONG_AVERAGE,ImmutableList.of(1),Optional.<Integer>absent(),Optional.<Integer>absent(),1.0),aggregation(VAR_BINARY_MAX,ImmutableList.of(2),Optional.<Integer>absent(),Optional.<Integer>absent(),1.0),aggregation(COUNT_STRING_COLUMN,ImmutableList.of(0),Optional.<Integer>absent(),Optional.<Integer>absent(),1.0),aggregation(LONG_SUM,ImmutableList.of(3),Optional.<Integer>absent(),Optional.<Integer>absent(),1.0),aggregation(DOUBLE_SUM,ImmutableList.of(4),Optional.<Integer>absent(),Optional.<Integer>absent(),1.0),aggregation(VAR_BINARY_MAX,ImmutableList.of(5),Optional.<Integer>absent(),Optional.<Integer>absent(),1.0)));
  Operator operator=operatorFactory.createOperator(driverContext);
  MaterializedResult expected=resultBuilder(driverContext.getSession(),BIGINT,BIGINT,DOUBLE,VARCHAR,BIGINT,BIGINT,DOUBLE,VARCHAR).row(100,4950,49.5,"399",100,54950,54950.0,"599").build();
  assertOperatorEquals(operator,input,expected);
}
