{
  Operator source=createOperator(new Page(BlockAssertions.createStringSequenceBlock(0,100),BlockAssertions.createLongSequenceBlock(0,100),BlockAssertions.createStringSequenceBlock(300,400),BlockAssertions.createCompositeTupleSequenceBlock(500,600)));
  AggregationOperator actual=new AggregationOperator(source,Step.SINGLE,ImmutableList.of(aggregation(COUNT,new Input(0,0)),aggregation(LONG_SUM,new Input(1,0)),aggregation(LONG_AVERAGE,new Input(1,0)),aggregation(VAR_BINARY_MAX,new Input(2,0)),aggregation(COUNT_COLUMN,new Input(0,0)),aggregation(LONG_SUM,new Input(3,1)),aggregation(DOUBLE_SUM,new Input(3,2)),aggregation(VAR_BINARY_MAX,new Input(3,3))));
  Page expectedPage=new Page(new BlockBuilder(SINGLE_LONG).append(100L).build(),new BlockBuilder(SINGLE_LONG).append(4950L).build(),new BlockBuilder(SINGLE_DOUBLE).append(49.5).build(),new BlockBuilder(SINGLE_VARBINARY).append("399").build(),new BlockBuilder(SINGLE_LONG).append(100L).build(),new BlockBuilder(SINGLE_LONG).append(54950L).build(),new BlockBuilder(SINGLE_DOUBLE).append(54950.0).build(),new BlockBuilder(SINGLE_VARBINARY).append("599").build());
  PageIterator pages=actual.iterator(new OperatorStats());
  Page actualPage=pages.next();
  assertEquals(actualPage.getChannelCount(),8);
  PageAssertions.assertPageEquals(actualPage,expectedPage);
  assertFalse(pages.hasNext());
}
