{
  ShardPredicate predicate=ShardPredicate.create(effectivePredicate);
  String sql="" + "SELECT shard_uuid, node_identifier\n" + "FROM " + shardIndexTable(tableId) + " t\n"+ "LEFT JOIN shard_nodes sn ON (t.shard_id = sn.shard_id)\n"+ "LEFT JOIN nodes n ON (sn.node_id = n.node_id)\n"+ "WHERE "+ predicate.getPredicate()+ "\n"+ "ORDER BY shard_uuid";
  try (Handle handle=dbi.open();PreparedStatement statement=handle.getConnection().prepareStatement(sql)){
    predicate.bind(statement);
    try (ResultSet rs=statement.executeQuery()){
      ImmutableList.Builder<ShardNodes> list=ImmutableList.builder();
      UUID currentShardId=null;
      ImmutableSet.Builder<String> nodes=ImmutableSet.builder();
      while (rs.next()) {
        UUID shardId=uuidFromBytes(rs.getBytes("shard_uuid"));
        String nodeId=rs.getString("node_identifier");
        if ((currentShardId != null) && !shardId.equals(currentShardId)) {
          list.add(new ShardNodes(currentShardId,nodes.build()));
          nodes=ImmutableSet.builder();
        }
        currentShardId=shardId;
        if (nodeId != null) {
          nodes.add(nodeId);
        }
      }
      if (currentShardId != null) {
        list.add(new ShardNodes(currentShardId,nodes.build()));
      }
      return list.build();
    }
   }
 catch (  SQLException e) {
    throw new PrestoException(RAPTOR_ERROR,e);
  }
}
