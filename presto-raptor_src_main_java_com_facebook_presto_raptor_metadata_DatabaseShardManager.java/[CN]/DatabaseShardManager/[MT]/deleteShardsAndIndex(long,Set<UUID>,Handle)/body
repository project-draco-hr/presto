{
  String args=Joiner.on(",").join(nCopies(shardUuids.size(),"?"));
  ImmutableSet.Builder<Long> shardIdSet=ImmutableSet.builder();
  String selectShardNodes=format("SELECT shard_id FROM %s WHERE shard_uuid IN (%s)",shardIndexTable(tableId),args);
  try (PreparedStatement statement=handle.getConnection().prepareStatement(selectShardNodes)){
    bindUuids(statement,shardUuids);
    try (ResultSet rs=statement.executeQuery()){
      while (rs.next()) {
        shardIdSet.add(rs.getLong("shard_id"));
      }
    }
   }
   Set<Long> shardIds=shardIdSet.build();
  if (shardIds.size() != shardUuids.size()) {
    throw transactionConflict();
  }
  ShardDao dao=shardDaoSupplier.attach(handle);
  dao.insertDeletedShards(shardUuids);
  String where=" WHERE shard_id IN (" + args + ")";
  String deleteFromShardNodes="DELETE FROM shard_nodes " + where;
  String deleteFromShards="DELETE FROM shards " + where;
  String deleteFromShardIndex="DELETE FROM " + shardIndexTable(tableId) + where;
  try (PreparedStatement statement=handle.getConnection().prepareStatement(deleteFromShardNodes)){
    bindLongs(statement,shardIds);
    statement.executeUpdate();
  }
   for (  String sql : asList(deleteFromShards,deleteFromShardIndex)) {
    try (PreparedStatement statement=handle.getConnection().prepareStatement(sql)){
      bindLongs(statement,shardIds);
      if (statement.executeUpdate() != shardIds.size()) {
        throw transactionConflict();
      }
    }
   }
}
