{
  PlanWithProperties source;
  PlanWithProperties filteringSource;
  if (distributedJoins && !context.isDownstreamIsDelete()) {
    List<Symbol> sourceSymbols=ImmutableList.of(node.getSourceJoinSymbol());
    List<Symbol> filteringSourceSymbols=ImmutableList.of(node.getFilteringSourceJoinSymbol());
    source=node.getSource().accept(this,context.withPreferredProperties(PreferredProperties.hashPartitioned(sourceSymbols)));
    filteringSource=node.getFilteringSource().accept(this,context.withPreferredProperties(PreferredProperties.any()));
    if (!source.getProperties().isHashPartitionedOn(sourceSymbols)) {
      source=withDerivedProperties(partitionedExchange(idAllocator.getNextId(),source.getNode(),new PartitionFunctionBinding(FIXED_HASH_DISTRIBUTION,sourceSymbols,node.getSourceHashSymbol())),source.getProperties());
    }
    checkState(!filteringSource.getProperties().isHashPartitionedOn(filteringSourceSymbols) || !filteringSource.getProperties().isNullReplication());
    filteringSource=withDerivedProperties(partitionedExchange(idAllocator.getNextId(),filteringSource.getNode(),new PartitionFunctionBinding(FIXED_HASH_DISTRIBUTION,filteringSourceSymbols,node.getFilteringSourceHashSymbol(),true,Optional.empty())),filteringSource.getProperties());
  }
 else {
    source=node.getSource().accept(this,context.withPreferredProperties(PreferredProperties.any()));
    filteringSource=node.getFilteringSource().accept(this,context.withPreferredProperties(PreferredProperties.any()).withHashPartitionedSemiJoinBanned(false));
    if (source.getProperties().isDistributed()) {
      filteringSource=withDerivedProperties(replicatedExchange(idAllocator.getNextId(),filteringSource.getNode()),filteringSource.getProperties());
    }
 else {
      filteringSource=withDerivedProperties(gatheringExchange(idAllocator.getNextId(),filteringSource.getNode()),filteringSource.getProperties());
    }
  }
  return rebaseAndDeriveProperties(node,ImmutableList.of(source,filteringSource));
}
