{
  if (requirements.isCoordinatorOnly() && !properties.isCoordinatorOnly()) {
    return new PlanWithProperties(gatheringExchange(idAllocator.getNextId(),makePartial.apply(node)),ActualProperties.of(PartitioningProperties.unpartitioned(),PlacementProperties.coordinatorOnly()));
  }
  if (requirements.isUnpartitioned() && properties.isUnpartitioned()) {
    return new PlanWithProperties(node,properties);
  }
  if (requirements.isPartitioned() && properties.isPartitioned() && properties.getPartitioning().getKeys().equals(requirements.getPartitioning().get().getKeys())) {
    return new PlanWithProperties(node,properties);
  }
  if (properties.isPartitioned() && requirements.isUnpartitioned()) {
    return new PlanWithProperties(gatheringExchange(idAllocator.getNextId(),makePartial.apply(node)),ActualProperties.of(PartitioningProperties.unpartitioned(),PlacementProperties.anywhere()));
  }
  if (requirements.isPartitionedOnKeys() && (properties.isUnpartitioned() || (properties.isPartitioned() && !properties.getPartitioning().getKeys().equals(requirements.getPartitioning().get().getKeys())))) {
    return new PlanWithProperties(partitionedExchange(idAllocator.getNextId(),makePartial.apply(node),requirements.getPartitioning().get().getKeys().get(),requirements.getPartitioning().get().getHashSymbol()),ActualProperties.of(requirements.getPartitioning().get(),PlacementProperties.anywhere()));
  }
  throw new UnsupportedOperationException(String.format("not supported: required %s, current %s",requirements,properties));
}
