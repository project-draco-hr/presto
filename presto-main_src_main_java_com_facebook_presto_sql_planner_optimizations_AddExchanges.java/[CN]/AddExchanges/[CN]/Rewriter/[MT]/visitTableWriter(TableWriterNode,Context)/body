{
  PlanWithProperties source=node.getSource().accept(this,context);
  Optional<PartitioningScheme> partitioningScheme=node.getPartitioningScheme();
  if (!partitioningScheme.isPresent() && redistributeWrites) {
    partitioningScheme=Optional.of(new PartitioningScheme(FIXED_RANDOM_DISTRIBUTION,source.getNode().getOutputSymbols(),ImmutableList.of()));
  }
  if (partitioningScheme.isPresent()) {
    source=withDerivedProperties(partitionedExchange(idAllocator.getNextId(),REMOTE,source.getNode(),partitioningScheme.get()),source.getProperties());
  }
  return rebaseAndDeriveProperties(node,source);
}
