{
  PlanWithProperties source=node.getSource().accept(this,context);
  Optional<PartitionFunctionBinding> partitionFunction=node.getPartitionFunction();
  if (!partitionFunction.isPresent() && redistributeWrites) {
    partitionFunction=Optional.of(new PartitionFunctionBinding(FIXED_RANDOM_DISTRIBUTION,source.getNode().getOutputSymbols(),ImmutableList.of()));
  }
  if (partitionFunction.isPresent()) {
    source=withDerivedProperties(partitionedExchange(idAllocator.getNextId(),source.getNode(),partitionFunction.get()),source.getProperties());
  }
  return rebaseAndDeriveProperties(node,source);
}
