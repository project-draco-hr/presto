{
  if (!context.getPreferredProperties().getGlobalProperties().isPresent() || !context.getPreferredProperties().getGlobalProperties().get().isHashPartitioned()) {
    List<PlanNode> unpartitionedChildren=new ArrayList<>();
    List<List<Symbol>> unpartitionedOutputLayouts=new ArrayList<>();
    List<PlanNode> partitionedChildren=new ArrayList<>();
    List<List<Symbol>> partitionedOutputLayouts=new ArrayList<>();
    List<PlanNode> sources=node.getSources();
    for (int i=0; i < sources.size(); i++) {
      PlanWithProperties child=sources.get(i).accept(this,context.withPreferredProperties(PreferredProperties.any()));
      if (!child.getProperties().isDistributed()) {
        unpartitionedChildren.add(child.getNode());
        unpartitionedOutputLayouts.add(node.sourceOutputLayout(i));
      }
 else {
        partitionedChildren.add(child.getNode());
        partitionedOutputLayouts.add(node.sourceOutputLayout(i));
      }
    }
    PlanNode result=null;
    if (!partitionedChildren.isEmpty()) {
      result=new ExchangeNode(idAllocator.getNextId(),ExchangeNode.Type.GATHER,new PartitionFunctionBinding(SINGLE_DISTRIBUTION,node.getOutputSymbols(),ImmutableList.of()),partitionedChildren,partitionedOutputLayouts);
      unpartitionedChildren.add(result);
      unpartitionedOutputLayouts.add(result.getOutputSymbols());
    }
    if (unpartitionedChildren.size() > 1) {
      ImmutableListMultimap.Builder<Symbol,Symbol> mappings=ImmutableListMultimap.builder();
      for (int i=0; i < node.getOutputSymbols().size(); i++) {
        for (        List<Symbol> outputLayout : unpartitionedOutputLayouts) {
          mappings.put(node.getOutputSymbols().get(i),outputLayout.get(i));
        }
      }
      result=new UnionNode(node.getId(),unpartitionedChildren,mappings.build());
    }
    return new PlanWithProperties(result,ActualProperties.undistributed());
  }
  List<Symbol> hashingColumns=context.getPreferredProperties().getGlobalProperties().get().getPartitioningProperties().get().getHashingOrder().get();
  ImmutableList.Builder<PlanNode> partitionedSources=ImmutableList.builder();
  ImmutableListMultimap.Builder<Symbol,Symbol> outputToSourcesMapping=ImmutableListMultimap.builder();
  for (int sourceIndex=0; sourceIndex < node.getSources().size(); sourceIndex++) {
    ImmutableList.Builder<Symbol> hashColumnsBuilder=ImmutableList.builder();
    for (    Symbol column : hashingColumns) {
      hashColumnsBuilder.add(node.getSymbolMapping().get(column).get(sourceIndex));
    }
    List<Symbol> sourceHashColumns=hashColumnsBuilder.build();
    PlanWithProperties source=node.getSources().get(sourceIndex).accept(this,context.withPreferredProperties(PreferredProperties.hashPartitioned(sourceHashColumns)));
    if (!source.getProperties().isHashPartitionedOn(sourceHashColumns)) {
      source=withDerivedProperties(partitionedExchange(idAllocator.getNextId(),source.getNode(),sourceHashColumns,Optional.empty()),source.getProperties());
    }
    partitionedSources.add(source.getNode());
    for (int column=0; column < node.getOutputSymbols().size(); column++) {
      outputToSourcesMapping.put(node.getOutputSymbols().get(column),node.sourceOutputLayout(sourceIndex).get(column));
    }
  }
  return new PlanWithProperties(new UnionNode(node.getId(),partitionedSources.build(),outputToSourcesMapping.build()),ActualProperties.hashPartitioned(hashingColumns));
}
