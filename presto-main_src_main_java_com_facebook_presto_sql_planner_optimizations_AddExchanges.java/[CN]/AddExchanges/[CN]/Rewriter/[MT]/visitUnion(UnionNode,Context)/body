{
  PreferredProperties parentPreference=context.getPreferredProperties();
  Optional<PreferredProperties.Global> parentGlobal=parentPreference.getGlobalProperties();
  if (parentGlobal.isPresent() && parentGlobal.get().isDistributed() && parentGlobal.get().getPartitioningProperties().isPresent()) {
    PreferredProperties.PartitioningProperties partitioningPreference=parentGlobal.get().getPartitioningProperties().get();
    List<Symbol> hashingColumns=partitioningPreference.getHashingOrder().orElse(ImmutableList.copyOf(partitioningPreference.getPartitioningColumns()));
    ImmutableList.Builder<PlanNode> partitionedSources=ImmutableList.builder();
    ImmutableListMultimap.Builder<Symbol,Symbol> outputToSourcesMapping=ImmutableListMultimap.builder();
    for (int sourceIndex=0; sourceIndex < node.getSources().size(); sourceIndex++) {
      ImmutableList.Builder<Symbol> hashColumnsBuilder=ImmutableList.builder();
      for (      Symbol column : hashingColumns) {
        hashColumnsBuilder.add(node.getSymbolMapping().get(column).get(sourceIndex));
      }
      List<Symbol> sourceHashColumns=hashColumnsBuilder.build();
      PreferredProperties childPreferred=PreferredProperties.builder().global(PreferredProperties.Global.distributed(PreferredProperties.PartitioningProperties.hashPartitioned(sourceHashColumns).withNullsReplicated(partitioningPreference.isNullsReplicated()))).build();
      PlanWithProperties source=node.getSources().get(sourceIndex).accept(this,context.withPreferredProperties(childPreferred));
      if (!source.getProperties().isNodePartitionedOn(Partitioning.create(FIXED_HASH_DISTRIBUTION,sourceHashColumns),partitioningPreference.isNullsReplicated())) {
        source=withDerivedProperties(partitionedExchange(idAllocator.getNextId(),REMOTE,source.getNode(),sourceHashColumns,Optional.empty(),partitioningPreference.isNullsReplicated()),source.getProperties());
      }
      partitionedSources.add(source.getNode());
      for (int column=0; column < node.getOutputSymbols().size(); column++) {
        outputToSourcesMapping.put(node.getOutputSymbols().get(column),node.sourceOutputLayout(sourceIndex).get(column));
      }
    }
    UnionNode newNode=new UnionNode(node.getId(),partitionedSources.build(),outputToSourcesMapping.build(),ImmutableList.copyOf(outputToSourcesMapping.build().keySet()));
    return new PlanWithProperties(newNode,ActualProperties.builder().global(partitionedOn(FIXED_HASH_DISTRIBUTION,hashingColumns,Optional.of(hashingColumns))).build().withReplicatedNulls(partitioningPreference.isNullsReplicated()));
  }
  List<PlanNode> unpartitionedChildren=new ArrayList<>();
  List<List<Symbol>> unpartitionedOutputLayouts=new ArrayList<>();
  List<PlanNode> partitionedChildren=new ArrayList<>();
  List<List<Symbol>> partitionedOutputLayouts=new ArrayList<>();
  List<PlanNode> sources=node.getSources();
  for (int i=0; i < sources.size(); i++) {
    PlanWithProperties child=sources.get(i).accept(this,context.withPreferredProperties(PreferredProperties.any()));
    if (child.getProperties().isSingleNode()) {
      unpartitionedChildren.add(child.getNode());
      unpartitionedOutputLayouts.add(node.sourceOutputLayout(i));
    }
 else {
      partitionedChildren.add(child.getNode());
      partitionedOutputLayouts.add(node.sourceOutputLayout(i));
    }
  }
  PlanNode result=null;
  if (!partitionedChildren.isEmpty()) {
    result=new ExchangeNode(idAllocator.getNextId(),GATHER,REMOTE,new PartitioningScheme(Partitioning.create(SINGLE_DISTRIBUTION,ImmutableList.of()),node.getOutputSymbols()),partitionedChildren,partitionedOutputLayouts);
    unpartitionedChildren.add(result);
    unpartitionedOutputLayouts.add(result.getOutputSymbols());
  }
  if (unpartitionedChildren.size() > 1) {
    ImmutableListMultimap.Builder<Symbol,Symbol> mappings=ImmutableListMultimap.builder();
    for (int i=0; i < node.getOutputSymbols().size(); i++) {
      for (      List<Symbol> outputLayout : unpartitionedOutputLayouts) {
        mappings.put(node.getOutputSymbols().get(i),outputLayout.get(i));
      }
    }
    result=new UnionNode(node.getId(),unpartitionedChildren,mappings.build(),ImmutableList.copyOf(mappings.build().keySet()));
  }
  return new PlanWithProperties(result,ActualProperties.builder().global(singleStreamPartition()).build());
}
