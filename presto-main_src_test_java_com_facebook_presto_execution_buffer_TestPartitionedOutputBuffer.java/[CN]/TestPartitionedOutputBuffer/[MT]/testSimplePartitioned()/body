{
  int firstPartition=0;
  int secondPartition=1;
  PartitionedOutputBuffer buffer=createPartitionedBuffer(createInitialEmptyOutputBuffers(PARTITIONED).withBuffer(FIRST,firstPartition).withBuffer(SECOND,secondPartition).withNoMoreBufferIds(),sizeOfPages(20));
  for (int i=0; i < 3; i++) {
    addPage(buffer,createPage(i),firstPartition);
    addPage(buffer,createPage(i),secondPartition);
  }
  assertQueueState(buffer,FIRST,3,0);
  assertQueueState(buffer,SECOND,3,0);
  assertBufferResultEquals(TYPES,getBufferResult(buffer,FIRST,0,sizeOfPages(10),NO_WAIT),bufferResult(0,createPage(0),createPage(1),createPage(2)));
  assertQueueState(buffer,FIRST,3,0);
  assertQueueState(buffer,SECOND,3,0);
  buffer.get(FIRST,3,sizeOfPages(10)).cancel(true);
  assertQueueState(buffer,FIRST,0,3);
  assertQueueState(buffer,SECOND,3,0);
  for (int i=3; i < 13; i++) {
    addPage(buffer,createPage(i),firstPartition);
  }
  for (int i=3; i < 10; i++) {
    addPage(buffer,createPage(i),secondPartition);
  }
  assertQueueState(buffer,FIRST,10,3);
  assertQueueState(buffer,SECOND,10,0);
  ListenableFuture<?> future=enqueuePage(buffer,createPage(13),firstPartition);
  assertFalse(future.isDone());
  assertQueueState(buffer,FIRST,11,3);
  assertQueueState(buffer,SECOND,10,0);
  assertBufferResultEquals(TYPES,getBufferResult(buffer,FIRST,3,sizeOfPages(1),NO_WAIT),bufferResult(3,createPage(3)));
  assertQueueState(buffer,FIRST,11,3);
  assertQueueState(buffer,SECOND,10,0);
  assertFalse(future.isDone());
  assertBufferResultEquals(TYPES,getBufferResult(buffer,SECOND,0,sizeOfPages(10),NO_WAIT),bufferResult(0,createPage(0),createPage(1),createPage(2),createPage(3),createPage(4),createPage(5),createPage(6),createPage(7),createPage(8),createPage(9)));
  assertQueueState(buffer,SECOND,10,0);
  buffer.get(SECOND,10,sizeOfPages(3)).cancel(true);
  assertQueueState(buffer,SECOND,0,10);
  assertFutureIsDone(future);
  assertQueueState(buffer,FIRST,11,3);
  assertQueueState(buffer,SECOND,0,10);
  addPage(buffer,createPage(14),firstPartition);
  addPage(buffer,createPage(15),firstPartition);
  assertQueueState(buffer,FIRST,13,3);
  assertQueueState(buffer,SECOND,0,10);
  assertBufferResultEquals(TYPES,getBufferResult(buffer,FIRST,4,sizeOfPages(1),NO_WAIT),bufferResult(4,createPage(4)));
  assertQueueState(buffer,FIRST,12,4);
  assertQueueState(buffer,SECOND,0,10);
  assertFalse(buffer.isFinished());
  buffer.setNoMorePages();
  assertQueueState(buffer,FIRST,12,4);
  assertQueueState(buffer,SECOND,0,10);
  buffer.abort(SECOND);
  assertQueueClosed(buffer,SECOND,10);
  assertFalse(buffer.isFinished());
  assertBufferResultEquals(TYPES,getBufferResult(buffer,FIRST,5,sizeOfPages(1),NO_WAIT),bufferResult(5,createPage(5)));
  assertQueueState(buffer,FIRST,11,5);
  assertFalse(buffer.isFinished());
  BufferResult x=getBufferResult(buffer,FIRST,6,sizeOfPages(30),NO_WAIT);
  assertBufferResultEquals(TYPES,x,bufferResult(6,createPage(6),createPage(7),createPage(8),createPage(9),createPage(10),createPage(11),createPage(12),createPage(13),createPage(14),createPage(15)));
  assertQueueState(buffer,FIRST,10,6);
  assertBufferResultEquals(TYPES,getBufferResult(buffer,FIRST,16,sizeOfPages(10),NO_WAIT),emptyResults(TASK_INSTANCE_ID,16,true));
  buffer.abort(FIRST);
  assertQueueClosed(buffer,FIRST,16);
  assertFinished(buffer);
}
