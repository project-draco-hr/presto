{
  counts.ensureCapacity(groupIdsBlock.getGroupCount());
  samples.ensureCapacity(groupIdsBlock.getGroupCount());
  sums.ensureCapacity(groupIdsBlock.getGroupCount());
  m2s.ensureCapacity(groupIdsBlock.getGroupCount());
  means.ensureCapacity(groupIdsBlock.getGroupCount());
  BlockCursor intermediates=block.cursor();
  OnlineVarianceCalculator calculator=new OnlineVarianceCalculator();
  for (int position=0; position < groupIdsBlock.getPositionCount(); position++) {
    checkState(intermediates.advanceNextPosition(),"failed to advance intermediates cursor");
    long groupId=groupIdsBlock.getGroupId(position);
    Slice slice=intermediates.getSlice();
    sums.add(groupId,slice.getLong(SUM_OFFSET));
    counts.add(groupId,slice.getLong(COUNT_OFFSET));
    calculator.deserializeFrom(slice,VARIANCE_OFFSET);
    calculator.merge(samples.get(groupId),means.get(groupId),m2s.get(groupId));
    samples.set(groupId,calculator.getCount());
    means.set(groupId,calculator.getMean());
    m2s.set(groupId,calculator.getM2());
  }
}
