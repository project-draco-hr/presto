{
  JmxTableHandle tableHandle=checkType(split,JmxSplit.class,"split").getTableHandle();
  checkNotNull(columns,"columns is null");
  checkArgument(!columns.isEmpty(),"must provide at least one column");
  ImmutableMap.Builder<String,Type> builder=ImmutableMap.builder();
  for (  ConnectorColumnHandle column : columns) {
    JmxColumnHandle jmxColumnHandle=checkType(column,JmxColumnHandle.class,"column");
    builder.put(jmxColumnHandle.getColumnName(),jmxColumnHandle.getColumnType());
  }
  ImmutableMap<String,Type> columnTypes=builder.build();
  List<List<Object>> rows;
  try {
    Map<String,Object> attributes=getAttributes(columnTypes.keySet(),tableHandle);
    List<Object> row=new ArrayList<>();
    for (    Entry<String,Type> entry : columnTypes.entrySet()) {
      if (entry.getKey().equals("node")) {
        row.add(nodeId);
      }
 else {
        Object value=attributes.get(entry.getKey());
        if (value == null) {
          row.add(null);
        }
 else {
          Class<?> javaType=entry.getValue().getJavaType();
          if (javaType == boolean.class) {
            if (value instanceof Boolean) {
              row.add(value);
            }
 else {
              row.add(null);
            }
          }
 else           if (javaType == long.class) {
            if (value instanceof Number) {
              row.add(((Number)value).longValue());
            }
 else {
              row.add(null);
            }
          }
 else           if (javaType == double.class) {
            if (value instanceof Number) {
              row.add(((Number)value).doubleValue());
            }
 else {
              row.add(null);
            }
          }
 else           if (javaType == Slice.class) {
            row.add(value.toString());
          }
        }
      }
    }
    rows=ImmutableList.of(row);
  }
 catch (  JMException e) {
    rows=ImmutableList.of();
  }
  return new InMemoryRecordSet(columnTypes.values(),rows);
}
