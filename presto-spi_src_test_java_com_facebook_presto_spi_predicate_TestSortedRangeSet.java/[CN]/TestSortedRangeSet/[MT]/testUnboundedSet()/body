{
  SortedRangeSet rangeSet=SortedRangeSet.of(Range.greaterThan(BIGINT,10L),Range.lessThanOrEqual(BIGINT,0L),Range.range(BIGINT,2L,true,4L,false),Range.range(BIGINT,4L,true,6L,false),Range.range(BIGINT,1L,false,2L,false),Range.range(BIGINT,9L,false,11L,false));
  ImmutableList<Range> normalizedResult=ImmutableList.of(Range.lessThanOrEqual(BIGINT,0L),Range.range(BIGINT,1L,false,6L,false),Range.greaterThan(BIGINT,9L));
  SortedRangeSet complement=SortedRangeSet.of(Range.range(BIGINT,0L,false,1L,true),Range.range(BIGINT,6L,true,9L,true));
  assertEquals(rangeSet.getType(),BIGINT);
  assertFalse(rangeSet.isNone());
  assertFalse(rangeSet.isAll());
  assertFalse(rangeSet.isSingleValue());
  assertTrue(Iterables.elementsEqual(rangeSet.getOrderedRanges(),normalizedResult));
  assertEquals(rangeSet,SortedRangeSet.copyOf(BIGINT,normalizedResult));
  assertEquals(rangeSet.getRangeCount(),3);
  assertEquals(rangeSet.complement(),complement);
  assertTrue(rangeSet.includesMarker(Marker.lowerUnbounded(BIGINT)));
  assertTrue(rangeSet.includesMarker(Marker.exactly(BIGINT,0L)));
  assertTrue(rangeSet.includesMarker(Marker.exactly(BIGINT,4L)));
  assertFalse(rangeSet.includesMarker(Marker.exactly(BIGINT,7L)));
  assertTrue(rangeSet.includesMarker(Marker.upperUnbounded(BIGINT)));
}
