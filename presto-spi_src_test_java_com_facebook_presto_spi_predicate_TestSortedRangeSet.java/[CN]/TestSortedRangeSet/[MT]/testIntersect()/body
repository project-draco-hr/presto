{
  assertEquals(SortedRangeSet.none(BIGINT).intersect(SortedRangeSet.none(BIGINT)),SortedRangeSet.none(BIGINT));
  assertEquals(SortedRangeSet.all(BIGINT).intersect(SortedRangeSet.all(BIGINT)),SortedRangeSet.all(BIGINT));
  assertEquals(SortedRangeSet.none(BIGINT).intersect(SortedRangeSet.all(BIGINT)),SortedRangeSet.none(BIGINT));
  assertEquals(SortedRangeSet.of(Range.equal(BIGINT,1L),Range.equal(BIGINT,2L),Range.equal(BIGINT,3L)).intersect(SortedRangeSet.of(Range.equal(BIGINT,2L),Range.equal(BIGINT,4L))),SortedRangeSet.of(Range.equal(BIGINT,2L)));
  assertEquals(SortedRangeSet.all(BIGINT).intersect(SortedRangeSet.of(Range.equal(BIGINT,2L),Range.equal(BIGINT,4L))),SortedRangeSet.of(Range.equal(BIGINT,2L),Range.equal(BIGINT,4L)));
  assertEquals(SortedRangeSet.of(Range.range(BIGINT,0L,true,4L,false)).intersect(SortedRangeSet.of(Range.equal(BIGINT,2L),Range.greaterThan(BIGINT,3L))),SortedRangeSet.of(Range.equal(BIGINT,2L),Range.range(BIGINT,3L,false,4L,false)));
  assertEquals(SortedRangeSet.of(Range.greaterThanOrEqual(BIGINT,0L)).intersect(SortedRangeSet.of(Range.lessThanOrEqual(BIGINT,0L))),SortedRangeSet.of(Range.equal(BIGINT,0L)));
  assertEquals(SortedRangeSet.of(Range.greaterThanOrEqual(BIGINT,-1L)).intersect(SortedRangeSet.of(Range.lessThanOrEqual(BIGINT,1L))),SortedRangeSet.of(Range.range(BIGINT,-1L,true,1L,true)));
}
