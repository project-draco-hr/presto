{
  assertEquals(SortedRangeSet.all(BIGINT).subtract(SortedRangeSet.all(BIGINT)),SortedRangeSet.none(BIGINT));
  assertEquals(SortedRangeSet.all(BIGINT).subtract(SortedRangeSet.none(BIGINT)),SortedRangeSet.all(BIGINT));
  assertEquals(SortedRangeSet.all(BIGINT).subtract(SortedRangeSet.of(BIGINT,0L)),SortedRangeSet.of(BIGINT,0L).complement());
  assertEquals(SortedRangeSet.all(BIGINT).subtract(SortedRangeSet.of(Range.equal(BIGINT,0L),Range.equal(BIGINT,1L))),SortedRangeSet.of(Range.equal(BIGINT,0L),Range.equal(BIGINT,1L)).complement());
  assertEquals(SortedRangeSet.all(BIGINT).subtract(SortedRangeSet.of(Range.greaterThan(BIGINT,0L))),SortedRangeSet.of(Range.lessThanOrEqual(BIGINT,0L)));
  assertEquals(SortedRangeSet.none(BIGINT).subtract(SortedRangeSet.all(BIGINT)),SortedRangeSet.none(BIGINT));
  assertEquals(SortedRangeSet.none(BIGINT).subtract(SortedRangeSet.none(BIGINT)),SortedRangeSet.none(BIGINT));
  assertEquals(SortedRangeSet.none(BIGINT).subtract(SortedRangeSet.of(BIGINT,0L)),SortedRangeSet.none(BIGINT));
  assertEquals(SortedRangeSet.none(BIGINT).subtract(SortedRangeSet.of(Range.equal(BIGINT,0L),Range.equal(BIGINT,1L))),SortedRangeSet.none(BIGINT));
  assertEquals(SortedRangeSet.none(BIGINT).subtract(SortedRangeSet.of(Range.greaterThan(BIGINT,0L))),SortedRangeSet.none(BIGINT));
  assertEquals(SortedRangeSet.of(BIGINT,0L).subtract(SortedRangeSet.all(BIGINT)),SortedRangeSet.none(BIGINT));
  assertEquals(SortedRangeSet.of(BIGINT,0L).subtract(SortedRangeSet.none(BIGINT)),SortedRangeSet.of(BIGINT,0L));
  assertEquals(SortedRangeSet.of(BIGINT,0L).subtract(SortedRangeSet.of(BIGINT,0L)),SortedRangeSet.none(BIGINT));
  assertEquals(SortedRangeSet.of(BIGINT,0L).subtract(SortedRangeSet.of(Range.equal(BIGINT,0L),Range.equal(BIGINT,1L))),SortedRangeSet.none(BIGINT));
  assertEquals(SortedRangeSet.of(BIGINT,0L).subtract(SortedRangeSet.of(Range.greaterThan(BIGINT,0L))),SortedRangeSet.of(BIGINT,0L));
  assertEquals(SortedRangeSet.of(Range.equal(BIGINT,0L),Range.equal(BIGINT,1L)).subtract(SortedRangeSet.all(BIGINT)),SortedRangeSet.none(BIGINT));
  assertEquals(SortedRangeSet.of(Range.equal(BIGINT,0L),Range.equal(BIGINT,1L)).subtract(SortedRangeSet.none(BIGINT)),SortedRangeSet.of(Range.equal(BIGINT,0L),Range.equal(BIGINT,1L)));
  assertEquals(SortedRangeSet.of(Range.equal(BIGINT,0L),Range.equal(BIGINT,1L)).subtract(SortedRangeSet.of(BIGINT,0L)),SortedRangeSet.of(BIGINT,1L));
  assertEquals(SortedRangeSet.of(Range.equal(BIGINT,0L),Range.equal(BIGINT,1L)).subtract(SortedRangeSet.of(Range.equal(BIGINT,0L),Range.equal(BIGINT,1L))),SortedRangeSet.none(BIGINT));
  assertEquals(SortedRangeSet.of(Range.equal(BIGINT,0L),Range.equal(BIGINT,1L)).subtract(SortedRangeSet.of(Range.greaterThan(BIGINT,0L))),SortedRangeSet.of(Range.equal(BIGINT,0L)));
  assertEquals(SortedRangeSet.of(Range.greaterThan(BIGINT,0L)).subtract(SortedRangeSet.all(BIGINT)),SortedRangeSet.none(BIGINT));
  assertEquals(SortedRangeSet.of(Range.greaterThan(BIGINT,0L)).subtract(SortedRangeSet.none(BIGINT)),SortedRangeSet.of(Range.greaterThan(BIGINT,0L)));
  assertEquals(SortedRangeSet.of(Range.greaterThan(BIGINT,0L)).subtract(SortedRangeSet.of(BIGINT,0L)),SortedRangeSet.of(Range.greaterThan(BIGINT,0L)));
  assertEquals(SortedRangeSet.of(Range.greaterThan(BIGINT,0L)).subtract(SortedRangeSet.of(Range.equal(BIGINT,0L),Range.equal(BIGINT,1L))),SortedRangeSet.of(Range.range(BIGINT,0L,false,1L,false),Range.greaterThan(BIGINT,1L)));
  assertEquals(SortedRangeSet.of(Range.greaterThan(BIGINT,0L)).subtract(SortedRangeSet.of(Range.greaterThan(BIGINT,0L))),SortedRangeSet.none(BIGINT));
}
