{
  BlockCursor[] cursors=new BlockCursor[page.getChannelCount()];
  Block[] blocks=page.getBlocks();
  for (int i=0; i < page.getChannelCount(); i++) {
    cursors[i]=blocks[i].cursor();
  }
  UncompressedBlock probeJoinBlock=(UncompressedBlock)page.getBlock(probeJoinChannel);
  hash.setProbeSlice(probeJoinBlock.getSlice());
  int rows=page.getPositionCount();
  for (int position=0; position < rows; position++) {
    for (    BlockCursor cursor : cursors) {
      checkState(cursor.advanceNextPosition());
    }
    int joinPosition=hash.get(cursors[probeJoinChannel]);
    while (joinPosition >= 0) {
      for (int probeChannel=0; probeChannel < cursors.length; probeChannel++) {
        cursors[probeChannel].appendTupleTo(pageBuilder.getBlockBuilder(probeChannel));
      }
      int outputIndex=page.getChannelCount();
      for (int buildChannel=0; buildChannel < buildIndex.getChannelCount(); buildChannel++) {
        if (buildChannel != buildJoinChannel) {
          buildIndex.appendTupleTo(buildChannel,joinPosition,pageBuilder.getBlockBuilder(outputIndex));
          outputIndex++;
        }
      }
      joinPosition=hash.getNextPosition(joinPosition);
    }
  }
  for (  BlockCursor cursor : cursors) {
    checkState(!cursor.advanceNextPosition());
  }
}
