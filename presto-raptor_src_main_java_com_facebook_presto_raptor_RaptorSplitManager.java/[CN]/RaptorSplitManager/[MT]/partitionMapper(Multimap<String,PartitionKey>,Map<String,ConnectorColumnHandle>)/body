{
  return new Function<TablePartition,ConnectorPartition>(){
    @Override public ConnectorPartition apply(    TablePartition tablePartition){
      String partitionName=tablePartition.getPartitionName();
      ImmutableMap.Builder<ConnectorColumnHandle,Domain> builder=ImmutableMap.builder();
      for (      PartitionKey partitionKey : allPartitionKeys.get(partitionName)) {
        ConnectorColumnHandle columnHandle=columnHandles.get(partitionKey.getName());
        checkArgument(columnHandle != null,"Invalid partition key for column %s in partition %s",partitionKey.getName(),tablePartition.getPartitionName());
        String value=partitionKey.getValue();
        Class<?> javaType=partitionKey.getType().getJavaType();
        if (javaType == boolean.class) {
          if (value.isEmpty()) {
            builder.put(columnHandle,Domain.singleValue(false));
          }
 else {
            builder.put(columnHandle,Domain.singleValue(Boolean.parseBoolean(value)));
          }
        }
 else         if (javaType == long.class) {
          if (value.isEmpty()) {
            builder.put(columnHandle,Domain.singleValue(0L));
          }
 else {
            builder.put(columnHandle,Domain.singleValue(Long.parseLong(value)));
          }
        }
 else         if (javaType == double.class) {
          if (value.isEmpty()) {
            builder.put(columnHandle,Domain.singleValue(0.0));
          }
 else {
            builder.put(columnHandle,Domain.singleValue(Double.parseDouble(value)));
          }
        }
 else         if (javaType == Slice.class) {
          builder.put(columnHandle,Domain.singleValue(utf8Slice(value)));
        }
      }
      return new RaptorPartition(tablePartition.getPartitionId(),TupleDomain.withColumnDomains(builder.build()));
    }
  }
;
}
