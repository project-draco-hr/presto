{
  Input input=node.getInput();
  int channel=input.getChannel();
  Type type=expressionTypes.get(node);
  checkState(type != null,"No type for input %s",input);
  if (sourceIsCursor) {
    Block isNullCheck=new Block(context).setDescription(format("cursor.get%s(%d)",type,channel)).getVariable("cursor").push(channel).invokeInterface(RecordCursor.class,"isNull",boolean.class,int.class);
    Class<?> javaType=type.getJavaType();
    Block isNull=new Block(context).putVariable("wasNull",true).pushJavaDefault(javaType);
    if (javaType == boolean.class) {
      Block isNotNull=new Block(context).getVariable("cursor").push(channel).invokeInterface(RecordCursor.class,"getBoolean",boolean.class,int.class);
      return typedByteCodeNode(new IfStatement(context,isNullCheck,isNull,isNotNull),boolean.class);
    }
 else     if (javaType == long.class) {
      Block isNotNull=new Block(context).getVariable("cursor").push(channel).invokeInterface(RecordCursor.class,"getLong",long.class,int.class);
      return typedByteCodeNode(new IfStatement(context,isNullCheck,isNull,isNotNull),long.class);
    }
 else     if (javaType == double.class) {
      Block isNotNull=new Block(context).getVariable("cursor").push(channel).invokeInterface(RecordCursor.class,"getDouble",double.class,int.class);
      return typedByteCodeNode(new IfStatement(context,isNullCheck,isNull,isNotNull),double.class);
    }
 else     if (javaType == Slice.class) {
      Block isNotNull=new Block(context).getVariable("cursor").push(channel).invokeInterface(RecordCursor.class,"getString",byte[].class,int.class).invokeStatic(Slices.class,"wrappedBuffer",Slice.class,byte[].class);
      return typedByteCodeNode(new IfStatement(context,isNullCheck,isNull,isNotNull),Slice.class);
    }
 else {
      throw new UnsupportedOperationException("not yet implemented: " + type);
    }
  }
 else {
    Block isNullCheck=new Block(context).setDescription(format("channel_%d.get%s()",channel,type)).getVariable("channel_" + channel).invokeInterface(BlockCursor.class,"isNull",boolean.class);
    Class<?> javaType=type.getJavaType();
    Block isNull=new Block(context).putVariable("wasNull",true).pushJavaDefault(javaType);
    if (javaType == boolean.class) {
      Block isNotNull=new Block(context).getVariable("channel_" + channel).invokeInterface(BlockCursor.class,"getBoolean",boolean.class);
      return typedByteCodeNode(new IfStatement(context,isNullCheck,isNull,isNotNull),boolean.class);
    }
 else     if (javaType == long.class) {
      Block isNotNull=new Block(context).getVariable("channel_" + channel).invokeInterface(BlockCursor.class,"getLong",long.class);
      return typedByteCodeNode(new IfStatement(context,isNullCheck,isNull,isNotNull),long.class);
    }
 else     if (javaType == double.class) {
      Block isNotNull=new Block(context).getVariable("channel_" + channel).invokeInterface(BlockCursor.class,"getDouble",double.class);
      return typedByteCodeNode(new IfStatement(context,isNullCheck,isNull,isNotNull),double.class);
    }
 else     if (javaType == Slice.class) {
      Block isNotNull=new Block(context).getVariable("channel_" + channel).invokeInterface(BlockCursor.class,"getSlice",Slice.class);
      return typedByteCodeNode(new IfStatement(context,isNullCheck,isNull,isNotNull),Slice.class);
    }
 else {
      throw new UnsupportedOperationException("not yet implemented: " + type);
    }
  }
}
