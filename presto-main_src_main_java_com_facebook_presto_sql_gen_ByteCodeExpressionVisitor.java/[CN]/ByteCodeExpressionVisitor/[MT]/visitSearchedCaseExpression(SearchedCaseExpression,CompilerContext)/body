{
  Type type=expressionTypes.get(node);
  ByteCodeNode elseValue;
  if (node.getDefaultValue() != null) {
    elseValue=process(node.getDefaultValue(),context);
  }
 else {
    elseValue=typedNull(context,type.getJavaType());
  }
  List<TypedWhenClause> whenClauses=ImmutableList.copyOf(transform(node.getWhenClauses(),new Function<WhenClause,TypedWhenClause>(){
    @Override public TypedWhenClause apply(    WhenClause whenClause){
      return new TypedWhenClause(context,whenClause);
    }
  }
));
  for (  TypedWhenClause whenClause : Lists.reverse(new ArrayList<>(whenClauses))) {
    Block condition=new Block(context).append(whenClause.operandBlock).comment("... and condition value was not null").getVariable("wasNull").invokeStatic(CompilerOperations.class,"not",boolean.class,boolean.class).invokeStatic(CompilerOperations.class,"and",boolean.class,boolean.class,boolean.class).putVariable("wasNull",false);
    elseValue=new IfStatement(context,condition,whenClause.valueBlock,elseValue);
  }
  return elseValue;
}
