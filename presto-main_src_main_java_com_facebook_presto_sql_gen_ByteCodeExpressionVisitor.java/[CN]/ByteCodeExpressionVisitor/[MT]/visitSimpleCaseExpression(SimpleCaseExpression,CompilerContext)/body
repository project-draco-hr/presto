{
  ByteCodeNode value=process(node.getOperand(),context);
  Type type=expressionTypes.get(node);
  ByteCodeNode elseValue;
  if (node.getDefaultValue() != null) {
    elseValue=process(node.getDefaultValue(),context);
  }
 else {
    elseValue=typedNull(context,type.getJavaType());
  }
  List<TypedWhenClause> whenClauses=ImmutableList.copyOf(transform(node.getWhenClauses(),new Function<WhenClause,TypedWhenClause>(){
    @Override public TypedWhenClause apply(    WhenClause whenClause){
      return new TypedWhenClause(context,whenClause);
    }
  }
));
  Class<?> valueType=expressionTypes.get(node.getOperand()).getJavaType();
  LabelNode nullValue=new LabelNode("nullCondition");
  Variable tempVariable=context.createTempVariable(valueType);
  Block block=new Block(context).append(value).append(ifWasNullClearPopAndGoto(context,nullValue,void.class,valueType)).putVariable(tempVariable.getLocalVariableDefinition());
  ByteCodeNode getTempVariableNode=VariableInstruction.loadVariable(tempVariable.getLocalVariableDefinition());
  elseValue=new Block(context).visitLabel(nullValue).append(elseValue);
  for (  TypedWhenClause whenClause : Lists.reverse(new ArrayList<>(whenClauses))) {
    FunctionBinding functionBinding=bootstrapFunctionBinder.bindOperator(OperatorType.EQUAL,getSessionByteCode,ImmutableList.of(whenClause.operandBlock,getTempVariableNode),types(whenClause.operand,node.getOperand()));
    ByteCodeNode equalsCall=visitFunctionBinding(context,functionBinding,whenClause.operand.toString());
    Block condition=new Block(context).append(equalsCall).putVariable("wasNull",false);
    elseValue=new IfStatement(context,format("when %s",whenClause.operand),condition,whenClause.valueBlock,elseValue);
  }
  return block.append(elseValue);
}
