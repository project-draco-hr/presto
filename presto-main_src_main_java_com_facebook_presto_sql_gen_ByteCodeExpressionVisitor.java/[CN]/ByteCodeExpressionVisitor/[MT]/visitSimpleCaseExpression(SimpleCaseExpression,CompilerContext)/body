{
  TypedByteCodeNode value=process(node.getOperand(),context);
  Type type=expressionTypes.get(node);
  TypedByteCodeNode elseValue;
  if (node.getDefaultValue() != null) {
    elseValue=process(node.getDefaultValue(),context);
  }
 else {
    elseValue=typedNull(context,type.getJavaType());
  }
  List<TypedWhenClause> whenClauses=ImmutableList.copyOf(transform(node.getWhenClauses(),new Function<WhenClause,TypedWhenClause>(){
    @Override public TypedWhenClause apply(    WhenClause whenClause){
      return new TypedWhenClause(context,whenClause);
    }
  }
));
  Class<?> valueType=getType(ImmutableList.<TypedByteCodeNode>builder().addAll(transform(whenClauses,whenConditionGetter())).add(value).build());
  Class<?> resultType=getType(ImmutableList.<TypedByteCodeNode>builder().addAll(transform(whenClauses,whenValueGetter())).add(elseValue).build());
  if (value.getType() == void.class) {
    return elseValue;
  }
  LabelNode nullValue=new LabelNode("nullCondition");
  Variable tempVariable=context.createTempVariable(valueType);
  Block block=new Block(context).append(value.getNode()).append(ifWasNullClearPopAndGoto(context,nullValue,void.class,valueType)).putVariable(tempVariable.getLocalVariableDefinition());
  elseValue=typedByteCodeNode(new Block(context).visitLabel(nullValue).append(elseValue.getNode()),resultType);
  for (  TypedWhenClause whenClause : Lists.reverse(new ArrayList<>(whenClauses))) {
    LabelNode nullCondition=new LabelNode("nullCondition");
    Block condition=new Block(context).append(whenClause.condition.getNode()).append(ifWasNullPopAndGoto(context,nullCondition,boolean.class,valueType)).getVariable(tempVariable.getLocalVariableDefinition()).invokeStatic(Operations.class,"equal",boolean.class,valueType,valueType).visitLabel(nullCondition).putVariable("wasNull",false);
    elseValue=typedByteCodeNode(new IfStatement(context,format("when %s",whenClause),condition,whenClause.value.getNode(),elseValue.getNode()),resultType);
  }
  return typedByteCodeNode(block.append(elseValue.getNode()),resultType);
}
