{
  Type type=metadata.getType(node.getType());
  if (type == null) {
    throw new IllegalArgumentException("Unsupported type: " + node.getType());
  }
  if (expressionTypes.get(node.getExpression()).equals(UNKNOWN)) {
    return new Block(context).putVariable("wasNull",true).pushJavaDefault(type.getJavaType());
  }
  ByteCodeNode value=process(node.getExpression(),context);
  FunctionBinding functionBinding=bootstrapFunctionBinder.bindCastOperator(getSessionByteCode,value,expressionTypes.get(node.getExpression()),type);
  ByteCodeNode castFunction=visitFunctionBinding(context,functionBinding,node.toString());
  if (!node.isSafe()) {
    return castFunction;
  }
  Block catchBlock=new Block(context).comment("propagate InterruptedException").invokeStatic(CompilerOperations.class,"propagateInterruptedException",void.class,Throwable.class).comment("wasNull = true;").putVariable("wasNull",true).comment("restore stack after exception").getVariable("output").comment("return dummy value for null").pushJavaDefault(type.getJavaType());
  return new TryCatch(context,node.toString(),castFunction,catchBlock,type(Exception.class));
}
