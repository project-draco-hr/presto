{
  Expression valueListExpression=node.getValueList();
  if (!(valueListExpression instanceof InListExpression)) {
    throw new UnsupportedOperationException("Compilation of IN subquery is not supported yet");
  }
  ByteCodeNode value=process(node.getValue(),context);
  ImmutableList.Builder<ByteCodeNode> values=ImmutableList.builder();
  InListExpression valueList=(InListExpression)valueListExpression;
  for (  Expression test : valueList.getValues()) {
    ByteCodeNode testNode=process(test,context);
    values.add(testNode);
  }
  Type type=expressionTypes.get(node.getValue());
  Class<?> javaType=type.getJavaType();
  FunctionBinding hashCodeFunction=bootstrapFunctionBinder.bindOperator(OperatorType.HASH_CODE,getSessionByteCode,ImmutableList.<ByteCodeNode>of(NOP),ImmutableList.of(type));
  ImmutableListMultimap.Builder<Integer,ByteCodeNode> hashBucketsBuilder=ImmutableListMultimap.builder();
  ImmutableList.Builder<ByteCodeNode> defaultBucket=ImmutableList.builder();
  ImmutableSet.Builder<Object> constantValuesBuilder=ImmutableSet.builder();
  for (  ByteCodeNode testNode : values.build()) {
    if (testNode instanceof Constant) {
      Constant constant=(Constant)testNode;
      Object testValue=constant.getValue();
      constantValuesBuilder.add(testValue);
      if (javaType == boolean.class) {
        testValue=((Number)testValue).intValue() != 0;
      }
      int hashCode;
      try {
        hashCode=(int)hashCodeFunction.getCallSite().dynamicInvoker().invoke(testValue);
      }
 catch (      Throwable throwable) {
        throw new IllegalArgumentException("Error processing IN statement: error calculating hash code for " + testValue,throwable);
      }
      hashBucketsBuilder.put(hashCode,testNode);
    }
 else {
      defaultBucket.add(testNode);
    }
  }
  ImmutableListMultimap<Integer,ByteCodeNode> hashBuckets=hashBucketsBuilder.build();
  ImmutableSet<Object> constantValues=constantValuesBuilder.build();
  LabelNode end=new LabelNode("end");
  LabelNode match=new LabelNode("match");
  LabelNode noMatch=new LabelNode("noMatch");
  LabelNode defaultLabel=new LabelNode("default");
  ByteCodeNode switchBlock;
  if (constantValues.size() < 1000) {
    Block switchCaseBlocks=new Block(context);
    LookupSwitchBuilder switchBuilder=lookupSwitchBuilder();
    for (    Entry<Integer,Collection<ByteCodeNode>> bucket : hashBuckets.asMap().entrySet()) {
      LabelNode label=new LabelNode("inHash" + bucket.getKey());
      switchBuilder.addCase(bucket.getKey(),label);
      Collection<ByteCodeNode> testValues=bucket.getValue();
      Block caseBlock=buildInCase(context,type,label,match,defaultLabel,testValues,false);
      switchCaseBlocks.append(caseBlock.setDescription("case " + bucket.getKey()));
    }
    switchBuilder.defaultCase(defaultLabel);
    switchBlock=new Block(context).comment("lookupSwitch(hashCode(<stackValue>))").dup(javaType).invokeDynamic(hashCodeFunction.getName(),hashCodeFunction.getCallSite().type(),hashCodeFunction.getBindingId()).append(switchBuilder.build()).append(switchCaseBlocks);
  }
 else {
    FunctionBinding functionBinding=bootstrapFunctionBinder.bindFunction("in",getSessionByteCode,ImmutableList.<ByteCodeNode>of(),new InFunctionBinder(javaType,constantValues));
    switchBlock=new Block(context).comment("inListSet.contains(<stackValue>)").append(new IfStatement(context,new Block(context).dup(javaType).invokeDynamic(functionBinding.getName(),functionBinding.getCallSite().type(),functionBinding.getBindingId()),jump(match),NOP));
  }
  Block defaultCaseBlock=buildInCase(context,type,defaultLabel,match,noMatch,defaultBucket.build(),true).setDescription("default");
  Block block=new Block(context).comment(node.toString()).append(value).append(ifWasNullPopAndGoto(context,end,boolean.class,javaType)).append(switchBlock).append(defaultCaseBlock);
  Block matchBlock=new Block(context).setDescription("match").visitLabel(match).pop(javaType).putVariable("wasNull",false).push(true).gotoLabel(end);
  block.append(matchBlock);
  Block noMatchBlock=new Block(context).setDescription("noMatch").visitLabel(noMatch).pop(javaType).push(false).gotoLabel(end);
  block.append(noMatchBlock);
  block.visitLabel(end);
  return block;
}
