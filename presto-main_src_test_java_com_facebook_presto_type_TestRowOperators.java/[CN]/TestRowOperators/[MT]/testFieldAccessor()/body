{
  assertFunction("test_row(1, CAST(NULL AS DOUBLE)).col1",DOUBLE,null);
  assertFunction("test_row(TRUE, CAST(NULL AS BOOLEAN)).col1",BOOLEAN,null);
  assertFunction("test_row(TRUE, CAST(NULL AS ARRAY<INTEGER>)).col1",new ArrayType(INTEGER),null);
  assertFunction("test_row(1.0, CAST(NULL AS VARCHAR)).col1",VARCHAR,null);
  assertFunction("test_row(1, 2).col0",INTEGER,1);
  assertFunction("test_row(1, 'kittens').col1",VARCHAR,"kittens");
  assertFunction("test_row(1, 2).\"col1\"",INTEGER,2);
  assertFunction("array[test_row(1, 2)][1].col1",INTEGER,2);
  assertFunction("test_row(FALSE, ARRAY [1, 2], MAP(ARRAY[1, 3], ARRAY[2.0, 4.0])).col1",new ArrayType(INTEGER),ImmutableList.of(1,2));
  assertFunction("test_row(FALSE, ARRAY [1, 2], MAP(ARRAY[1, 3], ARRAY[2.0, 4.0])).col2",new MapType(INTEGER,DOUBLE),ImmutableMap.of(1,2.0,3,4.0));
  assertFunction("test_row(1.0, ARRAY[test_row(31, 4.1), test_row(32, 4.2)], test_row(3, 4.0)).col1[2].col0",INTEGER,32);
  assertFunction("CAST(ROW(1, 2) AS ROW(a BIGINT, b DOUBLE)).a",BIGINT,1L);
  assertFunction("CAST(ROW(1, 2) AS ROW(a BIGINT, b DOUBLE)).b",DOUBLE,2.0);
  assertFunction("CAST(ROW(CAST(ROW('aa') AS ROW(a VARCHAR))) AS ROW(a ROW(a VARCHAR))).a.a",VARCHAR,"aa");
  assertFunction("CAST(ROW(ROW('ab')) AS ROW(a ROW(b VARCHAR))).a.b",VARCHAR,"ab");
  assertFunction("CAST(ROW(ARRAY[NULL]) AS ROW(a ARRAY(BIGINT))).a",new ArrayType(BIGINT),Arrays.asList((Integer)null));
  assertFunction("CAST(ROW(1) AS ROW(A BIGINT)).A",BIGINT,1L);
}
