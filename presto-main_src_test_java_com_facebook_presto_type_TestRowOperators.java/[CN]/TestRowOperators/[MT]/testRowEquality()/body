{
  assertFunction("row(TIMESTAMP '2001-01-02 03:04:05.321 +07:09', TIMESTAMP '2001-01-02 03:04:05.321 +07:10') = " + "row(TIMESTAMP '2001-01-02 03:04:05.321 +07:09', TIMESTAMP '2001-01-02 03:04:05.321 +07:10')",BOOLEAN,true);
  assertFunction("row(1.0, row(TIMESTAMP '2001-01-02 03:04:05.321 +07:09', TIMESTAMP '2001-01-02 03:04:05.321 +07:10')) =" + "row(1.0, row(TIMESTAMP '2001-01-02 03:04:05.321 +07:09', TIMESTAMP '2001-01-02 03:04:05.321 +07:10'))",BOOLEAN,true);
  assertFunction("row(1.0, 'kittens') = row(1.0, 'kittens')",BOOLEAN,true);
  assertFunction("row(1, 2.0) = row(1, 2.0)",BOOLEAN,true);
  assertFunction("row(TRUE, FALSE, TRUE, FALSE) = row(TRUE, FALSE, TRUE, FALSE)",BOOLEAN,true);
  assertFunction("row(TRUE, FALSE, TRUE, FALSE) = row(TRUE, TRUE, TRUE, FALSE)",BOOLEAN,false);
  assertFunction("row(1, 2.0, TRUE, 'kittens', from_unixtime(1)) = row(1, 2.0, TRUE, 'kittens', from_unixtime(1))",BOOLEAN,true);
  assertFunction("row(1.0, row(TIMESTAMP '2001-01-02 03:04:05.321 +07:09', TIMESTAMP '2001-01-02 03:04:05.321 +07:10')) !=" + "row(1.0, row(TIMESTAMP '2001-01-02 03:04:05.321 +07:09', TIMESTAMP '2001-01-02 03:04:05.321 +07:11'))",BOOLEAN,true);
  assertFunction("row(TIMESTAMP '2001-01-02 03:04:05.321 +07:09', TIMESTAMP '2001-01-02 03:04:05.321 +07:10') != " + "row(TIMESTAMP '2001-01-02 03:04:05.321 +07:09', TIMESTAMP '2001-01-02 03:04:05.321 +07:11')",BOOLEAN,true);
  assertFunction("row(1.0, 'kittens') != row(1.0, 'kittens')",BOOLEAN,false);
  assertFunction("row(1, 2.0) != row(1, 2.0)",BOOLEAN,false);
  assertFunction("row(TRUE, FALSE, TRUE, FALSE) != row(TRUE, FALSE, TRUE, FALSE)",BOOLEAN,false);
  assertFunction("row(TRUE, FALSE, TRUE, FALSE) != row(TRUE, TRUE, TRUE, FALSE)",BOOLEAN,true);
  assertFunction("row(1, 2.0, TRUE, 'kittens', from_unixtime(1)) != row(1, 2.0, TRUE, 'puppies', from_unixtime(1))",BOOLEAN,true);
  try {
    assertFunction("cast(row(cast(cast ('' as varbinary) as hyperloglog)) as row(col0 hyperloglog)) = cast(row(cast(cast ('' as varbinary) as hyperloglog)) as row(col0 hyperloglog))",BOOLEAN,true);
    fail("hyperloglog is not comparable");
  }
 catch (  SemanticException e) {
    if (!e.getMessage().matches("\\Qline 1:81: '=' cannot be applied to row(COL0 HyperLogLog), row(COL0 HyperLogLog)\\E")) {
      throw e;
    }
  }
  assertFunction("row(TRUE, ARRAY [1], MAP(ARRAY[1, 3], ARRAY[2.0, 4.0])) = row(TRUE, ARRAY [1, 2], MAP(ARRAY[1, 3], ARRAY[2.0, 4.0]))",BOOLEAN,false);
  assertFunction("row(TRUE, ARRAY [1, 2], MAP(ARRAY[1, 3], ARRAY[2.0, 4.0])) = row(TRUE, ARRAY [1, 2], MAP(ARRAY[1, 3], ARRAY[2.0, 4.0]))",BOOLEAN,true);
  try {
    assertFunction("row(1, CAST(NULL AS INTEGER)) = row(1, 2)",BOOLEAN,false);
    fail("ROW comparison not implemented for NULL values");
  }
 catch (  PrestoException e) {
    assertEquals(e.getErrorCode().getCode(),StandardErrorCode.NOT_SUPPORTED.toErrorCode().getCode());
  }
  assertFunction("row(TRUE, ARRAY [1]) = row(TRUE, ARRAY [1])",BOOLEAN,true);
  assertFunction("row(TRUE, ARRAY [1]) = row(TRUE, ARRAY [1,2])",BOOLEAN,false);
  assertFunction("row(1.0, ARRAY [1,2,3], row(2,2.0)) = row(1.0, ARRAY [1,2,3], row(2,2.0))",BOOLEAN,true);
  assertFunction("row(TRUE, ARRAY [1]) != row(TRUE, ARRAY [1])",BOOLEAN,false);
  assertFunction("row(TRUE, ARRAY [1]) != row(TRUE, ARRAY [1,2])",BOOLEAN,true);
  assertFunction("row(1.0, ARRAY [1,2,3], row(2,2.0)) != row(1.0, ARRAY [1,2,3], row(1,2.0))",BOOLEAN,true);
  assertFunction("ROW(1, 2) = ROW(1, 2)",BOOLEAN,true);
  assertFunction("ROW(2, 1) != ROW(1, 2)",BOOLEAN,true);
}
