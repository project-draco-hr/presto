{
  assertFunction("test_row(TIMESTAMP '2001-01-02 03:04:05.321 +07:09', TIMESTAMP '2001-01-02 03:04:05.321 +07:10') = " + "test_row(TIMESTAMP '2001-01-02 03:04:05.321 +07:09', TIMESTAMP '2001-01-02 03:04:05.321 +07:10')",true);
  assertFunction("test_row(1.0, test_row(TIMESTAMP '2001-01-02 03:04:05.321 +07:09', TIMESTAMP '2001-01-02 03:04:05.321 +07:10')) =" + "test_row(1.0, test_row(TIMESTAMP '2001-01-02 03:04:05.321 +07:09', TIMESTAMP '2001-01-02 03:04:05.321 +07:10'))",true);
  assertFunction("test_row(1.0, 'kittens') = test_row(1.0, 'kittens')",true);
  assertFunction("test_row(1, 2.0) = test_row(1, 2.0)",true);
  assertFunction("test_row(TRUE, FALSE, TRUE, FALSE) = test_row(TRUE, FALSE, TRUE, FALSE)",true);
  assertFunction("test_row(TRUE, FALSE, TRUE, FALSE) = test_row(TRUE, TRUE, TRUE, FALSE)",false);
  assertFunction("test_row(1, 2.0, TRUE, 'kittens', from_unixtime(1)) = test_row(1, 2.0, TRUE, 'kittens', from_unixtime(1))",true);
  assertFunction("test_row(1.0, test_row(TIMESTAMP '2001-01-02 03:04:05.321 +07:09', TIMESTAMP '2001-01-02 03:04:05.321 +07:10')) !=" + "test_row(1.0, test_row(TIMESTAMP '2001-01-02 03:04:05.321 +07:09', TIMESTAMP '2001-01-02 03:04:05.321 +07:11'))",true);
  assertFunction("test_row(TIMESTAMP '2001-01-02 03:04:05.321 +07:09', TIMESTAMP '2001-01-02 03:04:05.321 +07:10') != " + "test_row(TIMESTAMP '2001-01-02 03:04:05.321 +07:09', TIMESTAMP '2001-01-02 03:04:05.321 +07:11')",true);
  assertFunction("test_row(1.0, 'kittens') != test_row(1.0, 'kittens')",false);
  assertFunction("test_row(1, 2.0) != test_row(1, 2.0)",false);
  assertFunction("test_row(TRUE, FALSE, TRUE, FALSE) != test_row(TRUE, FALSE, TRUE, FALSE)",false);
  assertFunction("test_row(TRUE, FALSE, TRUE, FALSE) != test_row(TRUE, TRUE, TRUE, FALSE)",true);
  assertFunction("test_row(1, 2.0, TRUE, 'kittens', from_unixtime(1)) != test_row(1, 2.0, TRUE, 'puppies', from_unixtime(1))",true);
  try {
    assertFunction("test_row(cast(cast ('' as varbinary) as hyperloglog)) = test_row(cast(cast ('' as varbinary) as hyperloglog))",true);
    fail("hyperloglog is not comparable");
  }
 catch (  RuntimeException e) {
  }
  try {
    assertFunction("test_row(TRUE, ARRAY [1], MAP(ARRAY[1, 3], ARRAY[2.0, 4.0])) = test_row(TRUE, ARRAY [1,2], MAP(ARRAY[1, 3], ARRAY[2.0, 4.0]))",false);
    fail("map is not comparable");
  }
 catch (  RuntimeException e) {
  }
  try {
    assertFunction("test_row(1, NULL) = test_row(1, 2)",false);
    fail("ROW comparison not implemented for NULL values");
  }
 catch (  PrestoException e) {
    assertEquals(e.getErrorCode().getCode(),StandardErrorCode.NOT_SUPPORTED.toErrorCode().getCode());
  }
  assertFunction("test_row(TRUE, ARRAY [1]) = test_row(TRUE, ARRAY [1])",true);
  assertFunction("test_row(TRUE, ARRAY [1]) = test_row(TRUE, ARRAY [1,2])",false);
  assertFunction("test_row(1.0, ARRAY [1,2,3], test_row(2,2.0)) = test_row(1.0, ARRAY [1,2,3], test_row(2,2.0))",true);
  assertFunction("test_row(TRUE, ARRAY [1]) != test_row(TRUE, ARRAY [1])",false);
  assertFunction("test_row(TRUE, ARRAY [1]) != test_row(TRUE, ARRAY [1,2])",true);
  assertFunction("test_row(1.0, ARRAY [1,2,3], test_row(2,2.0)) != test_row(1.0, ARRAY [1,2,3], test_row(1,2.0))",true);
}
