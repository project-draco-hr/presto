{
  TestingTypeManager typeManager=new TestingTypeManager();
  TestingBlockEncodingSerde blockEncodingSerde=new TestingBlockEncodingSerde(typeManager);
  ObjectMapper mapper=new ObjectMapperProvider().get().registerModule(new SimpleModule().addDeserializer(Type.class,new TestingTypeDeserializer(typeManager)).addSerializer(Block.class,new TestingBlockJsonSerde.Serializer(blockEncodingSerde)).addDeserializer(Block.class,new TestingBlockJsonSerde.Deserializer(blockEncodingSerde)));
  Marker marker=Marker.above(BIGINT,0L);
  Assert.assertEquals(marker,mapper.readValue(mapper.writeValueAsString(marker),Marker.class));
  marker=Marker.exactly(VARCHAR,utf8Slice("abc"));
  Assert.assertEquals(marker,mapper.readValue(mapper.writeValueAsString(marker),Marker.class));
  marker=Marker.below(DOUBLE,0.123);
  Assert.assertEquals(marker,mapper.readValue(mapper.writeValueAsString(marker),Marker.class));
  marker=Marker.exactly(BOOLEAN,true);
  Assert.assertEquals(marker,mapper.readValue(mapper.writeValueAsString(marker),Marker.class));
  marker=Marker.upperUnbounded(BIGINT);
  Assert.assertEquals(marker,mapper.readValue(mapper.writeValueAsString(marker),Marker.class));
  marker=Marker.lowerUnbounded(BIGINT);
  Assert.assertEquals(marker,mapper.readValue(mapper.writeValueAsString(marker),Marker.class));
}
