{
  if (where.test(node)) {
    return nodeToReplace;
  }
  List<PlanNode> sources=node.getSources();
  if (sources.isEmpty()) {
    return node;
  }
 else   if (sources.size() == 1) {
    return replaceChildren(node,ImmutableList.of(replaceFirstRecursive(node,sources.get(0))));
  }
 else {
    throw new IllegalArgumentException("Unable to replace first node when a node has multiple children, use replaceAll instead");
  }
}
