{
  List<Type> argumentTypes=new ArrayList<>();
  List<Object> argumentValues=new ArrayList<>();
  for (  Expression expression : node.getArguments()) {
    Object value=process(expression,context);
    if (value == null) {
      return null;
    }
    Type type=expressionTypes.get(expression);
    if (value instanceof Expression) {
      return node;
    }
    argumentValues.add(value);
    argumentTypes.add(type);
  }
  FunctionInfo function=metadata.getFunction(node.getName(),argumentTypes,false);
  if (optimize && !function.isDeterministic()) {
    return new FunctionCall(node.getName(),node.getWindow().orNull(),node.isDistinct(),toExpressions(argumentValues,argumentTypes));
  }
  MethodHandle handle=function.getScalarFunction();
  if (handle.type().parameterCount() > 0 && handle.type().parameterType(0) == Session.class) {
    handle=handle.bindTo(session);
  }
  try {
    return handle.invokeWithArguments(argumentValues);
  }
 catch (  Throwable throwable) {
    Throwables.propagateIfInstanceOf(throwable,RuntimeException.class);
    Throwables.propagateIfInstanceOf(throwable,Error.class);
    throw new RuntimeException(throwable.getMessage(),throwable);
  }
}
