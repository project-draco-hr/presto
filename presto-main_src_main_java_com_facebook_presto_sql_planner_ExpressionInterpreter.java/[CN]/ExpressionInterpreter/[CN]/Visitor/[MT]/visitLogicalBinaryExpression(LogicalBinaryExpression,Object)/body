{
  Object left=process(node.getLeft(),context);
  Object right=process(node.getRight(),context);
switch (node.getType()) {
case AND:
{
      if (Boolean.FALSE.equals(left) || Boolean.TRUE.equals(right)) {
        return left;
      }
      if (Boolean.FALSE.equals(right) || Boolean.TRUE.equals(left)) {
        return right;
      }
      break;
    }
case OR:
{
    if (Boolean.TRUE.equals(left) || Boolean.FALSE.equals(right)) {
      return left;
    }
    if (Boolean.TRUE.equals(right) || Boolean.FALSE.equals(left)) {
      return right;
    }
    break;
  }
}
if (left == null && right == null) {
return null;
}
return new LogicalBinaryExpression(node.getType(),toExpression(left,expressionTypes.get(node.getLeft())),toExpression(right,expressionTypes.get(node.getRight())));
}
