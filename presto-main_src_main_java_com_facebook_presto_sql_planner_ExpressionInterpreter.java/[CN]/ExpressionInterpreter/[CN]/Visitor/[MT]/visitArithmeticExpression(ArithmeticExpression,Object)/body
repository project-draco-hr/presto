{
  Object left=process(node.getLeft(),context);
  if (left == null) {
    return null;
  }
  Object right=process(node.getRight(),context);
  if (right == null) {
    return null;
  }
  if (left instanceof Expression || right instanceof Expression) {
    return new ArithmeticExpression(node.getType(),toExpression(left,expressionTypes.get(node.getLeft())),toExpression(right,expressionTypes.get(node.getRight())));
  }
switch (node.getType()) {
case ADD:
    if (left instanceof Long && right instanceof Long) {
      return ((Long)left) + ((Long)right);
    }
 else     if (left instanceof Double && right instanceof Double) {
      return ((Double)left) + ((Double)right);
    }
case SUBTRACT:
  if (left instanceof Long && right instanceof Long) {
    return ((Long)left) - ((Long)right);
  }
 else   if (left instanceof Double && right instanceof Double) {
    return ((Double)left) - ((Double)right);
  }
case DIVIDE:
if (left instanceof Long && right instanceof Long) {
  try {
    return ((Long)left) / ((Long)right);
  }
 catch (  ArithmeticException e) {
    throw new PrestoException(StandardErrorCode.DIVISION_BY_ZERO.toErrorCode(),e);
  }
}
 else if (left instanceof Double && right instanceof Double) {
  return ((Double)left) / ((Double)right);
}
case MULTIPLY:
if (left instanceof Long && right instanceof Long) {
return ((Long)left) * ((Long)right);
}
 else if (left instanceof Double && right instanceof Double) {
return ((Double)left) * ((Double)right);
}
case MODULUS:
if (left instanceof Long && right instanceof Long) {
try {
return ((Long)left) % ((Long)right);
}
 catch (ArithmeticException e) {
throw new PrestoException(StandardErrorCode.DIVISION_BY_ZERO.toErrorCode(),e);
}
}
 else if (left instanceof Double && right instanceof Double) {
return (Double)left % ((Double)right);
}
}
throw new UnsupportedOperationException("not yet implemented: " + node.getType());
}
