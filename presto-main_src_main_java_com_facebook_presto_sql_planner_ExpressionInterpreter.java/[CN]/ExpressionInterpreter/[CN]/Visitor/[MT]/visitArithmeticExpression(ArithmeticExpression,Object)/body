{
  Object left=process(node.getLeft(),context);
  if (left == null) {
    return null;
  }
  Object right=process(node.getRight(),context);
  if (right == null) {
    return null;
  }
  if (left instanceof Expression || right instanceof Expression) {
    return node;
  }
  Number leftNumber=(Number)left;
  Number rightNumber=(Number)right;
switch (node.getType()) {
case ADD:
    if (leftNumber instanceof Long && rightNumber instanceof Long) {
      return leftNumber.longValue() + rightNumber.longValue();
    }
 else {
      return leftNumber.doubleValue() + rightNumber.doubleValue();
    }
case SUBTRACT:
  if (leftNumber instanceof Long && rightNumber instanceof Long) {
    return leftNumber.longValue() - rightNumber.longValue();
  }
 else {
    return leftNumber.doubleValue() - rightNumber.doubleValue();
  }
case DIVIDE:
if (leftNumber instanceof Long && rightNumber instanceof Long) {
  return leftNumber.longValue() / rightNumber.longValue();
}
 else {
  return leftNumber.doubleValue() / rightNumber.doubleValue();
}
case MULTIPLY:
if (leftNumber instanceof Long && rightNumber instanceof Long) {
return leftNumber.longValue() * rightNumber.longValue();
}
 else {
return leftNumber.doubleValue() * rightNumber.doubleValue();
}
case MODULUS:
if (leftNumber instanceof Long && rightNumber instanceof Long) {
return leftNumber.longValue() % rightNumber.longValue();
}
 else {
return leftNumber.doubleValue() % rightNumber.doubleValue();
}
default :
throw new UnsupportedOperationException("not yet implemented: " + node.getType());
}
}
