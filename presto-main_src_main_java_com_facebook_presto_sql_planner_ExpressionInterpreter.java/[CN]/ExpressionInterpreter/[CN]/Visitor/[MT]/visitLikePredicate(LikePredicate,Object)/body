{
  Object value=process(node.getValue(),context);
  if (value == null) {
    return null;
  }
  if (value instanceof Slice && node.getPattern() instanceof StringLiteral && (node.getEscape() instanceof StringLiteral || node.getEscape() == null)) {
    return LikeUtils.regexMatches(getConstantPattern(node),(Slice)value);
  }
  Object pattern=process(node.getPattern(),context);
  if (pattern == null) {
    return null;
  }
  Object escape=null;
  if (node.getEscape() != null) {
    escape=process(node.getEscape(),context);
    if (escape == null) {
      return null;
    }
  }
  if (value instanceof Slice && pattern instanceof Slice && (escape == null || escape instanceof Slice)) {
    Regex regex=LikeUtils.likeToPattern((Slice)pattern,(Slice)escape);
    return LikeUtils.regexMatches(regex,(Slice)value);
  }
  if (pattern instanceof Slice && escape == null) {
    String stringPattern=((Slice)pattern).toString(Charsets.UTF_8);
    if (!stringPattern.contains("%") && !stringPattern.contains("_")) {
      return new ComparisonExpression(ComparisonExpression.Type.EQUAL,toExpression(value),toExpression(pattern));
    }
  }
  Expression optimizedEscape=null;
  if (node.getEscape() != null) {
    optimizedEscape=toExpression(escape);
  }
  return new LikePredicate(toExpression(value),toExpression(pattern),optimizedEscape);
}
