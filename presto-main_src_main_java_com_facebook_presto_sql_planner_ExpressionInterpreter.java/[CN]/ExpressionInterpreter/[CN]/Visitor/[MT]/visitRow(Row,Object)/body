{
  RowType rowType=checkType(expressionTypes.get(node),RowType.class,"type");
  List<Type> parameterTypes=rowType.getTypeParameters();
  List<Expression> arguments=node.getItems();
  int cardinality=arguments.size();
  List<Object> values=new ArrayList<>(cardinality);
  for (  Expression argument : arguments) {
    values.add(process(argument,context));
  }
  if (hasUnresolvedValue(values)) {
    return new Row(toExpressions(values,parameterTypes));
  }
 else {
    BlockBuilder blockBuilder=new InterleavedBlockBuilder(parameterTypes,new BlockBuilderStatus(),cardinality);
    for (int i=0; i < cardinality; ++i) {
      writeNativeValue(parameterTypes.get(i),blockBuilder,values.get(i));
    }
    return blockBuilder.build();
  }
}
