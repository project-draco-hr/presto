{
  Object value=process(node.getValue(),context);
  if (value == null) {
    return null;
  }
  if (value instanceof Expression) {
    return new ArithmeticUnaryExpression(node.getSign(),toExpression(value,expressionTypes.get(node.getValue())));
  }
switch (node.getSign()) {
case PLUS:
    return value;
case MINUS:
  FunctionInfo operatorInfo=metadata.resolveOperator(OperatorType.NEGATION,types(node.getValue()));
MethodHandle handle=metadata.getFunctionRegistry().getScalarFunctionImplementation(operatorInfo.getSignature()).getMethodHandle();
if (handle.type().parameterCount() > 0 && handle.type().parameterType(0) == ConnectorSession.class) {
handle=handle.bindTo(session);
}
try {
return handle.invokeWithArguments(value);
}
 catch (Throwable throwable) {
Throwables.propagateIfInstanceOf(throwable,RuntimeException.class);
Throwables.propagateIfInstanceOf(throwable,Error.class);
throw new RuntimeException(throwable.getMessage(),throwable);
}
}
throw new UnsupportedOperationException("Unsupported unary operator: " + node.getSign());
}
