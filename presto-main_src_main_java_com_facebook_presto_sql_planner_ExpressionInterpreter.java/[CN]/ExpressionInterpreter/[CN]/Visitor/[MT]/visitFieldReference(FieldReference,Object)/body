{
  Type type=expressionTypes.get(node);
  int channel=node.getFieldIndex();
  if (context instanceof PagePositionContext) {
    PagePositionContext pagePositionContext=(PagePositionContext)context;
    int position=pagePositionContext.getPosition(channel);
    Block block=pagePositionContext.getBlock(channel);
    if (block.isNull(position)) {
      return null;
    }
    Class<?> javaType=type.getJavaType();
    if (javaType == boolean.class) {
      return type.getBoolean(block,position);
    }
 else     if (javaType == long.class) {
      return type.getLong(block,position);
    }
 else     if (javaType == double.class) {
      return type.getDouble(block,position);
    }
 else     if (javaType == Slice.class) {
      return type.getSlice(block,position);
    }
 else     if (javaType == Block.class) {
      return type.getObject(block,position);
    }
 else {
      throw new UnsupportedOperationException("not yet implemented");
    }
  }
 else   if (context instanceof RecordCursor) {
    RecordCursor cursor=(RecordCursor)context;
    if (cursor.isNull(channel)) {
      return null;
    }
    Class<?> javaType=type.getJavaType();
    if (javaType == boolean.class) {
      return cursor.getBoolean(channel);
    }
 else     if (javaType == long.class) {
      return cursor.getLong(channel);
    }
 else     if (javaType == double.class) {
      return cursor.getDouble(channel);
    }
 else     if (javaType == Slice.class) {
      return cursor.getSlice(channel);
    }
 else     if (javaType == Block.class) {
      return cursor.getObject(channel);
    }
 else {
      throw new UnsupportedOperationException("not yet implemented");
    }
  }
  throw new UnsupportedOperationException("Inputs or cursor myst be set");
}
