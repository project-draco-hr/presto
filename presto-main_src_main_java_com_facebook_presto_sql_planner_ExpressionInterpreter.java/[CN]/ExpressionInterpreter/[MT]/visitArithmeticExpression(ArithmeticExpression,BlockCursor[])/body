{
  Number left=(Number)process(node.getLeft(),context);
  Number right=(Number)process(node.getRight(),context);
switch (node.getType()) {
case ADD:
    if (left instanceof Long && right instanceof Long) {
      return left.longValue() + right.longValue();
    }
 else {
      return left.doubleValue() + right.doubleValue();
    }
case SUBTRACT:
  if (left instanceof Long && right instanceof Long) {
    return left.longValue() - right.longValue();
  }
 else {
    return left.doubleValue() - right.doubleValue();
  }
case DIVIDE:
if (left instanceof Long && right instanceof Long) {
  return left.longValue() / right.longValue();
}
 else {
  return left.doubleValue() / right.doubleValue();
}
case MULTIPLY:
if (left instanceof Long && right instanceof Long) {
return left.longValue() * right.longValue();
}
 else {
return left.doubleValue() * right.doubleValue();
}
default :
throw new UnsupportedOperationException("not yet implemented: " + node.getType());
}
}
