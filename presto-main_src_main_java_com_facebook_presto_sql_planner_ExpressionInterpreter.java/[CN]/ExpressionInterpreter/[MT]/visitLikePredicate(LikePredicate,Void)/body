{
  Object value=process(node.getValue(),context);
  if (!(value instanceof Slice)) {
    return node;
  }
  String valueString=((Slice)value).toString(UTF_8);
  Object pattern=process(node.getPattern(),context);
  if (!(pattern instanceof Slice)) {
    return node;
  }
  String patternString=((Slice)pattern).toString(UTF_8);
  char escapeChar;
  if (node.getEscape() != null) {
    Object escape=process(node.getEscape(),context);
    if (!(escape instanceof Slice)) {
      return node;
    }
    String escapeString=((Slice)escape).toString(UTF_8);
    if (escapeString.length() == 0) {
      escapeChar=(char)-1;
    }
 else     if (escapeString.length() == 1) {
      escapeChar=escapeString.charAt(0);
    }
 else {
      throw new IllegalArgumentException("escape must be empty or a single character: " + escapeString);
    }
  }
 else {
    escapeChar='\\';
  }
  Matcher matcher=likeToPattern(patternString,escapeChar).matcher(valueString);
  return matcher.matches();
}
