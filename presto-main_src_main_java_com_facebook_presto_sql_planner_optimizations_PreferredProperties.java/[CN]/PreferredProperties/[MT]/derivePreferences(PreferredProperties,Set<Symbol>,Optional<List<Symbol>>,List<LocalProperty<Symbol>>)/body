{
  if (hashingColumns.isPresent()) {
    checkState(partitioningColumns.equals(ImmutableSet.copyOf(hashingColumns.get())),"hashingColumns and partitioningColumns must be the same");
  }
  List<LocalProperty<Symbol>> local=ImmutableList.<LocalProperty<Symbol>>builder().addAll(localProperties).addAll(parentProperties.getLocalProperties()).build();
  if (hashingColumns.isPresent()) {
    return hashPartitionedWithLocal(hashingColumns.get(),local);
  }
  if (parentProperties.getGlobalProperties().isPresent()) {
    Global global=parentProperties.getGlobalProperties().get();
    if (global.getPartitioningProperties().isPresent()) {
      Partitioning partitioning=global.getPartitioningProperties().get();
      if (partitioning.getHashingOrder().isPresent() && partitioningColumns.equals(ImmutableSet.copyOf(partitioning.getHashingOrder().get()))) {
        List<Symbol> hashingSymbols=partitioning.getHashingOrder().get();
        return hashPartitionedWithLocal(hashingSymbols,local);
      }
      Set<Symbol> parentPartitioningColumns=partitioning.getPartitioningColumns();
      Set<Symbol> common=Sets.intersection(partitioningColumns,parentPartitioningColumns);
      if (!common.isEmpty()) {
        return partitionedWithLocal(common,local);
      }
      return partitionedWithLocal(partitioningColumns,local);
    }
  }
  return partitionedWithLocal(partitioningColumns,local);
}
