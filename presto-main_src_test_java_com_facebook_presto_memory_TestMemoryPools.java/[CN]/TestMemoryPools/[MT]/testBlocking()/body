{
  Session session=TEST_SESSION.withSystemProperty("task_default_concurrency","1");
  LocalQueryRunner localQueryRunner=queryRunnerWithInitialTransaction(session);
  InMemoryNodeManager nodeManager=localQueryRunner.getNodeManager();
  localQueryRunner.createCatalog("tpch",new TpchConnectorFactory(nodeManager,1),ImmutableMap.<String,String>of());
  MemoryPool pool=new MemoryPool(new MemoryPoolId("test"),new DataSize(10,MEGABYTE));
  QueryId fakeQueryId=new QueryId("fake");
  assertTrue(pool.tryReserve(fakeQueryId,TEN_MEGABYTES));
  MemoryPool systemPool=new MemoryPool(new MemoryPoolId("testSystem"),new DataSize(10,MEGABYTE));
  QueryContext queryContext=new QueryContext(new QueryId("query"),new DataSize(10,MEGABYTE),pool,systemPool,localQueryRunner.getExecutor());
  LocalQueryRunner.MaterializedOutputFactory outputFactory=new LocalQueryRunner.MaterializedOutputFactory();
  TaskContext taskContext=createTaskContext(queryContext,localQueryRunner.getExecutor(),session,new DataSize(0,BYTE));
  Driver driver=Iterables.getOnlyElement(localQueryRunner.createDrivers("SELECT COUNT(*), clerk FROM orders GROUP BY clerk",outputFactory,taskContext));
  while (!driver.isFinished()) {
    if (!driver.process().isDone()) {
      break;
    }
  }
  assertFalse(driver.isFinished());
  assertTrue(pool.getFreeBytes() <= 0);
  pool.free(fakeQueryId,TEN_MEGABYTES);
  do {
    assertTrue(driver.process().isDone());
  }
 while (!driver.isFinished());
}
