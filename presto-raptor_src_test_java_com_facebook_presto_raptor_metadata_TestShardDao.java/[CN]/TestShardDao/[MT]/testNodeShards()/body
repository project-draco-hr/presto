{
  assertEquals(dao.getAllNodesInUse(),ImmutableSet.of());
  String nodeName1=UUID.randomUUID().toString();
  int nodeId1=dao.insertNode(nodeName1);
  String nodeName2=UUID.randomUUID().toString();
  int nodeId2=dao.insertNode(nodeName2);
  assertEquals(dao.getAllNodesInUse(),ImmutableSet.of(nodeName1,nodeName2));
  UUID shardUuid1=UUID.randomUUID();
  UUID shardUuid2=UUID.randomUUID();
  UUID shardUuid3=UUID.randomUUID();
  UUID shardUuid4=UUID.randomUUID();
  UUID shardUuid5=UUID.randomUUID();
  MetadataDao metadataDao=dbi.onDemand(MetadataDao.class);
  int bucketCount=20;
  long distributionId=metadataDao.insertDistribution("test","bigint",bucketCount);
  for (int i=0; i < bucketCount; i++) {
    Integer nodeId=((i % 2) == 0) ? nodeId1 : nodeId2;
    dao.insertBuckets(distributionId,ImmutableList.of(i),ImmutableList.of(nodeId));
  }
  long plainTableId=metadataDao.insertTable("test","plain",false,false,null,0);
  long bucketedTableId=metadataDao.insertTable("test","bucketed",false,false,distributionId,0);
  long shardId1=dao.insertShard(shardUuid1,plainTableId,null,1,11,111);
  long shardId2=dao.insertShard(shardUuid2,plainTableId,null,2,22,222);
  long shardId3=dao.insertShard(shardUuid3,bucketedTableId,8,3,33,333);
  long shardId4=dao.insertShard(shardUuid4,bucketedTableId,9,4,44,444);
  long shardId5=dao.insertShard(shardUuid5,bucketedTableId,7,5,55,555);
  OptionalInt noBucket=OptionalInt.empty();
  OptionalLong noRange=OptionalLong.empty();
  ShardMetadata shard1=new ShardMetadata(plainTableId,shardId1,shardUuid1,noBucket,1,11,111,noRange,noRange);
  ShardMetadata shard2=new ShardMetadata(plainTableId,shardId2,shardUuid2,noBucket,2,22,222,noRange,noRange);
  ShardMetadata shard3=new ShardMetadata(bucketedTableId,shardId3,shardUuid3,OptionalInt.of(8),3,33,333,noRange,noRange);
  ShardMetadata shard4=new ShardMetadata(bucketedTableId,shardId4,shardUuid4,OptionalInt.of(9),4,44,444,noRange,noRange);
  ShardMetadata shard5=new ShardMetadata(bucketedTableId,shardId5,shardUuid5,OptionalInt.of(7),5,55,555,noRange,noRange);
  assertEquals(dao.getShards(plainTableId),ImmutableList.of(shardUuid1,shardUuid2));
  assertEquals(dao.getShards(bucketedTableId),ImmutableList.of(shardUuid3,shardUuid4,shardUuid5));
  assertEquals(dao.getNodeShards(nodeName1,null),ImmutableSet.of(shard3));
  assertEquals(dao.getNodeShards(nodeName2,null),ImmutableSet.of(shard4,shard5));
  assertEquals(dao.getNodeSizes(),ImmutableSet.of(new NodeSize(nodeName1,33),new NodeSize(nodeName2,44 + 55)));
  dao.insertShardNode(shardId1,nodeId1);
  dao.insertShardNode(shardId2,nodeId1);
  dao.insertShardNode(shardId1,nodeId2);
  assertEquals(dao.getNodeShards(nodeName1,null),ImmutableSet.of(shard1,shard2,shard3));
  assertEquals(dao.getNodeShards(nodeName2,null),ImmutableSet.of(shard1,shard4,shard5));
  assertEquals(dao.getNodeSizes(),ImmutableSet.of(new NodeSize(nodeName1,11 + 22 + 33),new NodeSize(nodeName2,11 + 44 + 55)));
  dao.dropShardNodes(plainTableId);
  assertEquals(dao.getNodeShards(nodeName1,null),ImmutableSet.of(shard3));
  assertEquals(dao.getNodeShards(nodeName2,null),ImmutableSet.of(shard4,shard5));
  assertEquals(dao.getNodeSizes(),ImmutableSet.of(new NodeSize(nodeName1,33),new NodeSize(nodeName2,44 + 55)));
  dao.dropShards(plainTableId);
  dao.dropShards(bucketedTableId);
  assertEquals(dao.getShards(plainTableId),ImmutableList.of());
  assertEquals(dao.getShards(bucketedTableId),ImmutableList.of());
  assertEquals(dao.getNodeSizes(),ImmutableSet.of());
}
