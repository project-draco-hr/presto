{
  assertFunction("MAP_CONCAT(MAP (ARRAY [TRUE], ARRAY [1]), MAP (ARRAY [TRUE, FALSE], ARRAY [10, 20]))",new MapType(BOOLEAN,INTEGER),ImmutableMap.of(true,10,false,20));
  assertFunction("MAP_CONCAT(MAP (ARRAY [TRUE, FALSE], ARRAY [1, 2]), MAP (ARRAY [TRUE, FALSE], ARRAY [10, 20]))",new MapType(BOOLEAN,INTEGER),ImmutableMap.of(true,10,false,20));
  assertFunction("MAP_CONCAT(MAP (ARRAY [TRUE, FALSE], ARRAY [1, 2]), MAP (ARRAY [TRUE], ARRAY [10]))",new MapType(BOOLEAN,INTEGER),ImmutableMap.of(true,10,false,2));
  assertFunction("MAP_CONCAT(MAP (ARRAY ['1', '2', '3'], ARRAY [1, 2, 3]), MAP (ARRAY ['1', '2', '3', '4'], ARRAY [10, 20, 30, 40]))",new MapType(createVarcharType(1),INTEGER),ImmutableMap.of("1",10,"2",20,"3",30,"4",40));
  assertFunction("MAP_CONCAT(MAP (ARRAY ['1', '2', '3', '4'], ARRAY [1, 2, 3, 4]), MAP (ARRAY ['1', '2', '3', '4'], ARRAY [10, 20, 30, 40]))",new MapType(createVarcharType(1),INTEGER),ImmutableMap.of("1",10,"2",20,"3",30,"4",40));
  assertFunction("MAP_CONCAT(MAP (ARRAY ['1', '2', '3', '4'], ARRAY [1, 2, 3, 4]), MAP (ARRAY ['1', '2', '3'], ARRAY [10, 20, 30]))",new MapType(createVarcharType(1),INTEGER),ImmutableMap.of("1",10,"2",20,"3",30,"4",4));
  assertFunction("MAP_CONCAT(MAP (ARRAY [1, 2, 3], ARRAY [ARRAY [1.0], ARRAY [2.0], ARRAY [3.0]]), MAP (ARRAY [1, 2, 3, 4], ARRAY [ARRAY [10.0], ARRAY [20.0], ARRAY [30.0], ARRAY [40.0]]))",new MapType(INTEGER,new ArrayType(DOUBLE)),ImmutableMap.of(1,ImmutableList.of(10.0),2,ImmutableList.of(20.0),3,ImmutableList.of(30.0),4,ImmutableList.of(40.0)));
  assertFunction("MAP_CONCAT(MAP (ARRAY [1, 2, 3, 4], ARRAY [ARRAY [1.0], ARRAY [2.0], ARRAY [3.0], ARRAY [4.0]]), MAP (ARRAY [1, 2, 3, 4], ARRAY [ARRAY [10.0], ARRAY [20.0], ARRAY [30.0], ARRAY [40.0]]))",new MapType(INTEGER,new ArrayType(DOUBLE)),ImmutableMap.of(1,ImmutableList.of(10.0),2,ImmutableList.of(20.0),3,ImmutableList.of(30.0),4,ImmutableList.of(40.0)));
  assertFunction("MAP_CONCAT(MAP (ARRAY [1, 2, 3, 4], ARRAY [ARRAY [1.0], ARRAY [2.0], ARRAY [3.0], ARRAY [4.0]]), MAP (ARRAY [1, 2, 3], ARRAY [ARRAY [10.0], ARRAY [20.0], ARRAY [30.0]]))",new MapType(INTEGER,new ArrayType(DOUBLE)),ImmutableMap.of(1,ImmutableList.of(10.0),2,ImmutableList.of(20.0),3,ImmutableList.of(30.0),4,ImmutableList.of(4.0)));
  assertFunction("MAP_CONCAT(MAP (ARRAY [ARRAY [1.0], ARRAY [2.0], ARRAY [3.0]], ARRAY ['1', '2', '3']), MAP (ARRAY [ARRAY [1.0], ARRAY [2.0], ARRAY [3.0], ARRAY [4.0]], ARRAY ['10', '20', '30', '40']))",new MapType(new ArrayType(DOUBLE),createVarcharType(2)),ImmutableMap.of(ImmutableList.of(1.0),"10",ImmutableList.of(2.0),"20",ImmutableList.of(3.0),"30",ImmutableList.of(4.0),"40"));
  assertFunction("MAP_CONCAT(MAP (ARRAY [ARRAY [1.0], ARRAY [2.0], ARRAY [3.0]], ARRAY ['1', '2', '3']), MAP (ARRAY [ARRAY [1.0], ARRAY [2.0], ARRAY [3.0], ARRAY [4.0]], ARRAY ['10', '20', '30', '40']))",new MapType(new ArrayType(DOUBLE),createVarcharType(2)),ImmutableMap.of(ImmutableList.of(1.0),"10",ImmutableList.of(2.0),"20",ImmutableList.of(3.0),"30",ImmutableList.of(4.0),"40"));
  assertFunction("MAP_CONCAT(MAP (ARRAY [ARRAY [1.0], ARRAY [2.0], ARRAY [3.0], ARRAY [4.0]], ARRAY ['1', '2', '3', '4']), MAP (ARRAY [ARRAY [1.0], ARRAY [2.0], ARRAY [3.0]], ARRAY ['10', '20', '30']))",new MapType(new ArrayType(DOUBLE),createVarcharType(2)),ImmutableMap.of(ImmutableList.of(1.0),"10",ImmutableList.of(2.0),"20",ImmutableList.of(3.0),"30",ImmutableList.of(4.0),"4"));
}
