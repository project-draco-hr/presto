{
  Preconditions.checkArgument(arguments.size() == 2);
  CompilerContext context=generator.getContext();
  RowExpression left=arguments.get(0);
  RowExpression right=arguments.get(1);
  Type leftType=left.getType();
  Type rightType=right.getType();
  FunctionBinding functionBinding=generator.getBootstrapBinder().bindOperator(OperatorType.EQUAL,generator.generateGetSession(),ImmutableList.<ByteCodeNode>of(NOP,NOP),ImmutableList.of(leftType,rightType));
  ByteCodeNode equalsCall=new Block(context).comment("equals(%s, %s)",leftType,rightType).invokeDynamic(functionBinding.getName(),functionBinding.getCallSite().type(),functionBinding.getBindingId());
  Block block=new Block(context).comment("IS DISTINCT FROM").comment("left").append(generator.generate(left)).append(new IfStatement(context,new Block(context).getVariable("wasNull"),new Block(context).pop(leftType.getJavaType()).putVariable("wasNull",false).comment("right is not null").append(generator.generate(right)).pop(rightType.getJavaType()).getVariable("wasNull").invokeStatic(CompilerOperations.class,"not",boolean.class,boolean.class),new Block(context).comment("right").append(generator.generate(right)).append(new IfStatement(context,new Block(context).getVariable("wasNull"),new Block(context).pop(leftType.getJavaType()).pop(rightType.getJavaType()).push(true),new Block(context).append(equalsCall).invokeStatic(CompilerOperations.class,"not",boolean.class,boolean.class))))).putVariable("wasNull",false);
  return block;
}
