{
  Preconditions.checkArgument(arguments.size() == 2);
  CompilerContext context=generatorContext.getContext();
  RowExpression left=arguments.get(0);
  RowExpression right=arguments.get(1);
  Type leftType=left.getType();
  Type rightType=right.getType();
  FunctionInfo operator=generatorContext.getRegistry().resolveOperator(OperatorType.EQUAL,ImmutableList.of(leftType,rightType));
  Binding binding=generatorContext.getCallSiteBinder().bind(operator.getMethodHandle());
  ByteCodeNode equalsCall=new Block(context).comment("equals(%s, %s)",leftType,rightType).append(invoke(generatorContext.getContext(),binding,operator.getSignature()));
  Block block=new Block(context).comment("IS DISTINCT FROM").comment("left").append(generatorContext.generate(left)).append(new IfStatement().condition(new Block(context).getVariable("wasNull")).ifTrue(new Block(context).pop(leftType.getJavaType()).putVariable("wasNull",false).comment("right is not null").append(generatorContext.generate(right)).pop(rightType.getJavaType()).getVariable("wasNull").invokeStatic(CompilerOperations.class,"not",boolean.class,boolean.class)).ifFalse(new Block(context).comment("right").append(generatorContext.generate(right)).append(new IfStatement().condition(new Block(context).getVariable("wasNull")).ifTrue(new Block(context).pop(leftType.getJavaType()).pop(rightType.getJavaType()).push(true)).ifFalse(new Block(context).append(equalsCall).invokeStatic(CompilerOperations.class,"not",boolean.class,boolean.class))))).putVariable("wasNull",false);
  return block;
}
