{
  if (leftArray.getPositionCount() != rightArray.getPositionCount()) {
    return false;
  }
  for (int i=0; i < leftArray.getPositionCount(); i++) {
    checkElementNotNull(leftArray.isNull(i),ARRAY_NULL_ELEMENT_MSG);
    checkElementNotNull(rightArray.isNull(i),ARRAY_NULL_ELEMENT_MSG);
    Object leftElement=readNativeValue(type,leftArray,i);
    Object rightElement=readNativeValue(type,rightArray,i);
    try {
      if (!(boolean)equalsFunction.invoke(leftElement,rightElement)) {
        return false;
      }
    }
 catch (    Throwable t) {
      Throwables.propagateIfInstanceOf(t,Error.class);
      Throwables.propagateIfInstanceOf(t,PrestoException.class);
      throw new PrestoException(INTERNAL_ERROR,t);
    }
  }
  return true;
}
