{
  checkNotNull(includedColumns,"includedColumns is null");
  checkNotNull(predicate,"predicate is null");
  checkNotNull(fileStripes,"fileStripes is null");
  checkNotNull(stripeStats,"stripeStats is null");
  checkNotNull(orcDataSource,"orcDataSource is null");
  checkNotNull(types,"types is null");
  checkNotNull(compressionKind,"compressionKind is null");
  checkNotNull(hiveStorageTimeZone,"hiveStorageTimeZone is null");
  checkNotNull(sessionTimeZone,"sessionTimeZone is null");
  ImmutableSet.Builder<Integer> presentColumns=ImmutableSet.builder();
  OrcType root=types.get(0);
  for (  int includedColumn : includedColumns) {
    if (includedColumn < root.getFieldCount()) {
      presentColumns.add(includedColumn);
    }
  }
  this.presentColumns=presentColumns.build();
  this.orcDataSource=orcDataSource;
  this.splitLength=splitLength;
  checkArgument(rowsInRowGroup > 0,"rowsInRowGroup must be greater than zero");
  long totalRowCount=0;
  ImmutableList.Builder<StripeInformation> stripes=ImmutableList.builder();
  if (predicate.matches(numberOfRows,indexByOrdinal(fileStats))) {
    for (int stripeIndex=0; stripeIndex < fileStripes.size(); stripeIndex++) {
      StripeInformation stripe=fileStripes.get(stripeIndex);
      if (splitContainsStripe(splitOffset,splitLength,stripe) && isStripeIncluded(stripe,stripeStats,predicate,stripeIndex)) {
        stripes.add(stripe);
        totalRowCount+=stripe.getNumberOfRows();
      }
    }
  }
  this.totalRowCount=totalRowCount;
  this.stripes=stripes.build();
  stripeReader=new StripeReader(orcDataSource,compressionKind,types,bufferSize,this.presentColumns,rowsInRowGroup,predicate,metadataReader);
  streamReaders=createStreamReaders(orcDataSource,types,hiveStorageTimeZone,sessionTimeZone,this.presentColumns);
}
