{
  TypedByteCodeNode valueNode=arguments.get(0);
  TypedByteCodeNode patternNode=arguments.get(1);
  TypedByteCodeNode escapeNode=null;
  if (arguments.size() == 3) {
    escapeNode=arguments.get(2);
  }
  MethodHandle methodHandle;
  if (patternNode.getNode() instanceof Constant && (escapeNode == null || escapeNode.getNode() instanceof Constant)) {
    Slice pattern=(Slice)((Constant)patternNode.getNode()).getValue();
    Slice escapeSlice=null;
    if (escapeNode != null) {
      escapeSlice=(Slice)((Constant)patternNode.getNode()).getValue();
    }
    Regex regex=LikeUtils.likeToPattern(pattern,escapeSlice);
    methodHandle=constantPattern.bindTo(regex);
    arguments=ImmutableList.of(valueNode);
  }
 else {
    methodHandle=dynamicPattern.bindTo(new LikePatternCache(100));
    if (escapeNode == null) {
      methodHandle=MethodHandles.insertArguments(methodHandle,2,(Object)null);
    }
  }
  CallSite callSite=new ConstantCallSite(methodHandle);
  return new FunctionBinding(bindingId,name,callSite,arguments);
}
