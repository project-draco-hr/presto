{
  Page tuplePage=Iterables.getOnlyElement(rowPagesBuilder(BIGINT,VARCHAR,DOUBLE).row(1L,"a",0.1).build());
  List<Type> outputTypes=ImmutableList.<Type>of(VARCHAR,BIGINT,BOOLEAN,DOUBLE,DOUBLE);
  TupleFilterProcessor tupleFilterProcessor=new TupleFilterProcessor(tuplePage,outputTypes,new int[]{1,0,3});
  Page inputPage=Iterables.getOnlyElement(rowPagesBuilder(outputTypes).row("a",1L,true,0.1,0.0).row("b",1L,true,0.1,2.0).row("a",1L,false,0.1,2.0).row("a",0L,false,0.2,0.2).build());
  ConnectorSession session=new TestingConnectorSession("user",TimeZoneKey.UTC_KEY,Locale.ENGLISH,0,ImmutableMap.<String,String>of());
  PageBuilder pageBuilder=new PageBuilder(outputTypes);
  int end=tupleFilterProcessor.process(session,inputPage,0,inputPage.getPositionCount(),pageBuilder);
  Page actualPage=pageBuilder.build();
  Page expectedPage=Iterables.getOnlyElement(rowPagesBuilder(outputTypes).row("a",1L,true,0.1,0.0).row("a",1L,false,0.1,2.0).build());
  assertEquals(end,inputPage.getPositionCount());
  assertPageEquals(outputTypes,actualPage,expectedPage);
}
