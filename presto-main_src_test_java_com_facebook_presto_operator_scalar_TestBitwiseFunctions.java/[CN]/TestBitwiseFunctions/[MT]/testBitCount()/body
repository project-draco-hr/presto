{
  assertFunction("bit_count(0, 64)",BIGINT,0L);
  assertFunction("bit_count(7, 64)",BIGINT,3L);
  assertFunction("bit_count(24, 64)",BIGINT,2L);
  assertFunction("bit_count(-8, 64)",BIGINT,61L);
  assertFunction("bit_count(" + Integer.MAX_VALUE + ", 64)",BIGINT,31L);
  assertFunction("bit_count(" + Integer.MIN_VALUE + ", 64)",BIGINT,33L);
  assertFunction("bit_count(" + Long.MAX_VALUE + ", 64)",BIGINT,63L);
  assertFunction("bit_count(-" + Long.MAX_VALUE + "-1, 64)",BIGINT,1L);
  assertFunction("bit_count(0, 32)",BIGINT,0L);
  assertFunction("bit_count(7, 32)",BIGINT,3L);
  assertFunction("bit_count(24, 32)",BIGINT,2L);
  assertFunction("bit_count(-8, 32)",BIGINT,29L);
  assertFunction("bit_count(" + Integer.MAX_VALUE + ", 32)",BIGINT,31L);
  assertFunction("bit_count(" + Integer.MIN_VALUE + ", 32)",BIGINT,1L);
  assertInvalidFunction("bit_count(" + (Integer.MAX_VALUE + 1L) + ", 32)","Number must be representable with the bits specified. 2147483648 can not be represented with 32 bits");
  assertInvalidFunction("bit_count(" + (Integer.MIN_VALUE - 1L) + ", 32)","Number must be representable with the bits specified. -2147483649 can not be represented with 32 bits");
  assertInvalidFunction("bit_count(0, -1)","Bits specified in bit_count must be between 2 and 64, got -1");
  assertInvalidFunction("bit_count(0, 1)","Bits specified in bit_count must be between 2 and 64, got 1");
  assertInvalidFunction("bit_count(0, 65)","Bits specified in bit_count must be between 2 and 64, got 65");
}
