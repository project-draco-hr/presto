{
  assertNotEquivalent("true","false");
  assertNotEquivalent("4","5");
  assertNotEquivalent("4.4","5.5");
  assertNotEquivalent("'foo'","'bar'");
  assertNotEquivalent("4 = 5","5 = 6");
  assertNotEquivalent("4 <> 5","5 <> 6");
  assertNotEquivalent("4 is distinct from 5","5 is distinct from 6");
  assertNotEquivalent("4 < 5","5 > 6");
  assertNotEquivalent("4 <= 5","5 >= 6");
  assertNotEquivalent("mod(4, 5)","mod(5, 4)");
  assertNotEquivalent("a_bigint","b_bigint");
  assertNotEquivalent("a_bigint = b_bigint","b_bigint = c_bigint");
  assertNotEquivalent("a_bigint < b_bigint","b_bigint > c_bigint");
  assertNotEquivalent("a_bigint < b_double","b_double > c_bigint");
  assertNotEquivalent("4 <= 5 and 6 < 7","7 > 6 and 5 >= 6");
  assertNotEquivalent("4 <= 5 or 6 < 7","7 > 6 or 5 >= 6");
  assertNotEquivalent("a_bigint <= b_bigint and c_bigint < d_bigint","d_bigint > c_bigint and b_bigint >= c_bigint");
  assertNotEquivalent("a_bigint <= b_bigint or c_bigint < d_bigint","d_bigint > c_bigint or b_bigint >= c_bigint");
}
