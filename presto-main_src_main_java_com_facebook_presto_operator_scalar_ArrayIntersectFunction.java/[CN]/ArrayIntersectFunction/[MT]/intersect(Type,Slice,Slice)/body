{
  Block leftBlock=readStructuralBlock(leftArray);
  Block rightBlock=readStructuralBlock(rightArray);
  int leftPositionCount=leftBlock.getPositionCount();
  int rightPositionCount=rightBlock.getPositionCount();
  int[] leftPositions=new int[leftPositionCount];
  int[] rightPositions=new int[rightPositionCount];
  for (int i=0; i < leftPositionCount; i++) {
    leftPositions[i]=i;
  }
  for (int i=0; i < rightPositionCount; i++) {
    rightPositions[i]=i;
  }
  IntArrays.quickSort(leftPositions,IntBlockCompare(type,leftBlock));
  IntArrays.quickSort(rightPositions,IntBlockCompare(type,rightBlock));
  BlockBuilder resultBlockBuilder=new VariableWidthBlockBuilder(new BlockBuilderStatus(),leftBlock.getSizeInBytes());
  int leftCurrentPosition=0;
  int rightCurrentPosition=0;
  int leftBasePosition;
  int rightBasePosition;
  while (leftCurrentPosition < leftPositionCount && rightCurrentPosition < rightPositionCount) {
    leftBasePosition=leftCurrentPosition;
    rightBasePosition=rightCurrentPosition;
    int compareValue=type.compareTo(leftBlock,leftPositions[leftCurrentPosition],rightBlock,rightPositions[rightCurrentPosition]);
    if (compareValue > 0) {
      rightCurrentPosition++;
    }
 else     if (compareValue < 0) {
      leftCurrentPosition++;
    }
 else {
      type.appendTo(leftBlock,leftPositions[leftCurrentPosition],resultBlockBuilder);
      leftCurrentPosition++;
      rightCurrentPosition++;
      while (leftCurrentPosition < leftPositionCount && type.equalTo(leftBlock,leftPositions[leftBasePosition],leftBlock,leftPositions[leftCurrentPosition])) {
        leftCurrentPosition++;
      }
      while (rightCurrentPosition < rightPositionCount && type.equalTo(rightBlock,rightPositions[rightBasePosition],rightBlock,rightPositions[rightCurrentPosition])) {
        rightCurrentPosition++;
      }
    }
  }
  return buildStructuralSlice(resultBlockBuilder);
}
