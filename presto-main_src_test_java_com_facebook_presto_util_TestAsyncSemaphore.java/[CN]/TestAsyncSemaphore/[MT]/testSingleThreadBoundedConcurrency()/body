{
  AsyncSemaphore<Runnable> asyncSemaphore=new AsyncSemaphore<>(1,executor,new Function<Runnable,ListenableFuture<?>>(){
    @Override public ListenableFuture<?> apply(    Runnable task){
      return executor.submit(task);
    }
  }
);
  final AtomicInteger count=new AtomicInteger();
  final AtomicInteger concurrency=new AtomicInteger();
  List<ListenableFuture<?>> futures=new ArrayList<>();
  for (int i=0; i < 1000; i++) {
    futures.add(asyncSemaphore.submit(new Runnable(){
      @Override public void run(){
        count.incrementAndGet();
        int currentConcurrency=concurrency.incrementAndGet();
        assertLessThanOrEqual(currentConcurrency,1);
        Uninterruptibles.sleepUninterruptibly(1,TimeUnit.MILLISECONDS);
        concurrency.decrementAndGet();
      }
    }
));
  }
  Futures.allAsList(futures).get(1,TimeUnit.MINUTES);
  Assert.assertEquals(count.get(),1000);
}
