{
  Multimap<Type,OperatorType> missingOperators=HashMultimap.create();
  for (  Type type : typeManager.getTypes()) {
    if (type.isComparable()) {
      if (!functions.canResolveOperator(HASH_CODE,BIGINT,ImmutableList.of(type))) {
        missingOperators.put(type,HASH_CODE);
      }
      if (!functions.canResolveOperator(EQUAL,BOOLEAN,ImmutableList.of(type,type))) {
        missingOperators.put(type,EQUAL);
      }
      if (!functions.canResolveOperator(NOT_EQUAL,BOOLEAN,ImmutableList.of(type,type))) {
        missingOperators.put(type,NOT_EQUAL);
      }
    }
    if (type.isOrderable()) {
      for (      OperatorType operator : ImmutableList.of(LESS_THAN,LESS_THAN_OR_EQUAL,GREATER_THAN,GREATER_THAN_OR_EQUAL)) {
        if (!functions.canResolveOperator(operator,BOOLEAN,ImmutableList.of(type,type))) {
          missingOperators.put(type,operator);
        }
      }
      if (!functions.canResolveOperator(BETWEEN,BOOLEAN,ImmutableList.of(type,type,type))) {
        missingOperators.put(type,BETWEEN);
      }
    }
  }
  if (!missingOperators.isEmpty()) {
    List<String> messages=new ArrayList<>();
    for (    Type type : missingOperators.keySet()) {
      messages.add(format("%s missing for %s",missingOperators.get(type),type));
    }
    throw new IllegalStateException(Joiner.on(", ").join(messages));
  }
}
