{
  Path basePath=new Path(format("s3://%s/rename/%s/",writableBucket,UUID.randomUUID()));
  FileSystem fs=hdfsEnvironment.getFileSystem("user",basePath);
  assertFalse(fs.exists(basePath));
  Path path=new Path(basePath,"foo.txt");
  assertTrue(fs.createNewFile(path));
  assertTrue(fs.exists(path));
  Path newPath=new Path(basePath,"bar.txt");
  assertFalse(fs.exists(newPath));
  assertTrue(fs.rename(path,newPath));
  assertFalse(fs.exists(path));
  assertTrue(fs.exists(newPath));
  assertTrue(fs.createNewFile(path));
  assertFalse(fs.rename(path,newPath));
  assertTrue(fs.exists(path));
  assertTrue(fs.rename(path,path));
  assertTrue(fs.exists(path));
  assertTrue(fs.delete(path,false));
  assertFalse(fs.exists(path));
  Path source=new Path(basePath,"source");
  assertTrue(fs.createNewFile(new Path(source,"test.txt")));
  Path target=new Path(basePath,"target");
  assertFalse(fs.exists(target));
  assertTrue(fs.rename(source,target));
  assertFalse(fs.exists(source));
  assertTrue(fs.exists(target));
  assertTrue(fs.createNewFile(new Path(source,"test.txt")));
  assertTrue(fs.rename(source,target));
  assertFalse(fs.exists(source));
  target=new Path(target,"source");
  assertTrue(fs.exists(target));
  assertTrue(fs.exists(new Path(target,"test.txt")));
  target=new Path(basePath,"target");
  assertTrue(fs.exists(target));
  assertTrue(fs.delete(target,true));
  assertFalse(fs.exists(target));
  fs.delete(basePath,true);
}
