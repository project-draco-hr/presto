{
  assertInterleavedPosition(TYPES,block,position,expectedValue);
  Type type=TYPES.get(position % TYPES.size());
  assertInterleavedPosition(ImmutableList.of(type),block.getSingleValueBlock(position),0,expectedValue);
  int alignedPosition=position - position % COLUMN_COUNT;
  assertInterleavedPosition(ImmutableList.of(type),block.getRegion(alignedPosition,COLUMN_COUNT),position - alignedPosition,expectedValue);
  assertInterleavedPosition(TYPES,block.getRegion(0,alignedPosition + COLUMN_COUNT),position,expectedValue);
  assertInterleavedPosition(ImmutableList.of(type),block.getRegion(alignedPosition,block.getPositionCount() - alignedPosition),position - alignedPosition,expectedValue);
  assertInterleavedPosition(ImmutableList.of(type),block.copyRegion(alignedPosition,COLUMN_COUNT),position - alignedPosition,expectedValue);
  assertInterleavedPosition(TYPES,block.copyRegion(0,alignedPosition + COLUMN_COUNT),position,expectedValue);
  assertInterleavedPosition(ImmutableList.of(type),block.copyRegion(alignedPosition,block.getPositionCount() - alignedPosition),position - alignedPosition,expectedValue);
  assertInterleavedPosition(TYPES,block.copyPositions(IntStream.range(alignedPosition,alignedPosition + COLUMN_COUNT).boxed().collect(Collectors.toList())),position % COLUMN_COUNT,expectedValue);
}
