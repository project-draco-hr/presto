{
  checkNotNull(databaseName,"databaseName is null");
  checkNotNull(tableName,"tableName is null");
  checkNotNull(partitionName,"partitionName is null");
  if (hiveImportRegistry.isPartitionImported(databaseName,tableName,partitionName)) {
    return 0;
  }
  final Tuple partitionTuple=TupleInfo.SINGLE_VARBINARY.builder().append(Slices.wrappedBuffer(partitionName.getBytes(Charsets.UTF_8))).build();
  List<PartitionChunk> chunks=runWithRetry(new Callable<List<PartitionChunk>>(){
    @Override public List<PartitionChunk> call() throws Exception {
      return hiveClient.getPartitionChunks(databaseName,tableName,partitionName);
    }
  }
,databaseName + "." + tableName+ "."+ partitionName+ ".getPartitionChunks");
  final List<SchemaField> schemaFields=runWithRetry(new Callable<List<SchemaField>>(){
    @Override public List<SchemaField> call() throws Exception {
      return hiveClient.getTableSchema(databaseName,tableName);
    }
  }
,databaseName + "." + tableName+ "."+ partitionName+ ".getTableSchema");
synchronized (this) {
    String catalogName="default";
    String schemaName="default";
    if (metadata.getTable(catalogName,schemaName,tableName) == null) {
      List<ColumnMetadata> columns=createColumnMetadata(schemaFields);
      metadata.createTable(new TableMetadata(catalogName,schemaName,tableName,columns));
    }
  }
  ImmutableList.Builder<String> fieldNamesBuilder=ImmutableList.builder();
  ImmutableList.Builder<RecordProjection> builder=ImmutableList.builder();
  for (int i=0; i < schemaFields.size(); i++) {
    SchemaField schemaField=schemaFields.get(i);
    fieldNamesBuilder.add(schemaField.getFieldName());
    builder.add(RecordProjections.createProjection(i,getTupleType(schemaField.getPrimitiveType())));
  }
  final List<String> fieldNames=fieldNamesBuilder.build();
  final List<RecordProjection> recordProjections=builder.build();
  long rowCount=0;
  for (  final PartitionChunk chunk : chunks) {
    rowCount+=runWithRetry(new Callable<Long>(){
      @Override public Long call() throws Exception {
        HivePartition hivePartition=new HivePartition(hiveClient,chunk,fieldNames);
        RecordProjectOperator source=new RecordProjectOperator(hivePartition,recordProjections);
        return storageManager.importTableShard(source,databaseName,tableName);
      }
    }
,databaseName + "." + tableName+ "."+ partitionName+ "."+ chunk+ ".import");
  }
  hiveImportRegistry.markPartitionImported(databaseName,tableName,partitionName);
  return rowCount;
}
