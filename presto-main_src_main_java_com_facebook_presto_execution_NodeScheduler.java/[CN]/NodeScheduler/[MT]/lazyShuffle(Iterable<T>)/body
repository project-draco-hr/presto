{
  return new Iterable<T>(){
    @Override public Iterator<T> iterator(){
      return new AbstractIterator<T>(){
        private final List<T> list=Lists.newArrayList(iterable);
        private int limit=list.size();
        @Override protected T computeNext(){
          if (limit == 0) {
            return endOfData();
          }
          int position=ThreadLocalRandom.current().nextInt(limit);
          T result=list.get(position);
          list.set(position,list.get(limit - 1));
          limit--;
          return result;
        }
      }
;
    }
  }
;
}
