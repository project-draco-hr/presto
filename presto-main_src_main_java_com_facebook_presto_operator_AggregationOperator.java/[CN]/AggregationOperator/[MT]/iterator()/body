{
  AggregationFunction[] functions=new AggregationFunction[functionProviders.size()];
  for (int i=0; i < functions.length; i++) {
    functions[i]=functionProviders.get(i).get();
  }
  BlockCursor[] cursors=new BlockCursor[source.getChannelCount()];
  for (  Page page : source) {
    Block[] blocks=page.getBlocks();
    for (int i=0; i < blocks.length; i++) {
      cursors[i]=blocks[i].cursor();
    }
    int rows=(int)page.getPositionCount();
    for (int position=0; position < rows; position++) {
      for (      BlockCursor cursor : cursors) {
        checkState(cursor.advanceNextPosition());
      }
      for (      AggregationFunction function : functions) {
        function.add(cursors);
      }
    }
    for (    BlockCursor cursor : cursors) {
      checkState(!cursor.advanceNextPosition());
    }
  }
  Tuple[] results=new Tuple[functions.length];
  for (int i=0; i < functions.length; i++) {
    results[i]=functions[i].evaluate();
  }
  Block[] blocks=new Block[projections.size()];
  for (int i=0; i < blocks.length; i++) {
    BlockBuilder output=new BlockBuilder(projections.get(i).getTupleInfo());
    projections.get(i).project(results,output);
    blocks[i]=output.build();
  }
  return Iterators.singletonIterator(new Page(blocks));
}
