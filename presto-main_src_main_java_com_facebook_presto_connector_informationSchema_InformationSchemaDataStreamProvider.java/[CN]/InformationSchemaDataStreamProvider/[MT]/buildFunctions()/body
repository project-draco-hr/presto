{
  InternalTable.Builder table=InternalTable.builder(InformationSchemaMetadata.informationSchemaTableColumns(InformationSchemaMetadata.TABLE_INTERNAL_FUNCTIONS));
  for (  FunctionInfo function : metadata.listFunctions()) {
    if (function.isApproximate()) {
      continue;
    }
    Iterable<String> arguments=transform(function.getArgumentTypes(),new Function<Type,String>(){
      @Override public String apply(      Type type){
        return type.getName();
      }
    }
);
    String functionType;
    if (function.isAggregate()) {
      functionType="aggregate";
    }
 else     if (function.isWindow()) {
      functionType="window";
    }
 else     if (function.isDeterministic()) {
      functionType="scalar";
    }
 else {
      functionType="scalar (non-deterministic)";
    }
    table.add(function.getName().toString(),Joiner.on(", ").join(arguments),function.getReturnType().getName(),functionType,nullToEmpty(function.getDescription()));
  }
  return table.build();
}
