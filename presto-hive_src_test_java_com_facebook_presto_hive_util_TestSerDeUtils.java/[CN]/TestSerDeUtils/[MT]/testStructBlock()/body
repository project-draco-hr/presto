{
  InnerStruct innerStruct=new InnerStruct(13,14L);
  com.facebook.presto.spi.type.Type rowType=new RowType(ImmutableList.of(BIGINT,BIGINT),Optional.empty());
  Block actual=toBinaryBlock(rowType,innerStruct,getInspector(InnerStruct.class));
  Block expected=rowBlockOf(ImmutableList.of(BIGINT,BIGINT),13,14L);
  assertBlockEquals(actual,expected);
  OuterStruct outerStruct=new OuterStruct();
  outerStruct.byteVal=1;
  outerStruct.shortVal=2;
  outerStruct.intVal=3;
  outerStruct.longVal=4L;
  outerStruct.floatVal=5.01f;
  outerStruct.doubleVal=6.001d;
  outerStruct.stringVal="seven";
  outerStruct.byteArray=new byte[]{'2'};
  InnerStruct is1=new InnerStruct(2,-5L);
  InnerStruct is2=new InnerStruct(-10,0L);
  outerStruct.structArray=new ArrayList<>(2);
  outerStruct.structArray.add(is1);
  outerStruct.structArray.add(is2);
  outerStruct.map=new TreeMap<>();
  outerStruct.map.put("twelve",new InnerStruct(0,5L));
  outerStruct.map.put("fifteen",new InnerStruct(-5,-10L));
  outerStruct.innerStruct=new InnerStruct(18,19L);
  com.facebook.presto.spi.type.Type innerRowType=new RowType(ImmutableList.of(BIGINT,BIGINT),Optional.empty());
  com.facebook.presto.spi.type.Type arrayOfInnerRowType=new ArrayType(innerRowType);
  com.facebook.presto.spi.type.Type mapOfInnerRowType=new MapType(VARCHAR,innerRowType);
  List<com.facebook.presto.spi.type.Type> outerRowParameterTypes=ImmutableList.of(BIGINT,BIGINT,BIGINT,BIGINT,DOUBLE,DOUBLE,VARCHAR,VARCHAR,arrayOfInnerRowType,mapOfInnerRowType,innerRowType);
  com.facebook.presto.spi.type.Type outerRowType=new RowType(outerRowParameterTypes,Optional.empty());
  actual=toBinaryBlock(outerRowType,outerStruct,getInspector(OuterStruct.class));
  ImmutableList.Builder<Object> outerRowValues=ImmutableList.builder();
  outerRowValues.add(1);
  outerRowValues.add(2);
  outerRowValues.add(3);
  outerRowValues.add(4L);
  outerRowValues.add(5.01f);
  outerRowValues.add(6.001d);
  outerRowValues.add("seven");
  outerRowValues.add(new byte[]{'2'});
  outerRowValues.add(arrayBlockOf(innerRowType,rowBlockOf(ImmutableList.of(BIGINT,BIGINT),2,-5L),rowBlockOf(ImmutableList.of(BIGINT,BIGINT),-10,0)));
  BlockBuilder blockBuilder=new InterleavedBlockBuilder(ImmutableList.of(VARCHAR,innerRowType),new BlockBuilderStatus(),1024);
  VARCHAR.writeString(blockBuilder,"fifteen");
  innerRowType.writeObject(blockBuilder,rowBlockOf(ImmutableList.of(BIGINT,BIGINT),-5,-10L));
  VARCHAR.writeString(blockBuilder,"twelve");
  innerRowType.writeObject(blockBuilder,rowBlockOf(ImmutableList.of(BIGINT,BIGINT),0,5L));
  outerRowValues.add(blockBuilder.build());
  outerRowValues.add(rowBlockOf(ImmutableList.of(BIGINT,BIGINT),18,19L));
  assertBlockEquals(actual,rowBlockOf(outerRowParameterTypes,outerRowValues.build().toArray()));
}
