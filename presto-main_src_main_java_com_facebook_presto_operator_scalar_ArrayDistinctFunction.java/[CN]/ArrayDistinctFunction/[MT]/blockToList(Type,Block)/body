{
  int positionCount=block.getPositionCount();
  ArrayList<Object> result=new ArrayList<>(positionCount);
  Class<?> javaType=type.getJavaType();
  if (javaType == boolean.class) {
    for (int i=0; i < block.getPositionCount(); i++) {
      if (block.isNull(i)) {
        result.add(null);
      }
 else {
        result.add(type.getBoolean(block,i));
      }
    }
  }
 else   if (javaType == long.class) {
    for (int i=0; i < block.getPositionCount(); i++) {
      if (block.isNull(i)) {
        result.add(null);
      }
 else {
        result.add(type.getLong(block,i));
      }
    }
  }
 else   if (javaType == double.class) {
    for (int i=0; i < block.getPositionCount(); i++) {
      if (block.isNull(i)) {
        result.add(null);
      }
 else {
        result.add(type.getDouble(block,i));
      }
    }
  }
 else   if (javaType == Slice.class) {
    for (int i=0; i < block.getPositionCount(); i++) {
      if (block.isNull(i)) {
        result.add(null);
      }
 else {
        result.add(type.getSlice(block,i));
      }
    }
  }
 else {
    throw new PrestoException(INVALID_FUNCTION_ARGUMENT,format("Unexpected type %s",javaType.getName()));
  }
  return result;
}
