{
  RowPagesBuilder probePagesBuilder=rowPagesBuilder(buildHashEnabled,hashChannels,ImmutableList.of(VARCHAR,BIGINT,BIGINT));
  Random random=new Random(42);
  int remainingRows=PROBE_ROWS_NUMBER;
  int rowsInPage=0;
  while (remainingRows > 0) {
    double roll=random.nextDouble();
    int columnA=20 + remainingRows;
    int columnB=30 + remainingRows;
    int columnC=40 + remainingRows;
    int rowsCount=1;
    if (matchRate < 1) {
      if (roll > matchRate) {
        columnA*=-1;
        columnB*=-1;
        columnC*=-1;
      }
    }
 else     if (matchRate > 1) {
      roll=roll * 2 * matchRate + 1;
      rowsCount=(int)Math.floor(roll);
    }
    for (int i=0; i < rowsCount; i++) {
      if (rowsInPage >= ROWS_PER_PAGE) {
        probePagesBuilder.pageBreak();
        rowsInPage=0;
      }
      probePagesBuilder.row(format("%d",columnA),columnB,columnC);
      --remainingRows;
      rowsInPage++;
    }
  }
  probePages=probePagesBuilder.build();
}
