{
  String partitionName=tablePartition.getPartitionName();
  ImmutableMap.Builder<ColumnHandle,Domain> builder=ImmutableMap.builder();
  for (  PartitionKey partitionKey : allPartitionKeys.get(partitionName)) {
    ColumnHandle columnHandle=columnHandles.get(partitionKey.getName());
    checkArgument(columnHandles != null,"Invalid partition key for column %s in partition %s",partitionKey.getName(),tablePartition.getPartitionName());
    String value=partitionKey.getValue();
switch (partitionKey.getType()) {
case BOOLEAN:
      if (value.length() == 0) {
        builder.put(columnHandle,Domain.singleValue(false));
      }
 else {
        builder.put(columnHandle,Domain.singleValue(Boolean.parseBoolean(value)));
      }
    break;
case LONG:
  if (value.length() == 0) {
    builder.put(columnHandle,Domain.singleValue(0L));
  }
 else {
    builder.put(columnHandle,Domain.singleValue(Long.parseLong(value)));
  }
break;
case DOUBLE:
if (value.length() == 0) {
builder.put(columnHandle,Domain.singleValue(0.0));
}
 else {
builder.put(columnHandle,Domain.singleValue(Double.parseDouble(value)));
}
break;
case STRING:
builder.put(columnHandle,Domain.singleValue(value));
break;
}
}
return new NativePartition(tablePartition.getPartitionId(),TupleDomain.withColumnDomains(builder.build()));
}
