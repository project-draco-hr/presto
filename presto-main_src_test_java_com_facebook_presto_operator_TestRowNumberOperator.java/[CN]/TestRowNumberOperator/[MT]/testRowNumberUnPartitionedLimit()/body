{
  DriverContext driverContext=getDriverContext();
  List<Page> input=rowPagesBuilder(BIGINT,DOUBLE).row(1,0.3).row(2,0.2).row(3,0.1).row(3,0.19).pageBreak().row(1,0.4).pageBreak().row(1,0.5).row(1,0.6).row(2,0.7).row(2,0.8).row(2,0.9).build();
  RowNumberOperator.RowNumberOperatorFactory operatorFactory=new RowNumberOperator.RowNumberOperatorFactory(0,ImmutableList.of(BIGINT,DOUBLE),Ints.asList(1,0),Ints.asList(),ImmutableList.<Type>of(),Optional.of(3),Optional.empty(),10);
  Operator operator=operatorFactory.createOperator(driverContext);
  MaterializedResult expectedRows=resultBuilder(driverContext.getSession(),DOUBLE,BIGINT,BIGINT).row(0.3,1).row(0.2,2).row(0.1,3).row(0.19,3).row(0.4,1).row(0.5,1).row(0.6,1).row(0.7,2).row(0.8,2).row(0.9,2).build();
  List<Page> pages=toPages(operator,input);
  Block rowNumberColumn=getRowNumberColumn(pages);
  assertEquals(rowNumberColumn.getPositionCount(),3);
  pages=stripRowNumberColumn(pages);
  MaterializedResult actual=toMaterializedResult(operator.getOperatorContext().getSession(),ImmutableList.<Type>of(DOUBLE,BIGINT),pages);
  assertEquals(actual.getMaterializedRows().size(),3);
  ImmutableSet<?> actualSet=ImmutableSet.copyOf(actual.getMaterializedRows());
  ImmutableSet<?> expectedRowsSet=ImmutableSet.copyOf(expectedRows.getMaterializedRows());
  assertEquals(Sets.intersection(expectedRowsSet,actualSet).size(),3);
}
