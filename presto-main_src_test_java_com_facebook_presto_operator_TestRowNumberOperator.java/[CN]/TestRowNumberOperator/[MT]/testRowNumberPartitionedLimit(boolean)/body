{
  DriverContext driverContext=getDriverContext();
  RowPagesBuilder rowPagesBuilder=rowPagesBuilder(hashEnabled,Ints.asList(0),BIGINT,DOUBLE);
  List<Page> input=rowPagesBuilder.row(1,0.3).row(2,0.2).row(3,0.1).row(3,0.19).pageBreak().row(1,0.4).pageBreak().row(1,0.5).row(1,0.6).row(2,0.7).row(2,0.8).row(2,0.9).build();
  RowNumberOperator.RowNumberOperatorFactory operatorFactory=new RowNumberOperator.RowNumberOperatorFactory(0,ImmutableList.of(BIGINT,DOUBLE),Ints.asList(1,0),Ints.asList(0),ImmutableList.of(BIGINT),Optional.of(3),Optional.<Integer>absent(),10);
  Operator operator=operatorFactory.createOperator(driverContext);
  MaterializedResult expectedPartition1=resultBuilder(driverContext.getSession(),DOUBLE,BIGINT).row(0.3,1).row(0.4,1).row(0.5,1).row(0.6,1).build();
  MaterializedResult expectedPartition2=resultBuilder(driverContext.getSession(),DOUBLE,BIGINT).row(0.2,2).row(0.7,2).row(0.8,2).row(0.9,2).build();
  MaterializedResult expectedPartition3=resultBuilder(driverContext.getSession(),DOUBLE,BIGINT).row(0.1,3).row(0.19,3).build();
  List<Page> pages=toPages(operator,input);
  Block rowNumberColumn=getRowNumberColumn(pages);
  assertEquals(rowNumberColumn.getPositionCount(),8);
  for (int i=0; i < rowNumberColumn.getPositionCount(); i++) {
    assertTrue(rowNumberColumn.getLong(i,0) <= 3);
  }
  pages=stripRowNumberColumn(pages);
  MaterializedResult actual=toMaterializedResult(operator.getOperatorContext().getSession(),ImmutableList.<Type>of(DOUBLE,BIGINT),pages);
  ImmutableSet<?> actualSet=ImmutableSet.copyOf(actual.getMaterializedRows());
  ImmutableSet<?> expectedPartition1Set=ImmutableSet.copyOf(expectedPartition1.getMaterializedRows());
  ImmutableSet<?> expectedPartition2Set=ImmutableSet.copyOf(expectedPartition2.getMaterializedRows());
  ImmutableSet<?> expectedPartition3Set=ImmutableSet.copyOf(expectedPartition3.getMaterializedRows());
  assertEquals(Sets.intersection(expectedPartition1Set,actualSet).size(),3);
  assertEquals(Sets.intersection(expectedPartition2Set,actualSet).size(),3);
  assertEquals(Sets.intersection(expectedPartition3Set,actualSet).size(),2);
}
