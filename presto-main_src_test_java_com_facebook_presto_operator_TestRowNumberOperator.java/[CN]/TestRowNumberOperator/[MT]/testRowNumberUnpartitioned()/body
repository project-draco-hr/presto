{
  DriverContext driverContext=getDriverContext();
  List<Page> input=rowPagesBuilder(BIGINT,DOUBLE).row(1L,0.3).row(2L,0.2).row(3L,0.1).row(3L,0.19).pageBreak().row(1L,0.4).pageBreak().row(1L,0.5).row(1L,0.6).row(2L,0.7).row(2L,0.8).row(2L,0.9).build();
  RowNumberOperator.RowNumberOperatorFactory operatorFactory=new RowNumberOperator.RowNumberOperatorFactory(0,new PlanNodeId("test"),ImmutableList.of(BIGINT,DOUBLE),Ints.asList(1,0),Ints.asList(),ImmutableList.<Type>of(),Optional.empty(),Optional.empty(),10);
  Operator operator=operatorFactory.createOperator(driverContext);
  MaterializedResult expectedResult=resultBuilder(driverContext.getSession(),DOUBLE,BIGINT).row(0.3,1L).row(0.4,1L).row(0.5,1L).row(0.6,1L).row(0.2,2L).row(0.7,2L).row(0.8,2L).row(0.9,2L).row(0.1,3L).row(0.19,3L).build();
  List<Page> pages=toPages(operator,input);
  Block rowNumberColumn=getRowNumberColumn(pages);
  assertEquals(rowNumberColumn.getPositionCount(),10);
  pages=stripRowNumberColumn(pages);
  MaterializedResult actual=toMaterializedResult(operator.getOperatorContext().getSession(),ImmutableList.<Type>of(DOUBLE,BIGINT),pages);
  assertEqualsIgnoreOrder(actual.getMaterializedRows(),expectedResult.getMaterializedRows());
}
