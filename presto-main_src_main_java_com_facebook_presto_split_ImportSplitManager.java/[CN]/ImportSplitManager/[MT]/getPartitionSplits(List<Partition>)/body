{
  Iterable<PartitionChunk> partitionChunks=retry().stopOn(NotFoundException.class).stopOnIllegalExceptions().runUnchecked(new Callable<Iterable<PartitionChunk>>(){
    @Override public Iterable<PartitionChunk> call() throws Exception {
      return importClient.getPartitionChunks(partitions);
    }
  }
);
  return new DataSource(dataSourceName,transform(partitionChunks,new Function<PartitionChunk,Split>(){
    @Override public Split apply(    PartitionChunk chunk){
      return new ImportSplit(dataSourceName,chunk.getPartitionName(),chunk.isLastChunk(),SerializedPartitionChunk.create(importClient,chunk),toAddresses(chunk.getHosts()),chunk.getInfo());
    }
  }
));
}
