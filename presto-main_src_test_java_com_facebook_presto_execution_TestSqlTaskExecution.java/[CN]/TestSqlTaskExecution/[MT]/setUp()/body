{
  Symbol symbol=new Symbol("column");
  MetadataManager metadata=new MetadataManager(new FeaturesConfig(),new TypeRegistry());
  LocalExecutionPlanner planner=new LocalExecutionPlanner(metadata,new SqlParser(),new DataStreamManager(),new IndexManager(),new RecordSinkManager(),new MockExchangeClientSupplier(),new ExpressionCompiler(metadata),new CompilerConfig());
  taskExecutor=new TaskExecutor(8);
  taskExecutor.start();
  tableScanNodeId=new PlanNodeId("tableScan");
  PlanFragment testFragment=new PlanFragment(new PlanFragmentId("fragment"),new TableScanNode(tableScanNodeId,new TableHandle("test",new TestingTableHandle()),ImmutableList.of(symbol),ImmutableMap.of(symbol,new ColumnHandle("test",new TestingColumnHandle("column"))),null,Optional.<GeneratedPartitions>absent()),ImmutableMap.<Symbol,Type>of(symbol,VARCHAR),PlanDistribution.SOURCE,tableScanNodeId,OutputPartitioning.NONE,ImmutableList.<Symbol>of());
  TaskId taskId=new TaskId("query","stage","task");
  ConnectorSession session=new ConnectorSession("user","test","default","default",UTC_KEY,Locale.ENGLISH,"test","test");
  taskNotificationExecutor=newCachedThreadPool(threadsNamed("task-notification-%d"));
  outputBuffers=OutputBuffers.INITIAL_EMPTY_OUTPUT_BUFFERS;
  taskExecution=SqlTaskExecution.createSqlTaskExecution(session,taskId,URI.create("fake://task/" + taskId),testFragment,ImmutableList.<TaskSource>of(),outputBuffers,planner,new DataSize(32,Unit.MEGABYTE),taskExecutor,taskNotificationExecutor,new DataSize(256,Unit.MEGABYTE),new DataSize(8,Unit.MEGABYTE),new QueryMonitor(new ObjectMapperProvider().get(),new NullEventClient(),new NodeInfo("test")),false);
}
