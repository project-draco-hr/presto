{
  requireNonNull(lookupSourceInputChannels,"lookupSourceInputChannels is null");
  checkArgument(!lookupSourceInputChannels.isEmpty(),"lookupSourceInputChannels must not be empty");
  requireNonNull(keyOutputChannels,"keyOutputChannels is null");
  checkArgument(!keyOutputChannels.isEmpty(),"keyOutputChannels must not be empty");
  requireNonNull(keyOutputHashChannel,"keyOutputHashChannel is null");
  checkArgument(lookupSourceInputChannels.size() <= keyOutputChannels.size(),"Lookup channels must supply a subset of the actual index columns");
  requireNonNull(outputTypes,"outputTypes is null");
  requireNonNull(indexBuildDriverFactoryProvider,"indexBuildDriverFactoryProvider is null");
  requireNonNull(maxIndexMemorySize,"maxIndexMemorySize is null");
  requireNonNull(stats,"stats is null");
  this.lookupSourceInputChannels=ImmutableSet.copyOf(lookupSourceInputChannels);
  this.keyOutputChannels=ImmutableList.copyOf(keyOutputChannels);
  this.keyOutputHashChannel=keyOutputHashChannel;
  this.outputTypes=ImmutableList.copyOf(outputTypes);
  this.indexBuildDriverFactoryProvider=indexBuildDriverFactoryProvider;
  this.expectedPositions=expectedPositions;
  this.maxIndexMemorySize=maxIndexMemorySize;
  this.stats=stats;
  ImmutableList.Builder<Type> keyTypeBuilder=ImmutableList.builder();
  for (  int keyOutputChannel : keyOutputChannels) {
    keyTypeBuilder.add(outputTypes.get(keyOutputChannel));
  }
  this.keyTypes=keyTypeBuilder.build();
  this.indexSnapshotReference=new AtomicReference<>(new IndexSnapshot(new EmptyLookupSource(outputTypes.size()),new EmptyLookupSource(keyOutputChannels.size())));
}
