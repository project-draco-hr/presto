{
  this.columns=columns;
  this.useParquetColumnNames=useParquetColumnNames;
  ImmutableList.Builder<Converter> converters=ImmutableList.builder();
  for (int i=0; i < columns.size(); i++) {
    HiveColumnHandle column=columns.get(i);
    if (!column.isPartitionKey()) {
      parquet.schema.Type parquetType=getParquetType(column,messageType);
      if (parquetType == null) {
        continue;
      }
      if (parquetType.isPrimitive()) {
        converters.add(new ParquetPrimitiveColumnConverter(i));
      }
 else {
        GroupType groupType=parquetType.asGroupType();
switch (column.getTypeSignature().getBase()) {
case StandardTypes.ARRAY:
          ParquetColumnConverter listConverter=new ParquetColumnConverter(new ParquetListConverter(groupType.getName(),groupType),i);
        converters.add(listConverter);
      break;
case StandardTypes.MAP:
    ParquetColumnConverter mapConverter=new ParquetColumnConverter(new ParquetMapConverter(groupType.getName(),groupType),i);
  converters.add(mapConverter);
break;
case StandardTypes.ROW:
ParquetColumnConverter rowConverter=new ParquetColumnConverter(new ParquetStructConverter(groupType.getName(),groupType),i);
converters.add(rowConverter);
break;
default :
throw new IllegalArgumentException("Group column " + groupType.getName() + " type "+ groupType.getOriginalType()+ " not supported");
}
}
}
}
this.converters=converters.build();
}
