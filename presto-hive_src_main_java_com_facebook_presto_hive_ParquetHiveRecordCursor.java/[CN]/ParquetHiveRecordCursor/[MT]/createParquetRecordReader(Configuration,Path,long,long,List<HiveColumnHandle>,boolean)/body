{
  try {
    ParquetMetadata parquetMetadata=ParquetFileReader.readFooter(configuration,path);
    List<BlockMetaData> blocks=parquetMetadata.getBlocks();
    FileMetaData fileMetaData=parquetMetadata.getFileMetaData();
    MessageType schema=fileMetaData.getSchema();
    PrestoReadSupport readSupport=new PrestoReadSupport(useParquetColumnNames,columns,schema);
    ReadContext readContext=readSupport.init(configuration,fileMetaData.getKeyValueMetaData(),schema);
    List<BlockMetaData> splitGroup=new ArrayList<>();
    long splitStart=start;
    long splitLength=length;
    for (    BlockMetaData block : blocks) {
      long firstDataPage=block.getColumns().get(0).getFirstDataPageOffset();
      if (firstDataPage >= splitStart && firstDataPage < splitStart + splitLength) {
        splitGroup.add(block);
      }
    }
    ParquetInputSplit split=new ParquetInputSplit(path,splitStart,splitLength,null,splitGroup,readContext.getRequestedSchema().toString(),schema.toString(),fileMetaData.getKeyValueMetaData(),readContext.getReadSupportMetadata());
    TaskAttemptContext taskContext=ContextUtil.newTaskAttemptContext(configuration,new TaskAttemptID());
    ParquetRecordReader<FakeParquetRecord> realReader=new PrestoParquetRecordReader(readSupport);
    realReader.initialize(split,taskContext);
    return realReader;
  }
 catch (  IOException e) {
    throw Throwables.propagate(e);
  }
catch (  InterruptedException e) {
    Thread.currentThread().interrupt();
    throw Throwables.propagate(e);
  }
}
