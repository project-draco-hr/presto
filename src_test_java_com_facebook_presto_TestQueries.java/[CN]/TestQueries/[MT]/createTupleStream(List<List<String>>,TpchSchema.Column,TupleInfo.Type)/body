{
  final TupleInfo tupleInfo=new TupleInfo(type);
  final Iterator<List<String>> iterator=data.iterator();
  return new UncompressedTupleStream(tupleInfo,new Iterable<UncompressedBlock>(){
    @Override public Iterator<UncompressedBlock> iterator(){
      return new AbstractIterator<UncompressedBlock>(){
        long position=0;
        @Override protected UncompressedBlock computeNext(){
          if (!iterator.hasNext()) {
            return endOfData();
          }
          BlockBuilder blockBuilder=new BlockBuilder(position,tupleInfo);
          while (iterator.hasNext() && !blockBuilder.isFull()) {
            type.getStringValueConverter().convert(iterator.next().get(column.getIndex()),blockBuilder);
          }
          UncompressedBlock block=blockBuilder.build();
          position+=block.getCount();
          return block;
        }
      }
;
    }
  }
);
}
