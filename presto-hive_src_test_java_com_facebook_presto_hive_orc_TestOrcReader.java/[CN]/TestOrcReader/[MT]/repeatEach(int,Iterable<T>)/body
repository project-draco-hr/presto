{
  return new Iterable<T>(){
    @Override public Iterator<T> iterator(){
      return new AbstractIterator<T>(){
        private final Iterator<T> delegate=iterable.iterator();
        private int position;
        private T value;
        @Override protected T computeNext(){
          if (position == 0) {
            if (!delegate.hasNext()) {
              return endOfData();
            }
            value=delegate.next();
          }
          position++;
          if (position >= n) {
            position=0;
          }
          return value;
        }
      }
;
    }
  }
;
}
