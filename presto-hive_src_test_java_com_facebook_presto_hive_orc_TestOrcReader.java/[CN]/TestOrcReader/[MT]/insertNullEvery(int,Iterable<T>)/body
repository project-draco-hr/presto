{
  return new Iterable<T>(){
    @Override public Iterator<T> iterator(){
      return new AbstractIterator<T>(){
        private final Iterator<T> delegate=iterable.iterator();
        private int position;
        @Override protected T computeNext(){
          position++;
          if (position > n) {
            position=0;
            return null;
          }
          if (!delegate.hasNext()) {
            return endOfData();
          }
          return delegate.next();
        }
      }
;
    }
  }
;
}
