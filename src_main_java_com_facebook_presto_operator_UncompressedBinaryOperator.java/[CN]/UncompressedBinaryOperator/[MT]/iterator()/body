{
  final Cursor left=leftOperandSource.cursor();
  final Cursor right=rightOperandSource.cursor();
  boolean advancedLeft=Cursors.advanceNextPositionNoYield(left);
  boolean advancedRight=Cursors.advanceNextPositionNoYield(right);
  Preconditions.checkState(advancedLeft && advancedRight,"Empty source cursor");
  return new AbstractBlockIterator<UncompressedBlock>(){
    @Override protected UncompressedBlock computeNext(){
      if (left.isFinished()) {
        return endOfData();
      }
      if (right.getPosition() < left.getPosition()) {
        if (right.advanceNextPosition() == MUST_YIELD) {
          return setMustYield();
        }
        Preconditions.checkState(right.getPosition() == left.getPosition());
      }
      BlockBuilder builder=new BlockBuilder(left.getPosition(),getTupleInfo());
      do {
        long endPosition=Math.min(left.getCurrentValueEndPosition(),right.getCurrentValueEndPosition());
        long value=operation.evaluateAsLong(left,right);
        while (left.getPosition() <= endPosition && !builder.isFull()) {
          builder.append(value);
          AdvanceResult result=left.advanceNextPosition();
          if (result == SUCCESS) {
            result=right.advanceNextPosition();
          }
          if (result != SUCCESS) {
            if (!builder.isEmpty()) {
              return builder.build();
            }
            if (result == MUST_YIELD) {
              return setMustYield();
            }
            if (result == FINISHED) {
              return endOfData();
            }
          }
        }
      }
 while (!builder.isFull());
      return builder.build();
    }
  }
;
}
