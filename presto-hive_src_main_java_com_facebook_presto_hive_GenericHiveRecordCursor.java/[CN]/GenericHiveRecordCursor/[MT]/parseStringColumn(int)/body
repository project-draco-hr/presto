{
  checkArgument(!isPartitionColumn[column],"Column is a partition key");
  loaded[column]=true;
  Object fieldData=rowInspector.getStructFieldData(rowData,structFields[column]);
  if (fieldData == null) {
    nulls[column]=true;
  }
 else   if (hiveTypes[column].getCategory() == MAP || hiveTypes[column].getCategory() == LIST || hiveTypes[column].getCategory() == STRUCT) {
    slices[column]=Slices.wrappedBuffer(SerDeUtils.getJsonBytes(sessionTimeZone,fieldData,fieldInspectors[column]));
    nulls[column]=false;
  }
 else {
    Object fieldValue=((PrimitiveObjectInspector)fieldInspectors[column]).getPrimitiveJavaObject(fieldData);
    checkState(fieldValue != null,"fieldValue should not be null");
    if (fieldValue instanceof String) {
      slices[column]=Slices.utf8Slice((String)fieldValue);
    }
 else     if (fieldValue instanceof byte[]) {
      slices[column]=Slices.wrappedBuffer((byte[])fieldValue);
    }
 else {
      throw new IllegalStateException("unsupported string field type: " + fieldValue.getClass().getName());
    }
    nulls[column]=false;
  }
}
