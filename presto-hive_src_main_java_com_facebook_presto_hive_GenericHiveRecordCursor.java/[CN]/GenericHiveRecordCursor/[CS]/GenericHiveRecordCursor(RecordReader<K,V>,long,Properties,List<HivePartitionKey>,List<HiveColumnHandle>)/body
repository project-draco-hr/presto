{
  checkNotNull(recordReader,"recordReader is null");
  checkArgument(totalBytes >= 0,"totalBytes is negative");
  checkNotNull(splitSchema,"splitSchema is null");
  checkNotNull(partitionKeys,"partitionKeys is null");
  checkNotNull(columns,"columns is null");
  checkArgument(!columns.isEmpty(),"columns is empty");
  this.recordReader=recordReader;
  this.totalBytes=totalBytes;
  this.key=recordReader.createKey();
  this.value=recordReader.createValue();
  try {
    this.deserializer=MetaStoreUtils.getDeserializer(null,splitSchema);
    this.rowInspector=(StructObjectInspector)deserializer.getObjectInspector();
  }
 catch (  MetaException|SerDeException|RuntimeException e) {
    throw Throwables.propagate(e);
  }
  int size=columns.size();
  String[] names=new String[size];
  this.types=new ColumnType[size];
  this.hiveTypes=new HiveType[size];
  this.structFields=new StructField[size];
  this.fieldInspectors=new ObjectInspector[size];
  this.isPartitionColumn=new boolean[size];
  this.loaded=new boolean[size];
  this.booleans=new boolean[size];
  this.longs=new long[size];
  this.doubles=new double[size];
  this.strings=new byte[size][];
  this.nulls=new boolean[size];
  for (int i=0; i < columns.size(); i++) {
    HiveColumnHandle column=columns.get(i);
    names[i]=column.getName();
    types[i]=column.getType();
    hiveTypes[i]=column.getHiveType();
    if (!column.isPartitionKey()) {
      StructField field=rowInspector.getStructFieldRef(column.getName());
      structFields[i]=field;
      fieldInspectors[i]=field.getFieldObjectInspector();
    }
    isPartitionColumn[i]=column.isPartitionKey();
  }
  Map<String,HivePartitionKey> partitionKeysByName=uniqueIndex(partitionKeys,HivePartitionKey.nameGetter());
  for (int columnIndex=0; columnIndex < columns.size(); columnIndex++) {
    HiveColumnHandle column=columns.get(columnIndex);
    if (column.isPartitionKey()) {
      HivePartitionKey partitionKey=partitionKeysByName.get(column.getName());
      checkArgument(partitionKey != null,"Unknown partition key %s",column.getName());
      byte[] bytes=partitionKey.getValue().getBytes(Charsets.UTF_8);
switch (types[columnIndex]) {
case BOOLEAN:
        if (isTrue(bytes,0,bytes.length)) {
          booleans[columnIndex]=true;
        }
 else         if (isFalse(bytes,0,bytes.length)) {
          booleans[columnIndex]=false;
        }
 else {
          String valueString=new String(bytes,Charsets.UTF_8);
          throw new IllegalArgumentException(String.format("Invalid partition value '%s' for BOOLEAN partition key %s",valueString,names[columnIndex]));
        }
      break;
case LONG:
    if (bytes.length == 0) {
      throw new IllegalArgumentException(String.format("Invalid partition value '' for BIGINT partition key %s",names[columnIndex]));
    }
  longs[columnIndex]=parseLong(bytes,0,bytes.length);
break;
case DOUBLE:
if (bytes.length == 0) {
throw new IllegalArgumentException(String.format("Invalid partition value '' for DOUBLE partition key %s",names[columnIndex]));
}
doubles[columnIndex]=parseDouble(bytes,0,bytes.length);
break;
case STRING:
strings[columnIndex]=Arrays.copyOf(bytes,bytes.length);
break;
default :
throw new UnsupportedOperationException("Unsupported column type: " + types[columnIndex]);
}
}
}
}
