{
  checkNotNull(discoveryUri,"discoveryUri is null");
  baseDataDir=Files.createTempDir();
  Map<String,String> serverProperties=ImmutableMap.<String,String>builder().put("node.environment","testing").put("storage-manager.data-directory",baseDataDir.getPath()).put("query.client.timeout","10m").put("presto-metastore.db.type","h2").put("exchange.http-client.read-timeout","1h").put("presto-metastore.db.filename",new File(baseDataDir,"db/MetaStore").getPath()).put("discovery.uri",discoveryUri.toASCIIString()).put("failure-detector.warmup-interval","0ms").build();
  ImmutableSet.Builder<Module> builder=ImmutableSet.builder();
  builder.add(new NodeModule()).add(new DiscoveryModule()).add(new TestingHttpServerModule()).add(new JsonModule()).add(new JaxrsModule()).add(new TestingJmxModule()).add(new InMemoryEventModule()).add(new TraceTokenModule()).add(new FailureDetectorModule()).add(new ServerMainModule());
  builder.addAll(Arrays.asList(additionalModules));
  Bootstrap app=new Bootstrap(builder.build());
  Injector injector=app.strictConfig().doNotInitializeLogging().setRequiredConfigurationProperties(serverProperties).initialize();
  injector.getInstance(Announcer.class).start();
  lifeCycleManager=injector.getInstance(LifeCycleManager.class);
  nodeInfo=injector.getInstance(NodeInfo.class);
  shardManager=injector.getInstance(ShardManager.class);
  storageManager=injector.getInstance(LocalStorageManager.class);
  nodeManager=injector.getInstance(NodeManager.class);
  queryManager=injector.getInstance(QueryManager.class);
  server=injector.getInstance(TestingHttpServer.class);
  ImmutableList.Builder<ServiceSelector> serviceSelectors=ImmutableList.builder();
  for (  Binding<ServiceSelector> binding : injector.findBindingsByType(TypeLiteral.get(ServiceSelector.class))) {
    serviceSelectors.add(binding.getProvider().get());
  }
  this.serviceSelectors=serviceSelectors.build();
}
