{
  if (sourceIterator.hasNext()) {
    SplitAssignments sourceAssignment=sourceIterator.next();
    Split split=sourceAssignment.getSplit();
    NativeSplit writingSplit=new NativeSplit(shardManager.allocateShard(tableWriterNode.getTable()));
    String partition="unpartitioned";
    boolean lastSplit=false;
    if (split instanceof PartitionedSplit) {
      PartitionedSplit partitionedSplit=(PartitionedSplit)split;
      partition=partitionedSplit.getPartition();
      lastSplit=partitionedSplit.isLastSplit();
    }
    addPartitionShard(partition,lastSplit,writingSplit.getShardId());
    ImmutableMap.Builder<PlanNodeId,Split> builder=ImmutableMap.builder();
    builder.put(planNodeId,split);
    builder.put(tableWriterNode.getId(),writingSplit);
    CollocatedSplit collocatedSplit=new CollocatedSplit(builder.build());
    shardsInFlight.incrementAndGet();
    return new SplitAssignments(collocatedSplit,sourceAssignment.getNodes());
  }
 else {
    finishOpenPartitions();
    dropAdditionalPartitions();
    return endOfData();
  }
}
