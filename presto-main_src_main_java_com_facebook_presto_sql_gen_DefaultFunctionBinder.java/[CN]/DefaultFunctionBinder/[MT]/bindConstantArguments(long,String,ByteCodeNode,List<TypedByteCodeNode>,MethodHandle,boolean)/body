{
  Builder<TypedByteCodeNode> unboundArguments=ImmutableList.builder();
  int argIndex=0;
  if (methodHandle.type().parameterCount() > 0 && methodHandle.type().parameterType(0) == Session.class) {
    unboundArguments.add(TypedByteCodeNode.typedByteCodeNode(getSessionByteCode,Session.class));
    argIndex++;
  }
  for (  TypedByteCodeNode argument : arguments) {
    ByteCodeNode node=argument.getNode();
    if (node instanceof Constant) {
      Object value=((Constant)node).getValue();
      if (argument.getType() == boolean.class) {
        checkArgument(value instanceof Integer,"boolean should be represented as an integer");
        value=(((Integer)value) != 0);
      }
      methodHandle=MethodHandles.insertArguments(methodHandle,argIndex,value);
    }
 else {
      unboundArguments.add(argument);
      argIndex++;
    }
  }
  CallSite callSite=new ConstantCallSite(methodHandle);
  return new FunctionBinding(bindingId,name,callSite,unboundArguments.build(),nullable);
}
