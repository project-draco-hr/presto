{
  checkNotNull(column,"column is null");
  checkNotNull(serializer,"serializer is null");
  checkNotNull(serdeName,"serdeName is null");
  try {
    String hash=ByteStreams.hash(tableInputSupplierFactory.getInputSupplier(column.getTableName()),Hashing.md5()).toString();
    File cachedFile=new File(new File(cacheDirectory,column.getTableName() + "-" + hash),createFileName(column,serdeName));
    if (cachedFile.exists()) {
      return cachedFile;
    }
    Files.createParentDirs(cachedFile);
    BlockExtractor blockExtractor=new DelimitedBlockExtractor(Splitter.on('|'),ImmutableList.of(new DelimitedBlockExtractor.ColumnDefinition(column.getIndex(),column.getType())));
    BlockDataImporter importer=new BlockDataImporter(blockExtractor,ImmutableList.of(new BlockDataImporter.ColumnImportSpec(serializer,Files.newOutputStreamSupplier(cachedFile))));
    importer.importFrom(new InputSupplier<InputStreamReader>(){
      @Override public InputStreamReader getInput() throws IOException {
        return new InputStreamReader(tableInputSupplierFactory.getInputSupplier(column.getTableName()).getInput(),Charsets.UTF_8);
      }
    }
);
    return cachedFile;
  }
 catch (  IOException e) {
    throw Throwables.propagate(e);
  }
}
