{
  if (state != State.HAS_OUTPUT) {
    return null;
  }
  if (currentPosition >= pageIndex.getPositionCount()) {
    state=State.FINISHED;
    return null;
  }
  pageBuilder.reset();
  while (!pageBuilder.isFull() && currentPosition < pageIndex.getPositionCount()) {
    boolean newPartition=(currentPosition == 0) || (currentPosition == partitionEnd);
    if (newPartition) {
      partitionEnd++;
      while ((partitionEnd < pageIndex.getPositionCount()) && (partitionComparator.compare(partitionEnd - 1,partitionEnd) == 0)) {
        partitionEnd++;
      }
      for (      WindowFunction function : windowFunctions) {
        function.reset(partitionEnd - currentPosition);
      }
    }
    int channel=0;
    while (channel < outputChannels.length) {
      pageIndex.appendTo(outputChannels[channel],currentPosition,pageBuilder.getBlockBuilder(channel));
      channel++;
    }
    boolean newPeerGroup=newPartition || (currentPosition == peerGroupEnd);
    if (newPeerGroup) {
      peerGroupEnd++;
      while ((peerGroupEnd < partitionEnd) && (orderComparator.compare(peerGroupEnd - 1,peerGroupEnd) == 0)) {
        peerGroupEnd++;
      }
      peerGroupCount=peerGroupEnd - currentPosition;
    }
    for (    WindowFunction function : windowFunctions) {
      function.processRow(pageBuilder.getBlockBuilder(channel),newPeerGroup,peerGroupCount);
      channel++;
    }
    currentPosition++;
  }
  if (pageBuilder.isEmpty()) {
    state=State.FINISHED;
    return null;
  }
  Page page=pageBuilder.build();
  return page;
}
