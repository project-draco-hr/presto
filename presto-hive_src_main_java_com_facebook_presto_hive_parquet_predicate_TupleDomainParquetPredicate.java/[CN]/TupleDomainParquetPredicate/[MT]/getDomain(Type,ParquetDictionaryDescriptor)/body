{
  if (dictionaryDescriptor == null) {
    return null;
  }
  ColumnDescriptor columnDescriptor=dictionaryDescriptor.getColumnDescriptor();
  DictionaryPage dictionaryPage=dictionaryDescriptor.getDictionaryPage();
  if (dictionaryPage == null) {
    return null;
  }
  Dictionary dictionary;
  try {
    dictionary=dictionaryPage.getEncoding().initDictionary(columnDescriptor,dictionaryPage);
  }
 catch (  Exception e) {
    return null;
  }
  int dictionarySize=dictionaryPage.getDictionarySize();
  if (type.equals(BIGINT) && columnDescriptor.getType() == PrimitiveTypeName.INT64) {
    List<Domain> domains=new ArrayList<>();
    for (int i=0; i < dictionarySize; i++) {
      domains.add(Domain.singleValue(type,dictionary.decodeToLong(i)));
    }
    domains.add(Domain.onlyNull(type));
    return Domain.union(domains);
  }
 else   if (type.equals(BIGINT) && columnDescriptor.getType() == PrimitiveTypeName.INT32) {
    List<Domain> domains=new ArrayList<>();
    for (int i=0; i < dictionarySize; i++) {
      domains.add(Domain.singleValue(type,(long)dictionary.decodeToInt(i)));
    }
    domains.add(Domain.onlyNull(type));
    return Domain.union(domains);
  }
 else   if (type.equals(DOUBLE) && columnDescriptor.getType() == PrimitiveTypeName.DOUBLE) {
    List<Domain> domains=new ArrayList<>();
    for (int i=0; i < dictionarySize; i++) {
      domains.add(Domain.singleValue(type,dictionary.decodeToDouble(i)));
    }
    domains.add(Domain.onlyNull(type));
    return Domain.union(domains);
  }
 else   if (type.equals(DOUBLE) && columnDescriptor.getType() == PrimitiveTypeName.FLOAT) {
    List<Domain> domains=new ArrayList<>();
    for (int i=0; i < dictionarySize; i++) {
      domains.add(Domain.singleValue(type,(double)dictionary.decodeToFloat(i)));
    }
    domains.add(Domain.onlyNull(type));
    return Domain.union(domains);
  }
 else   if (type.equals(VARCHAR) && columnDescriptor.getType() == PrimitiveTypeName.BINARY) {
    List<Domain> domains=new ArrayList<>();
    for (int i=0; i < dictionarySize; i++) {
      domains.add(Domain.singleValue(type,Slices.wrappedBuffer(dictionary.decodeToBinary(i).getBytes())));
    }
    domains.add(Domain.onlyNull(type));
    return Domain.union(domains);
  }
  return null;
}
