{
  boolean isNull=HIVE_DEFAULT_DYNAMIC_PARTITION.equals(value);
  Optional<DecimalType> decimalType=getDecimalType(hiveType);
  if (decimalType.isPresent()) {
    if (isNull) {
      return NullableValue.asNull(decimalType.get());
    }
    if (decimalType.get().isShort()) {
      if (value.isEmpty()) {
        return NullableValue.of(decimalType.get(),0L);
      }
      return NullableValue.of(decimalType.get(),shortDecimalPartitionKey(value,decimalType.get(),partitionName));
    }
 else {
      if (value.isEmpty()) {
        return NullableValue.of(decimalType.get(),Decimals.encodeUnscaledValue(BigInteger.ZERO));
      }
      return NullableValue.of(decimalType.get(),longDecimalPartitionKey(value,decimalType.get(),partitionName));
    }
  }
  try {
    if (HIVE_BOOLEAN.equals(hiveType)) {
      if (isNull) {
        return NullableValue.asNull(BOOLEAN);
      }
      if (value.isEmpty()) {
        return NullableValue.of(BOOLEAN,false);
      }
      return NullableValue.of(BOOLEAN,parseBoolean(value));
    }
    if (HIVE_BYTE.equals(hiveType) || HIVE_SHORT.equals(hiveType) || HIVE_INT.equals(hiveType)|| HIVE_LONG.equals(hiveType)) {
      if (isNull) {
        return NullableValue.asNull(BIGINT);
      }
      if (value.isEmpty()) {
        return NullableValue.of(BIGINT,0L);
      }
      return NullableValue.of(BIGINT,parseLong(value));
    }
    if (HIVE_DATE.equals(hiveType)) {
      if (isNull) {
        return NullableValue.asNull(DATE);
      }
      return NullableValue.of(DATE,parseHiveDate(value));
    }
    if (HIVE_TIMESTAMP.equals(hiveType)) {
      if (isNull) {
        return NullableValue.asNull(TIMESTAMP);
      }
      return NullableValue.of(TIMESTAMP,parseHiveTimestamp(value,timeZone));
    }
    if (HIVE_FLOAT.equals(hiveType) || HIVE_DOUBLE.equals(hiveType)) {
      if (isNull) {
        return NullableValue.asNull(DOUBLE);
      }
      if (value.isEmpty()) {
        return NullableValue.of(DOUBLE,0.0);
      }
      return NullableValue.of(DOUBLE,parseDouble(value));
    }
    if (HIVE_STRING.equals(hiveType)) {
      if (isNull) {
        return NullableValue.asNull(VARCHAR);
      }
      return NullableValue.of(VARCHAR,utf8Slice(value));
    }
  }
 catch (  RuntimeException e) {
    throw new PrestoException(HIVE_INVALID_PARTITION_VALUE,format("Invalid partition value '%s' for Hive type [%s] partition key: %s",value,hiveType,partitionName));
  }
  throw new PrestoException(NOT_SUPPORTED,format("Unsupported Hive type [%s] for partition: %s",hiveType,partitionName));
}
