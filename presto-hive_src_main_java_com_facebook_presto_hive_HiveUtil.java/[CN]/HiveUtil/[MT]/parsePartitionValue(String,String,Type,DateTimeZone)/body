{
  boolean isNull=HIVE_DEFAULT_DYNAMIC_PARTITION.equals(value);
  if (type instanceof DecimalType) {
    DecimalType decimalType=(DecimalType)type;
    if (isNull) {
      return NullableValue.asNull(decimalType);
    }
    if (decimalType.isShort()) {
      if (value.isEmpty()) {
        return NullableValue.of(decimalType,0L);
      }
      return NullableValue.of(decimalType,shortDecimalPartitionKey(value,decimalType,partitionName));
    }
 else {
      if (value.isEmpty()) {
        return NullableValue.of(decimalType,Decimals.encodeUnscaledValue(BigInteger.ZERO));
      }
      return NullableValue.of(decimalType,longDecimalPartitionKey(value,decimalType,partitionName));
    }
  }
  if (BOOLEAN.equals(type)) {
    if (isNull) {
      return NullableValue.asNull(BOOLEAN);
    }
    if (value.isEmpty()) {
      return NullableValue.of(BOOLEAN,false);
    }
    return NullableValue.of(BOOLEAN,booleanPartitionKey(value,partitionName));
  }
  if (INTEGER.equals(type)) {
    if (isNull) {
      return NullableValue.asNull(INTEGER);
    }
    if (value.isEmpty()) {
      return NullableValue.of(INTEGER,0L);
    }
    return NullableValue.of(INTEGER,integerPartitionKey(value,partitionName));
  }
  if (BIGINT.equals(type)) {
    if (isNull) {
      return NullableValue.asNull(BIGINT);
    }
    if (value.isEmpty()) {
      return NullableValue.of(BIGINT,0L);
    }
    return NullableValue.of(BIGINT,bigintPartitionKey(value,partitionName));
  }
  if (DATE.equals(type)) {
    if (isNull) {
      return NullableValue.asNull(DATE);
    }
    return NullableValue.of(DATE,datePartitionKey(value,partitionName));
  }
  if (TIMESTAMP.equals(type)) {
    if (isNull) {
      return NullableValue.asNull(TIMESTAMP);
    }
    return NullableValue.of(TIMESTAMP,timestampPartitionKey(value,timeZone,partitionName));
  }
  if (DOUBLE.equals(type)) {
    if (isNull) {
      return NullableValue.asNull(DOUBLE);
    }
    if (value.isEmpty()) {
      return NullableValue.of(DOUBLE,0.0);
    }
    return NullableValue.of(DOUBLE,doublePartitionKey(value,partitionName));
  }
  if (type instanceof VarcharType) {
    if (isNull) {
      return NullableValue.asNull(type);
    }
    return NullableValue.of(type,varcharPartitionKey(value,partitionName,type));
  }
  throw new PrestoException(NOT_SUPPORTED,format("Unsupported Type [%s] for partition: %s",type,partitionName));
}
