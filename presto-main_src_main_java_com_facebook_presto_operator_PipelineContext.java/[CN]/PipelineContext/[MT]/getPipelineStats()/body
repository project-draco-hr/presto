{
  List<DriverContext> driverContexts=ImmutableList.copyOf(this.drivers);
  int totalDriers=completedDrivers.get() + driverContexts.size();
  int queuedDrivers=0;
  int queuedPartitionedDrivers=0;
  int runningDrivers=0;
  int runningPartitionedDrivers=0;
  int completedDrivers=this.completedDrivers.get();
  Distribution queuedTime=new Distribution(this.queuedTime);
  Distribution elapsedTime=new Distribution(this.elapsedTime);
  long totalScheduledTime=this.totalScheduledTime.get();
  long totalCpuTime=this.totalCpuTime.get();
  long totalUserTime=this.totalUserTime.get();
  long totalBlockedTime=this.totalBlockedTime.get();
  long rawInputDataSize=this.rawInputDataSize.getTotalCount();
  long rawInputPositions=this.rawInputPositions.getTotalCount();
  long processedInputDataSize=this.processedInputDataSize.getTotalCount();
  long processedInputPositions=this.processedInputPositions.getTotalCount();
  long outputDataSize=this.outputDataSize.getTotalCount();
  long outputPositions=this.outputPositions.getTotalCount();
  List<DriverStats> drivers=new ArrayList<>();
  Multimap<Integer,OperatorStats> runningOperators=ArrayListMultimap.create();
  for (  DriverContext driverContext : driverContexts) {
    DriverStats driverStats=driverContext.getDriverStats();
    drivers.add(driverStats);
    if (driverStats.getStartTime() == null) {
      queuedDrivers++;
      if (driverContext.isPartitioned()) {
        queuedPartitionedDrivers++;
      }
    }
 else {
      runningDrivers++;
      if (driverContext.isPartitioned()) {
        runningPartitionedDrivers++;
      }
    }
    queuedTime.add(driverStats.getQueuedTime().roundTo(NANOSECONDS));
    elapsedTime.add(driverStats.getElapsedTime().roundTo(NANOSECONDS));
    totalScheduledTime+=driverStats.getTotalScheduledTime().roundTo(NANOSECONDS);
    totalCpuTime+=driverStats.getTotalCpuTime().roundTo(NANOSECONDS);
    totalUserTime+=driverStats.getTotalUserTime().roundTo(NANOSECONDS);
    totalBlockedTime+=driverStats.getTotalBlockedTime().roundTo(NANOSECONDS);
    List<OperatorStats> operators=ImmutableList.copyOf(transform(driverContext.getOperatorContexts(),operatorStatsGetter()));
    for (    OperatorStats operator : operators) {
      runningOperators.put(operator.getOperatorId(),operator);
    }
    rawInputDataSize+=driverStats.getRawInputDataSize().toBytes();
    rawInputPositions+=driverStats.getRawInputPositions();
    processedInputDataSize+=driverStats.getProcessedInputDataSize().toBytes();
    processedInputPositions+=driverStats.getProcessedInputPositions();
    outputDataSize+=driverStats.getOutputDataSize().toBytes();
    outputPositions+=driverStats.getOutputPositions();
  }
  TreeMap<Integer,OperatorStats> operatorSummaries=new TreeMap<>(this.operatorSummaries);
  for (  Entry<Integer,OperatorStats> entry : runningOperators.entries()) {
    OperatorStats current=operatorSummaries.get(entry.getKey());
    if (current == null) {
      current=entry.getValue();
    }
 else {
      current=current.add(entry.getValue());
    }
    operatorSummaries.put(entry.getKey(),current);
  }
  return new PipelineStats(inputPipeline,outputPipeline,totalDriers,queuedDrivers,queuedPartitionedDrivers,runningDrivers,runningPartitionedDrivers,completedDrivers,new DataSize(memoryReservation.get(),BYTE).convertToMostSuccinctDataSize(),queuedTime.snapshot(),elapsedTime.snapshot(),new Duration(totalScheduledTime,NANOSECONDS).convertToMostSuccinctTimeUnit(),new Duration(totalCpuTime,NANOSECONDS).convertToMostSuccinctTimeUnit(),new Duration(totalUserTime,NANOSECONDS).convertToMostSuccinctTimeUnit(),new Duration(totalBlockedTime,NANOSECONDS).convertToMostSuccinctTimeUnit(),new DataSize(rawInputDataSize,BYTE).convertToMostSuccinctDataSize(),rawInputPositions,new DataSize(processedInputDataSize,BYTE).convertToMostSuccinctDataSize(),processedInputPositions,new DataSize(outputDataSize,BYTE).convertToMostSuccinctDataSize(),outputPositions,ImmutableList.copyOf(operatorSummaries.values()),drivers);
}
