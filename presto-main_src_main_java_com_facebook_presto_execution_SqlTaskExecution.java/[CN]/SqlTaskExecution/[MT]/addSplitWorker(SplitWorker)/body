{
  splitWorkers.add(new WeakReference<>(worker));
  pendingWorkerCount.incrementAndGet();
  taskOutput.getStats().addSplits(1);
  final ListenableFutureTask<?> workerFutureTask=ListenableFutureTask.create(worker);
  unfinishedWorkerTasks.addFirst(workerFutureTask);
  shardExecutor.submit(workerFutureTask);
  Futures.addCallback(workerFutureTask,new FutureCallback<Object>(){
    @Override public void onSuccess(    Object result){
      try (SetThreadName setThreadName=new SetThreadName("Task-%s",taskOutput.getTaskId())){
        pendingWorkerCount.decrementAndGet();
        checkTaskCompletion();
        unfinishedWorkerTasks.removeFirstOccurrence(workerFutureTask);
      }
     }
    @Override public void onFailure(    Throwable t){
      try (SetThreadName setThreadName=new SetThreadName("Task-%s",taskOutput.getTaskId())){
        taskOutput.queryFailed(t);
        pendingWorkerCount.decrementAndGet();
        unfinishedWorkerTasks.removeFirstOccurrence(workerFutureTask);
        queryMonitor.splitCompletionEvent(taskOutput.getTaskInfo(false),worker.getOperatorStats().snapshot());
      }
     }
  }
);
}
