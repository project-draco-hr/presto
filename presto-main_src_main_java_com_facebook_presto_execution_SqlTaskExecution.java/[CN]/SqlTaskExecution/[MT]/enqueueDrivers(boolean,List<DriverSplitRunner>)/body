{
  List<ListenableFuture<?>> finishedFutures=taskExecutor.enqueueSplits(taskHandle,forceRunSplit,runners);
  checkState(finishedFutures.size() == runners.size(),"Expected %s futures but got %s",runners.size(),finishedFutures.size());
  remainingDrivers.addAndGet(finishedFutures.size());
  for (int i=0; i < finishedFutures.size(); i++) {
    ListenableFuture<?> finishedFuture=finishedFutures.get(i);
    final DriverSplitRunner splitRunner=runners.get(i);
    Futures.addCallback(finishedFuture,new FutureCallback<Object>(){
      @Override public void onSuccess(      Object result){
        try (SetThreadName ignored=new SetThreadName("Task-%s",taskId)){
          remainingDrivers.decrementAndGet();
          checkTaskCompletion();
          queryMonitor.splitCompletionEvent(taskId,getDriverStats());
        }
       }
      @Override public void onFailure(      Throwable cause){
        try (SetThreadName ignored=new SetThreadName("Task-%s",taskId)){
          taskStateMachine.failed(cause);
          remainingDrivers.decrementAndGet();
          queryMonitor.splitFailedEvent(taskId,getDriverStats(),cause);
        }
       }
      private DriverStats getDriverStats(){
        DriverContext driverContext=splitRunner.getDriverContext();
        DriverStats driverStats;
        if (driverContext != null) {
          driverStats=driverContext.getDriverStats();
        }
 else {
          driverStats=new DriverStats();
        }
        return driverStats;
      }
    }
,notificationExecutor);
  }
}
