{
  SplitWorker worker=new SplitWorker(session,taskOutput,fragment,getSourceHashProviderFactory(),metadata,maxOperatorMemoryUsage,dataStreamProvider,exchangeOperatorFactory,queryMonitor);
  if (splits != null) {
    worker.addSplits(splits);
  }
  for (  Map.Entry<PlanNodeId,? extends Split> entry : unpartitionedSources.entries()) {
    Map<PlanNodeId,? extends Split> unpartitionedSplit=ImmutableMap.of(entry.getKey(),entry.getValue());
    worker.addSplits(unpartitionedSplit);
  }
  splitWorkers.add(new WeakReference<>(worker));
  pendingWorkerCount.incrementAndGet();
  taskOutput.getStats().addSplits(1);
  final ListenableFutureTask<?> workerFutureTask=ListenableFutureTask.create(worker);
  Futures.addCallback(workerFutureTask,new FutureCallback<Object>(){
    @Override public void onSuccess(    Object result){
      pendingWorkerCount.decrementAndGet();
      checkTaskCompletion();
      unfinishedWorkerTasks.removeFirstOccurrence(workerFutureTask);
    }
    @Override public void onFailure(    Throwable t){
      taskOutput.queryFailed(t);
      pendingWorkerCount.decrementAndGet();
      unfinishedWorkerTasks.removeFirstOccurrence(workerFutureTask);
    }
  }
);
  unfinishedWorkerTasks.addFirst(workerFutureTask);
  shardExecutor.submit(workerFutureTask);
}
