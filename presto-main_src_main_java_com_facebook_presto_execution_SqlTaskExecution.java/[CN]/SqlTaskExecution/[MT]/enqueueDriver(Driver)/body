{
  drivers.add(new WeakReference<>(driver));
  pendingWorkerCount.incrementAndGet();
  final ListenableFuture<?> finishedFuture=taskExecutor.addSplit(taskHandle,new SplitRunner(){
    @Override public boolean isFinished(){
      return driver.isFinished();
    }
    @Override public ListenableFuture<?> process() throws Exception {
      if (driver == null) {
        driver=buildDriver();
      }
      return driver.process();
    }
  }
);
  Futures.addCallback(finishedFuture,new FutureCallback<Object>(){
    @Override public void onSuccess(    Object result){
      try (SetThreadName setThreadName=new SetThreadName("Task-%s",taskId)){
        pendingWorkerCount.decrementAndGet();
        checkTaskCompletion();
        queryMonitor.splitCompletionEvent(taskId,driver.getDriverContext().getDriverStats());
      }
     }
    @Override public void onFailure(    Throwable cause){
      try (SetThreadName setThreadName=new SetThreadName("Task-%s",taskId)){
        taskStateMachine.failed(cause);
        pendingWorkerCount.decrementAndGet();
        queryMonitor.splitCompletionEvent(taskId,driver.getDriverContext().getDriverStats());
      }
     }
  }
);
}
