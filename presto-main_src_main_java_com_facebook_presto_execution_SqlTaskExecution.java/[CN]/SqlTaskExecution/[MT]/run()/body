{
  try {
    final SourceHashProviderFactory sourceHashProviderFactory=new SourceHashProviderFactory();
    if (splits.size() <= 1) {
      PlanFragmentSource split=splits.isEmpty() ? null : splits.get(0);
      SplitWorker worker=new SplitWorker(taskOutput,fragment,split,exchangeSources,sourceHashProviderFactory,sourceProvider,metadata);
      worker.call();
    }
 else {
      List<Callable<Void>> splitTasks=ImmutableList.copyOf(Lists.transform(this.splits,new Function<PlanFragmentSource,Callable<Void>>(){
        @Override public Callable<Void> apply(        PlanFragmentSource split){
          return new SplitWorker(taskOutput,fragment,split,exchangeSources,sourceHashProviderFactory,sourceProvider,metadata);
        }
      }
));
      List<Future<Void>> results=shardExecutor.processBatch(splitTasks);
      for (      Callable<Void> worker : Lists.reverse(splitTasks)) {
        worker.call();
      }
      checkQueryResults(results);
    }
    taskOutput.finish();
  }
 catch (  InterruptedException e) {
    Thread.currentThread().interrupt();
    taskOutput.queryFailed(e);
    throw Throwables.propagate(e);
  }
catch (  Throwable e) {
    taskOutput.queryFailed(e);
    throw Throwables.propagate(e);
  }
}
