{
  try (SetThreadName setThreadName=new SetThreadName("Task-%s",taskId)){
    this.taskId=checkNotNull(taskId,"taskId is null");
    this.taskExecutor=checkNotNull(taskExecutor,"driverExecutor is null");
    this.taskMemoryManager=new TaskMemoryManager(checkNotNull(maxTaskMemoryUsage,"maxTaskMemoryUsage is null"),checkNotNull(operatorPreAllocatedMemory,"operatorPreAllocatedMemory is null"));
    this.queryMonitor=checkNotNull(queryMonitor,"queryMonitor is null");
    this.taskOutput=new TaskOutput(taskId,checkNotNull(location,"location is null"),checkNotNull(maxBufferSize,"maxBufferSize is null"),checkNotNull(notificationExecutor,"notificationExecutor is null"),checkNotNull(globalStats,"globalStats is null"));
    taskHandle=taskExecutor.addTask(taskId);
    taskOutput.addStateChangeListener(new StateChangeListener<TaskState>(){
      @Override public void stateChanged(      TaskState taskState){
        if (taskState.isDone()) {
          SqlTaskExecution.this.taskExecutor.removeTask(taskHandle);
        }
      }
    }
);
    NewLocalExecutionPlan localExecutionPlan=planner.plan(session,fragment.getRoot(),fragment.getSymbols(),new TaskOutputFactory(taskOutput));
    List<DriverFactory> driverFactories=localExecutionPlan.getDriverFactories();
    DriverFactory partitionedDriverFactory=null;
    List<Driver> unpartitionedDrivers=new ArrayList<>();
    for (    DriverFactory driverFactory : driverFactories) {
      if (driverFactory.getSourceIds().contains(fragment.getPartitionedSource())) {
        partitionedDriverFactory=driverFactory;
      }
 else {
        Driver driver=driverFactory.createDriver(taskOutput,taskMemoryManager);
        unpartitionedDrivers.add(driver);
      }
    }
    this.unpartitionedDrivers=ImmutableList.copyOf(unpartitionedDrivers);
    if (fragment.isPartitioned()) {
      this.partitionedSourceId=fragment.getPartitionedSource();
      this.partitionedDriverFactory=partitionedDriverFactory;
    }
 else {
      this.partitionedSourceId=null;
      this.partitionedDriverFactory=null;
    }
  }
 }
