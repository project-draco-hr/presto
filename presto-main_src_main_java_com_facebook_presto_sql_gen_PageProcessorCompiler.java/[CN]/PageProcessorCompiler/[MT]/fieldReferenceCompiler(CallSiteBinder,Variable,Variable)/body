{
  return new RowExpressionVisitor<CompilerContext,ByteCodeNode>(){
    @Override public ByteCodeNode visitInputReference(    InputReferenceExpression node,    CompilerContext context){
      int field=node.getField();
      Type type=node.getType();
      Class<?> javaType=type.getJavaType();
      Block isNullCheck=new Block(context).setDescription(format("block_%d.get%s()",field,type)).getVariable("block_" + field).getVariable(positionVariable).invokeInterface(com.facebook.presto.spi.block.Block.class,"isNull",boolean.class,int.class);
      Block isNull=new Block(context).putVariable(wasNullVariable,true).pushJavaDefault(javaType);
      MethodHandle target;
      String methodName="get" + Primitives.wrap(javaType).getSimpleName();
      try {
        target=MethodHandles.lookup().findVirtual(type.getClass(),methodName,MethodType.methodType(javaType,com.facebook.presto.spi.block.Block.class,int.class));
      }
 catch (      ReflectiveOperationException e) {
        throw Throwables.propagate(e);
      }
      Block isNotNull=new Block(context).getVariable("block_" + field).getVariable(positionVariable).append(invoke(context,callSiteBinder.bind(target.bindTo(type)),methodName));
      return new IfStatement(context,isNullCheck,isNull,isNotNull);
    }
    @Override public ByteCodeNode visitCall(    CallExpression call,    CompilerContext context){
      throw new UnsupportedOperationException("not yet implemented");
    }
    @Override public ByteCodeNode visitConstant(    ConstantExpression literal,    CompilerContext context){
      throw new UnsupportedOperationException("not yet implemented");
    }
  }
;
}
