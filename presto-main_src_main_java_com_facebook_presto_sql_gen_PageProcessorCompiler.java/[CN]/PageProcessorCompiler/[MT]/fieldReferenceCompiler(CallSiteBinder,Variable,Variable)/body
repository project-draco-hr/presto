{
  return new RowExpressionVisitor<Scope,ByteCodeNode>(){
    @Override public ByteCodeNode visitInputReference(    InputReferenceExpression node,    Scope scope){
      int field=node.getField();
      Type type=node.getType();
      Variable block=scope.getVariable("block_" + field);
      Class<?> javaType=type.getJavaType();
      if (!javaType.isPrimitive() && javaType != Slice.class) {
        javaType=Object.class;
      }
      IfStatement ifStatement=new IfStatement();
      ifStatement.condition().setDescription(format("block_%d.get%s()",field,type)).append(block).getVariable(positionVariable).invokeInterface(Block.class,"isNull",boolean.class,int.class);
      ifStatement.ifTrue().putVariable(wasNullVariable,true).pushJavaDefault(javaType);
      String methodName="get" + Primitives.wrap(javaType).getSimpleName();
      ifStatement.ifFalse().append(loadConstant(callSiteBinder.bind(type,Type.class))).append(block).getVariable(positionVariable).invokeInterface(Type.class,methodName,javaType,Block.class,int.class);
      return ifStatement;
    }
    @Override public ByteCodeNode visitCall(    CallExpression call,    Scope scope){
      throw new UnsupportedOperationException("not yet implemented");
    }
    @Override public ByteCodeNode visitConstant(    ConstantExpression literal,    Scope scope){
      throw new UnsupportedOperationException("not yet implemented");
    }
  }
;
}
