{
  Parameter session=arg("session",ConnectorSession.class);
  Parameter page=arg("page",Page.class);
  Parameter types=arg("types",List.class);
  MethodDefinition method=classDefinition.declareMethod(a(PUBLIC),"processColumnarDictionary",type(Page.class),session,page,types);
  Scope scope=method.getScope();
  ByteCodeBlock body=method.getBody();
  Variable thisVariable=method.getThis();
  Variable selectedPositions=scope.declareVariable("selectedPositions",body,thisVariable.invoke("filterPage",int[].class,session,page));
  Variable cardinality=scope.declareVariable("cardinality",body,selectedPositions.length());
  body.comment("if no rows selected return null").append(new IfStatement().condition(equal(cardinality,constantInt(0))).ifTrue(constantNull(Page.class).ret()));
  if (projectColumnarMethods.isEmpty()) {
    body.append(newInstance(Page.class,cardinality,newArray(type(Block[].class),0)).ret());
    return;
  }
  Variable pageBuilder=scope.declareVariable("pageBuilder",body,newInstance(PageBuilder.class,cardinality,types));
  body.append(page.set(thisVariable.invoke("getNonLazyPage",Page.class,page)));
  List<Integer> allInputChannels=getInputChannels(concat(projections,ImmutableList.of(filter)));
  ImmutableMap.Builder<Integer,Variable> builder=ImmutableMap.builder();
  for (  int channel : allInputChannels) {
    Variable blockVariable=scope.declareVariable("block_" + channel,body,page.invoke("getBlock",Block.class,constantInt(channel)));
    builder.put(channel,blockVariable);
  }
  Map<Integer,Variable> channelBlocks=builder.build();
  Map<RowExpression,List<Variable>> expressionInputBlocks=getExpressionInputBlocks(projections,filter,channelBlocks);
  Variable outputBlocks=scope.declareVariable("outputBlocks",body,newArray(type(Block[].class),projections.size()));
  Variable positionCount=scope.declareVariable("positionCount",body,page.invoke("getPositionCount",int.class));
  for (int projectionIndex=0; projectionIndex < projections.size(); projectionIndex++) {
    RowExpression projection=projections.get(projectionIndex);
    List<ByteCodeExpression> params=ImmutableList.<ByteCodeExpression>builder().add(session).addAll(expressionInputBlocks.get(projection)).add(positionCount).add(selectedPositions).add(pageBuilder).add(constantInt(projectionIndex)).build();
    if (expressionInputBlocks.get(projection).size() != 1) {
      ByteCodeExpression outputBlock=thisVariable.invoke(projectColumnarMethods.get(projectionIndex),params);
      body.append(outputBlocks.setElement(projectionIndex,outputBlock));
      continue;
    }
    Variable inputBlock=Iterables.getOnlyElement(expressionInputBlocks.get(projection));
    IfStatement ifStatement=new IfStatement().condition(inputBlock.instanceOf(DictionaryBlock.class)).ifTrue(outputBlocks.setElement(projectionIndex,thisVariable.invoke(projectDictionaryMethods.get(projectionIndex),params))).ifFalse(outputBlocks.setElement(projectionIndex,thisVariable.invoke(projectColumnarMethods.get(projectionIndex),params)));
    body.append(ifStatement);
  }
  body.append(newInstance(Page.class,cardinality,outputBlocks).ret());
}
