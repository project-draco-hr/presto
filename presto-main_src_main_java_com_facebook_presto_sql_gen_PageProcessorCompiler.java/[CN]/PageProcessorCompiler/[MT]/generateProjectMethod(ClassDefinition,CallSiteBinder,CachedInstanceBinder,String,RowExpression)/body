{
  Map<CallExpression,MethodDefinition> tryMethodMap=generateTryMethods(classDefinition,callSiteBinder,cachedInstanceBinder,projection,methodName);
  Parameter session=arg("session",ConnectorSession.class);
  List<Parameter> blocks=toBlockParameters(getInputChannels(projection));
  Parameter position=arg("position",int.class);
  Parameter output=arg("output",BlockBuilder.class);
  List<Parameter> expressionInputs=ImmutableList.<Parameter>builder().add(session).addAll(blocks).add(position).build();
  MethodDefinition method=classDefinition.declareMethod(a(PUBLIC),methodName,type(void.class),ImmutableList.<Parameter>builder().addAll(expressionInputs).add(output).build());
  method.comment("Projection: %s",projection.toString());
  Scope scope=method.getScope();
  BytecodeBlock body=method.getBody();
  Variable wasNullVariable=scope.declareVariable("wasNull",body,constantFalse());
  BytecodeExpressionVisitor visitor=new BytecodeExpressionVisitor(callSiteBinder,cachedInstanceBinder,fieldReferenceCompiler(callSiteBinder,position,wasNullVariable),metadata.getFunctionRegistry(),ImmutableList.<Variable>builder().addAll(expressionInputs).add(wasNullVariable).build(),tryMethodMap);
  body.getVariable(output).comment("evaluate projection: " + projection.toString()).append(projection.accept(visitor,scope)).append(generateWrite(callSiteBinder,scope,wasNullVariable,projection.getType())).ret();
  return method;
}
