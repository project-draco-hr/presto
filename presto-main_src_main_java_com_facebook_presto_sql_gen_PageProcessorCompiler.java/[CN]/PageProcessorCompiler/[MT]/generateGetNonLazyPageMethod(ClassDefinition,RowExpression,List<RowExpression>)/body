{
  Parameter page=arg("page",Page.class);
  MethodDefinition method=classDefinition.declareMethod(a(PRIVATE),"getNonLazyPage",type(Page.class),page);
  Scope scope=method.getScope();
  BytecodeBlock body=method.getBody();
  List<Integer> allInputChannels=getInputChannels(concat(projections,ImmutableList.of(filter)));
  if (allInputChannels.isEmpty()) {
    body.append(page.ret());
    return;
  }
  Variable index=scope.declareVariable(int.class,"index");
  Variable channelCount=scope.declareVariable("channelCount",body,page.invoke("getChannelCount",int.class));
  Variable blocks=scope.declareVariable("blocks",body,newArray(type(Block[].class),channelCount));
  Variable inputBlock=scope.declareVariable(Block.class,"inputBlock");
  Variable positionCount=scope.declareVariable("positionCount",body,page.invoke("getPositionCount",int.class));
  Variable createNewPage=scope.declareVariable("createNewPage",body,constantFalse());
  ForLoop forLoop=new ForLoop().initialize(index.set(constantInt(0))).condition(lessThan(index,channelCount)).update(index.increment()).body(new BytecodeBlock().append(inputBlock.set(page.invoke("getBlock",Block.class,index))).append(new IfStatement().condition(inputBlock.instanceOf(LazyBlock.class)).ifTrue(new BytecodeBlock().append(blocks.setElement(index,inputBlock.cast(LazyBlock.class).invoke("getBlock",Block.class))).append(createNewPage.set(constantTrue()))).ifFalse(blocks.setElement(index,inputBlock))));
  body.append(forLoop);
  body.append(new IfStatement().condition(createNewPage).ifTrue(page.set(newInstance(Page.class,positionCount,blocks))));
  body.append(page.ret());
}
