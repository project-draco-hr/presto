{
  Parameter session=arg("session",ConnectorSession.class);
  Parameter page=arg("page",Page.class);
  Parameter types=arg("types",List.class);
  MethodDefinition method=classDefinition.declareMethod(a(PUBLIC),"processColumnar",type(Page.class),session,page,types);
  Scope scope=method.getScope();
  ByteCodeBlock body=method.getBody();
  Variable thisVariable=method.getThis();
  Variable selectedPositions=scope.declareVariable("selectedPositions",body,thisVariable.invoke("filterPage",int[].class,session,page));
  Variable cardinality=scope.declareVariable("cardinality",body,selectedPositions.length());
  body.comment("if no rows selected return null").append(new IfStatement().condition(equal(cardinality,constantInt(0))).ifTrue(constantNull(Page.class).ret()));
  if (projections.isEmpty()) {
    body.append(newInstance(Page.class,cardinality,newArray(type(Block[].class),0)).ret());
    return;
  }
  Variable pageBuilder=scope.declareVariable("pageBuilder",body,newInstance(PageBuilder.class,cardinality,types));
  Variable outputBlocks=scope.declareVariable("outputBlocks",body,newArray(type(Block[].class),projections.size()));
  for (int projectionIndex=0; projectionIndex < projections.size(); projectionIndex++) {
    List<ByteCodeExpression> params=ImmutableList.<ByteCodeExpression>builder().add(session).add(page).add(selectedPositions).add(pageBuilder).add(constantInt(projectionIndex)).build();
    body.append(outputBlocks.setElement(projectionIndex,thisVariable.invoke(projectColumnarMethods.get(projectionIndex),params)));
  }
  body.append(newInstance(Page.class,cardinality,outputBlocks).ret());
}
