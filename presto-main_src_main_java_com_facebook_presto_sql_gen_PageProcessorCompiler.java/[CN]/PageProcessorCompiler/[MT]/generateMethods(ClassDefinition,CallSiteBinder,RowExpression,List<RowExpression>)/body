{
  CachedInstanceBinder cachedInstanceBinder=new CachedInstanceBinder(classDefinition,callSiteBinder);
  ImmutableList.Builder<MethodDefinition> projectMethods=ImmutableList.builder();
  ImmutableList.Builder<MethodDefinition> projectColumnarMethods=ImmutableList.builder();
  ImmutableList.Builder<MethodDefinition> projectDictionaryMethods=ImmutableList.builder();
  for (int i=0; i < projections.size(); i++) {
    MethodDefinition project=generateProjectMethod(classDefinition,callSiteBinder,cachedInstanceBinder,"project_" + i,projections.get(i));
    MethodDefinition projectColumnar=generateProjectColumnarMethod(classDefinition,callSiteBinder,"projectColumnar_" + i,projections.get(i),project);
    MethodDefinition projectDictionary=generateProjectDictionaryMethod(classDefinition,"projectDictionary_" + i,projections.get(i),project,projectColumnar);
    projectMethods.add(project);
    projectColumnarMethods.add(projectColumnar);
    projectDictionaryMethods.add(projectDictionary);
  }
  List<MethodDefinition> projectMethodDefinitions=projectMethods.build();
  List<MethodDefinition> projectColumnarMethodDefinitions=projectColumnarMethods.build();
  List<MethodDefinition> projectDictionaryMethodDefinitions=projectDictionaryMethods.build();
  generateProcessMethod(classDefinition,filter,projections,projectMethodDefinitions);
  generateGetNonLazyPageMethod(classDefinition,filter,projections);
  generateProcessColumnarMethod(classDefinition,projections,projectColumnarMethodDefinitions);
  generateProcessColumnarDictionaryMethod(classDefinition,projections,projectDictionaryMethodDefinitions);
  generateFilterPageMethod(classDefinition,filter);
  generateFilterMethod(classDefinition,callSiteBinder,cachedInstanceBinder,filter);
  generateConstructor(classDefinition,cachedInstanceBinder,projections.size());
}
