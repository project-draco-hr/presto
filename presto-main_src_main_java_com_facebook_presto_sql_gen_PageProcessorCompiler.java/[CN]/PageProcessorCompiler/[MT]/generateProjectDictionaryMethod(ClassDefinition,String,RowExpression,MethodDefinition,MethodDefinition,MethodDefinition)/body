{
  Parameter session=arg("session",ConnectorSession.class);
  Parameter page=arg("page",Page.class);
  Parameter selectedPositions=arg("selectedPositions",int[].class);
  Parameter pageBuilder=arg("pageBuilder",PageBuilder.class);
  Parameter projectionIndex=arg("projectionIndex",int.class);
  Parameter dictionarySourceIds=arg("dictionarySourceIds",Map.class);
  List<Parameter> params=ImmutableList.<Parameter>builder().add(session).add(page).add(selectedPositions).add(pageBuilder).add(projectionIndex).add(dictionarySourceIds).build();
  List<Parameter> columnarParams=ImmutableList.<Parameter>builder().add(session).add(page).add(selectedPositions).add(pageBuilder).add(projectionIndex).build();
  MethodDefinition method=classDefinition.declareMethod(a(PRIVATE),methodName,type(Block.class),params);
  BytecodeBlock body=method.getBody();
  Scope scope=method.getScope();
  Variable thisVariable=method.getThis();
  List<Integer> inputChannels=getInputChannels(projection);
  if (inputChannels.size() != 1) {
    body.append(thisVariable.invoke(projectColumnar,columnarParams).ret());
    return method;
  }
  Variable inputBlock=scope.declareVariable("inputBlock",body,page.invoke("getBlock",Block.class,constantInt(getOnlyElement(inputChannels))));
  body.append(new IfStatement().condition(inputBlock.instanceOf(RunLengthEncodedBlock.class)).ifTrue(thisVariable.invoke(projectRLE,columnarParams).ret()));
  body.append(new IfStatement().condition(inputBlock.instanceOf(DictionaryBlock.class)).ifFalse(thisVariable.invoke(projectColumnar,columnarParams).ret()));
  Variable blockBuilder=scope.declareVariable("blockBuilder",body,pageBuilder.invoke("getBlockBuilder",BlockBuilder.class,projectionIndex));
  Variable cardinality=scope.declareVariable("cardinality",body,selectedPositions.length());
  Variable dictionary=scope.declareVariable(Block.class,"dictionary");
  Variable ids=scope.declareVariable(Slice.class,"ids");
  Variable dictionaryCount=scope.declareVariable(int.class,"dictionaryCount");
  Variable inputSourceId=scope.declareVariable(DictionaryId.class,"inputSourceId");
  Variable outputSourceId=scope.declareVariable(DictionaryId.class,"outputSourceId");
  Variable outputDictionary=scope.declareVariable(Block.class,"outputDictionary");
  Variable outputIds=scope.declareVariable(int[].class,"outputIds");
  BytecodeExpression inputDictionaries=thisVariable.getField("inputDictionaries",Block[].class);
  BytecodeExpression outputDictionaries=thisVariable.getField("outputDictionaries",Block[].class);
  Variable position=scope.declareVariable("position",body,constantInt(0));
  BytecodeExpression castDictionaryBlock=inputBlock.cast(DictionaryBlock.class);
  body.comment("Extract dictionary, ids, positionCount and dictionarySourceId").append(dictionary.set(castDictionaryBlock.invoke("getDictionary",Block.class))).append(ids.set(castDictionaryBlock.invoke("getIds",Slice.class))).append(dictionaryCount.set(dictionary.invoke("getPositionCount",int.class))).append(inputSourceId.set(castDictionaryBlock.invoke("getDictionarySourceId",DictionaryId.class)));
  BytecodeBlock projectDictionary=new BytecodeBlock().comment("Project dictionary").append(new ForLoop().initialize(position.set(constantInt(0))).condition(lessThan(position,dictionaryCount)).update(position.increment()).body(invokeProject(thisVariable,session,ImmutableList.of(dictionary),position,pageBuilder,projectionIndex,project))).append(outputDictionary.set(blockBuilder.invoke("build",Block.class))).append(inputDictionaries.setElement(projectionIndex,dictionary)).append(outputDictionaries.setElement(projectionIndex,outputDictionary));
  body.comment("Use processed dictionary, if available, else project it").append(new IfStatement().condition(equal(inputDictionaries.getElement(projectionIndex),dictionary)).ifTrue(outputDictionary.set(outputDictionaries.getElement(projectionIndex))).ifFalse(projectDictionary));
  body.comment("Filter ids").append(outputIds.set(newArray(type(int[].class),cardinality))).append(new ForLoop().initialize(position.set(constantInt(0))).condition(lessThan(position,cardinality)).update(position.increment()).body(outputIds.setElement(position,castDictionaryBlock.invoke("getId",int.class,selectedPositions.getElement(position)))));
  body.append(outputSourceId.set(dictionarySourceIds.invoke("get",Object.class,inputSourceId.cast(Object.class)).cast(DictionaryId.class)));
  body.append(new IfStatement().condition(equal(outputSourceId,constantNull(DictionaryId.class))).ifTrue(new BytecodeBlock().append(outputSourceId.set(invokeStatic(DictionaryId.class,"randomDictionaryId",DictionaryId.class))).append(dictionarySourceIds.invoke("put",Object.class,inputSourceId.cast(Object.class),outputSourceId.cast(Object.class))).pop()));
  BytecodeExpression idsSlice=invokeStatic(Slices.class,"wrappedIntArray",Slice.class,outputIds);
  body.append(newInstance(DictionaryBlock.class,cardinality,outputDictionary,idsSlice,constantFalse(),outputSourceId).cast(Block.class).ret());
  return method;
}
