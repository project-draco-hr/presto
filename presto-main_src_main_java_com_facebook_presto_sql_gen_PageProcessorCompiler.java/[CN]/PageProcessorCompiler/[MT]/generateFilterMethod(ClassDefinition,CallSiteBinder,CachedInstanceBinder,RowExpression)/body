{
  Map<CallExpression,MethodDefinition> tryMethodMap=generateTryMethods(classDefinition,callSiteBinder,cachedInstanceBinder,filter,"filter");
  Parameter session=arg("session",ConnectorSession.class);
  List<Parameter> blocks=toBlockParameters(getInputChannels(filter));
  Parameter position=arg("position",int.class);
  List<Parameter> expressionInputs=ImmutableList.<Parameter>builder().add(session).addAll(blocks).add(position).build();
  MethodDefinition method=classDefinition.declareMethod(a(PUBLIC),"filter",type(boolean.class),expressionInputs);
  method.comment("Filter: %s",filter.toString());
  BytecodeBlock body=method.getBody();
  Scope scope=method.getScope();
  Variable wasNullVariable=scope.declareVariable("wasNull",body,constantFalse());
  BytecodeExpressionVisitor visitor=new BytecodeExpressionVisitor(callSiteBinder,cachedInstanceBinder,fieldReferenceCompiler(callSiteBinder,position,wasNullVariable),metadata.getFunctionRegistry(),ImmutableList.<Variable>builder().addAll(expressionInputs).add(wasNullVariable).build(),tryMethodMap);
  BytecodeNode visitorBody=filter.accept(visitor,scope);
  Variable result=scope.declareVariable(boolean.class,"result");
  body.append(visitorBody).putVariable(result).append(new IfStatement().condition(wasNullVariable).ifTrue(constantFalse().ret()).ifFalse(result.ret()));
}
