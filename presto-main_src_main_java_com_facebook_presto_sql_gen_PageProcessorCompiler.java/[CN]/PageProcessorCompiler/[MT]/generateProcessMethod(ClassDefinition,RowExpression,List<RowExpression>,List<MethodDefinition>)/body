{
  Parameter session=arg("session",ConnectorSession.class);
  Parameter page=arg("page",Page.class);
  Parameter start=arg("start",int.class);
  Parameter end=arg("end",int.class);
  Parameter pageBuilder=arg("pageBuilder",PageBuilder.class);
  MethodDefinition method=classDefinition.declareMethod(a(PUBLIC),"process",type(int.class),session,page,start,end,pageBuilder);
  Scope scope=method.getScope();
  BytecodeBlock body=method.getBody();
  Variable thisVariable=method.getThis();
  List<Integer> allInputChannels=getInputChannels(concat(projections,ImmutableList.of(filter)));
  ImmutableMap.Builder<Integer,Variable> builder=ImmutableMap.builder();
  for (  int channel : allInputChannels) {
    Variable blockVariable=scope.declareVariable("block_" + channel,body,page.invoke("getBlock",Block.class,constantInt(channel)));
    builder.put(channel,blockVariable);
  }
  Map<Integer,Variable> channelBlocks=builder.build();
  Map<RowExpression,List<Variable>> expressionInputBlocks=getExpressionInputBlocks(projections,filter,channelBlocks);
  Variable position=scope.declareVariable(int.class,"position");
  BytecodeBlock project=new BytecodeBlock().append(pageBuilder.invoke("declarePosition",void.class));
  for (int projectionIndex=0; projectionIndex < projections.size(); projectionIndex++) {
    RowExpression projection=projections.get(projectionIndex);
    project.append(invokeProject(thisVariable,session,expressionInputBlocks.get(projection),position,pageBuilder,constantInt(projectionIndex),projectionMethods.get(projectionIndex)));
  }
  LabelNode done=new LabelNode("done");
  ForLoop loop=new ForLoop().initialize(position.set(start)).condition(lessThan(position,end)).update(position.set(add(position,constantInt(1)))).body(new BytecodeBlock().append(new IfStatement().condition(pageBuilder.invoke("isFull",boolean.class)).ifTrue(jump(done))).append(new IfStatement().condition(invokeFilter(thisVariable,session,expressionInputBlocks.get(filter),position)).ifTrue(project)));
  body.append(loop).visitLabel(done).append(position.ret());
}
