{
  Parameter session=arg("session",ConnectorSession.class);
  Parameter page=arg("page",Page.class);
  Parameter selectedPositions=arg("selectedPositions",int[].class);
  Parameter pageBuilder=arg("pageBuilder",PageBuilder.class);
  Parameter projectionIndex=arg("projectionIndex",int.class);
  List<Parameter> params=ImmutableList.<Parameter>builder().add(session).add(page).add(selectedPositions).add(pageBuilder).add(projectionIndex).build();
  MethodDefinition method=classDefinition.declareMethod(a(PRIVATE),methodName,type(Block.class),params);
  BytecodeBlock body=method.getBody();
  Scope scope=method.getScope();
  Variable thisVariable=method.getThis();
  ImmutableList.Builder<Variable> builder=ImmutableList.<Variable>builder();
  for (  int channel : getInputChannels(projection)) {
    Variable blockVariable=scope.declareVariable("block_" + channel,body,page.invoke("getBlock",Block.class,constantInt(channel)));
    builder.add(blockVariable);
  }
  List<Variable> inputs=builder.build();
  Variable positionCount=scope.declareVariable("positionCount",body,page.invoke("getPositionCount",int.class));
  Variable position=scope.declareVariable("position",body,constantInt(0));
  Variable cardinality=scope.declareVariable("cardinality",body,selectedPositions.length());
  Variable outputBlock=scope.declareVariable(Block.class,"outputBlock");
  Variable blockBuilder=scope.declareVariable("blockBuilder",body,pageBuilder.invoke("getBlockBuilder",BlockBuilder.class,projectionIndex));
  Variable type=scope.declareVariable("type",body,pageBuilder.invoke("getType",Type.class,projectionIndex));
  BytecodeBlock projectBlock=new BytecodeBlock().append(new ForLoop().initialize(position.set(constantInt(0))).condition(lessThan(position,cardinality)).update(position.increment()).body(invokeProject(thisVariable,session,inputs,selectedPositions.getElement(position),pageBuilder,projectionIndex,projectionMethod))).append(outputBlock.set(blockBuilder.invoke("build",Block.class)));
  if (isIdentityExpression(projection)) {
    body.append(new IfStatement().condition(equal(cardinality,positionCount)).ifTrue(outputBlock.set(inputs.get(0))).ifFalse(projectBlock));
  }
 else   if (isConstantExpression(projection)) {
    ConstantExpression constantExpression=(ConstantExpression)projection;
    verify(getInputChannels(projection).isEmpty());
    BytecodeExpression value=loadConstant(callSiteBinder,constantExpression.getValue(),Object.class);
    body.append(outputBlock.set(invokeStatic(RunLengthEncodedBlock.class,"create",Block.class,type,value,cardinality)));
  }
 else {
    body.append(projectBlock);
  }
  body.append(outputBlock.ret());
  return method;
}
