{
  Variable session=scope.getVariable("session");
  Variable cardinality=scope.getVariable("cardinality");
  Variable selectedPositions=scope.getVariable("selectedPositions");
  Variable page=scope.getVariable("page");
  Variable pageBuilder=scope.getVariable("pageBuilder");
  Variable outputBlocks=scope.getVariable("outputBlocks");
  Variable position=scope.getVariable("position");
  Variable positionCount=scope.getVariable("positionCount");
  Variable thisVariable=scope.getThis();
  Variable blockBuilder=scope.getVariable("blockBuilder_" + projectionIndex);
  ByteCodeBlock projectBlock=new ByteCodeBlock().append(new ForLoop().initialize(position.set(constantInt(0))).condition(lessThan(position,cardinality)).update(position.increment()).body(invokeProject(thisVariable,session,blocks,selectedPositions.getElement(position),blockBuilder,projectionMethod))).append(outputBlocks.setElement(projectionIndex,blockBuilder.invoke("build",Block.class)));
  ByteCodeBlock simpleProjection=new ByteCodeBlock();
  if (isIdentityExpression(projection)) {
    int channel=Iterables.getOnlyElement(getInputChannels(projection));
    simpleProjection.append(new IfStatement().condition(equal(cardinality,positionCount)).ifTrue(outputBlocks.setElement(projectionIndex,page.invoke("getBlock",Block.class,constantInt(channel)))).ifFalse(projectBlock));
  }
 else   if (isConstantExpression(projection)) {
    ConstantExpression constantExpression=(ConstantExpression)projection;
    verify(getInputChannels(projection).isEmpty());
    ByteCodeExpression type=pageBuilder.invoke("getType",Type.class,constantInt(projectionIndex));
    ByteCodeExpression value=loadConstant(callSiteBinder,constantExpression.getValue(),Object.class);
    simpleProjection.append(outputBlocks.setElement(projectionIndex,invokeStatic(RunLengthEncodedBlock.class,"create",Block.class,type,value,cardinality)));
  }
 else {
    simpleProjection.append(projectBlock);
  }
  return simpleProjection;
}
