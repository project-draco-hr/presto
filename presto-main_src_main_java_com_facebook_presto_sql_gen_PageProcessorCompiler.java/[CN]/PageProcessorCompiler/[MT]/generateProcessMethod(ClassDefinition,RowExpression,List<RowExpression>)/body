{
  Parameter session=arg("session",ConnectorSession.class);
  Parameter page=arg("page",Page.class);
  Parameter start=arg("start",int.class);
  Parameter end=arg("end",int.class);
  Parameter pageBuilder=arg("pageBuilder",PageBuilder.class);
  MethodDefinition method=classDefinition.declareMethod(a(PUBLIC),"process",type(int.class),session,page,start,end,pageBuilder);
  Scope scope=method.getScope();
  Variable thisVariable=method.getThis();
  Variable position=scope.declareVariable(int.class,"position");
  method.getBody().comment("int position = start;").getVariable(start).putVariable(position);
  List<Integer> allInputChannels=getInputChannels(Iterables.concat(projections,ImmutableList.of(filter)));
  for (  int channel : allInputChannels) {
    Variable blockVariable=scope.declareVariable(Block.class,"block_" + channel);
    method.getBody().comment("Block %s = page.getBlock(%s);",blockVariable.getName(),channel).getVariable(page).push(channel).invokeVirtual(Page.class,"getBlock",Block.class,int.class).putVariable(blockVariable);
  }
  LabelNode done=new LabelNode("done");
  ByteCodeBlock loopBody=new ByteCodeBlock();
  ForLoop loop=new ForLoop().initialize(NOP).condition(new ByteCodeBlock().comment("position < end").getVariable(position).getVariable(end).invokeStatic(CompilerOperations.class,"lessThan",boolean.class,int.class,int.class)).update(new ByteCodeBlock().comment("position++").incrementVariable(position,(byte)1)).body(loopBody);
  loopBody.comment("if (pageBuilder.isFull()) break;").getVariable(pageBuilder).invokeVirtual(PageBuilder.class,"isFull",boolean.class).ifTrueGoto(done);
  IfStatement filterBlock=new IfStatement();
  filterBlock.condition().append(thisVariable).getVariable(session).append(pushBlockVariables(scope,getInputChannels(filter))).getVariable(position).invokeVirtual(classDefinition.getType(),"filter",type(boolean.class),ImmutableList.<ParameterizedType>builder().add(type(ConnectorSession.class)).addAll(nCopies(getInputChannels(filter).size(),type(Block.class))).add(type(int.class)).build());
  filterBlock.ifTrue().append(pageBuilder).invokeVirtual(PageBuilder.class,"declarePosition",void.class);
  for (int projectionIndex=0; projectionIndex < projections.size(); projectionIndex++) {
    List<Integer> inputChannels=getInputChannels(projections.get(projectionIndex));
    filterBlock.ifTrue().append(thisVariable).append(session).append(pushBlockVariables(scope,inputChannels)).getVariable(position);
    filterBlock.ifTrue().comment("pageBuilder.getBlockBuilder(%d)",projectionIndex).append(pageBuilder).push(projectionIndex).invokeVirtual(PageBuilder.class,"getBlockBuilder",BlockBuilder.class,int.class);
    filterBlock.ifTrue().comment("project_%d(session, block_%s, position, blockBuilder)",projectionIndex,inputChannels).invokeVirtual(classDefinition.getType(),"project_" + projectionIndex,type(void.class),ImmutableList.<ParameterizedType>builder().add(type(ConnectorSession.class)).addAll(nCopies(inputChannels.size(),type(Block.class))).add(type(int.class)).add(type(BlockBuilder.class)).build());
  }
  loopBody.append(filterBlock);
  method.getBody().append(loop).visitLabel(done).comment("return position;").getVariable(position).retInt();
}
