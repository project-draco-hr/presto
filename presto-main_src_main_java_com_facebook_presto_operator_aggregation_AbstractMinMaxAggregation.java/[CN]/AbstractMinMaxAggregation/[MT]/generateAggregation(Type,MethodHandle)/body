{
  DynamicClassLoader classLoader=new DynamicClassLoader(AbstractMinMaxAggregation.class.getClassLoader());
  List<Type> inputTypes=ImmutableList.of(type);
  MethodHandle inputFunction;
  MethodHandle outputFunction;
  Class<? extends AccumulatorState> stateInterface;
  if (type.getJavaType() == long.class) {
    stateInterface=NullableLongState.class;
    inputFunction=LONG_INPUT_FUNCTION;
    outputFunction=LONG_OUTPUT_FUNCTION;
  }
 else   if (type.getJavaType() == double.class) {
    stateInterface=NullableDoubleState.class;
    inputFunction=DOUBLE_INPUT_FUNCTION;
    outputFunction=DOUBLE_OUTPUT_FUNCTION;
  }
 else   if (type.getJavaType() == Slice.class) {
    stateInterface=SliceState.class;
    inputFunction=SLICE_INPUT_FUNCTION;
    outputFunction=SLICE_OUTPUT_FUNCTION;
  }
 else   if (type.getJavaType() == boolean.class) {
    stateInterface=NullableBooleanState.class;
    inputFunction=BOOLEAN_INPUT_FUNCTION;
    outputFunction=BOOLEAN_OUTPUT_FUNCTION;
  }
 else {
    throw new PrestoException(StandardErrorCode.INVALID_FUNCTION_ARGUMENT,"Argument type to max/min unsupported");
  }
  inputFunction=inputFunction.bindTo(compareMethodHandle);
  outputFunction=outputFunction.bindTo(type);
  AccumulatorStateFactory<?> stateFactory=compiler.generateStateFactory(stateInterface,classLoader);
  AccumulatorStateSerializer<?> stateSerializer=compiler.generateStateSerializer(stateInterface,classLoader);
  Type intermediateType=stateSerializer.getSerializedType();
  List<ParameterMetadata> inputParameterMetadata=createInputParameterMetadata(type);
  AggregationMetadata metadata=new AggregationMetadata(generateAggregationName(name,type,inputTypes),inputParameterMetadata,inputFunction,inputParameterMetadata,inputFunction,null,outputFunction,stateInterface,stateSerializer,stateFactory,type,false);
  GenericAccumulatorFactoryBinder factory=new AccumulatorCompiler().generateAccumulatorFactoryBinder(metadata,classLoader);
  return new InternalAggregationFunction(name,inputTypes,intermediateType,type,true,false,factory);
}
