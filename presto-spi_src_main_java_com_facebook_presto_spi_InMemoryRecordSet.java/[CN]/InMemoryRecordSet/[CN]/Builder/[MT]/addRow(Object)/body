{
  checkNotNull(values,"values is null");
  checkArgument(values.length == types.size(),"Expected %s values in row, but got %s values",types.size(),values.length);
  for (int i=0; i < values.length; i++) {
    Object value=values[i];
    if (value == null) {
      continue;
    }
    Type type=types.get(i);
    if (BOOLEAN.equals(type)) {
      checkArgument(value instanceof Boolean,"Expected value %d to be an instance of Boolean, but is a %s",i,value.getClass().getSimpleName());
    }
 else     if (BIGINT.equals(type) || DATE.equals(type) || TIMESTAMP.equals(type)|| TIMESTAMP_WITH_TIME_ZONE.equals(type)) {
      checkArgument(value instanceof Integer || value instanceof Long,"Expected value %d to be an instance of Integer or Long, but is a %s",i,value.getClass().getSimpleName());
    }
 else     if (DOUBLE.equals(type)) {
      checkArgument(value instanceof Double,"Expected value %d to be an instance of Double, but is a %s",i,value.getClass().getSimpleName());
    }
 else     if (VARCHAR.equals(type)) {
      checkArgument(value instanceof String || value instanceof byte[],"Expected value %d to be an instance of String or byte[], but is a %s",i,value.getClass().getSimpleName());
    }
 else     if (VARBINARY.equals(type)) {
      checkArgument(value instanceof Slice,"Expected value %d to be an instance of Slice, but is a %s",i,value.getClass().getSimpleName());
    }
 else     if (type.getTypeSignature().getBase().equals("array")) {
      checkArgument(value instanceof Block,"Expected value %d to be an instance of Block, but is a %s",i,value.getClass().getSimpleName());
    }
 else {
      throw new IllegalStateException("Unsupported column type " + types.get(i));
    }
  }
  records.add(Collections.unmodifiableList(new ArrayList<>(Arrays.asList(values))));
  return this;
}
