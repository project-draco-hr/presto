{
  Assert.assertEquals(Domain.all(Long.class).union(Domain.all(Long.class)),Domain.all(Long.class));
  Assert.assertEquals(Domain.none(Long.class).union(Domain.none(Long.class)),Domain.none(Long.class));
  Assert.assertEquals(Domain.all(Long.class).union(Domain.none(Long.class)),Domain.all(Long.class));
  Assert.assertEquals(Domain.notNull(Long.class).union(Domain.onlyNull(Long.class)),Domain.all(Long.class));
  Assert.assertEquals(Domain.singleValue(0L).union(Domain.all(Long.class)),Domain.all(Long.class));
  Assert.assertEquals(Domain.singleValue(0L).union(Domain.notNull(Long.class)),Domain.notNull(Long.class));
  Assert.assertEquals(Domain.singleValue(0L).union(Domain.onlyNull(Long.class)),Domain.create(SortedRangeSet.of(Range.equal(0L)),true));
  Assert.assertEquals(Domain.create(SortedRangeSet.of(Range.equal(1L)),true).union(Domain.create(SortedRangeSet.of(Range.equal(2L)),true)),Domain.create(SortedRangeSet.of(Range.equal(1L),Range.equal(2L)),true));
  Assert.assertEquals(Domain.create(SortedRangeSet.of(Range.equal(1L)),true).union(Domain.create(SortedRangeSet.of(Range.equal(1L),Range.equal(2L)),false)),Domain.create(SortedRangeSet.of(Range.equal(1L),Range.equal(2L)),true));
}
