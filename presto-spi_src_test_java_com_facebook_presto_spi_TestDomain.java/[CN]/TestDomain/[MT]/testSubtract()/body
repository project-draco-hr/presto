{
  Assert.assertEquals(Domain.all(Long.class).subtract(Domain.all(Long.class)),Domain.none(Long.class));
  Assert.assertEquals(Domain.all(Long.class).subtract(Domain.none(Long.class)),Domain.all(Long.class));
  Assert.assertEquals(Domain.all(Long.class).subtract(Domain.notNull(Long.class)),Domain.onlyNull(Long.class));
  Assert.assertEquals(Domain.all(Long.class).subtract(Domain.onlyNull(Long.class)),Domain.notNull(Long.class));
  Assert.assertEquals(Domain.all(Long.class).subtract(Domain.singleValue(0L)),Domain.create(SortedRangeSet.of(Range.lessThan(0L),Range.greaterThan(0L)),true));
  Assert.assertEquals(Domain.none(Long.class).subtract(Domain.all(Long.class)),Domain.none(Long.class));
  Assert.assertEquals(Domain.none(Long.class).subtract(Domain.none(Long.class)),Domain.none(Long.class));
  Assert.assertEquals(Domain.none(Long.class).subtract(Domain.notNull(Long.class)),Domain.none(Long.class));
  Assert.assertEquals(Domain.none(Long.class).subtract(Domain.onlyNull(Long.class)),Domain.none(Long.class));
  Assert.assertEquals(Domain.none(Long.class).subtract(Domain.singleValue(0L)),Domain.none(Long.class));
  Assert.assertEquals(Domain.notNull(Long.class).subtract(Domain.all(Long.class)),Domain.none(Long.class));
  Assert.assertEquals(Domain.notNull(Long.class).subtract(Domain.none(Long.class)),Domain.notNull(Long.class));
  Assert.assertEquals(Domain.notNull(Long.class).subtract(Domain.notNull(Long.class)),Domain.none(Long.class));
  Assert.assertEquals(Domain.notNull(Long.class).subtract(Domain.onlyNull(Long.class)),Domain.notNull(Long.class));
  Assert.assertEquals(Domain.notNull(Long.class).subtract(Domain.singleValue(0L)),Domain.create(SortedRangeSet.of(Range.lessThan(0L),Range.greaterThan(0L)),false));
  Assert.assertEquals(Domain.onlyNull(Long.class).subtract(Domain.all(Long.class)),Domain.none(Long.class));
  Assert.assertEquals(Domain.onlyNull(Long.class).subtract(Domain.none(Long.class)),Domain.onlyNull(Long.class));
  Assert.assertEquals(Domain.onlyNull(Long.class).subtract(Domain.notNull(Long.class)),Domain.onlyNull(Long.class));
  Assert.assertEquals(Domain.onlyNull(Long.class).subtract(Domain.onlyNull(Long.class)),Domain.none(Long.class));
  Assert.assertEquals(Domain.onlyNull(Long.class).subtract(Domain.singleValue(0L)),Domain.onlyNull(Long.class));
  Assert.assertEquals(Domain.singleValue(0L).subtract(Domain.all(Long.class)),Domain.none(Long.class));
  Assert.assertEquals(Domain.singleValue(0L).subtract(Domain.none(Long.class)),Domain.singleValue(0L));
  Assert.assertEquals(Domain.singleValue(0L).subtract(Domain.notNull(Long.class)),Domain.none(Long.class));
  Assert.assertEquals(Domain.singleValue(0L).subtract(Domain.onlyNull(Long.class)),Domain.singleValue(0L));
  Assert.assertEquals(Domain.singleValue(0L).subtract(Domain.singleValue(0L)),Domain.none(Long.class));
  Assert.assertEquals(Domain.create(SortedRangeSet.of(Range.equal(1L)),true).subtract(Domain.create(SortedRangeSet.of(Range.equal(2L)),true)),Domain.singleValue(1L));
  Assert.assertEquals(Domain.create(SortedRangeSet.of(Range.equal(1L)),true).subtract(Domain.create(SortedRangeSet.of(Range.equal(1L),Range.equal(2L)),false)),Domain.onlyNull(Long.class));
}
