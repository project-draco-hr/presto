{
  ClassInfoLoader classInfoLoader=ClassInfoLoader.createClassInfoLoader(classDefinitions,classLoader);
  if (DUMP_BYTE_CODE_TREE) {
    DumpByteCodeVisitor dumpByteCode=new DumpByteCodeVisitor(System.out);
    for (    ClassDefinition classDefinition : classDefinitions) {
      dumpByteCode.visitClass(classDefinition);
    }
  }
  Map<String,byte[]> byteCodes=new LinkedHashMap<>();
  for (  ClassDefinition classDefinition : classDefinitions) {
    ClassWriter cw=new SmartClassWriter(classInfoLoader);
    classDefinition.visit(cw);
    byte[] byteCode=cw.toByteArray();
    byteCodes.put(classDefinition.getType().getJavaClassName(),byteCode);
  }
  return classLoader.defineClasses(byteCodes);
}
