{
  MethodDefinition method=definition.declareMethod(a(PUBLIC),"serialize",type(void.class),arg("state",Object.class),arg("out",BlockBuilder.class));
  CompilerContext compilerContext=method.getCompilerContext();
  Block serializerBody=method.getBody();
  Variable state=compilerContext.getVariable("state");
  Variable out=compilerContext.getVariable("out");
  if (fields.size() == 1) {
    Method getter=getGetter(clazz,fields.get(0));
    Method append=getBlockBuilderAppend(getter.getReturnType());
    serializerBody.append(invokeStatic(append,out,state.cast(getter.getDeclaringClass()).invoke(getter)));
  }
 else {
    Variable slice=compilerContext.declareVariable(Slice.class,"slice");
    ByteCodeExpression size=constantInt(serializedSizeOf(clazz));
    serializerBody.append(slice.set(invokeStatic(Slices.class,"allocate",Slice.class,size)));
    for (    StateField field : fields) {
      Method getter=getGetter(clazz,field);
      Method sliceSetter=getSliceSetter(getter.getReturnType());
      serializerBody.append(invokeStatic(sliceSetter,slice,constantInt(offsetOfField(field,fields)),state.cast(getter.getDeclaringClass()).invoke(getter)));
    }
    serializerBody.append(out.invoke("writeBytes",BlockBuilder.class,slice,constantInt(0),size).invoke("closeEntry",BlockBuilder.class).pop());
  }
  serializerBody.ret();
}
