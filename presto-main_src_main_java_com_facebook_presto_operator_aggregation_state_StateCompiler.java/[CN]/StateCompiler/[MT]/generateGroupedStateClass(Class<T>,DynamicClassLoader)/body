{
  ClassDefinition definition=new ClassDefinition(new CompilerContext(null),a(PUBLIC,FINAL),typeFromPathName("Grouped" + clazz.getSimpleName() + "_"+ CLASS_ID.incrementAndGet()),type(AbstractGroupedAccumulatorState.class),type(clazz),type(GroupedAccumulator.class));
  List<StateField> fields=enumerateFields(clazz);
  Block constructor=definition.declareConstructor(new CompilerContext(null),a(PUBLIC)).getBody().pushThis().invokeConstructor(AbstractGroupedAccumulatorState.class);
  Block ensureCapacity=definition.declareMethod(new CompilerContext(null),a(PUBLIC),"ensureCapacity",type(void.class),NamedParameterDefinition.arg("size",long.class)).getBody();
  List<FieldDefinition> fieldDefinitions=new ArrayList<>();
  for (  StateField field : fields) {
    fieldDefinitions.add(generateGroupedField(definition,constructor,ensureCapacity,field));
  }
  constructor.ret();
  ensureCapacity.ret();
  Block getEstimatedSize=definition.declareMethod(new CompilerContext(null),a(PUBLIC),"getEstimatedSize",type(long.class)).getBody().comment("long size = 0;").push(0L);
  for (  FieldDefinition field : fieldDefinitions) {
    getEstimatedSize.comment("size += %s.sizeOf();",field.getName()).pushThis().getField(field).invokeVirtual(field.getType(),"sizeOf",type(long.class)).longAdd();
  }
  getEstimatedSize.comment("return size;");
  getEstimatedSize.retLong();
  return defineClass(definition,clazz,classLoader);
}
