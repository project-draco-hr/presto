{
  AccumulatorStateMetadata metadata=getMetadataAnnotation(clazz);
  if (metadata != null && metadata.stateSerializerClass() != void.class) {
    try {
      return (AccumulatorStateSerializer<T>)metadata.stateSerializerClass().getConstructor().newInstance();
    }
 catch (    InstantiationException|IllegalAccessException|NoSuchMethodException|InvocationTargetException e) {
      throw Throwables.propagate(e);
    }
  }
  ClassDefinition definition=new ClassDefinition(new CompilerContext(null),a(PUBLIC,FINAL),typeFromPathName(clazz.getSimpleName() + "Serializer_" + CLASS_ID.incrementAndGet()),type(Object.class),type(AccumulatorStateSerializer.class));
  definition.declareDefaultConstructor(a(PUBLIC));
  List<StateField> fields=enumerateFields(clazz);
  generateGetSerializedType(definition,fields);
  generateSerialize(definition,clazz,fields);
  generateDeserialize(definition,clazz,fields);
  Class<? extends AccumulatorStateSerializer> serializerClass=defineClass(definition,AccumulatorStateSerializer.class,classLoader);
  try {
    return (AccumulatorStateSerializer<T>)serializerClass.newInstance();
  }
 catch (  InstantiationException|IllegalAccessException e) {
    throw Throwables.propagate(e);
  }
}
