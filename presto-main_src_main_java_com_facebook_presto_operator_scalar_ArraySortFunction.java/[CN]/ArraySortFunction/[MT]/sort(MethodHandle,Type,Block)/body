{
  int arrayLength=block.getPositionCount();
  if (positions.size() < arrayLength) {
    positions=Ints.asList(new int[arrayLength]);
  }
  for (int i=0; i < arrayLength; i++) {
    positions.set(i,i);
  }
  Collections.sort(positions.subList(0,arrayLength),new Comparator<Integer>(){
    @Override public int compare(    Integer p1,    Integer p2){
      boolean nullLeft=block.isNull(p1);
      boolean nullRight=block.isNull(p2);
      if (nullLeft && nullRight) {
        return 0;
      }
      if (nullLeft) {
        return 1;
      }
      if (nullRight) {
        return -1;
      }
      return type.compareTo(block,p1,block,p2);
    }
  }
);
  if (pageBuilder.isFull()) {
    pageBuilder.reset();
  }
  BlockBuilder blockBuilder=pageBuilder.getBlockBuilder(0);
  for (int i=0; i < arrayLength; i++) {
    type.appendTo(block,positions.get(i),blockBuilder);
  }
  pageBuilder.declarePositions(arrayLength);
  return blockBuilder.getRegion(blockBuilder.getPositionCount() - arrayLength,arrayLength);
}
