{
  long tableId=createTable("test");
  UUID shard=UUID.randomUUID();
  List<ShardInfo> shardNodes=ImmutableList.of(shardInfo(shard,"node1"));
  List<ColumnInfo> columns=ImmutableList.of(new ColumnInfo(1,BIGINT));
  shardManager.createTable(tableId,columns,false);
  long transactionId=shardManager.beginTransaction();
  shardManager.commitShards(transactionId,tableId,columns,shardNodes,Optional.empty(),0);
  ShardNodes actual=getOnlyElement(getShardNodes(tableId,TupleDomain.all()));
  assertEquals(actual,new ShardNodes(shard,ImmutableSet.of("node1")));
  try {
    shardManager.assignShard(tableId,shard,"node2",true);
    fail("expected exception");
  }
 catch (  PrestoException e) {
    assertEquals(e.getErrorCode(),SERVER_STARTING_UP.toErrorCode());
  }
  shardManager.assignShard(tableId,shard,"node2",false);
  actual=getOnlyElement(getShardNodes(tableId,TupleDomain.all()));
  assertEquals(actual,new ShardNodes(shard,ImmutableSet.of("node1","node2")));
  shardManager.assignShard(tableId,shard,"node2",false);
  shardManager.unassignShard(tableId,shard,"node1");
  actual=getOnlyElement(getShardNodes(tableId,TupleDomain.all()));
  assertEquals(actual,new ShardNodes(shard,ImmutableSet.of("node2")));
  shardManager.unassignShard(tableId,shard,"node1");
}
