{
  long tableId=1;
  UUID shard=UUID.randomUUID();
  List<ShardInfo> shardNodes=ImmutableList.of(shardInfo(shard,"node1"));
  List<ColumnInfo> columns=ImmutableList.of(new ColumnInfo(1,BIGINT));
  shardManager.createTable(tableId,columns);
  shardManager.commitShards(tableId,columns,shardNodes,Optional.empty());
  ShardNodes actual=getOnlyElement(getShardNodes(tableId,TupleDomain.all()));
  assertEquals(actual,new ShardNodes(shard,ImmutableSet.of("node1")));
  shardManager.assignShard(tableId,shard,"node2");
  actual=getOnlyElement(getShardNodes(tableId,TupleDomain.all()));
  assertEquals(actual,new ShardNodes(shard,ImmutableSet.of("node1","node2")));
  shardManager.assignShard(tableId,shard,"node2");
  shardManager.unassignShard(tableId,shard,"node1");
  actual=getOnlyElement(getShardNodes(tableId,TupleDomain.all()));
  assertEquals(actual,new ShardNodes(shard,ImmutableSet.of("node2")));
  shardManager.unassignShard(tableId,shard,"node1");
}
