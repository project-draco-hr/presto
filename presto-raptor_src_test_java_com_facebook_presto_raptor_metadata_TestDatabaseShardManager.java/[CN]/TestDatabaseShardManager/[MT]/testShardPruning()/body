{
  ShardInfo shard1=shardInfo(UUID.randomUUID(),"node1",ImmutableList.<ColumnStats>builder().add(new ColumnStats(1,5,10)).add(new ColumnStats(2,-20.0,20.0)).add(new ColumnStats(3,date(2013,5,11),date(2013,6,13))).add(new ColumnStats(4,timestamp(2013,5,11,4,5,6),timestamp(2013,6,13,7,8,9))).add(new ColumnStats(5,"hello","world")).add(new ColumnStats(6,false,true)).build());
  ShardInfo shard2=shardInfo(UUID.randomUUID(),"node2",ImmutableList.<ColumnStats>builder().add(new ColumnStats(1,2,8)).add(new ColumnStats(2,null,50.0)).add(new ColumnStats(3,date(2012,1,1),date(2012,12,31))).add(new ColumnStats(4,timestamp(2012,1,1,2,3,4),timestamp(2012,12,31,5,6,7))).add(new ColumnStats(5,"cat","dog")).add(new ColumnStats(6,true,true)).build());
  ShardInfo shard3=shardInfo(UUID.randomUUID(),"node3",ImmutableList.<ColumnStats>builder().add(new ColumnStats(1,15,20)).add(new ColumnStats(2,null,null)).add(new ColumnStats(3,date(2013,4,1),date(2013,6,1))).add(new ColumnStats(4,timestamp(2013,4,1,8,7,6),timestamp(2013,6,1,6,5,4))).add(new ColumnStats(5,"grape","orange")).add(new ColumnStats(6,false,false)).build());
  List<ShardInfo> shards=ImmutableList.<ShardInfo>builder().add(shard1).add(shard2).add(shard3).build();
  List<ColumnInfo> columns=ImmutableList.<ColumnInfo>builder().add(new ColumnInfo(1,BIGINT)).add(new ColumnInfo(2,DOUBLE)).add(new ColumnInfo(3,DATE)).add(new ColumnInfo(4,TIMESTAMP)).add(new ColumnInfo(5,createVarcharType(10))).add(new ColumnInfo(6,BOOLEAN)).add(new ColumnInfo(7,VARBINARY)).build();
  RaptorColumnHandle c1=new RaptorColumnHandle("raptor","c1",1,BIGINT);
  RaptorColumnHandle c2=new RaptorColumnHandle("raptor","c2",2,DOUBLE);
  RaptorColumnHandle c3=new RaptorColumnHandle("raptor","c3",3,DATE);
  RaptorColumnHandle c4=new RaptorColumnHandle("raptor","c4",4,TIMESTAMP);
  RaptorColumnHandle c5=new RaptorColumnHandle("raptor","c5",5,createVarcharType(10));
  RaptorColumnHandle c6=new RaptorColumnHandle("raptor","c6",6,BOOLEAN);
  long tableId=createTable("test");
  shardManager.createTable(tableId,columns,false);
  long transactionId=shardManager.beginTransaction();
  shardManager.commitShards(transactionId,tableId,columns,shards,Optional.empty());
  shardAssertion(tableId).expected(shards);
  shardAssertion(tableId).equal(c1,BIGINT,3L).expected(shard2);
  shardAssertion(tableId).equal(c1,BIGINT,8L).expected(shard1,shard2);
  shardAssertion(tableId).equal(c1,BIGINT,9L).expected(shard1);
  shardAssertion(tableId).equal(c1,BIGINT,13L).expected();
  shardAssertion(tableId).between(c1,BIGINT,8L,14L).expected(shard1,shard2);
  shardAssertion(tableId).between(c1,BIGINT,8L,15L).expected(shards);
  shardAssertion(tableId).between(c1,BIGINT,8L,16L).expected(shards);
  shardAssertion(tableId).between(c1,BIGINT,12L,14L).expected();
  shardAssertion(tableId).between(c1,BIGINT,5L,10L).expected(shard1,shard2);
  shardAssertion(tableId).between(c1,BIGINT,16L,18L).expected(shard3);
  shardAssertion(tableId).between(c1,BIGINT,1L,25L).expected(shards);
  shardAssertion(tableId).between(c1,BIGINT,4L,12L).expected(shard1,shard2);
  shardAssertion(tableId).range(c1,lessThan(BIGINT,5L)).expected(shard1,shard2);
  shardAssertion(tableId).range(c1,lessThan(BIGINT,4L)).expected(shard2);
  shardAssertion(tableId).range(c1,lessThan(BIGINT,11L)).expected(shard1,shard2);
  shardAssertion(tableId).range(c1,lessThan(BIGINT,25L)).expected(shards);
  shardAssertion(tableId).range(c1,greaterThan(BIGINT,1L)).expected(shards);
  shardAssertion(tableId).range(c1,greaterThan(BIGINT,8L)).expected(shards);
  shardAssertion(tableId).range(c1,greaterThan(BIGINT,9L)).expected(shard1,shard3);
  shardAssertion(tableId).between(c1,BIGINT,-25L,25L).between(c2,DOUBLE,-1000.0,1000.0).between(c3,BIGINT,0L,50000L).between(c4,TIMESTAMP,0L,timestamp(2015,1,2,3,4,5)).between(c5,createVarcharType(10),utf8Slice("a"),utf8Slice("zzzzz")).between(c6,BOOLEAN,false,true).expected(shards);
  shardAssertion(tableId).between(c1,BIGINT,4L,12L).between(c3,DATE,date(2013,3,3),date(2013,5,25)).expected(shard1);
  shardAssertion(tableId).equal(c2,DOUBLE,25.0).expected(shard2,shard3);
  shardAssertion(tableId).equal(c2,DOUBLE,50.1).expected(shard3);
  shardAssertion(tableId).equal(c3,DATE,date(2013,5,12)).expected(shard1,shard3);
  shardAssertion(tableId).range(c4,greaterThan(TIMESTAMP,timestamp(2013,1,1,0,0,0))).expected(shard1,shard3);
  shardAssertion(tableId).between(c5,createVarcharType(10),utf8Slice("cow"),utf8Slice("milk")).expected(shards);
  shardAssertion(tableId).equal(c5,createVarcharType(10),utf8Slice("fruit")).expected();
  shardAssertion(tableId).equal(c5,createVarcharType(10),utf8Slice("pear")).expected(shard1);
  shardAssertion(tableId).equal(c5,createVarcharType(10),utf8Slice("cat")).expected(shard2);
  shardAssertion(tableId).range(c5,greaterThan(createVarcharType(10),utf8Slice("gum"))).expected(shard1,shard3);
  shardAssertion(tableId).range(c5,lessThan(createVarcharType(10),utf8Slice("air"))).expected();
  shardAssertion(tableId).equal(c6,BOOLEAN,true).expected(shard1,shard2);
  shardAssertion(tableId).equal(c6,BOOLEAN,false).expected(shard1,shard3);
  shardAssertion(tableId).range(c6,greaterThanOrEqual(BOOLEAN,false)).expected(shards);
  shardAssertion(tableId).range(c6,lessThan(BOOLEAN,true)).expected(shards);
  shardAssertion(tableId).range(c6,lessThan(BOOLEAN,false)).expected(shard1,shard3);
  shardAssertion(tableId).domain(c1,createDomain(lessThan(BIGINT,0L),greaterThan(BIGINT,25L))).expected(shards);
}
