{
  ShardInfo shard1=new ShardInfo(UUID.randomUUID(),ImmutableSet.of("node1"),ImmutableList.<ColumnStats>builder().add(new ColumnStats(1,5,10)).add(new ColumnStats(2,-20.0,20.0)).add(new ColumnStats(3,date(2013,5,11),date(2013,6,13))).add(new ColumnStats(4,timestamp(2013,5,11,4,5,6),timestamp(2013,6,13,7,8,9))).add(new ColumnStats(5,"hello","world")).add(new ColumnStats(6,false,true)).build());
  ShardInfo shard2=new ShardInfo(UUID.randomUUID(),ImmutableSet.of("node2"),ImmutableList.<ColumnStats>builder().add(new ColumnStats(1,2,8)).add(new ColumnStats(2,null,50.0)).add(new ColumnStats(3,date(2012,1,1),date(2012,12,31))).add(new ColumnStats(4,timestamp(2012,1,1,2,3,4),timestamp(2012,12,31,5,6,7))).add(new ColumnStats(5,"cat","dog")).add(new ColumnStats(6,true,true)).build());
  ShardInfo shard3=new ShardInfo(UUID.randomUUID(),ImmutableSet.of("node3"),ImmutableList.<ColumnStats>builder().add(new ColumnStats(1,15,20)).add(new ColumnStats(2,null,null)).add(new ColumnStats(3,date(2013,4,1),date(2013,6,1))).add(new ColumnStats(4,timestamp(2013,4,1,8,7,6),timestamp(2013,6,1,6,5,4))).add(new ColumnStats(5,"grape","orange")).add(new ColumnStats(6,false,false)).build());
  List<ShardInfo> shards=ImmutableList.<ShardInfo>builder().add(shard1).add(shard2).add(shard3).build();
  List<ColumnInfo> columns=ImmutableList.<ColumnInfo>builder().add(new ColumnInfo(1,BIGINT)).add(new ColumnInfo(2,DOUBLE)).add(new ColumnInfo(3,DATE)).add(new ColumnInfo(4,TIMESTAMP)).add(new ColumnInfo(5,VARCHAR)).add(new ColumnInfo(6,BOOLEAN)).add(new ColumnInfo(7,VARBINARY)).build();
  RaptorColumnHandle c1=new RaptorColumnHandle("raptor","c1",1,BIGINT);
  RaptorColumnHandle c2=new RaptorColumnHandle("raptor","c2",2,DOUBLE);
  RaptorColumnHandle c3=new RaptorColumnHandle("raptor","c3",3,DATE);
  RaptorColumnHandle c4=new RaptorColumnHandle("raptor","c4",4,TIMESTAMP);
  RaptorColumnHandle c5=new RaptorColumnHandle("raptor","c5",5,VARCHAR);
  RaptorColumnHandle c6=new RaptorColumnHandle("raptor","c6",6,BOOLEAN);
  long tableId=1;
  shardManager.createTable(tableId,columns);
  shardManager.commitShards(tableId,columns,shards,Optional.empty());
  shardAssertion(tableId).expected(shards);
  shardAssertion(tableId).equal(c1,3).expected(shard2);
  shardAssertion(tableId).equal(c1,8).expected(shard1,shard2);
  shardAssertion(tableId).equal(c1,9).expected(shard1);
  shardAssertion(tableId).equal(c1,13).expected();
  shardAssertion(tableId).between(c1,8,14).expected(shard1,shard2);
  shardAssertion(tableId).between(c1,8,15).expected(shards);
  shardAssertion(tableId).between(c1,8,16).expected(shards);
  shardAssertion(tableId).between(c1,12,14).expected();
  shardAssertion(tableId).between(c1,5,10).expected(shard1,shard2);
  shardAssertion(tableId).between(c1,16,18).expected(shard3);
  shardAssertion(tableId).between(c1,1,25).expected(shards);
  shardAssertion(tableId).between(c1,4,12).expected(shard1,shard2);
  shardAssertion(tableId).range(c1,lessThan(5)).expected(shard1,shard2);
  shardAssertion(tableId).range(c1,lessThan(4)).expected(shard2);
  shardAssertion(tableId).range(c1,lessThan(11)).expected(shard1,shard2);
  shardAssertion(tableId).range(c1,lessThan(25)).expected(shards);
  shardAssertion(tableId).range(c1,greaterThan(1)).expected(shards);
  shardAssertion(tableId).range(c1,greaterThan(8)).expected(shards);
  shardAssertion(tableId).range(c1,greaterThan(9)).expected(shard1,shard3);
  shardAssertion(tableId).between(c1,-25,25).between(c2,-1000.0,1000.0).between(c3,0,50000).between(c4,0L,timestamp(2015,1,2,3,4,5)).between(c5,utf8Slice("a"),utf8Slice("zzzzz")).between(c6,false,true).expected(shards);
  shardAssertion(tableId).between(c1,4,12).between(c3,date(2013,3,3),date(2013,5,25)).expected(shard1);
  shardAssertion(tableId).equal(c2,25.0).expected(shard2,shard3);
  shardAssertion(tableId).equal(c2,50.1).expected(shard3);
  shardAssertion(tableId).equal(c3,date(2013,5,12)).expected(shard1,shard3);
  shardAssertion(tableId).range(c4,greaterThan(timestamp(2013,1,1,0,0,0))).expected(shard1,shard3);
  shardAssertion(tableId).between(c5,utf8Slice("cow"),utf8Slice("milk")).expected(shards);
  shardAssertion(tableId).equal(c5,utf8Slice("fruit")).expected();
  shardAssertion(tableId).equal(c5,utf8Slice("pear")).expected(shard1);
  shardAssertion(tableId).equal(c5,utf8Slice("cat")).expected(shard2);
  shardAssertion(tableId).range(c5,greaterThan(utf8Slice("gum"))).expected(shard1,shard3);
  shardAssertion(tableId).range(c5,lessThan(utf8Slice("air"))).expected();
  shardAssertion(tableId).equal(c6,true).expected(shard1,shard2);
  shardAssertion(tableId).equal(c6,false).expected(shard1,shard3);
  shardAssertion(tableId).range(c6,greaterThanOrEqual(false)).expected(shards);
  shardAssertion(tableId).range(c6,lessThan(true)).expected(shards);
  shardAssertion(tableId).range(c6,lessThan(false)).expected(shard1,shard3);
  shardAssertion(tableId).domain(c1,createDomain(lessThan(0),greaterThan(25))).expected(shards);
}
