{
  DriverContext driverContext=taskContext.addPipelineContext().addDriverContext();
  OperatorContext operatorContext=driverContext.addOperatorContext(0,StaticOperator.class.getSimpleName());
  NewOperator buildOperator=new StaticOperator(operatorContext,rowPagesBuilder(SINGLE_LONG).row(10).row(30).row(30).row(35).row(36).row(37).row(50).build());
  NewSetBuilderOperatorFactory setBuilderOperatorFactory=new NewSetBuilderOperatorFactory(1,buildOperator.getTupleInfos(),0,10);
  NewOperator setBuilderOperator=setBuilderOperatorFactory.createOperator(driverContext);
  Driver driver=new Driver(driverContext,buildOperator,setBuilderOperator);
  while (!driver.isFinished()) {
    driver.process();
  }
  List<Page> probeInput=rowPagesBuilder(SINGLE_LONG,SINGLE_LONG).addSequencePage(10,30,0).build();
  NewHashSemiJoinOperatorFactory joinOperatorFactory=new NewHashSemiJoinOperatorFactory(2,setBuilderOperatorFactory.getSetProvider(),ImmutableList.of(SINGLE_LONG,SINGLE_LONG),0);
  NewOperator joinOperator=joinOperatorFactory.createOperator(driverContext);
  MaterializedResult expected=resultBuilder(FIXED_INT_64,FIXED_INT_64,BOOLEAN).row(30,0,true).row(31,1,false).row(32,2,false).row(33,3,false).row(34,4,false).row(35,5,true).row(36,6,true).row(37,7,true).row(38,8,false).row(39,9,false).build();
  NewOperatorAssertion.assertOperatorEquals(joinOperator,probeInput,expected);
}
