{
  DriverContext driverContext=taskContext.addPipelineContext(true,true).addDriverContext();
  OperatorContext operatorContext=driverContext.addOperatorContext(0,StaticOperator.class.getSimpleName());
  NewOperator buildOperator=new StaticOperator(operatorContext,rowPagesBuilder(SINGLE_LONG).row(0).row(1).row(2).row(2).row(3).row((Object)null).build());
  NewSetBuilderOperatorFactory setBuilderOperatorFactory=new NewSetBuilderOperatorFactory(1,buildOperator.getTupleInfos(),0,10);
  NewOperator setBuilderOperator=setBuilderOperatorFactory.createOperator(driverContext);
  Driver driver=new Driver(driverContext,buildOperator,setBuilderOperator);
  while (!driver.isFinished()) {
    driver.process();
  }
  List<Page> probeInput=rowPagesBuilder(SINGLE_LONG).addSequencePage(4,1).build();
  NewHashSemiJoinOperatorFactory joinOperatorFactory=new NewHashSemiJoinOperatorFactory(2,setBuilderOperatorFactory.getSetProvider(),ImmutableList.of(SINGLE_LONG),0);
  NewOperator joinOperator=joinOperatorFactory.createOperator(driverContext);
  MaterializedResult expected=resultBuilder(FIXED_INT_64,BOOLEAN).row(1,true).row(2,true).row(3,true).row(4,null).build();
  NewOperatorAssertion.assertOperatorEquals(joinOperator,probeInput,expected);
}
