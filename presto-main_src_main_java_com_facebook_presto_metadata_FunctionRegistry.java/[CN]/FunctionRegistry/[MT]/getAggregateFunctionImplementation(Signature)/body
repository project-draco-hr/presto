{
  checkArgument(signature.getKind() == AGGREGATE || signature.getKind() == APPROXIMATE_AGGREGATE,"%s is not an aggregate function",signature);
  checkArgument(signature.getTypeParameters().isEmpty(),"%s has unbound type parameters",signature);
  Iterable<SqlFunction> candidates=functions.get(QualifiedName.of(signature.getName()));
  for (  SqlFunction operator : candidates) {
    Type returnType=typeManager.getType(signature.getReturnType());
    List<Type> argumentTypes=resolveTypes(signature.getArgumentTypes(),typeManager);
    Map<String,Type> boundTypeParameters=operator.getSignature().bindTypeParameters(returnType,argumentTypes,false,typeManager);
    if (boundTypeParameters != null) {
      try {
        return specializedAggregationCache.getUnchecked(new SpecializedFunctionKey(operator,boundTypeParameters,signature.getArgumentTypes().size()));
      }
 catch (      UncheckedExecutionException e) {
        throw Throwables.propagate(e.getCause());
      }
    }
  }
  throw new PrestoException(FUNCTION_IMPLEMENTATION_MISSING,format("%s not found",signature));
}
