{
  List<FunctionInfo> candidates=IterableTransformer.on(functions.get(name)).select(new Predicate<FunctionInfo>(){
    @Override public boolean apply(    FunctionInfo input){
      return input.isScalar() || input.isApproximate() == approximate;
    }
  }
).list();
  for (  FunctionInfo functionInfo : candidates) {
    if (functionInfo.getArgumentTypes().equals(parameterTypes)) {
      return functionInfo;
    }
  }
  for (  FunctionInfo functionInfo : candidates) {
    if (canCoerce(parameterTypes,functionInfo)) {
      return functionInfo;
    }
  }
  List<String> expectedParameters=new ArrayList<>();
  for (  FunctionInfo functionInfo : candidates) {
    expectedParameters.add(format("%s(%s)",name,Joiner.on(", ").join(functionInfo.getArgumentTypes())));
  }
  String parameters=Joiner.on(", ").join(parameterTypes);
  String message=format("Function %s not registered",name);
  if (!expectedParameters.isEmpty()) {
    String expected=Joiner.on(", ").join(expectedParameters);
    message=format("Unexpected parameters (%s) for function %s. Expected: %s",parameters,name,expected);
  }
  throw new PrestoException(StandardErrorCode.FUNCTION_NOT_FOUND.toErrorCode(),message);
}
