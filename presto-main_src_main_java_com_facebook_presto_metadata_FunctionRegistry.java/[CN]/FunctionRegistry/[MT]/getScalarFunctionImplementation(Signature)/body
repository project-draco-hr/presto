{
  checkArgument(signature.getType() == SCALAR,"%s is not a scalar function",signature);
  checkArgument(signature.getTypeParameters().isEmpty(),"%s has unbound type parameters",signature);
  FunctionInfo function=getExactFunction(signature);
  if (function == null && signature.getName().startsWith(MAGIC_LITERAL_FUNCTION_PREFIX)) {
    List<TypeSignature> parameterTypes=signature.getArgumentTypes();
    String typeName=signature.getName().substring(MAGIC_LITERAL_FUNCTION_PREFIX.length());
    Type type=typeManager.getType(parseTypeSignature(typeName));
    requireNonNull(type,format("Type %s not registered",typeName));
    checkArgument(parameterTypes.size() == 1,"Expected one argument to literal function, but got %s",parameterTypes);
    Type parameterType=typeManager.getType(parameterTypes.get(0));
    requireNonNull(parameterType,format("Type %s not found",parameterTypes.get(0)));
    MethodHandle methodHandle=null;
    if (parameterType.getJavaType() == type.getJavaType()) {
      methodHandle=MethodHandles.identity(parameterType.getJavaType());
    }
    if (parameterType.getJavaType() == Slice.class) {
      if (type.getJavaType() == Block.class) {
        methodHandle=BlockSerdeUtil.READ_BLOCK.bindTo(blockEncodingSerde);
      }
    }
    checkArgument(methodHandle != null,"Expected type %s to use (or can be converted into) Java type %s, but Java type is %s",type,parameterType.getJavaType(),type.getJavaType());
    function=new FunctionInfo(signature,null,true,methodHandle,true,false,ImmutableList.of(false));
  }
  if (function == null) {
    function=getRowFieldReferenceFunctionInfo(QualifiedName.of(signature.getName()),signature.getArgumentTypes());
  }
  checkCondition(function != null,FUNCTION_IMPLEMENTATION_MISSING,"%s not found",signature);
  return new ScalarFunctionImplementation(function.isNullable(),function.getNullableArguments(),function.getMethodHandle(),function.isDeterministic());
}
