{
  checkArgument(signature.getKind() == SCALAR,"%s is not a scalar function",signature);
  checkArgument(signature.getTypeVariableConstraints().isEmpty(),"%s has unbound type parameters",signature);
  Iterable<SqlFunction> candidates=functions.get(QualifiedName.of(signature.getName()));
  Type returnType=typeManager.getType(signature.getReturnType());
  List<Type> argumentTypes=resolveTypes(signature.getArgumentTypes(),typeManager);
  for (  SqlFunction candidate : candidates) {
    Optional<BoundVariables> boundVariables=new SignatureBinder(typeManager,candidate.getSignature(),false).bindVariables(argumentTypes,returnType);
    if (boundVariables.isPresent()) {
      try {
        return specializedScalarCache.getUnchecked(new SpecializedFunctionKey(candidate,boundVariables.get(),argumentTypes.size()));
      }
 catch (      UncheckedExecutionException e) {
        throw Throwables.propagate(e.getCause());
      }
    }
  }
  for (  SqlFunction candidate : candidates) {
    SignatureBinder binder=new SignatureBinder(typeManager,candidate.getSignature(),true);
    Optional<Signature> boundSignature=binder.bind(argumentTypes,returnType);
    if (boundSignature.isPresent()) {
      if (!typeManager.isTypeOnlyCoercion(typeManager.getType(boundSignature.get().getReturnType()),returnType)) {
        continue;
      }
      boolean nonTypeOnlyCoercion=false;
      for (int i=0; i < argumentTypes.size(); i++) {
        Type expectedType=typeManager.getType(boundSignature.get().getArgumentTypes().get(i));
        if (!typeManager.isTypeOnlyCoercion(argumentTypes.get(i),expectedType)) {
          nonTypeOnlyCoercion=true;
          break;
        }
      }
      if (nonTypeOnlyCoercion) {
        continue;
      }
    }
    Optional<BoundVariables> boundVariables=binder.bindVariables(argumentTypes,returnType);
    if (boundVariables.isPresent()) {
      try {
        return specializedScalarCache.getUnchecked(new SpecializedFunctionKey(candidate,boundVariables.get(),argumentTypes.size()));
      }
 catch (      UncheckedExecutionException e) {
        throw Throwables.propagate(e.getCause());
      }
    }
  }
  if (signature.getName().startsWith(MAGIC_LITERAL_FUNCTION_PREFIX)) {
    List<TypeSignature> parameterTypes=signature.getArgumentTypes();
    String typeName=signature.getName().substring(MAGIC_LITERAL_FUNCTION_PREFIX.length());
    Type type=typeManager.getType(parseTypeSignature(typeName));
    requireNonNull(type,format("Type %s not registered",typeName));
    checkArgument(parameterTypes.size() == 1,"Expected one argument to literal function, but got %s",parameterTypes);
    Type parameterType=typeManager.getType(parameterTypes.get(0));
    requireNonNull(parameterType,format("Type %s not found",parameterTypes.get(0)));
    MethodHandle methodHandle=null;
    if (parameterType.getJavaType() == type.getJavaType()) {
      methodHandle=MethodHandles.identity(parameterType.getJavaType());
    }
    if (parameterType.getJavaType() == Slice.class) {
      if (type.getJavaType() == Block.class) {
        methodHandle=BlockSerdeUtil.READ_BLOCK.bindTo(blockEncodingSerde);
      }
    }
    checkArgument(methodHandle != null,"Expected type %s to use (or can be converted into) Java type %s, but Java type is %s",type,parameterType.getJavaType(),type.getJavaType());
    return new ScalarFunctionImplementation(false,ImmutableList.of(false),methodHandle,true);
  }
  throw new PrestoException(FUNCTION_IMPLEMENTATION_MISSING,format("%s not found",signature));
}
