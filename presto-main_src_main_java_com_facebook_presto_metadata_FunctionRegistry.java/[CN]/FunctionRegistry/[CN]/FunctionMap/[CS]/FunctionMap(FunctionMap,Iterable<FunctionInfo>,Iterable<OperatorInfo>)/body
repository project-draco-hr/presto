{
  functionsByName=ImmutableListMultimap.<QualifiedName,FunctionInfo>builder().putAll(map.functionsByName).putAll(Multimaps.index(functions,FunctionInfo.nameGetter())).build();
  functionsBySignature=ImmutableMap.<Signature,FunctionInfo>builder().putAll(map.functionsBySignature).putAll(Maps.uniqueIndex(functions,FunctionInfo.handleGetter())).build();
  byOperator=ImmutableListMultimap.<OperatorType,OperatorInfo>builder().putAll(map.byOperator).putAll(Multimaps.index(operator,OperatorInfo.operatorGetter())).build();
  for (  Map.Entry<QualifiedName,Collection<FunctionInfo>> entry : functionsByName.asMap().entrySet()) {
    Collection<FunctionInfo> infos=entry.getValue();
    checkState(Iterables.all(infos,isAggregationPredicate()) || !Iterables.any(infos,isAggregationPredicate()),"'%s' is both an aggregation and a scalar function",entry.getKey());
  }
}
