{
  Class<? extends FunctionBinder> functionBinderClass=scalarFunction.functionBinder();
  try {
    Constructor<? extends FunctionBinder> constructor=functionBinderClass.getConstructor(MethodHandle.class,boolean.class);
    return constructor.newInstance(lookup().unreflect(method),method.isAnnotationPresent(Nullable.class));
  }
 catch (  ReflectiveOperationException|RuntimeException ignored) {
  }
  try {
    return functionBinderClass.newInstance();
  }
 catch (  Exception e) {
  }
  throw new IllegalArgumentException("Unable to create function binder " + functionBinderClass.getName() + " for function "+ method);
}
