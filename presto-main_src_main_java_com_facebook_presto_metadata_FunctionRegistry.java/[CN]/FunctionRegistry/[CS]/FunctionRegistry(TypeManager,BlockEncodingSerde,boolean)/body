{
  this.typeManager=requireNonNull(typeManager,"typeManager is null");
  this.blockEncodingSerde=requireNonNull(blockEncodingSerde,"blockEncodingSerde is null");
  specializedScalarCache=CacheBuilder.newBuilder().maximumSize(1000).build(new CacheLoader<SpecializedFunctionKey,ScalarFunctionImplementation>(){
    @Override public ScalarFunctionImplementation load(    SpecializedFunctionKey key) throws Exception {
      SqlScalarFunction scalarFunction=checkType(key.getFunction(),SqlScalarFunction.class,"function");
      return scalarFunction.specialize(key.getBoundTypeParameters(),key.getArity(),typeManager,FunctionRegistry.this);
    }
  }
);
  specializedAggregationCache=CacheBuilder.newBuilder().maximumSize(1000).build(new CacheLoader<SpecializedFunctionKey,InternalAggregationFunction>(){
    @Override public InternalAggregationFunction load(    SpecializedFunctionKey key) throws Exception {
      SqlAggregationFunction aggregationFunction=checkType(key.getFunction(),SqlAggregationFunction.class,"function");
      return aggregationFunction.specialize(key.getBoundTypeParameters(),key.getArity(),typeManager,FunctionRegistry.this);
    }
  }
);
  specializedWindowCache=CacheBuilder.newBuilder().maximumSize(1000).build(new CacheLoader<SpecializedFunctionKey,WindowFunctionSupplier>(){
    @Override public WindowFunctionSupplier load(    SpecializedFunctionKey key) throws Exception {
      if (key.getFunction() instanceof SqlAggregationFunction) {
        SqlAggregationFunction aggregationFunction=checkType(key.getFunction(),SqlAggregationFunction.class,"function");
        return supplier(aggregationFunction.getSignature(),specializedAggregationCache.getUnchecked(key));
      }
 else {
        SqlWindowFunction windowFunction=checkType(key.getFunction(),SqlWindowFunction.class,"function");
        return windowFunction.specialize(key.getBoundTypeParameters(),key.getArity(),typeManager,FunctionRegistry.this);
      }
    }
  }
);
  FunctionListBuilder builder=new FunctionListBuilder(typeManager).window("row_number",BIGINT,ImmutableList.<Type>of(),RowNumberFunction.class).window("rank",BIGINT,ImmutableList.<Type>of(),RankFunction.class).window("dense_rank",BIGINT,ImmutableList.<Type>of(),DenseRankFunction.class).window("percent_rank",DOUBLE,ImmutableList.<Type>of(),PercentRankFunction.class).window("cume_dist",DOUBLE,ImmutableList.<Type>of(),CumulativeDistributionFunction.class).window("ntile",BIGINT,ImmutableList.<Type>of(BIGINT),NTileFunction.class).window("first_value",FirstValueFunction.class,"T","T").window("last_value",LastValueFunction.class,"T","T").window("nth_value",NthValueFunction.class,"T","T","bigint").window("lag",LagFunction.class,"T","T").window("lag",LagFunction.class,"T","T","bigint").window("lag",LagFunction.class,"T","T","bigint","T").window("lead",LeadFunction.class,"T","T").window("lead",LeadFunction.class,"T","T","bigint").window("lead",LeadFunction.class,"T","T","bigint","T").aggregate(CountAggregation.class).aggregate(VarianceAggregation.class).aggregate(ApproximateLongPercentileAggregations.class).aggregate(ApproximateLongPercentileArrayAggregations.class).aggregate(ApproximateDoublePercentileAggregations.class).aggregate(CountIfAggregation.class).aggregate(BooleanAndAggregation.class).aggregate(BooleanOrAggregation.class).aggregate(DoubleSumAggregation.class).aggregate(LongSumAggregation.class).aggregate(AverageAggregations.class).aggregate(GeometricMeanAggregations.class).aggregate(ApproximateCountDistinctAggregations.class).aggregate(MergeHyperLogLogAggregation.class).aggregate(ApproximateSetAggregation.class).aggregate(NumericHistogramAggregation.class).aggregate(CovarianceAggregation.class).aggregate(RegressionAggregation.class).aggregate(CorrelationAggregation.class).scalar(StringFunctions.class).scalar(VarbinaryFunctions.class).scalar(RegexpFunctions.class).scalar(UrlFunctions.class).scalar(MathFunctions.class).scalar(DateTimeFunctions.class).scalar(JsonFunctions.class).scalar(ColorFunctions.class).scalar(ColorOperators.class).scalar(HyperLogLogFunctions.class).scalar(UnknownOperators.class).scalar(BooleanOperators.class).scalar(BigintOperators.class).scalar(DoubleOperators.class).scalar(VarcharOperators.class).scalar(VarbinaryOperators.class).scalar(DateOperators.class).scalar(TimeOperators.class).scalar(TimestampOperators.class).scalar(IntervalDayTimeOperators.class).scalar(IntervalYearMonthOperators.class).scalar(TimeWithTimeZoneOperators.class).scalar(TimestampWithTimeZoneOperators.class).scalar(DateTimeOperators.class).scalar(HyperLogLogOperators.class).scalar(LikeFunctions.class).scalar(ArrayFunctions.class).scalar(CombineHashFunction.class).scalar(JsonOperators.class).scalar(FailureFunction.class).function(IDENTITY_CAST).functions(ARRAY_CONTAINS,ARRAY_JOIN,ARRAY_JOIN_WITH_NULL_REPLACEMENT).functions(ARRAY_MIN,ARRAY_MAX).functions(ARRAY_TO_ARRAY_CAST,ARRAY_HASH_CODE,ARRAY_EQUAL,ARRAY_NOT_EQUAL,ARRAY_LESS_THAN,ARRAY_LESS_THAN_OR_EQUAL,ARRAY_GREATER_THAN,ARRAY_GREATER_THAN_OR_EQUAL).functions(ARRAY_CONCAT_FUNCTION,ARRAY_TO_ELEMENT_CONCAT_FUNCTION,ELEMENT_TO_ARRAY_CONCAT_FUNCTION).functions(MAP_EQUAL,MAP_NOT_EQUAL,MAP_HASH_CODE).functions(ARRAY_CONSTRUCTOR,ARRAY_SUBSCRIPT,ARRAY_ELEMENT_AT_FUNCTION,ARRAY_CARDINALITY,ARRAY_POSITION,ARRAY_SORT_FUNCTION,ARRAY_INTERSECT_FUNCTION,ARRAY_TO_JSON,JSON_TO_ARRAY,ARRAY_DISTINCT_FUNCTION,ARRAY_REMOVE_FUNCTION,ARRAY_SLICE_FUNCTION).functions(MAP_CONSTRUCTOR,MAP_CARDINALITY,MAP_SUBSCRIPT,MAP_TO_JSON,JSON_TO_MAP,MAP_KEYS,MAP_VALUES).functions(MAP_AGG,MULTIMAP_AGG).function(HISTOGRAM).function(CHECKSUM_AGGREGATION).function(ARBITRARY_AGGREGATION).function(ARRAY_AGGREGATION).functions(GREATEST,LEAST).functions(MAX_BY,MIN_BY,MAX_BY_N_AGGREGATION,MIN_BY_N_AGGREGATION).functions(MAX_AGGREGATION,MIN_AGGREGATION,MAX_N_AGGREGATION,MIN_N_AGGREGATION).function(COUNT_COLUMN).functions(ROW_HASH_CODE,ROW_TO_JSON,ROW_EQUAL,ROW_NOT_EQUAL).function(CONCAT).function(TRY_CAST);
  if (experimentalSyntaxEnabled) {
    builder.aggregate(ApproximateAverageAggregations.class).aggregate(ApproximateSumAggregations.class).aggregate(ApproximateCountAggregation.class).aggregate(ApproximateCountColumnAggregations.class);
  }
  addFunctions(builder.getFunctions());
}
