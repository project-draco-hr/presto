{
  this.typeManager=requireNonNull(typeManager,"typeManager is null");
  this.blockEncodingSerde=requireNonNull(blockEncodingSerde,"blockEncodingSerde is null");
  specializedScalarCache=CacheBuilder.newBuilder().maximumSize(1000).build(new CacheLoader<SpecializedFunctionKey,ScalarFunctionImplementation>(){
    @Override public ScalarFunctionImplementation load(    SpecializedFunctionKey key) throws Exception {
      SqlScalarFunction scalarFunction=checkType(key.getFunction(),SqlScalarFunction.class,"function");
      return scalarFunction.specialize(key.getBoundVariables(),key.getArity(),typeManager,FunctionRegistry.this);
    }
  }
);
  specializedAggregationCache=CacheBuilder.newBuilder().maximumSize(1000).build(new CacheLoader<SpecializedFunctionKey,InternalAggregationFunction>(){
    @Override public InternalAggregationFunction load(    SpecializedFunctionKey key) throws Exception {
      SqlAggregationFunction aggregationFunction=checkType(key.getFunction(),SqlAggregationFunction.class,"function");
      return aggregationFunction.specialize(key.getBoundVariables(),key.getArity(),typeManager,FunctionRegistry.this);
    }
  }
);
  specializedWindowCache=CacheBuilder.newBuilder().maximumSize(1000).build(new CacheLoader<SpecializedFunctionKey,WindowFunctionSupplier>(){
    @Override public WindowFunctionSupplier load(    SpecializedFunctionKey key) throws Exception {
      if (key.getFunction() instanceof SqlAggregationFunction) {
        SqlAggregationFunction aggregationFunction=checkType(key.getFunction(),SqlAggregationFunction.class,"function");
        return supplier(aggregationFunction.getSignature(),specializedAggregationCache.getUnchecked(key));
      }
 else {
        SqlWindowFunction windowFunction=checkType(key.getFunction(),SqlWindowFunction.class,"function");
        return windowFunction.specialize(key.getBoundVariables(),key.getArity(),typeManager,FunctionRegistry.this);
      }
    }
  }
);
  FunctionListBuilder builder=new FunctionListBuilder().window(RowNumberFunction.class).window(RankFunction.class).window(DenseRankFunction.class).window(PercentRankFunction.class).window(CumulativeDistributionFunction.class).window(NTileFunction.class).window(FirstValueFunction.class).window(LastValueFunction.class).window(NthValueFunction.class).window(LagFunction.class).window(LeadFunction.class).aggregate(CountAggregation.class).aggregate(VarianceAggregation.class).aggregate(ApproximateLongPercentileAggregations.class).aggregate(ApproximateLongPercentileArrayAggregations.class).aggregate(ApproximateDoublePercentileAggregations.class).aggregate(ApproximateDoublePercentileArrayAggregations.class).aggregate(ApproximateFloatPercentileAggregations.class).aggregate(ApproximateFloatPercentileArrayAggregations.class).aggregate(CountIfAggregation.class).aggregate(BooleanAndAggregation.class).aggregate(BooleanOrAggregation.class).aggregate(DoubleSumAggregation.class).aggregate(FloatSumAggregation.class).aggregate(LongSumAggregation.class).aggregate(AverageAggregations.class).aggregate(FloatAverageAggregation.class).aggregate(GeometricMeanAggregations.class).aggregate(FloatGeometricMeanAggregations.class).aggregate(ApproximateCountDistinctAggregations.class).aggregate(MergeHyperLogLogAggregation.class).aggregate(ApproximateSetAggregation.class).aggregate(DoubleHistogramAggregation.class).aggregate(FloatHistogramAggregation.class).aggregate(DoubleCovarianceAggregation.class).aggregate(RegressionAggregation.class).aggregate(CorrelationAggregation.class).scalars(SequenceFunction.class).scalars(StringFunctions.class).scalars(VarbinaryFunctions.class).scalars(UrlFunctions.class).scalars(MathFunctions.class).scalars(BitwiseFunctions.class).scalars(DateTimeFunctions.class).scalars(JsonFunctions.class).scalars(ColorFunctions.class).scalars(ColorOperators.class).scalars(HyperLogLogFunctions.class).scalars(UnknownOperators.class).scalars(BooleanOperators.class).scalars(BigintOperators.class).scalars(IntegerOperators.class).scalars(SmallintOperators.class).scalars(TinyintOperators.class).scalars(DoubleOperators.class).scalars(FloatOperators.class).scalars(VarcharOperators.class).scalars(VarbinaryOperators.class).scalars(DateOperators.class).scalars(TimeOperators.class).scalars(TimestampOperators.class).scalars(IntervalDayTimeOperators.class).scalars(IntervalYearMonthOperators.class).scalars(TimeWithTimeZoneOperators.class).scalars(TimestampWithTimeZoneOperators.class).scalars(DateTimeOperators.class).scalars(HyperLogLogOperators.class).scalars(LikeFunctions.class).scalars(ArrayFunctions.class).scalar(ArrayCardinalityFunction.class).scalar(ArrayContains.class).scalar(ArrayPositionFunction.class).scalars(CombineHashFunction.class).scalars(JsonOperators.class).scalars(FailureFunction.class).scalar(DecimalOperators.Negation.class).scalar(DecimalOperators.HashCode.class).functions(IDENTITY_CAST,CAST_FROM_UNKNOWN).scalar(ArrayLessThanOrEqualOperator.class).scalar(ArrayRemoveFunction.class).scalar(ArrayGreaterThanOperator.class).scalar(ArrayGreaterThanOrEqualOperator.class).scalar(ArrayElementAtFunction.class).scalar(ArraySortFunction.class).scalar(ArrayMinFunction.class).scalar(ArrayMaxFunction.class).scalar(ArrayDistinctFunction.class).scalar(ArrayConcatFunction.class).scalar(ArrayNotEqualOperator.class).scalar(ArrayEqualOperator.class).scalar(ArrayHashCodeOperator.class).scalar(ArrayIntersectFunction.class).scalar(ArraySliceFunction.class).scalar(MapEqualOperator.class).scalar(MapNotEqualOperator.class).scalar(MapKeys.class).scalar(MapValues.class).scalar(MapCardinalityFunction.class).scalar(MapConcatFunction.class).scalar(MapToMapCast.class).functions(ZIP_FUNCTIONS).functions(ARRAY_JOIN,ARRAY_JOIN_WITH_NULL_REPLACEMENT).functions(ARRAY_TO_ARRAY_CAST,ARRAY_LESS_THAN).functions(ARRAY_TO_ELEMENT_CONCAT_FUNCTION,ELEMENT_TO_ARRAY_CONCAT_FUNCTION).function(MAP_HASH_CODE).function(MAP_ELEMENT_AT).function(ARRAY_FLATTEN_FUNCTION).functions(ARRAY_CONSTRUCTOR,ARRAY_SUBSCRIPT,ARRAY_TO_JSON,JSON_TO_ARRAY).functions(MAP_CONSTRUCTOR,MAP_SUBSCRIPT,MAP_TO_JSON,JSON_TO_MAP).functions(MAP_AGG,MULTIMAP_AGG,MAP_UNION).functions(DECIMAL_TO_VARCHAR_CAST,DECIMAL_TO_INTEGER_CAST,DECIMAL_TO_BIGINT_CAST,DECIMAL_TO_DOUBLE_CAST,DECIMAL_TO_FLOAT_CAST,DECIMAL_TO_BOOLEAN_CAST,DECIMAL_TO_TINYINT_CAST,DECIMAL_TO_SMALLINT_CAST).functions(VARCHAR_TO_DECIMAL_CAST,INTEGER_TO_DECIMAL_CAST,BIGINT_TO_DECIMAL_CAST,DOUBLE_TO_DECIMAL_CAST,FLOAT_TO_DECIMAL_CAST,BOOLEAN_TO_DECIMAL_CAST,TINYINT_TO_DECIMAL_CAST,SMALLINT_TO_DECIMAL_CAST).functions(JSON_TO_DECIMAL_CAST,DECIMAL_TO_JSON_CAST).functions(DECIMAL_ADD_OPERATOR,DECIMAL_SUBTRACT_OPERATOR,DECIMAL_MULTIPLY_OPERATOR,DECIMAL_DIVIDE_OPERATOR,DECIMAL_MODULUS_OPERATOR).functions(DECIMAL_EQUAL_OPERATOR,DECIMAL_NOT_EQUAL_OPERATOR).functions(DECIMAL_LESS_THAN_OPERATOR,DECIMAL_LESS_THAN_OR_EQUAL_OPERATOR).functions(DECIMAL_GREATER_THAN_OPERATOR,DECIMAL_GREATER_THAN_OR_EQUAL_OPERATOR).functions(DECIMAL_TO_DECIMAL_SATURATED_FLOOR_CAST).function(DECIMAL_BETWEEN_OPERATOR).function(HISTOGRAM).function(CHECKSUM_AGGREGATION).function(VARCHAR_TO_VARCHAR_CAST).function(IDENTITY_CAST).function(ARBITRARY_AGGREGATION).functions(GREATEST,LEAST).functions(MAX_BY,MIN_BY,MAX_BY_N_AGGREGATION,MIN_BY_N_AGGREGATION).functions(MAX_AGGREGATION,MIN_AGGREGATION,MAX_N_AGGREGATION,MIN_N_AGGREGATION).function(COUNT_COLUMN).functions(ROW_HASH_CODE,ROW_TO_JSON,ROW_EQUAL,ROW_NOT_EQUAL,ROW_TO_ROW_CAST).function(CONCAT).function(DECIMAL_TO_DECIMAL_CAST).function(TRY_CAST);
  builder.function(new ArrayAggregationFunction(featuresConfig.isLegacyArrayAgg()));
switch (featuresConfig.getRegexLibrary()) {
case JONI:
    builder.scalars(JoniRegexpFunctions.class);
  break;
case RE2J:
builder.scalars(Re2JRegexpFunctions.class).function(new Re2JCastToRegexpFunction(featuresConfig.getRe2JDfaStatesLimit(),featuresConfig.getRe2JDfaRetries()));
break;
}
if (featuresConfig.isExperimentalSyntaxEnabled()) {
builder.aggregate(ApproximateAverageAggregations.class).aggregate(ApproximateSumAggregations.class).aggregate(ApproximateCountAggregation.class).aggregate(ApproximateCountColumnAggregations.class);
}
addFunctions(builder.getFunctions());
}
