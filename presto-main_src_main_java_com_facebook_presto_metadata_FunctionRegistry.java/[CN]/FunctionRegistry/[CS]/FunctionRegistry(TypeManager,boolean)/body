{
  this.typeManager=checkNotNull(typeManager,"typeManager is null");
  specializedFunctionCache=CacheBuilder.newBuilder().maximumSize(1000).build(new CacheLoader<SpecializedFunctionKey,FunctionInfo>(){
    @Override public FunctionInfo load(    SpecializedFunctionKey key) throws Exception {
      return key.getFunction().specialize(key.getBoundTypeParameters(),key.getArity(),typeManager,FunctionRegistry.this);
    }
  }
);
  FunctionListBuilder builder=new FunctionListBuilder(typeManager).window("row_number",BIGINT,ImmutableList.<Type>of(),RowNumberFunction.class).window("rank",BIGINT,ImmutableList.<Type>of(),RankFunction.class).window("dense_rank",BIGINT,ImmutableList.<Type>of(),DenseRankFunction.class).window("percent_rank",DOUBLE,ImmutableList.<Type>of(),PercentRankFunction.class).window("cume_dist",DOUBLE,ImmutableList.<Type>of(),CumulativeDistributionFunction.class).window("ntile",BIGINT,ImmutableList.<Type>of(BIGINT),NTileFunction.class).window("first_value",BIGINT,ImmutableList.<Type>of(BIGINT),BigintFirstValueFunction.class).window("first_value",DOUBLE,ImmutableList.<Type>of(DOUBLE),DoubleFirstValueFunction.class).window("first_value",BOOLEAN,ImmutableList.<Type>of(BOOLEAN),BooleanFirstValueFunction.class).window("first_value",VARCHAR,ImmutableList.<Type>of(VARCHAR),VarcharFirstValueFunction.class).window("last_value",BIGINT,ImmutableList.<Type>of(BIGINT),BigintLastValueFunction.class).window("last_value",DOUBLE,ImmutableList.<Type>of(DOUBLE),DoubleLastValueFunction.class).window("last_value",BOOLEAN,ImmutableList.<Type>of(BOOLEAN),BooleanLastValueFunction.class).window("last_value",VARCHAR,ImmutableList.<Type>of(VARCHAR),VarcharLastValueFunction.class).window("nth_value",BIGINT,ImmutableList.<Type>of(BIGINT,BIGINT),BigintNthValueFunction.class).window("nth_value",DOUBLE,ImmutableList.<Type>of(DOUBLE,BIGINT),DoubleNthValueFunction.class).window("nth_value",BOOLEAN,ImmutableList.<Type>of(BOOLEAN,BIGINT),BooleanNthValueFunction.class).window("nth_value",VARCHAR,ImmutableList.<Type>of(VARCHAR,BIGINT),VarcharNthValueFunction.class).window("lag",BIGINT,ImmutableList.<Type>of(BIGINT),BigintLagFunction.class).window("lag",BIGINT,ImmutableList.<Type>of(BIGINT,BIGINT),BigintLagFunction.class).window("lag",BIGINT,ImmutableList.<Type>of(BIGINT,BIGINT,BIGINT),BigintLagFunction.class).window("lag",DOUBLE,ImmutableList.<Type>of(DOUBLE),DoubleLagFunction.class).window("lag",DOUBLE,ImmutableList.<Type>of(DOUBLE,BIGINT),DoubleLagFunction.class).window("lag",DOUBLE,ImmutableList.<Type>of(DOUBLE,BIGINT,DOUBLE),DoubleLagFunction.class).window("lag",BOOLEAN,ImmutableList.<Type>of(BOOLEAN),BooleanLagFunction.class).window("lag",BOOLEAN,ImmutableList.<Type>of(BOOLEAN,BIGINT),BooleanLagFunction.class).window("lag",BOOLEAN,ImmutableList.<Type>of(BOOLEAN,BIGINT,BOOLEAN),BooleanLagFunction.class).window("lag",VARCHAR,ImmutableList.<Type>of(VARCHAR),VarcharLagFunction.class).window("lag",VARCHAR,ImmutableList.<Type>of(VARCHAR,BIGINT),VarcharLagFunction.class).window("lag",VARCHAR,ImmutableList.<Type>of(VARCHAR,BIGINT,VARCHAR),VarcharLagFunction.class).window("lead",BIGINT,ImmutableList.<Type>of(BIGINT),BigintLeadFunction.class).window("lead",BIGINT,ImmutableList.<Type>of(BIGINT,BIGINT),BigintLeadFunction.class).window("lead",BIGINT,ImmutableList.<Type>of(BIGINT,BIGINT,BIGINT),BigintLeadFunction.class).window("lead",DOUBLE,ImmutableList.<Type>of(DOUBLE),DoubleLeadFunction.class).window("lead",DOUBLE,ImmutableList.<Type>of(DOUBLE,BIGINT),DoubleLeadFunction.class).window("lead",DOUBLE,ImmutableList.<Type>of(DOUBLE,BIGINT,DOUBLE),DoubleLeadFunction.class).window("lead",BOOLEAN,ImmutableList.<Type>of(BOOLEAN),BooleanLeadFunction.class).window("lead",BOOLEAN,ImmutableList.<Type>of(BOOLEAN,BIGINT),BooleanLeadFunction.class).window("lead",BOOLEAN,ImmutableList.<Type>of(BOOLEAN,BIGINT,BOOLEAN),BooleanLeadFunction.class).window("lead",VARCHAR,ImmutableList.<Type>of(VARCHAR),VarcharLeadFunction.class).window("lead",VARCHAR,ImmutableList.<Type>of(VARCHAR,BIGINT),VarcharLeadFunction.class).window("lead",VARCHAR,ImmutableList.<Type>of(VARCHAR,BIGINT,VARCHAR),VarcharLeadFunction.class).aggregate(CountAggregation.class).aggregate(VarianceAggregation.class).aggregate(ApproximateLongPercentileAggregations.class).aggregate(ApproximateDoublePercentileAggregations.class).aggregate(CountIfAggregation.class).aggregate(BooleanAndAggregation.class).aggregate(BooleanOrAggregation.class).aggregate(DoubleSumAggregation.class).aggregate(LongSumAggregation.class).aggregate(AverageAggregations.class).aggregate(ApproximateCountDistinctAggregations.class).aggregate(MergeHyperLogLogAggregation.class).aggregate(ApproximateSetAggregation.class).aggregate(NumericHistogramAggregation.class).scalar(StringFunctions.class).scalar(VarbinaryFunctions.class).scalar(RegexpFunctions.class).scalar(UrlFunctions.class).scalar(MathFunctions.class).scalar(DateTimeFunctions.class).scalar(JsonFunctions.class).scalar(ColorFunctions.class).scalar(HyperLogLogFunctions.class).scalar(BooleanOperators.class).scalar(BigintOperators.class).scalar(DoubleOperators.class).scalar(VarcharOperators.class).scalar(VarbinaryOperators.class).scalar(DateOperators.class).scalar(TimeOperators.class).scalar(TimestampOperators.class).scalar(IntervalDayTimeOperators.class).scalar(IntervalYearMonthOperators.class).scalar(TimeWithTimeZoneOperators.class).scalar(TimestampWithTimeZoneOperators.class).scalar(DateTimeOperators.class).scalar(HyperLogLogOperators.class).scalar(LikeFunctions.class).scalar(ArrayFunctions.class).scalar(CombineHashFunction.class).scalar(JsonOperators.class).functions(ARRAY_CONTAINS).functions(ARRAY_HASH_CODE,ARRAY_EQUAL,ARRAY_NOT_EQUAL,ARRAY_LESS_THAN,ARRAY_LESS_THAN_OR_EQUAL,ARRAY_GREATER_THAN,ARRAY_GREATER_THAN_OR_EQUAL).functions(ARRAY_CONCAT_FUNCTION,ARRAY_TO_ELEMENT_CONCAT_FUNCTION,ELEMENT_TO_ARRAY_CONCAT_FUNCTION).functions(ARRAY_CONSTRUCTOR,ARRAY_SUBSCRIPT,ARRAY_CARDINALITY,ARRAY_SORT_FUNCTION,ARRAY_TO_JSON,JSON_TO_ARRAY,ARRAY_DISTINCT_FUNCTION).functions(MAP_EQUAL,MAP_NOT_EQUAL,MAP_HASH_CODE).functions(MAP_CONSTRUCTOR,MAP_CARDINALITY,MAP_SUBSCRIPT,MAP_TO_JSON,JSON_TO_MAP,MAP_KEYS,MAP_VALUES,MAP_AGG).function(IDENTITY_CAST).function(ARBITRARY_AGGREGATION).function(ARRAY_AGGREGATION).function(LEAST).function(GREATEST).function(MAX_BY).function(MIN_BY).functions(MAX_AGGREGATION,MIN_AGGREGATION).function(COUNT_COLUMN).functions(ROW_HASH_CODE,ROW_TO_JSON,ROW_EQUAL,ROW_NOT_EQUAL).function(TRY_CAST);
  if (experimentalSyntaxEnabled) {
    builder.aggregate(ApproximateAverageAggregations.class).aggregate(ApproximateSumAggregations.class).aggregate(ApproximateCountAggregation.class).aggregate(ApproximateCountColumnAggregations.class);
  }
  addFunctions(builder.getFunctions());
}
