{
  List<FunctionInfo> functions=new FunctionListBuilder().window("row_number",BIGINT,ImmutableList.<Type>of(),supplier(RowNumberFunction.class)).window("rank",BIGINT,ImmutableList.<Type>of(),supplier(RankFunction.class)).window("dense_rank",BIGINT,ImmutableList.<Type>of(),supplier(DenseRankFunction.class)).window("percent_rank",DOUBLE,ImmutableList.<Type>of(),supplier(PercentRankFunction.class)).window("cume_dist",DOUBLE,ImmutableList.<Type>of(),supplier(CumulativeDistributionFunction.class)).aggregate("count",BIGINT,ImmutableList.<Type>of(),BIGINT,COUNT).aggregate("count",BIGINT,ImmutableList.<Type>of(BOOLEAN),BIGINT,COUNT_COLUMN).aggregate("count",BIGINT,ImmutableList.<Type>of(BIGINT),BIGINT,COUNT_COLUMN).aggregate("count",BIGINT,ImmutableList.<Type>of(DOUBLE),BIGINT,COUNT_COLUMN).aggregate("count",BIGINT,ImmutableList.<Type>of(VARCHAR),BIGINT,COUNT_COLUMN).aggregate("count_if",BIGINT,ImmutableList.<Type>of(BOOLEAN),BIGINT,COUNT_IF).aggregate("sum",BIGINT,ImmutableList.of(BIGINT),BIGINT,LONG_SUM).aggregate("sum",DOUBLE,ImmutableList.of(DOUBLE),DOUBLE,DOUBLE_SUM).aggregate("avg",DOUBLE,ImmutableList.of(DOUBLE),VARCHAR,DOUBLE_AVERAGE).aggregate("avg",DOUBLE,ImmutableList.of(BIGINT),VARCHAR,LONG_AVERAGE).aggregate("max",BOOLEAN,ImmutableList.of(BOOLEAN),BOOLEAN,BOOLEAN_MAX).aggregate("max",BIGINT,ImmutableList.of(BIGINT),BIGINT,LONG_MAX).aggregate("max",DOUBLE,ImmutableList.of(DOUBLE),DOUBLE,DOUBLE_MAX).aggregate("max",VARCHAR,ImmutableList.of(VARCHAR),VARCHAR,VAR_BINARY_MAX).aggregate("min",BOOLEAN,ImmutableList.of(BOOLEAN),BOOLEAN,BOOLEAN_MIN).aggregate("min",BIGINT,ImmutableList.of(BIGINT),BIGINT,LONG_MIN).aggregate("min",DOUBLE,ImmutableList.of(DOUBLE),DOUBLE,DOUBLE_MIN).aggregate("min",VARCHAR,ImmutableList.of(VARCHAR),VARCHAR,VAR_BINARY_MIN).aggregate("var_pop",DOUBLE,ImmutableList.of(DOUBLE),VARCHAR,DoubleVarianceAggregation.VARIANCE_POP_INSTANCE).aggregate("var_pop",DOUBLE,ImmutableList.of(BIGINT),VARCHAR,LongVarianceAggregation.VARIANCE_POP_INSTANCE).aggregate("var_samp",DOUBLE,ImmutableList.of(DOUBLE),VARCHAR,DoubleVarianceAggregation.VARIANCE_INSTANCE).aggregate("var_samp",DOUBLE,ImmutableList.of(BIGINT),VARCHAR,LongVarianceAggregation.VARIANCE_INSTANCE).aggregate("variance",DOUBLE,ImmutableList.of(DOUBLE),VARCHAR,DoubleVarianceAggregation.VARIANCE_INSTANCE).aggregate("variance",DOUBLE,ImmutableList.of(BIGINT),VARCHAR,LongVarianceAggregation.VARIANCE_INSTANCE).aggregate("stddev_pop",DOUBLE,ImmutableList.of(DOUBLE),VARCHAR,DoubleStdDevAggregation.STDDEV_POP_INSTANCE).aggregate("stddev_pop",DOUBLE,ImmutableList.of(BIGINT),VARCHAR,LongStdDevAggregation.STDDEV_POP_INSTANCE).aggregate("stddev_samp",DOUBLE,ImmutableList.of(DOUBLE),VARCHAR,DoubleStdDevAggregation.STDDEV_INSTANCE).aggregate("stddev_samp",DOUBLE,ImmutableList.of(BIGINT),VARCHAR,LongStdDevAggregation.STDDEV_INSTANCE).aggregate("stddev",DOUBLE,ImmutableList.of(DOUBLE),VARCHAR,DoubleStdDevAggregation.STDDEV_INSTANCE).aggregate("stddev",DOUBLE,ImmutableList.of(BIGINT),VARCHAR,LongStdDevAggregation.STDDEV_INSTANCE).aggregate("approx_distinct",BIGINT,ImmutableList.of(BOOLEAN),VARCHAR,ApproximateCountDistinctAggregation.LONG_INSTANCE).aggregate("approx_distinct",BIGINT,ImmutableList.of(BIGINT),VARCHAR,ApproximateCountDistinctAggregation.LONG_INSTANCE).aggregate("approx_distinct",BIGINT,ImmutableList.of(DOUBLE),VARCHAR,ApproximateCountDistinctAggregation.DOUBLE_INSTANCE).aggregate("approx_distinct",BIGINT,ImmutableList.of(VARCHAR),VARCHAR,ApproximateCountDistinctAggregation.VARBINARY_INSTANCE).aggregate("approx_percentile",BIGINT,ImmutableList.of(BIGINT,DOUBLE),VARCHAR,LongApproximatePercentileAggregation.INSTANCE).aggregate("approx_percentile",BIGINT,ImmutableList.of(BIGINT,BIGINT,DOUBLE),VARCHAR,LongApproximatePercentileWeightedAggregation.INSTANCE).aggregate("approx_percentile",DOUBLE,ImmutableList.of(DOUBLE,DOUBLE),VARCHAR,DoubleApproximatePercentileAggregation.INSTANCE).aggregate("approx_percentile",DOUBLE,ImmutableList.of(DOUBLE,BIGINT,DOUBLE),VARCHAR,DoubleApproximatePercentileWeightedAggregation.INSTANCE).aggregate("approx_avg",VARCHAR,ImmutableList.of(BIGINT),VARCHAR,LONG_APPROX_AVERAGE).aggregate("approx_avg",VARCHAR,ImmutableList.of(DOUBLE),VARCHAR,DOUBLE_APPROX_AVERAGE).scalar(StringFunctions.class).scalar(RegexpFunctions.class).scalar(UrlFunctions.class).scalar(MathFunctions.class).scalar(UnixTimeFunctions.class).scalar(JsonFunctions.class).scalar(ColorFunctions.class).build();
  functionsByName=Multimaps.index(functions,FunctionInfo.nameGetter());
  functionsByHandle=Maps.uniqueIndex(functions,FunctionInfo.handleGetter());
  for (  Map.Entry<QualifiedName,Collection<FunctionInfo>> entry : functionsByName.asMap().entrySet()) {
    Collection<FunctionInfo> infos=entry.getValue();
    Preconditions.checkState(Iterables.all(infos,isAggregationPredicate()) || !Iterables.any(infos,isAggregationPredicate()),"'%s' is both an aggregation and a scalar function",entry.getKey());
  }
}
