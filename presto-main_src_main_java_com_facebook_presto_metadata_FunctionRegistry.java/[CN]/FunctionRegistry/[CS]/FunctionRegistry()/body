{
  List<FunctionInfo> functions=new FunctionListBuilder().window("row_number",LONG,ImmutableList.<Type>of(),supplier(RowNumberFunction.class)).window("rank",LONG,ImmutableList.<Type>of(),supplier(RankFunction.class)).window("dense_rank",LONG,ImmutableList.<Type>of(),supplier(DenseRankFunction.class)).window("percent_rank",DOUBLE,ImmutableList.<Type>of(),supplier(PercentRankFunction.class)).window("cume_dist",DOUBLE,ImmutableList.<Type>of(),supplier(CumulativeDistributionFunction.class)).aggregate("count",LONG,ImmutableList.<Type>of(),LONG,COUNT).aggregate("count",LONG,ImmutableList.<Type>of(BOOLEAN),LONG,COUNT_COLUMN).aggregate("count",LONG,ImmutableList.<Type>of(LONG),LONG,COUNT_COLUMN).aggregate("count",LONG,ImmutableList.<Type>of(DOUBLE),LONG,COUNT_COLUMN).aggregate("count",LONG,ImmutableList.<Type>of(STRING),LONG,COUNT_COLUMN).aggregate("count_if",LONG,ImmutableList.<Type>of(BOOLEAN),LONG,COUNT_IF).aggregate("sum",LONG,ImmutableList.of(LONG),LONG,LONG_SUM).aggregate("sum",DOUBLE,ImmutableList.of(DOUBLE),DOUBLE,DOUBLE_SUM).aggregate("avg",DOUBLE,ImmutableList.of(DOUBLE),STRING,DOUBLE_AVERAGE).aggregate("avg",DOUBLE,ImmutableList.of(LONG),STRING,LONG_AVERAGE).aggregate("max",BOOLEAN,ImmutableList.of(BOOLEAN),BOOLEAN,BOOLEAN_MAX).aggregate("max",LONG,ImmutableList.of(LONG),LONG,LONG_MAX).aggregate("max",DOUBLE,ImmutableList.of(DOUBLE),DOUBLE,DOUBLE_MAX).aggregate("max",STRING,ImmutableList.of(STRING),STRING,VAR_BINARY_MAX).aggregate("min",BOOLEAN,ImmutableList.of(BOOLEAN),BOOLEAN,BOOLEAN_MIN).aggregate("min",LONG,ImmutableList.of(LONG),LONG,LONG_MIN).aggregate("min",DOUBLE,ImmutableList.of(DOUBLE),DOUBLE,DOUBLE_MIN).aggregate("min",STRING,ImmutableList.of(STRING),STRING,VAR_BINARY_MIN).aggregate("var_pop",DOUBLE,ImmutableList.of(DOUBLE),STRING,DoubleVarianceAggregation.VARIANCE_POP_INSTANCE).aggregate("var_pop",DOUBLE,ImmutableList.of(LONG),STRING,LongVarianceAggregation.VARIANCE_POP_INSTANCE).aggregate("var_samp",DOUBLE,ImmutableList.of(DOUBLE),STRING,DoubleVarianceAggregation.VARIANCE_INSTANCE).aggregate("var_samp",DOUBLE,ImmutableList.of(LONG),STRING,LongVarianceAggregation.VARIANCE_INSTANCE).aggregate("variance",DOUBLE,ImmutableList.of(DOUBLE),STRING,DoubleVarianceAggregation.VARIANCE_INSTANCE).aggregate("variance",DOUBLE,ImmutableList.of(LONG),STRING,LongVarianceAggregation.VARIANCE_INSTANCE).aggregate("stddev_pop",DOUBLE,ImmutableList.of(DOUBLE),STRING,DoubleStdDevAggregation.STDDEV_POP_INSTANCE).aggregate("stddev_pop",DOUBLE,ImmutableList.of(LONG),STRING,LongStdDevAggregation.STDDEV_POP_INSTANCE).aggregate("stddev_samp",DOUBLE,ImmutableList.of(DOUBLE),STRING,DoubleStdDevAggregation.STDDEV_INSTANCE).aggregate("stddev_samp",DOUBLE,ImmutableList.of(LONG),STRING,LongStdDevAggregation.STDDEV_INSTANCE).aggregate("stddev",DOUBLE,ImmutableList.of(DOUBLE),STRING,DoubleStdDevAggregation.STDDEV_INSTANCE).aggregate("stddev",DOUBLE,ImmutableList.of(LONG),STRING,LongStdDevAggregation.STDDEV_INSTANCE).aggregate("approx_distinct",LONG,ImmutableList.of(BOOLEAN),STRING,ApproximateCountDistinctAggregation.LONG_INSTANCE).aggregate("approx_distinct",LONG,ImmutableList.of(LONG),STRING,ApproximateCountDistinctAggregation.LONG_INSTANCE).aggregate("approx_distinct",LONG,ImmutableList.of(DOUBLE),STRING,ApproximateCountDistinctAggregation.DOUBLE_INSTANCE).aggregate("approx_distinct",LONG,ImmutableList.of(STRING),STRING,ApproximateCountDistinctAggregation.VARBINARY_INSTANCE).aggregate("approx_percentile",LONG,ImmutableList.of(LONG,DOUBLE),STRING,LongApproximatePercentileAggregation.INSTANCE).aggregate("approx_percentile",LONG,ImmutableList.of(LONG,LONG,DOUBLE),STRING,LongApproximatePercentileWeightedAggregation.INSTANCE).aggregate("approx_percentile",DOUBLE,ImmutableList.of(DOUBLE,DOUBLE),STRING,DoubleApproximatePercentileAggregation.INSTANCE).aggregate("approx_percentile",DOUBLE,ImmutableList.of(DOUBLE,LONG,DOUBLE),STRING,DoubleApproximatePercentileWeightedAggregation.INSTANCE).scalar(StringFunctions.class).scalar(RegexpFunctions.class).scalar(UrlFunctions.class).scalar(MathFunctions.class).scalar(UnixTimeFunctions.class).scalar(JsonFunctions.class).scalar(ColorFunctions.class).build();
  functionsByName=Multimaps.index(functions,FunctionInfo.nameGetter());
  functionsByHandle=Maps.uniqueIndex(functions,FunctionInfo.handleGetter());
  for (  Map.Entry<QualifiedName,Collection<FunctionInfo>> entry : functionsByName.asMap().entrySet()) {
    Collection<FunctionInfo> infos=entry.getValue();
    Preconditions.checkState(Iterables.all(infos,isAggregationPredicate()) || !Iterables.any(infos,isAggregationPredicate()),"'%s' is both an aggregation and a scalar function",entry.getKey());
  }
}
