{
  List<FunctionInfo> functions=new FunctionListBuilder().window("row_number",FIXED_INT_64,ImmutableList.<TupleInfo.Type>of(),provider(RowNumberFunction.class)).aggregate("count",FIXED_INT_64,ImmutableList.<TupleInfo.Type>of(),FIXED_INT_64,COUNT).aggregate("count",FIXED_INT_64,ImmutableList.<TupleInfo.Type>of(FIXED_INT_64),FIXED_INT_64,COUNT_COLUMN).aggregate("count",FIXED_INT_64,ImmutableList.<TupleInfo.Type>of(DOUBLE),FIXED_INT_64,COUNT_COLUMN).aggregate("count",FIXED_INT_64,ImmutableList.<TupleInfo.Type>of(VARIABLE_BINARY),FIXED_INT_64,COUNT_COLUMN).aggregate("sum",FIXED_INT_64,ImmutableList.of(FIXED_INT_64),FIXED_INT_64,LONG_SUM).aggregate("sum",DOUBLE,ImmutableList.of(DOUBLE),DOUBLE,DOUBLE_SUM).aggregate("avg",DOUBLE,ImmutableList.of(DOUBLE),VARIABLE_BINARY,DOUBLE_AVERAGE).aggregate("avg",DOUBLE,ImmutableList.of(FIXED_INT_64),VARIABLE_BINARY,LONG_AVERAGE).aggregate("max",FIXED_INT_64,ImmutableList.of(FIXED_INT_64),FIXED_INT_64,LONG_MAX).aggregate("max",DOUBLE,ImmutableList.of(DOUBLE),DOUBLE,DOUBLE_MAX).aggregate("max",VARIABLE_BINARY,ImmutableList.of(VARIABLE_BINARY),VARIABLE_BINARY,VAR_BINARY_MAX).aggregate("min",FIXED_INT_64,ImmutableList.of(FIXED_INT_64),FIXED_INT_64,LONG_MIN).aggregate("min",DOUBLE,ImmutableList.of(DOUBLE),DOUBLE,DOUBLE_MIN).aggregate("min",VARIABLE_BINARY,ImmutableList.of(VARIABLE_BINARY),VARIABLE_BINARY,VAR_BINARY_MIN).aggregate("var_pop",DOUBLE,ImmutableList.of(DOUBLE),VARIABLE_BINARY,DoubleVarianceAggregation.VARIANCE_POP_INSTANCE).aggregate("var_pop",DOUBLE,ImmutableList.of(FIXED_INT_64),VARIABLE_BINARY,LongVarianceAggregation.VARIANCE_POP_INSTANCE).aggregate("var_samp",DOUBLE,ImmutableList.of(DOUBLE),VARIABLE_BINARY,DoubleVarianceAggregation.VARIANCE_INSTANCE).aggregate("var_samp",DOUBLE,ImmutableList.of(FIXED_INT_64),VARIABLE_BINARY,LongVarianceAggregation.VARIANCE_INSTANCE).aggregate("variance",DOUBLE,ImmutableList.of(DOUBLE),VARIABLE_BINARY,DoubleVarianceAggregation.VARIANCE_INSTANCE).aggregate("variance",DOUBLE,ImmutableList.of(FIXED_INT_64),VARIABLE_BINARY,LongVarianceAggregation.VARIANCE_INSTANCE).aggregate("stddev_pop",DOUBLE,ImmutableList.of(DOUBLE),VARIABLE_BINARY,DoubleStdDevAggregation.STDDEV_POP_INSTANCE).aggregate("stddev_pop",DOUBLE,ImmutableList.of(FIXED_INT_64),VARIABLE_BINARY,LongStdDevAggregation.STDDEV_POP_INSTANCE).aggregate("stddev_samp",DOUBLE,ImmutableList.of(DOUBLE),VARIABLE_BINARY,DoubleStdDevAggregation.STDDEV_INSTANCE).aggregate("stddev_samp",DOUBLE,ImmutableList.of(FIXED_INT_64),VARIABLE_BINARY,LongStdDevAggregation.STDDEV_INSTANCE).aggregate("stddev",DOUBLE,ImmutableList.of(DOUBLE),VARIABLE_BINARY,DoubleStdDevAggregation.STDDEV_INSTANCE).aggregate("stddev",DOUBLE,ImmutableList.of(FIXED_INT_64),VARIABLE_BINARY,LongStdDevAggregation.STDDEV_INSTANCE).aggregate("approx_distinct",FIXED_INT_64,ImmutableList.of(FIXED_INT_64),VARIABLE_BINARY,ApproximateCountDistinctAggregation.LONG_INSTANCE).aggregate("approx_distinct",FIXED_INT_64,ImmutableList.of(DOUBLE),VARIABLE_BINARY,ApproximateCountDistinctAggregation.DOUBLE_INSTANCE).aggregate("approx_distinct",FIXED_INT_64,ImmutableList.of(VARIABLE_BINARY),VARIABLE_BINARY,ApproximateCountDistinctAggregation.VARBINARY_INSTANCE).scalar(StringFunctions.class).scalar(MathFunctions.class).scalar(UnixTimeFunctions.class).scalar(JsonFunctions.class).build();
  functionsByName=Multimaps.index(functions,FunctionInfo.nameGetter());
  functionsByHandle=Maps.uniqueIndex(functions,FunctionInfo.handleGetter());
}
