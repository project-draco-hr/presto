{
  DriverContext driverContext=taskContext.addPipelineContext(true,true).addDriverContext();
  OperatorContext operatorContext=driverContext.addOperatorContext(0,StaticOperator.class.getSimpleName());
  NewOperator buildOperator=new StaticOperator(operatorContext,rowPagesBuilder(SINGLE_VARBINARY).row("a").row((String)null).row((String)null).row("a").row("b").build());
  NewHashBuilderOperatorFactory hashBuilderOperatorFactory=new NewHashBuilderOperatorFactory(1,buildOperator.getTupleInfos(),0,100);
  NewOperator sourceHashProvider=hashBuilderOperatorFactory.createOperator(driverContext);
  Driver driver=new Driver(driverContext,buildOperator,sourceHashProvider);
  while (!driver.isFinished()) {
    driver.process();
  }
  List<Page> probeInput=rowPagesBuilder(SINGLE_VARBINARY).row("a").row("b").row("c").build();
  NewHashJoinOperatorFactory joinOperatorFactory=NewHashJoinOperator.innerJoin(0,hashBuilderOperatorFactory.getHashSupplier(),ImmutableList.of(SINGLE_VARBINARY),0);
  NewOperator joinOperator=joinOperatorFactory.createOperator(taskContext.addPipelineContext(true,true).addDriverContext());
  MaterializedResult expected=resultBuilder(new TupleInfo(VARIABLE_BINARY,VARIABLE_BINARY)).row("a","a").row("a","a").row("b","b").build();
  assertOperatorEquals(joinOperator,probeInput,expected);
}
