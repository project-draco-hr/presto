{
  JoinCompiler joinCompiler=new JoinCompiler();
  List<Type> types=ImmutableList.<Type>of(VARCHAR,VARCHAR,BIGINT,DOUBLE,BOOLEAN);
  List<Type> joinTypes=ImmutableList.<Type>of(VARCHAR,BIGINT,DOUBLE,BOOLEAN);
  List<Integer> joinChannels=Ints.asList(1,2,3,4);
  List<Block> extraChannel=ImmutableList.of(BlockAssertions.createStringSequenceBlock(10,20),BlockAssertions.createStringSequenceBlock(20,30),BlockAssertions.createStringSequenceBlock(15,25));
  List<Block> varcharChannel=ImmutableList.of(BlockAssertions.createStringSequenceBlock(10,20),BlockAssertions.createStringSequenceBlock(20,30),BlockAssertions.createStringSequenceBlock(15,25));
  List<Block> longChannel=ImmutableList.of(BlockAssertions.createLongSequenceBlock(10,20),BlockAssertions.createLongSequenceBlock(20,30),BlockAssertions.createLongSequenceBlock(15,25));
  List<Block> doubleChannel=ImmutableList.of(BlockAssertions.createDoubleSequenceBlock(10,20),BlockAssertions.createDoubleSequenceBlock(20,30),BlockAssertions.createDoubleSequenceBlock(15,25));
  List<Block> booleanChannel=ImmutableList.of(BlockAssertions.createBooleanSequenceBlock(10,20),BlockAssertions.createBooleanSequenceBlock(20,30),BlockAssertions.createBooleanSequenceBlock(15,25));
  Optional<Integer> hashChannel=Optional.empty();
  ImmutableList<List<Block>> channels=ImmutableList.of(extraChannel,varcharChannel,longChannel,doubleChannel,booleanChannel);
  List<Block> precomputedHash=ImmutableList.of();
  if (hashEnabled) {
    ImmutableList.Builder<Block> hashChannelBuilder=ImmutableList.builder();
    for (int i=0; i < 3; i++) {
      hashChannelBuilder.add(TypeUtils.getHashBlock(joinTypes,varcharChannel.get(i),longChannel.get(i),doubleChannel.get(i),booleanChannel.get(i)));
    }
    hashChannel=Optional.of(5);
    precomputedHash=hashChannelBuilder.build();
    channels=ImmutableList.of(extraChannel,varcharChannel,longChannel,doubleChannel,booleanChannel,precomputedHash);
    types=ImmutableList.<Type>of(VARCHAR,VARCHAR,BIGINT,DOUBLE,BOOLEAN,BIGINT);
  }
  PagesHashStrategyFactory pagesHashStrategyFactory=joinCompiler.compilePagesHashStrategyFactory(types,joinChannels);
  PagesHashStrategy hashStrategy=pagesHashStrategyFactory.createPagesHashStrategy(channels,hashChannel);
  PagesHashStrategy expectedHashStrategy=new SimplePagesHashStrategy(types,channels,joinChannels,hashChannel);
  assertEquals(hashStrategy.getChannelCount(),types.size());
  for (int leftBlockIndex=0; leftBlockIndex < varcharChannel.size(); leftBlockIndex++) {
    PageBuilder pageBuilder=new PageBuilder(types);
    int leftPositionCount=varcharChannel.get(leftBlockIndex).getPositionCount();
    for (int leftBlockPosition=0; leftBlockPosition < leftPositionCount; leftBlockPosition++) {
      assertEquals(hashStrategy.hashPosition(leftBlockIndex,leftBlockPosition),expectedHashStrategy.hashPosition(leftBlockIndex,leftBlockPosition));
      assertTrue(hashStrategy.positionEqualsPosition(leftBlockIndex,leftBlockPosition,leftBlockIndex,leftBlockPosition));
      for (int rightBlockIndex=0; rightBlockIndex < varcharChannel.size(); rightBlockIndex++) {
        Block rightBlock=varcharChannel.get(rightBlockIndex);
        for (int rightBlockPosition=0; rightBlockPosition < rightBlock.getPositionCount(); rightBlockPosition++) {
          assertEquals(hashStrategy.positionEqualsPosition(leftBlockIndex,leftBlockPosition,rightBlockIndex,rightBlockPosition),expectedHashStrategy.positionEqualsPosition(leftBlockIndex,leftBlockPosition,rightBlockIndex,rightBlockPosition));
        }
      }
      for (int rightBlockIndex=0; rightBlockIndex < varcharChannel.size(); rightBlockIndex++) {
        Block[] rightBlocks=new Block[4];
        rightBlocks[0]=varcharChannel.get(rightBlockIndex);
        rightBlocks[1]=longChannel.get(rightBlockIndex);
        rightBlocks[2]=doubleChannel.get(rightBlockIndex);
        rightBlocks[3]=booleanChannel.get(rightBlockIndex);
        int rightPositionCount=varcharChannel.get(rightBlockIndex).getPositionCount();
        for (int rightPosition=0; rightPosition < rightPositionCount; rightPosition++) {
          assertEquals(hashStrategy.positionEqualsRow(leftBlockIndex,leftBlockPosition,rightPosition,rightBlocks),expectedHashStrategy.positionEqualsRow(leftBlockIndex,leftBlockPosition,rightPosition,rightBlocks));
        }
      }
      pageBuilder.declarePosition();
      hashStrategy.appendTo(leftBlockIndex,leftBlockPosition,pageBuilder,0);
    }
    Page page=pageBuilder.build();
    if (hashEnabled) {
      assertPageEquals(types,page,new Page(extraChannel.get(leftBlockIndex),varcharChannel.get(leftBlockIndex),longChannel.get(leftBlockIndex),doubleChannel.get(leftBlockIndex),booleanChannel.get(leftBlockIndex),precomputedHash.get(leftBlockIndex)));
    }
 else {
      assertPageEquals(types,page,new Page(extraChannel.get(leftBlockIndex),varcharChannel.get(leftBlockIndex),longChannel.get(leftBlockIndex),doubleChannel.get(leftBlockIndex),booleanChannel.get(leftBlockIndex)));
    }
  }
}
