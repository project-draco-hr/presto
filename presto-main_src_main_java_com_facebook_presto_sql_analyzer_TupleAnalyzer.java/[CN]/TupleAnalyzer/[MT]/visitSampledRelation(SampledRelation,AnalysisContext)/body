{
  if (relation.getColumnsToStratifyOn().isPresent()) {
    throw new SemanticException(NOT_SUPPORTED,relation,"STRATIFY ON is not yet implemented");
  }
  if (!DependencyExtractor.extractNames(relation.getSamplePercentage(),analysis.getColumnReferences()).isEmpty()) {
    throw new SemanticException(NON_NUMERIC_SAMPLE_PERCENTAGE,relation.getSamplePercentage(),"Sample percentage cannot contain column references");
  }
  IdentityHashMap<Expression,Type> expressionTypes=getExpressionTypes(session,metadata,sqlParser,ImmutableMap.<Symbol,Type>of(),relation.getSamplePercentage());
  ExpressionInterpreter samplePercentageEval=expressionOptimizer(relation.getSamplePercentage(),metadata,session,expressionTypes);
  Object samplePercentageObject=samplePercentageEval.optimize(new SymbolResolver(){
    @Override public Object getValue(    Symbol symbol){
      throw new SemanticException(NON_NUMERIC_SAMPLE_PERCENTAGE,relation.getSamplePercentage(),"Sample percentage cannot contain column references");
    }
  }
);
  if (!(samplePercentageObject instanceof Number)) {
    throw new SemanticException(NON_NUMERIC_SAMPLE_PERCENTAGE,relation.getSamplePercentage(),"Sample percentage should evaluate to a numeric expression");
  }
  double samplePercentageValue=((Number)samplePercentageObject).doubleValue();
  if (samplePercentageValue < 0.0) {
    throw new SemanticException(SemanticErrorCode.SAMPLE_PERCENTAGE_OUT_OF_RANGE,relation.getSamplePercentage(),"Sample percentage must be greater than or equal to 0");
  }
 else   if ((samplePercentageValue > 100.0) && (relation.getType() != SampledRelation.Type.POISSONIZED || relation.isRescaled())) {
    throw new SemanticException(SemanticErrorCode.SAMPLE_PERCENTAGE_OUT_OF_RANGE,relation.getSamplePercentage(),"Sample percentage must be less than or equal to 100");
  }
  if (relation.isRescaled() && !experimentalSyntaxEnabled) {
    throw new SemanticException(NOT_SUPPORTED,relation,"Rescaling is not enabled");
  }
  TupleDescriptor descriptor=process(relation.getRelation(),context);
  analysis.setOutputDescriptor(relation,descriptor);
  analysis.setSampleRatio(relation,samplePercentageValue / 100);
  return descriptor;
}
