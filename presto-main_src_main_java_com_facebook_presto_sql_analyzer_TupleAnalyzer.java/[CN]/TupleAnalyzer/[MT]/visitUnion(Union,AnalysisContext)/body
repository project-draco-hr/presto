{
  checkState(node.getRelations().size() >= 2);
  TupleAnalyzer analyzer=new TupleAnalyzer(analysis,session,metadata,sqlParser,experimentalSyntaxEnabled);
  TupleDescriptor outputDescriptor=analyzer.process(node.getRelations().get(0),context).withOnlyVisibleFields();
  for (  Relation relation : Iterables.skip(node.getRelations(),1)) {
    TupleDescriptor descriptor=analyzer.process(relation,context);
    int outputFieldSize=outputDescriptor.getVisibleFields().size();
    int descFieldSize=descriptor.getVisibleFields().size();
    if (outputFieldSize != descFieldSize) {
      throw new SemanticException(MISMATCHED_SET_COLUMN_TYPES,node,"union query has different number of fields: %d, %d",outputFieldSize,descFieldSize);
    }
    for (int i=0; i < descriptor.getVisibleFields().size(); i++) {
      Type outputFieldType=outputDescriptor.getFieldByIndex(i).getType();
      Type descFieldType=descriptor.getFieldByIndex(i).getType();
      if (!outputFieldType.equals(descFieldType)) {
        throw new SemanticException(TYPE_MISMATCH,node,"column %d in union query has incompatible types: %s, %s",i,outputFieldType.getDisplayName(),descFieldType.getDisplayName());
      }
    }
  }
  analysis.setOutputDescriptor(node,outputDescriptor);
  return outputDescriptor;
}
