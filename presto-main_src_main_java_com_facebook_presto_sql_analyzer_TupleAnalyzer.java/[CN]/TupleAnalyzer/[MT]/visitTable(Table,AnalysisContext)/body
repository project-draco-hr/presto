{
  if (!table.getName().getPrefix().isPresent()) {
    String name=table.getName().getSuffix();
    Query query=context.getNamedQuery(name);
    if (query != null) {
      analysis.registerNamedQuery(table,query);
      TupleDescriptor queryDescriptor=analysis.getOutputDescriptor(query);
      ImmutableList.Builder<Field> fields=ImmutableList.builder();
      for (      Field field : queryDescriptor.getFields()) {
        fields.add(Field.newQualified(QualifiedName.of(name),field.getName(),field.getType()));
      }
      TupleDescriptor descriptor=new TupleDescriptor(fields.build());
      analysis.setOutputDescriptor(table,descriptor);
      return descriptor;
    }
  }
  QualifiedTableName name=MetadataUtil.createQualifiedTableName(session,table.getName());
  Optional<TableHandle> tableHandle=metadata.getTableHandle(name);
  if (!tableHandle.isPresent()) {
    if (!metadata.getCatalogNames().containsKey(name.getCatalogName())) {
      throw new SemanticException(MISSING_CATALOG,table,"Catalog %s does not exist",name.getCatalogName());
    }
    if (!metadata.listSchemaNames(name.getCatalogName()).contains(name.getSchemaName())) {
      throw new SemanticException(MISSING_SCHEMA,table,"Schema %s does not exist",name.getSchemaName());
    }
    throw new SemanticException(MISSING_TABLE,table,"Table %s does not exist",name);
  }
  TableMetadata tableMetadata=metadata.getTableMetadata(tableHandle.get());
  Map<String,ColumnHandle> columns=metadata.getColumnHandles(tableHandle.get());
  ImmutableList.Builder<Field> fields=ImmutableList.builder();
  for (  ColumnMetadata column : tableMetadata.getColumns()) {
    Field field=Field.newQualified(table.getName(),Optional.of(column.getName()),Type.fromRaw(column.getType()));
    fields.add(field);
    analysis.setColumn(field,columns.get(column.getName()));
  }
  analysis.registerTable(table,tableHandle.get());
  TupleDescriptor descriptor=new TupleDescriptor(fields.build());
  analysis.setOutputDescriptor(table,descriptor);
  return descriptor;
}
