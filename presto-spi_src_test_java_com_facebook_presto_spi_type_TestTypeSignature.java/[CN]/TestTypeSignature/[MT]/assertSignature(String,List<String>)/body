{
  List<String> lowerCaseTypeNames=FluentIterable.from(parameters).transform(new Function<String,String>(){
    @Override public String apply(    String input){
      return input.toLowerCase();
    }
  }
).toList();
  String typeName=base.toLowerCase();
  if (!parameters.isEmpty()) {
    typeName+="<" + Joiner.on(",").join(lowerCaseTypeNames) + ">";
  }
  TypeSignature signature=parseTypeSignature(typeName);
  assertEquals(signature.getBase(),base);
  assertEquals(signature.getParameters().size(),parameters.size());
  for (int i=0; i < signature.getParameters().size(); i++) {
    assertEquals(signature.getParameters().get(i).toString(),parameters.get(i));
  }
  assertEquals(typeName,signature.toString());
}
