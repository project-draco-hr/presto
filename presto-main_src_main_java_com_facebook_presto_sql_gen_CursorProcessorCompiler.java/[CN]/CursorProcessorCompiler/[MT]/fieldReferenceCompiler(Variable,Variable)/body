{
  return new RowExpressionVisitor<Scope,ByteCodeNode>(){
    @Override public ByteCodeNode visitInputReference(    InputReferenceExpression node,    Scope scope){
      int field=node.getField();
      Type type=node.getType();
      Class<?> javaType=type.getJavaType();
      if (!javaType.isPrimitive() && javaType != Slice.class) {
        javaType=Object.class;
      }
      IfStatement ifStatement=new IfStatement();
      ifStatement.condition().setDescription(format("cursor.get%s(%d)",type,field)).getVariable(cursorVariable).push(field).invokeInterface(RecordCursor.class,"isNull",boolean.class,int.class);
      ifStatement.ifTrue().putVariable(wasNullVariable,true).pushJavaDefault(javaType);
      ifStatement.ifFalse().getVariable(cursorVariable).push(field).invokeInterface(RecordCursor.class,"get" + Primitives.wrap(javaType).getSimpleName(),javaType,int.class);
      return ifStatement;
    }
    @Override public ByteCodeNode visitCall(    CallExpression call,    Scope scope){
      throw new UnsupportedOperationException("not yet implemented");
    }
    @Override public ByteCodeNode visitConstant(    ConstantExpression literal,    Scope scope){
      throw new UnsupportedOperationException("not yet implemented");
    }
  }
;
}
