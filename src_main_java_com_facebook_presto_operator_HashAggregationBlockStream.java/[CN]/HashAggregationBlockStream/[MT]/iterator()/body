{
  final Cursor groupByCursor=groupBySource.cursor();
  final Cursor aggregationCursor=aggregationSource.cursor();
  aggregationCursor.advanceNextPosition();
  return new AbstractIterator<UncompressedBlock>(){
    private Iterator<Entry<Tuple,AggregationFunction>> aggregations;
    private long position;
    @Override protected UncompressedBlock computeNext(){
      if (aggregations == null) {
        Map<Tuple,AggregationFunction> aggregationMap=new HashMap<>();
        while (groupByCursor.advanceNextValue()) {
          Tuple key=groupByCursor.getTuple();
          AggregationFunction aggregation=aggregationMap.get(key);
          if (aggregation == null) {
            aggregation=functionProvider.get();
            aggregationMap.put(key,aggregation);
          }
          if (aggregationCursor.advanceToPosition(groupByCursor.getPosition())) {
            aggregation.add(aggregationCursor,groupByCursor.getCurrentValueEndPosition());
          }
        }
        this.aggregations=aggregationMap.entrySet().iterator();
      }
      if (!aggregations.hasNext()) {
        endOfData();
        return null;
      }
      BlockBuilder blockBuilder=new BlockBuilder(position,info);
      while (!blockBuilder.isFull() && aggregations.hasNext()) {
        Entry<Tuple,AggregationFunction> aggregation=aggregations.next();
        Tuple key=aggregation.getKey();
        Tuple value=aggregation.getValue().evaluate();
        blockBuilder.append(key);
        blockBuilder.append(value);
      }
      UncompressedBlock block=blockBuilder.build();
      position+=block.getCount();
      return block;
    }
  }
;
}
