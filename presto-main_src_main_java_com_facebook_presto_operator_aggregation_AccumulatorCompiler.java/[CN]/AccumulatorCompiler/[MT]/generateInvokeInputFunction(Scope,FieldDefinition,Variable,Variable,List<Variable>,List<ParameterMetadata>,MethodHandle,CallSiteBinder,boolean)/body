{
  BytecodeBlock block=new BytecodeBlock();
  if (grouped) {
    generateSetGroupIdFromGroupIdsBlock(scope,stateField,block);
  }
  block.comment("Call input function with unpacked Block arguments");
  Class<?>[] parameters=inputFunction.type().parameterArray();
  int inputChannel=0;
  for (int i=0; i < parameters.length; i++) {
    ParameterMetadata parameterMetadata=parameterMetadatas.get(i);
switch (parameterMetadata.getParameterType()) {
case STATE:
      block.append(scope.getThis().getField(stateField));
    break;
case BLOCK_INDEX:
  block.getVariable(position);
break;
case SAMPLE_WEIGHT:
requireNonNull(sampleWeight,"sampleWeight is null");
block.getVariable(sampleWeight);
break;
case BLOCK_INPUT_CHANNEL:
case NULLABLE_BLOCK_INPUT_CHANNEL:
block.getVariable(parameterVariables.get(inputChannel));
inputChannel++;
break;
case INPUT_CHANNEL:
BytecodeBlock getBlockBytecode=new BytecodeBlock().getVariable(parameterVariables.get(inputChannel));
pushStackType(scope,block,parameterMetadata.getSqlType(),getBlockBytecode,parameters[i],callSiteBinder);
inputChannel++;
break;
default :
throw new IllegalArgumentException("Unsupported parameter type: " + parameterMetadata.getParameterType());
}
}
block.append(invoke(callSiteBinder.bind(inputFunction),"input"));
return block;
}
