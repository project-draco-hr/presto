{
  Variable page=scope.getVariable("page");
  Variable positionVariable=scope.declareVariable(int.class,"position");
  Variable sampleWeightVariable=null;
  if (sampleWeightsBlock != null) {
    sampleWeightVariable=scope.declareVariable(long.class,"sampleWeight");
  }
  Variable rowsVariable=scope.declareVariable(int.class,"rows");
  Block block=new Block().append(page).invokeVirtual(Page.class,"getPositionCount",int.class).putVariable(rowsVariable).initializeVariable(positionVariable);
  if (sampleWeightVariable != null) {
    block.initializeVariable(sampleWeightVariable);
  }
  ByteCodeNode loopBody=generateInvokeInputFunction(scope,stateField,positionVariable,sampleWeightVariable,parameterVariables,parameterMetadatas,inputFunction,callSiteBinder,grouped);
  List<Boolean> nullable=new ArrayList<>();
  for (  ParameterMetadata metadata : parameterMetadatas) {
switch (metadata.getParameterType()) {
case INPUT_CHANNEL:
case BLOCK_INPUT_CHANNEL:
      nullable.add(false);
    break;
case NULLABLE_BLOCK_INPUT_CHANNEL:
  nullable.add(true);
break;
default :
}
}
checkState(nullable.size() == parameterVariables.size(),"Number of parameters does not match");
for (int i=0; i < parameterVariables.size(); i++) {
if (!nullable.get(i)) {
Variable variableDefinition=parameterVariables.get(i);
loopBody=new IfStatement("if(!%s.isNull(position))",variableDefinition.getName()).condition(new Block().getVariable(variableDefinition).getVariable(positionVariable).invokeInterface(com.facebook.presto.spi.block.Block.class,"isNull",boolean.class,int.class)).ifFalse(loopBody);
}
}
if (sampleWeightVariable != null) {
loopBody=generateComputeSampleWeightAndCheckGreaterThanZero(loopBody,sampleWeightVariable,masksBlock,sampleWeightsBlock,positionVariable);
}
 else {
loopBody=new IfStatement("if(testMask(%s, position))",masksBlock.getName()).condition(new Block().getVariable(masksBlock).getVariable(positionVariable).invokeStatic(CompilerOperations.class,"testMask",boolean.class,com.facebook.presto.spi.block.Block.class,int.class)).ifTrue(loopBody);
}
block.append(new ForLoop().initialize(new Block().putVariable(positionVariable,0)).condition(new Block().getVariable(positionVariable).getVariable(rowsVariable).invokeStatic(CompilerOperations.class,"lessThan",boolean.class,int.class,int.class)).update(new Block().incrementVariable(positionVariable,(byte)1)).body(loopBody));
return block;
}
