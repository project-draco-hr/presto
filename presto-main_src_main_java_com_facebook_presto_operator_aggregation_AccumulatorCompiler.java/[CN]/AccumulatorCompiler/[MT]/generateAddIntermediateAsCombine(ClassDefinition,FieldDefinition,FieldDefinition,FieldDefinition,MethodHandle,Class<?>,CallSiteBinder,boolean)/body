{
  MethodDefinition method=declareAddIntermediate(definition,grouped);
  Scope scope=method.getScope();
  Block body=method.getBody();
  Variable thisVariable=method.getThis();
  Variable block=scope.getVariable("block");
  Variable scratchState=scope.declareVariable(singleStateClass,"scratchState");
  Variable position=scope.declareVariable(int.class,"position");
  body.comment("scratchState = stateFactory.createSingleState();").append(thisVariable.getField(stateFactoryField)).invokeInterface(AccumulatorStateFactory.class,"createSingleState",Object.class).checkCast(scratchState.getType()).putVariable(scratchState);
  if (grouped) {
    generateEnsureCapacity(scope,stateField,body);
  }
  Block loopBody=new Block();
  if (grouped) {
    Variable groupIdsBlock=scope.getVariable("groupIdsBlock");
    loopBody.append(thisVariable.getField(stateField).invoke("setGroupId",void.class,groupIdsBlock.invoke("getGroupId",long.class,position)));
  }
  loopBody.append(thisVariable.getField(stateSerializerField).invoke("deserialize",void.class,block,position,scratchState.cast(Object.class)));
  loopBody.comment("combine(state, scratchState)").append(thisVariable.getField(stateField)).append(scratchState).append(invoke(callSiteBinder.bind(combineFunction),"combine"));
  body.append(generateBlockNonNullPositionForLoop(scope,position,loopBody)).ret();
}
