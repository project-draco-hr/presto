{
  Block body=definition.declareConstructor(a(PUBLIC),arg("stateSerializer",AccumulatorStateSerializer.class),arg("stateFactory",AccumulatorStateFactory.class),arg("inputChannels",type(List.class,Integer.class)),arg("maskChannel",type(Optional.class,Integer.class)),arg("sampleWeightChannel",type(Optional.class,Integer.class)),arg("confidence",double.class)).getBody().comment("super();").pushThis().invokeConstructor(Object.class);
  generateCastCheckNotNullAndAssign(body,stateSerializerField,"stateSerializer");
  generateCastCheckNotNullAndAssign(body,stateFactoryField,"stateFactory");
  generateCastCheckNotNullAndAssign(body,inputChannelsField,"inputChannels");
  generateCastCheckNotNullAndAssign(body,maskChannelField,"maskChannel");
  if (sampleWeightChannelField != null) {
    generateCastCheckNotNullAndAssign(body,sampleWeightChannelField,"sampleWeightChannel");
  }
  String createState;
  if (grouped) {
    createState="createGroupedState";
  }
 else {
    createState="createSingleState";
  }
  if (confidenceField != null) {
    body.comment("this.confidence = confidence").pushThis().getVariable("confidence").putField(confidenceField);
  }
  body.comment("this.state = stateFactory.%s()",createState).pushThis().getVariable("stateFactory").invokeInterface(AccumulatorStateFactory.class,createState,Object.class).checkCast(stateField.getType()).putField(stateField).ret();
}
