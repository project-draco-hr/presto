{
  final List<String> partitionsToFetch=new ArrayList<>();
  Partition[] partitions=new Partition[partitionNames.size()];
  for (int i=0; i < partitionNames.size(); i++) {
    String partitionName=partitionNames.get(i);
    Partition partition=partitionCache.getIfPresent(HivePartitionName.partition(databaseName,tableName,partitionName));
    if (partition == null) {
      partitionsToFetch.add(partitionName);
    }
 else {
      partitions[i]=partition;
    }
  }
  if (!partitionsToFetch.isEmpty()) {
    List<Partition> fetchedPartitions;
    try {
      fetchedPartitions=retry().stopOn(NoSuchObjectException.class).stopOnIllegalExceptions().run("getPartitionsByNames",new Callable<List<Partition>>(){
        @Override public List<Partition> call() throws Exception {
          try (HiveMetastoreClient client=clientProvider.createMetastoreClient()){
            return client.get_partitions_by_names(databaseName,tableName,partitionsToFetch);
          }
         }
      }
);
    }
 catch (    Exception e) {
      Throwables.propagateIfInstanceOf(e,NoSuchObjectException.class);
      throw Throwables.propagate(e);
    }
    checkState(fetchedPartitions.size() == partitionsToFetch.size());
    for (    Partition partition : fetchedPartitions) {
      try {
        String partitionId=Warehouse.makePartName(table.getPartitionKeys(),partition.getValues());
        partitionCache.put(HivePartitionName.partition(databaseName,tableName,partitionId),partition);
      }
 catch (      MetaException e) {
        throw Throwables.propagate(e);
      }
    }
    Iterator<Partition> fetchedPartitionsIterator=fetchedPartitions.iterator();
    for (int i=0; i < partitionNames.size(); i++) {
      if (partitions[i] == null) {
        checkState(fetchedPartitionsIterator.hasNext(),"iterator should always have next");
        partitions[i]=fetchedPartitionsIterator.next();
      }
    }
    checkState(!fetchedPartitionsIterator.hasNext(),"iterator not have any more elements");
  }
  return ImmutableList.copyOf(partitions);
}
