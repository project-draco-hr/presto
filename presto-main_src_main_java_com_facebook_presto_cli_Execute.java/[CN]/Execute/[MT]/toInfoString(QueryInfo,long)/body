{
  int stages=queryInfo.getStages().size();
  int completeStages=queryInfo.getStages().size();
  State overallState=State.PREPARING;
  int tasks=0;
  int preparingTasks=0;
  int runningTasks=0;
  int completeTasks=0;
  int splits=0;
  int completedSplits=0;
  for (  QueryInfo info : concat(ImmutableList.of(queryInfo),concat(queryInfo.getStages().values()))) {
    tasks++;
    splits+=info.getSplits();
    completedSplits+=info.getCompletedSplits();
switch (info.getState()) {
case PREPARING:
      preparingTasks++;
    break;
case RUNNING:
  runningTasks++;
if (overallState == State.PREPARING) {
  overallState=State.RUNNING;
}
break;
case FINISHED:
completeTasks++;
break;
case CANCELED:
completeTasks++;
if (overallState != State.FAILED) {
overallState=State.CANCELED;
}
break;
case FAILED:
completeTasks++;
overallState=State.FAILED;
break;
}
}
if (completedSplits == splits && (overallState == State.PREPARING || overallState == State.RUNNING)) {
overallState=State.FINISHED;
}
return String.format("%s QueryId %s: Stages [%d of %d]: Splits [%d of %d]: Tasks [%d total, %d preparing, %d running, %d complete)]: Elapsed %s",overallState,queryInfo.getQueryId(),completeStages,stages,completedSplits,splits,tasks,preparingTasks,runningTasks,completeTasks,Duration.nanosSince(start).toString(TimeUnit.SECONDS));
}
