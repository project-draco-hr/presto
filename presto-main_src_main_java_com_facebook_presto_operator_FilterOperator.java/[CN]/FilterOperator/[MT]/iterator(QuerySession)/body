{
  Preconditions.checkNotNull(session,"session is null");
  final Cursor valueCursor=source.cursor(session);
  final Cursor positionsCursor=positions.cursor(session);
  return new AbstractYieldingIterator<UncompressedBlock>(){
    private long position;
    @Override protected UncompressedBlock computeNext(){
      if (valueCursor.isFinished() || positionsCursor.isFinished()) {
        return endOfData();
      }
      BlockBuilder blockBuilder=new BlockBuilder(position,tupleInfo);
      AdvanceResult result;
      do {
        if (positionsCursor.isValid() && valueCursor.isValid() && positionsCursor.getPosition() < valueCursor.getPosition()) {
          result=positionsCursor.advanceToPosition(valueCursor.getPosition());
        }
 else {
          result=positionsCursor.advanceNextPosition();
        }
        if (result != SUCCESS) {
          break;
        }
        long nextPosition=positionsCursor.getPosition();
        result=valueCursor.advanceToPosition(nextPosition);
        if (result != SUCCESS) {
          break;
        }
        if (nextPosition == valueCursor.getPosition()) {
          Cursors.appendCurrentTupleToBlockBuilder(valueCursor,blockBuilder);
        }
      }
 while (!blockBuilder.isFull());
      if (!blockBuilder.isEmpty()) {
        UncompressedBlock block=blockBuilder.build();
        position+=block.getCount();
        return block;
      }
      if (result == MUST_YIELD) {
        return setMustYield();
      }
      return endOfData();
    }
  }
;
}
