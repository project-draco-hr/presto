{
  try (Connection connection=createConnection()){
    try (Statement statement=connection.createStatement()){
      try (ResultSet rs=statement.executeQuery("" + "SELECT " + "  123 _bigint"+ ", 'foo' _varchar"+ ", 0.1 _double"+ ", true _boolean"+ ", cast('hello' as varbinary) _varbinary"+ ", DECIMAL '1234567890.1234567' _decimal_short"+ ", DECIMAL '.12345678901234567890123456789012345678' _decimal_long"+ ", approx_set(42) _hll")){
        ResultSetMetaData metadata=rs.getMetaData();
        assertEquals(metadata.getColumnCount(),8);
        assertEquals(metadata.getColumnLabel(1),"_bigint");
        assertEquals(metadata.getColumnType(1),Types.BIGINT);
        assertEquals(metadata.getColumnLabel(2),"_varchar");
        assertEquals(metadata.getColumnType(2),Types.LONGNVARCHAR);
        assertEquals(metadata.getColumnLabel(3),"_double");
        assertEquals(metadata.getColumnType(3),Types.DOUBLE);
        assertEquals(metadata.getColumnLabel(4),"_boolean");
        assertEquals(metadata.getColumnType(4),Types.BOOLEAN);
        assertEquals(metadata.getColumnLabel(5),"_varbinary");
        assertEquals(metadata.getColumnType(5),Types.LONGVARBINARY);
        assertEquals(metadata.getColumnLabel(6),"_decimal_short");
        assertEquals(metadata.getColumnType(6),Types.DECIMAL);
        assertEquals(metadata.getColumnLabel(7),"_decimal_long");
        assertEquals(metadata.getColumnType(7),Types.DECIMAL);
        assertEquals(metadata.getColumnLabel(8),"_hll");
        assertEquals(metadata.getColumnType(8),Types.JAVA_OBJECT);
        assertTrue(rs.next());
        assertEquals(rs.getObject(1),123L);
        assertEquals(rs.getObject("_bigint"),123L);
        assertEquals(rs.getLong(1),123);
        assertEquals(rs.getLong("_bigint"),123);
        assertEquals(rs.getObject(2),"foo");
        assertEquals(rs.getObject("_varchar"),"foo");
        assertEquals(rs.getString(2),"foo");
        assertEquals(rs.getString("_varchar"),"foo");
        assertEquals(rs.getObject(3),0.1);
        assertEquals(rs.getObject("_double"),0.1);
        assertEquals(rs.getDouble(3),0.1);
        assertEquals(rs.getDouble("_double"),0.1);
        assertEquals(rs.getObject(4),true);
        assertEquals(rs.getObject("_boolean"),true);
        assertEquals(rs.getBoolean(4),true);
        assertEquals(rs.getBoolean("_boolean"),true);
        assertEquals(rs.getByte("_boolean"),1);
        assertEquals(rs.getShort("_boolean"),1);
        assertEquals(rs.getInt("_boolean"),1);
        assertEquals(rs.getLong("_boolean"),1L);
        assertEquals(rs.getFloat("_boolean"),1.0f);
        assertEquals(rs.getDouble("_boolean"),1.0);
        assertEquals(rs.getObject(5),"hello".getBytes(UTF_8));
        assertEquals(rs.getObject("_varbinary"),"hello".getBytes(UTF_8));
        assertEquals(rs.getBytes(5),"hello".getBytes(UTF_8));
        assertEquals(rs.getBytes("_varbinary"),"hello".getBytes(UTF_8));
        assertEquals(rs.getObject(6),new BigDecimal("1234567890.1234567"));
        assertEquals(rs.getObject("_decimal_short"),new BigDecimal("1234567890.1234567"));
        assertEquals(rs.getBigDecimal(6),new BigDecimal("1234567890.1234567"));
        assertEquals(rs.getBigDecimal("_decimal_short"),new BigDecimal("1234567890.1234567"));
        assertEquals(rs.getBigDecimal(6,1),new BigDecimal("1234567890.1"));
        assertEquals(rs.getBigDecimal("_decimal_short",1),new BigDecimal("1234567890.1"));
        assertEquals(rs.getObject(7),new BigDecimal(".12345678901234567890123456789012345678"));
        assertEquals(rs.getObject("_decimal_long"),new BigDecimal(".12345678901234567890123456789012345678"));
        assertEquals(rs.getBigDecimal(7),new BigDecimal(".12345678901234567890123456789012345678"));
        assertEquals(rs.getBigDecimal("_decimal_long"),new BigDecimal(".12345678901234567890123456789012345678"));
        assertEquals(rs.getBigDecimal(7,6),new BigDecimal(".123457"));
        assertEquals(rs.getBigDecimal("_decimal_long",6),new BigDecimal(".123457"));
        assertInstanceOf(rs.getObject(8),byte[].class);
        assertInstanceOf(rs.getObject("_hll"),byte[].class);
        assertInstanceOf(rs.getBytes(8),byte[].class);
        assertInstanceOf(rs.getBytes("_hll"),byte[].class);
        assertFalse(rs.next());
      }
     }
   }
 }
