{
  try (Connection connection=createConnection()){
    try (ResultSet rs=connection.getMetaData().getColumns(null,null,"tables","table_name")){
      assertColumnMetadata(rs);
      assertTrue(rs.next());
      assertEquals(rs.getString("TABLE_CAT"),"blackhole");
      assertEquals(rs.getString("TABLE_SCHEM"),"information_schema");
      assertEquals(rs.getString("TABLE_NAME"),"tables");
      assertEquals(rs.getString("COLUMN_NAME"),"table_name");
      assertEquals(rs.getInt("DATA_TYPE"),Types.LONGNVARCHAR);
      assertTrue(rs.next());
      assertEquals(rs.getString("TABLE_CAT"),"system");
      assertEquals(rs.getString("TABLE_SCHEM"),"information_schema");
      assertTrue(rs.next());
      assertEquals(rs.getString("TABLE_CAT"),"system");
      assertEquals(rs.getString("TABLE_SCHEM"),"jdbc");
      assertTrue(rs.next());
      assertEquals(rs.getString("TABLE_CAT"),TEST_CATALOG);
      assertEquals(rs.getString("TABLE_SCHEM"),"information_schema");
      assertFalse(rs.next());
    }
   }
   try (Connection connection=createConnection()){
    try (ResultSet rs=connection.getMetaData().getColumns(TEST_CATALOG,null,"tables","table_name")){
      assertColumnMetadata(rs);
      assertEquals(readRows(rs).size(),1);
    }
   }
   try (Connection connection=createConnection()){
    try (ResultSet rs=connection.getMetaData().getColumns(null,"information_schema","tables","table_name")){
      assertColumnMetadata(rs);
      assertEquals(readRows(rs).size(),3);
    }
   }
   try (Connection connection=createConnection()){
    try (ResultSet rs=connection.getMetaData().getColumns(TEST_CATALOG,"information_schema","tables","table_name")){
      assertColumnMetadata(rs);
      assertEquals(readRows(rs).size(),1);
    }
   }
   try (Connection connection=createConnection()){
    try (ResultSet rs=connection.getMetaData().getColumns(TEST_CATALOG,"inf%","tables","table_name")){
      assertColumnMetadata(rs);
      assertEquals(readRows(rs).size(),1);
    }
   }
   try (Connection connection=createConnection()){
    try (ResultSet rs=connection.getMetaData().getColumns(TEST_CATALOG,"information_schema","tab%","table_name")){
      assertColumnMetadata(rs);
      assertEquals(readRows(rs).size(),1);
    }
   }
   try (Connection connection=createConnection()){
    try (ResultSet rs=connection.getMetaData().getColumns(TEST_CATALOG,"information_schema","tables","%m%")){
      assertColumnMetadata(rs);
      assertTrue(rs.next());
      assertEquals(rs.getString("COLUMN_NAME"),"table_schema");
      assertTrue(rs.next());
      assertEquals(rs.getString("COLUMN_NAME"),"table_name");
      assertFalse(rs.next());
    }
   }
   try (Connection connection=createConnection("blackhole","blackhole");Statement statement=connection.createStatement()){
    assertEquals(statement.executeUpdate("CREATE TABLE test_get_columns_table (" + "c_boolean boolean, " + "c_bigint bigint, "+ "c_integer integer, "+ "c_smallint smallint, "+ "c_tinyint tinyint, "+ "c_real real, "+ "c_double double, "+ "c_varchar_1234 varchar(1234), "+ "c_varchar varchar, "+ "c_char_345 char(345), "+ "c_varbinary varbinary, "+ "c_time time, "+ "c_time_with_time_zone \"time with time zone\", "+ "c_timestamp timestamp, "+ "c_timestamp_with_time_zone \"timestamp with time zone\", "+ "c_date date, "+ "c_decimal_8_2 decimal(8,2), "+ "c_decimal_38_0 decimal(38,0), "+ "c_array array<bigint>, "+ "c_color color"+ ")"),0);
    try (ResultSet rs=connection.getMetaData().getColumns("blackhole","blackhole","test_get_columns_table",null)){
      assertColumnMetadata(rs);
      assertColumnSpec(rs,Types.BOOLEAN,null,null,null,null,BooleanType.BOOLEAN);
      assertColumnSpec(rs,Types.BIGINT,19L,10L,null,null,BigintType.BIGINT);
      assertColumnSpec(rs,Types.INTEGER,10L,10L,null,null,IntegerType.INTEGER);
      assertColumnSpec(rs,Types.SMALLINT,5L,10L,null,null,SmallintType.SMALLINT);
      assertColumnSpec(rs,Types.TINYINT,3L,10L,null,null,TinyintType.TINYINT);
      assertColumnSpec(rs,Types.REAL,24L,2L,null,null,RealType.REAL);
      assertColumnSpec(rs,Types.DOUBLE,53L,2L,null,null,DoubleType.DOUBLE);
      assertColumnSpec(rs,Types.LONGNVARCHAR,1234L,null,null,1234L,createVarcharType(1234));
      assertColumnSpec(rs,Types.LONGNVARCHAR,(long)Integer.MAX_VALUE,null,null,(long)Integer.MAX_VALUE,createUnboundedVarcharType());
      assertColumnSpec(rs,Types.CHAR,345L,null,null,345L,createCharType(345));
      assertColumnSpec(rs,Types.LONGVARBINARY,(long)Integer.MAX_VALUE,null,null,(long)Integer.MAX_VALUE,VarbinaryType.VARBINARY);
      assertColumnSpec(rs,Types.TIME,8L,null,null,null,TimeType.TIME);
      assertColumnSpec(rs,Types.TIME_WITH_TIMEZONE,14L,null,null,null,TimeWithTimeZoneType.TIME_WITH_TIME_ZONE);
      assertColumnSpec(rs,Types.TIMESTAMP,23L,null,null,null,TimestampType.TIMESTAMP);
      assertColumnSpec(rs,Types.TIMESTAMP_WITH_TIMEZONE,29L,null,null,null,TimestampWithTimeZoneType.TIMESTAMP_WITH_TIME_ZONE);
      assertColumnSpec(rs,Types.DATE,14L,null,null,null,DateType.DATE);
      assertColumnSpec(rs,Types.DECIMAL,8L,10L,2L,null,createDecimalType(8,2));
      assertColumnSpec(rs,Types.DECIMAL,38L,10L,0L,null,createDecimalType(38,0));
      assertColumnSpec(rs,Types.ARRAY,null,null,null,null,new ArrayType(BigintType.BIGINT));
      assertColumnSpec(rs,Types.JAVA_OBJECT,null,null,null,null,ColorType.COLOR);
      assertFalse(rs.next());
    }
   }
 }
