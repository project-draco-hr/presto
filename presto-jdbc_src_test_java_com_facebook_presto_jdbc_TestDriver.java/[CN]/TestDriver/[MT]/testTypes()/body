{
  try (Connection connection=createConnection()){
    try (Statement statement=connection.createStatement()){
      try (ResultSet rs=statement.executeQuery("SELECT " + "  TIME '3:04:05' as a" + ", TIME '6:07:08 +06:17' as b"+ ", TIME '9:10:11 Europe/Berlin' as c"+ ", TIMESTAMP '2001-02-03 3:04:05' as d"+ ", TIMESTAMP '2004-05-06 6:07:08 +06:17' as e"+ ", TIMESTAMP '2007-08-09 9:10:11 Europe/Berlin' as f"+ ", DATE '2013-03-22' as g"+ ", INTERVAL '123-11' YEAR TO MONTH as h"+ ", INTERVAL '11 22:33:44.555' DAY TO SECOND as i"+ ", REAL '123.45' as j"+ ", REAL 'Infinity' as k"+ "")){
        assertTrue(rs.next());
        assertEquals(rs.getTime(1),new Time(new DateTime(1970,1,1,3,4,5).getMillis()));
        assertEquals(rs.getTime(1,ASIA_ORAL_CALENDAR),new Time(new DateTime(1970,1,1,3,4,5,ASIA_ORAL_ZONE).getMillis()));
        assertEquals(rs.getObject(1),new Time(new DateTime(1970,1,1,3,4,5).getMillis()));
        assertEquals(rs.getTime("a"),new Time(new DateTime(1970,1,1,3,4,5).getMillis()));
        assertEquals(rs.getTime("a",ASIA_ORAL_CALENDAR),new Time(new DateTime(1970,1,1,3,4,5,ASIA_ORAL_ZONE).getMillis()));
        assertEquals(rs.getObject("a"),new Time(new DateTime(1970,1,1,3,4,5).getMillis()));
        assertEquals(rs.getTime(2),new Time(new DateTime(1970,1,1,6,7,8,DateTimeZone.forOffsetHoursMinutes(6,17)).getMillis()));
        assertEquals(rs.getTime(2,ASIA_ORAL_CALENDAR),new Time(new DateTime(1970,1,1,6,7,8,DateTimeZone.forOffsetHoursMinutes(6,17)).getMillis()));
        assertEquals(rs.getObject(2),new Time(new DateTime(1970,1,1,6,7,8,DateTimeZone.forOffsetHoursMinutes(6,17)).getMillis()));
        assertEquals(rs.getTime("b"),new Time(new DateTime(1970,1,1,6,7,8,DateTimeZone.forOffsetHoursMinutes(6,17)).getMillis()));
        assertEquals(rs.getTime("b",ASIA_ORAL_CALENDAR),new Time(new DateTime(1970,1,1,6,7,8,DateTimeZone.forOffsetHoursMinutes(6,17)).getMillis()));
        assertEquals(rs.getObject("b"),new Time(new DateTime(1970,1,1,6,7,8,DateTimeZone.forOffsetHoursMinutes(6,17)).getMillis()));
        assertEquals(rs.getTime(3),new Time(new DateTime(1970,1,1,9,10,11,DateTimeZone.forID("Europe/Berlin")).getMillis()));
        assertEquals(rs.getTime(3,ASIA_ORAL_CALENDAR),new Time(new DateTime(1970,1,1,9,10,11,DateTimeZone.forID("Europe/Berlin")).getMillis()));
        assertEquals(rs.getObject(3),new Time(new DateTime(1970,1,1,9,10,11,DateTimeZone.forID("Europe/Berlin")).getMillis()));
        assertEquals(rs.getTime("c"),new Time(new DateTime(1970,1,1,9,10,11,DateTimeZone.forID("Europe/Berlin")).getMillis()));
        assertEquals(rs.getTime("c",ASIA_ORAL_CALENDAR),new Time(new DateTime(1970,1,1,9,10,11,DateTimeZone.forID("Europe/Berlin")).getMillis()));
        assertEquals(rs.getObject("c"),new Time(new DateTime(1970,1,1,9,10,11,DateTimeZone.forID("Europe/Berlin")).getMillis()));
        assertEquals(rs.getTimestamp(4),new Timestamp(new DateTime(2001,2,3,3,4,5).getMillis()));
        assertEquals(rs.getTimestamp(4,ASIA_ORAL_CALENDAR),new Timestamp(new DateTime(2001,2,3,3,4,5,ASIA_ORAL_ZONE).getMillis()));
        assertEquals(rs.getObject(4),new Timestamp(new DateTime(2001,2,3,3,4,5).getMillis()));
        assertEquals(rs.getTimestamp("d"),new Timestamp(new DateTime(2001,2,3,3,4,5).getMillis()));
        assertEquals(rs.getTimestamp("d",ASIA_ORAL_CALENDAR),new Timestamp(new DateTime(2001,2,3,3,4,5,ASIA_ORAL_ZONE).getMillis()));
        assertEquals(rs.getObject("d"),new Timestamp(new DateTime(2001,2,3,3,4,5).getMillis()));
        assertEquals(rs.getTimestamp(5),new Timestamp(new DateTime(2004,5,6,6,7,8,DateTimeZone.forOffsetHoursMinutes(6,17)).getMillis()));
        assertEquals(rs.getTimestamp(5,ASIA_ORAL_CALENDAR),new Timestamp(new DateTime(2004,5,6,6,7,8,DateTimeZone.forOffsetHoursMinutes(6,17)).getMillis()));
        assertEquals(rs.getObject(5),new Timestamp(new DateTime(2004,5,6,6,7,8,DateTimeZone.forOffsetHoursMinutes(6,17)).getMillis()));
        assertEquals(rs.getTimestamp("e"),new Timestamp(new DateTime(2004,5,6,6,7,8,DateTimeZone.forOffsetHoursMinutes(6,17)).getMillis()));
        assertEquals(rs.getTimestamp("e",ASIA_ORAL_CALENDAR),new Timestamp(new DateTime(2004,5,6,6,7,8,DateTimeZone.forOffsetHoursMinutes(6,17)).getMillis()));
        assertEquals(rs.getObject("e"),new Timestamp(new DateTime(2004,5,6,6,7,8,DateTimeZone.forOffsetHoursMinutes(6,17)).getMillis()));
        assertEquals(rs.getTimestamp(6),new Timestamp(new DateTime(2007,8,9,9,10,11,DateTimeZone.forID("Europe/Berlin")).getMillis()));
        assertEquals(rs.getTimestamp(6,ASIA_ORAL_CALENDAR),new Timestamp(new DateTime(2007,8,9,9,10,11,DateTimeZone.forID("Europe/Berlin")).getMillis()));
        assertEquals(rs.getObject(6),new Timestamp(new DateTime(2007,8,9,9,10,11,DateTimeZone.forID("Europe/Berlin")).getMillis()));
        assertEquals(rs.getTimestamp("f"),new Timestamp(new DateTime(2007,8,9,9,10,11,DateTimeZone.forID("Europe/Berlin")).getMillis()));
        assertEquals(rs.getTimestamp("f",ASIA_ORAL_CALENDAR),new Timestamp(new DateTime(2007,8,9,9,10,11,DateTimeZone.forID("Europe/Berlin")).getMillis()));
        assertEquals(rs.getObject("f"),new Timestamp(new DateTime(2007,8,9,9,10,11,DateTimeZone.forID("Europe/Berlin")).getMillis()));
        assertEquals(rs.getDate(7),new Date(new DateTime(2013,3,22,0,0).getMillis()));
        assertEquals(rs.getDate(7,ASIA_ORAL_CALENDAR),new Date(new DateTime(2013,3,22,0,0,ASIA_ORAL_ZONE).getMillis()));
        assertEquals(rs.getObject(7),new Date(new DateTime(2013,3,22,0,0).getMillis()));
        assertEquals(rs.getDate("g"),new Date(new DateTime(2013,3,22,0,0).getMillis()));
        assertEquals(rs.getDate("g",ASIA_ORAL_CALENDAR),new Date(new DateTime(2013,3,22,0,0,ASIA_ORAL_ZONE).getMillis()));
        assertEquals(rs.getObject("g"),new Date(new DateTime(2013,3,22,0,0).getMillis()));
        assertEquals(rs.getObject(8),new PrestoIntervalYearMonth(123,11));
        assertEquals(rs.getObject("h"),new PrestoIntervalYearMonth(123,11));
        assertEquals(rs.getObject(9),new PrestoIntervalDayTime(11,22,33,44,555));
        assertEquals(rs.getObject("i"),new PrestoIntervalDayTime(11,22,33,44,555));
        assertEquals(rs.getFloat(10),123.45f);
        assertEquals(rs.getObject(10),123.45f);
        assertEquals(rs.getFloat("j"),123.45f);
        assertEquals(rs.getObject("j"),123.45f);
        assertEquals(rs.getFloat(11),POSITIVE_INFINITY);
        assertEquals(rs.getObject(11),POSITIVE_INFINITY);
        assertEquals(rs.getFloat("k"),POSITIVE_INFINITY);
        assertEquals(rs.getObject("k"),POSITIVE_INFINITY);
        assertFalse(rs.next());
      }
     }
   }
 }
