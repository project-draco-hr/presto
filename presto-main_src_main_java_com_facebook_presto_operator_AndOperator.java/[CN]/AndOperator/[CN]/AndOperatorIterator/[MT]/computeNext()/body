{
  if (done) {
    endOfData();
    return null;
  }
  ImmutableList.Builder<Long> positions=ImmutableList.builder();
  int count=0;
  AdvanceResult result=FINISHED;
  while (count < MAX_POSITIONS_PER_BLOCK) {
    Cursor head=queue.remove();
    long initialPosition=head.getPosition();
    if (initialPosition == currentMax) {
      positions.add(currentMax);
      ++count;
      currentMax++;
    }
    result=head.advanceToPosition(currentMax);
    if (result == FINISHED) {
      done=true;
      break;
    }
    long endPosition=head.getPosition();
    currentMax=Math.max(currentMax,endPosition);
    queue.add(head);
    if (result == MUST_YIELD && initialPosition == endPosition) {
      break;
    }
  }
  if (count == 0) {
switch (result) {
case SUCCESS:
      throw new IllegalStateException("No positions produced and input was not finished");
case MUST_YIELD:
    return setMustYield();
case FINISHED:
  return endOfData();
}
}
return new UncompressedPositionBlock(positions.build());
}
