{
  ServerConfig serverConfig=buildConfigObject(ServerConfig.class);
  binder.install(new CoordinatorModule());
  if (serverConfig.isCoordinator()) {
    discoveryBinder(binder).bindHttpAnnouncement("presto-coordinator");
  }
  binder.bind(SqlParser.class).in(Scopes.SINGLETON);
  binder.bind(SqlParserOptions.class).toInstance(sqlParserOptions);
  bindFailureDetector(binder,serverConfig.isCoordinator());
  jaxrsBinder(binder).bind(ThrowableMapper.class);
  jaxrsBinder(binder).bind(TaskResource.class);
  binder.bind(TaskManager.class).to(SqlTaskManager.class).in(Scopes.SINGLETON);
  bindConfig(binder).to(MemoryManagerConfig.class);
  bindConfig(binder).to(ReservedSystemMemoryConfig.class);
  newExporter(binder).export(ClusterMemoryManager.class).withGeneratedName();
  binder.bind(ClusterMemoryManager.class).in(Scopes.SINGLETON);
  binder.bind(LocalMemoryManager.class).in(Scopes.SINGLETON);
  newExporter(binder).export(LocalMemoryManager.class).withGeneratedName();
  newExporter(binder).export(TaskManager.class).withGeneratedName();
  binder.bind(TaskExecutor.class).in(Scopes.SINGLETON);
  newExporter(binder).export(TaskExecutor.class).withGeneratedName();
  binder.bind(LocalExecutionPlanner.class).in(Scopes.SINGLETON);
  bindConfig(binder).to(CompilerConfig.class);
  binder.bind(ExpressionCompiler.class).in(Scopes.SINGLETON);
  newExporter(binder).export(ExpressionCompiler.class).withGeneratedName();
  bindConfig(binder).to(TaskManagerConfig.class);
  binder.bind(IndexJoinLookupStats.class).in(Scopes.SINGLETON);
  newExporter(binder).export(IndexJoinLookupStats.class).withGeneratedName();
  binder.bind(AsyncHttpExecutionMBean.class).in(Scopes.SINGLETON);
  newExporter(binder).export(AsyncHttpExecutionMBean.class).withGeneratedName();
  jsonCodecBinder(binder).bindJsonCodec(TaskInfo.class);
  jaxrsBinder(binder).bind(PagesResponseWriter.class);
  binder.bind(new TypeLiteral<Supplier<ExchangeClient>>(){
  }
).to(ExchangeClientFactory.class).in(Scopes.SINGLETON);
  httpClientBinder(binder).bindHttpClient("exchange",ForExchange.class).withTracing();
  bindConfig(binder).to(ExchangeClientConfig.class);
  binder.bind(ExchangeExecutionMBean.class).in(Scopes.SINGLETON);
  newExporter(binder).export(ExchangeExecutionMBean.class).withGeneratedName();
  binder.bind(LocationFactory.class).to(HttpLocationFactory.class).in(Scopes.SINGLETON);
  binder.bind(RemoteTaskFactory.class).to(HttpRemoteTaskFactory.class).in(Scopes.SINGLETON);
  newExporter(binder).export(RemoteTaskFactory.class).withGeneratedName();
  httpClientBinder(binder).bindHttpClient("scheduler",ForScheduler.class).withTracing();
  jaxrsBinder(binder).bind(MemoryResource.class);
  httpClientBinder(binder).bindHttpClient("memoryManager",ForMemoryManager.class).withTracing();
  jsonCodecBinder(binder).bindJsonCodec(MemoryInfo.class);
  binder.bind(PageSourceManager.class).in(Scopes.SINGLETON);
  binder.bind(PageSourceProvider.class).to(PageSourceManager.class).in(Scopes.SINGLETON);
  newSetBinder(binder,ConnectorPageSourceProvider.class);
  binder.bind(PageSinkManager.class).in(Scopes.SINGLETON);
  binder.bind(PageSinkProvider.class).to(PageSinkManager.class).in(Scopes.SINGLETON);
  newSetBinder(binder,ConnectorPageSinkProvider.class);
  binder.bind(CatalogManager.class).in(Scopes.SINGLETON);
  bindConfig(binder).to(CatalogManagerConfig.class);
  binder.bind(MetadataManager.class).in(Scopes.SINGLETON);
  binder.bind(Metadata.class).to(MetadataManager.class).in(Scopes.SINGLETON);
  binder.bind(TypeRegistry.class).in(Scopes.SINGLETON);
  binder.bind(TypeManager.class).to(TypeRegistry.class).in(Scopes.SINGLETON);
  jsonBinder(binder).addDeserializerBinding(Type.class).to(TypeDeserializer.class);
  newSetBinder(binder,Type.class);
  binder.bind(IndexManager.class).in(Scopes.SINGLETON);
  binder.install(new HandleJsonModule());
  binder.bind(ConnectorManager.class).in(Scopes.SINGLETON);
  MapBinder<String,ConnectorFactory> connectorFactoryBinder=newMapBinder(binder,String.class,ConnectorFactory.class);
  connectorFactoryBinder.addBinding("jmx").to(JmxConnectorFactory.class);
  binder.install(new InformationSchemaModule());
  binder.install(new SystemTablesModule());
  jsonCodecBinder(binder).bindJsonCodec(TaskUpdateRequest.class);
  jsonCodecBinder(binder).bindJsonCodec(ConnectorSplit.class);
  jsonBinder(binder).addSerializerBinding(Slice.class).to(SliceSerializer.class);
  jsonBinder(binder).addDeserializerBinding(Slice.class).to(SliceDeserializer.class);
  jsonBinder(binder).addSerializerBinding(Expression.class).to(ExpressionSerializer.class);
  jsonBinder(binder).addDeserializerBinding(Expression.class).to(ExpressionDeserializer.class);
  jsonBinder(binder).addDeserializerBinding(FunctionCall.class).to(FunctionCallDeserializer.class);
  binder.bind(QueryMonitor.class).in(Scopes.SINGLETON);
  eventBinder(binder).bindEventClient(QueryCreatedEvent.class);
  eventBinder(binder).bindEventClient(QueryCompletionEvent.class);
  eventBinder(binder).bindEventClient(SplitCompletionEvent.class);
  String prestoVersion=serverConfig.getPrestoVersion();
  if (prestoVersion == null) {
    prestoVersion=detectPrestoVersion();
  }
  checkState(prestoVersion != null,"presto.version must be provided when it cannot be automatically determined");
  NodeVersion nodeVersion=new NodeVersion(prestoVersion);
  binder.bind(NodeVersion.class).toInstance(nodeVersion);
  discoveryBinder(binder).bindHttpAnnouncement("presto").addProperty("node_version",nodeVersion.toString()).addProperty("coordinator",String.valueOf(serverConfig.isCoordinator())).addProperty("datasources",nullToEmpty(serverConfig.getDataSources()));
  jsonCodecBinder(binder).bindJsonCodec(QueryInfo.class);
  jsonCodecBinder(binder).bindJsonCodec(TaskInfo.class);
  jsonCodecBinder(binder).bindJsonCodec(QueryResults.class);
  jaxrsBinder(binder).bind(StatementResource.class);
  jaxrsBinder(binder).bind(ExecuteResource.class);
  httpClientBinder(binder).bindHttpClient("execute",ForExecute.class);
  binder.bind(PluginManager.class).in(Scopes.SINGLETON);
  bindConfig(binder).to(PluginManagerConfig.class);
  binder.bind(new TypeLiteral<List<PlanOptimizer>>(){
  }
).toProvider(PlanOptimizersFactory.class).in(Scopes.SINGLETON);
  binder.bind(BlockEncodingManager.class).in(Scopes.SINGLETON);
  binder.bind(BlockEncodingSerde.class).to(BlockEncodingManager.class).in(Scopes.SINGLETON);
  newSetBinder(binder,new TypeLiteral<BlockEncodingFactory<?>>(){
  }
);
  jaxrsBinder(binder).bind(ThreadResource.class);
  jaxrsBinder(binder).bind(QueryExecutionResource.class);
  binder.bind(PageSorter.class).to(PagesIndexPageSorter.class).in(Scopes.SINGLETON);
}
