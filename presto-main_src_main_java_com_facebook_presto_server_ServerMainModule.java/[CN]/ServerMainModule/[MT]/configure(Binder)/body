{
  binder.bind(QueryResource.class).in(Scopes.SINGLETON);
  binder.bind(QueryManager.class).to(StaticQueryManager.class).in(Scopes.SINGLETON);
  binder.bind(QueryTaskResource.class).in(Scopes.SINGLETON);
  binder.bind(QueryTaskManager.class).to(SqlQueryTaskManager.class).in(Scopes.SINGLETON);
  jsonCodecBinder(binder).bindJsonCodec(QueryTaskInfo.class);
  binder.bind(TaskScheduler.class).in(Scopes.SINGLETON);
  binder.bind(PagesMapper.class).in(Scopes.SINGLETON);
  HttpClientBinder.httpClientBinder(binder).bindHttpClient("exchange",ForExchange.class).withTracing();
  HttpClientBinder.httpClientBinder(binder).bindHttpClient("scheduler",ForScheduler.class).withTracing();
  binder.bind(PlanFragmentSourceProvider.class).to(HackPlanFragmentSourceProvider.class).in(Scopes.SINGLETON);
  binder.bind(StorageManager.class).to(DatabaseStorageManager.class).in(Scopes.SINGLETON);
  binder.bind(DataStreamProvider.class).to(DataStreamManager.class).in(Scopes.SINGLETON);
  binder.bind(NativeDataStreamProvider.class).in(Scopes.SINGLETON);
  binder.bind(ImportDataStreamProvider.class).in(Scopes.SINGLETON);
  binder.bind(Metadata.class).to(MetadataManager.class).in(Scopes.SINGLETON);
  binder.bind(DatabaseMetadata.class).in(Scopes.SINGLETON);
  binder.bind(ImportClientFactory.class).in(Scopes.SINGLETON);
  binder.bind(ImportMetadata.class).in(Scopes.SINGLETON);
  binder.bind(SplitManager.class).in(Scopes.SINGLETON);
  jsonCodecBinder(binder).bindJsonCodec(QueryFragmentRequest.class);
  JsonBinder.jsonBinder(binder).addSerializerBinding(Expression.class).toInstance(new JsonSerializer<Expression>(){
    @Override public void serialize(    Expression expression,    JsonGenerator jsonGenerator,    SerializerProvider serializerProvider) throws IOException {
      jsonGenerator.writeString(ExpressionFormatter.toString(expression));
    }
  }
);
  JsonBinder.jsonBinder(binder).addDeserializerBinding(Expression.class).toInstance(new JsonDeserializer<Expression>(){
    @Override public Expression deserialize(    JsonParser jsonParser,    DeserializationContext deserializationContext) throws IOException {
      try {
        return SqlParser.createExpression(jsonParser.readValueAs(String.class));
      }
 catch (      RecognitionException e) {
        throw Throwables.propagate(e);
      }
    }
  }
);
  JsonBinder.jsonBinder(binder).addDeserializerBinding(FunctionCall.class).toInstance(new JsonDeserializer<FunctionCall>(){
    @Override public FunctionCall deserialize(    JsonParser jsonParser,    DeserializationContext deserializationContext) throws IOException {
      try {
        return (FunctionCall)SqlParser.createExpression(jsonParser.readValueAs(String.class));
      }
 catch (      RecognitionException e) {
        throw Throwables.propagate(e);
      }
    }
  }
);
  discoveryBinder(binder).bindSelector("presto");
  discoveryBinder(binder).bindSelector("hive-metastore");
  binder.bind(NodeManager.class).in(Scopes.SINGLETON);
  binder.bind(NodeWorkerQueue.class).in(Scopes.SINGLETON);
  binder.bind(ShardManager.class).to(DatabaseShardManager.class).in(Scopes.SINGLETON);
  binder.bind(ImportManager.class).in(Scopes.SINGLETON);
  httpClientBinder(binder).bindHttpClient("importer",ForImportManager.class).withFilter(NodeIdUserAgentRequestFilter.class);
  binder.bind(ShardImporter.class).in(Scopes.SINGLETON);
  binder.bind(ShardResource.class).in(Scopes.SINGLETON);
  jsonCodecBinder(binder).bindJsonCodec(ShardImport.class);
  discoveryBinder(binder).bindHttpAnnouncement("presto");
}
