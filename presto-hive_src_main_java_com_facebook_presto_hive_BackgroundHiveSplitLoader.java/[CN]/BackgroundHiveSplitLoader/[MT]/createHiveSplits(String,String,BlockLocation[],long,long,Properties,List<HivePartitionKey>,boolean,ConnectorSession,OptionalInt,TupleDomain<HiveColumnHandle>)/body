{
  ImmutableList.Builder<HiveSplit> builder=ImmutableList.builder();
  boolean forceLocalScheduling=HiveSessionProperties.isForceLocalScheduling(session);
  if (splittable) {
    for (    BlockLocation blockLocation : blockLocations) {
      List<HostAddress> addresses=toHostAddress(blockLocation.getHosts());
      long maxBytes=maxSplitSize.toBytes();
      boolean creatingInitialSplits=false;
      if (remainingInitialSplits.get() > 0) {
        maxBytes=maxInitialSplitSize.toBytes();
        creatingInitialSplits=true;
      }
      int chunks=Math.max(1,(int)(blockLocation.getLength() / maxBytes));
      long targetChunkSize=(long)Math.ceil(blockLocation.getLength() * 1.0 / chunks);
      long chunkOffset=0;
      while (chunkOffset < blockLocation.getLength()) {
        if (remainingInitialSplits.decrementAndGet() < 0 && creatingInitialSplits) {
          creatingInitialSplits=false;
          maxBytes=maxSplitSize.toBytes();
          long remainingLength=blockLocation.getLength() - chunkOffset;
          chunks=Math.max(1,(int)(remainingLength / maxBytes));
          targetChunkSize=(long)Math.ceil(remainingLength * 1.0 / chunks);
        }
        long chunkLength=Math.min(targetChunkSize,blockLocation.getLength() - chunkOffset);
        builder.add(new HiveSplit(connectorId,table.getDbName(),table.getTableName(),partitionName,path,blockLocation.getOffset() + chunkOffset,chunkLength,schema,partitionKeys,addresses,bucketNumber,forceLocalScheduling,effectivePredicate));
        chunkOffset+=chunkLength;
      }
      checkState(chunkOffset == blockLocation.getLength(),"Error splitting blocks");
    }
  }
 else {
    List<HostAddress> addresses=ImmutableList.of();
    if (blockLocations.length > 0) {
      addresses=toHostAddress(blockLocations[0].getHosts());
    }
    builder.add(new HiveSplit(connectorId,table.getDbName(),table.getTableName(),partitionName,path,start,length,schema,partitionKeys,addresses,bucketNumber,forceLocalScheduling,effectivePredicate));
  }
  return builder.build();
}
