{
  checkNotNull(connectorId,"connectorId is null");
  checkNotNull(config,"config is null");
  try {
    Bootstrap app=new Bootstrap(new JsonModule(),new KafkaConnectorModule(),new Module(){
      @Override public void configure(      Binder binder){
        binder.bindConstant().annotatedWith(Names.named("connectorId")).to(connectorId);
        binder.bind(TypeManager.class).toInstance(typeManager);
        binder.bind(NodeManager.class).toInstance(nodeManager);
        if (tableDescriptionSupplier.isPresent()) {
          binder.bind(new TypeLiteral<Supplier<Map<SchemaTableName,KafkaTopicDescription>>>(){
          }
).toInstance(tableDescriptionSupplier.get());
        }
 else {
          binder.bind(new TypeLiteral<Supplier<Map<SchemaTableName,KafkaTopicDescription>>>(){
          }
).to(KafkaTableDescriptionSupplier.class).in(Scopes.SINGLETON);
        }
      }
    }
);
    Injector injector=app.strictConfig().doNotInitializeLogging().setRequiredConfigurationProperties(config).setOptionalConfigurationProperties(optionalConfig).initialize();
    return injector.getInstance(KafkaConnector.class);
  }
 catch (  Exception e) {
    throw Throwables.propagate(e);
  }
}
