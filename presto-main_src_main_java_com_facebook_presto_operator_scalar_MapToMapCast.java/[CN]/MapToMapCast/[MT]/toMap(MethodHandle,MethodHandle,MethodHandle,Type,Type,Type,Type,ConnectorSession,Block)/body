{
  Class<?>[] parameterTypes=keyCastFunction.type().parameterArray();
  for (int i=0; i < parameterTypes.length; i++) {
    if (parameterTypes[i] == ConnectorSession.class) {
      keyCastFunction=MethodHandles.insertArguments(keyCastFunction,i,session);
      break;
    }
  }
  parameterTypes=valueCastFunction.type().parameterArray();
  for (int i=0; i < parameterTypes.length; i++) {
    if (parameterTypes[i] == ConnectorSession.class) {
      valueCastFunction=MethodHandles.insertArguments(valueCastFunction,i,session);
      break;
    }
  }
  TypedSet typedSet=new TypedSet(toKeyType,fromMap.getPositionCount() / 2);
  BlockBuilder keyBlockBuilder=toKeyType.createBlockBuilder(new BlockBuilderStatus(),fromMap.getPositionCount() / 2);
  for (int i=0; i < fromMap.getPositionCount(); i+=2) {
    Object fromKey=readNativeValue(fromKeyType,fromMap,i);
    try {
      Object toKey=keyCastFunction.invoke(fromKey);
      if (toKey == null) {
        throw new PrestoException(StandardErrorCode.INVALID_CAST_ARGUMENT,"map key is null");
      }
      appendToBlockBuilder(toKeyType,toKey,keyBlockBuilder);
    }
 catch (    Throwable t) {
      Throwables.propagateIfInstanceOf(t,Error.class);
      Throwables.propagateIfInstanceOf(t,PrestoException.class);
      throw new PrestoException(StandardErrorCode.GENERIC_INTERNAL_ERROR,t);
    }
  }
  Block keyBlock=keyBlockBuilder.build();
  BlockBuilder blockBuilder=new InterleavedBlockBuilder(ImmutableList.of(toKeyType,toValueType),new BlockBuilderStatus(),fromMap.getPositionCount());
  for (int i=0; i < fromMap.getPositionCount(); i+=2) {
    if (!typedSet.contains(keyBlock,i / 2)) {
      typedSet.add(keyBlock,i / 2);
      toKeyType.appendTo(keyBlock,i / 2,blockBuilder);
      Object fromValue=readNativeValue(fromValueType,fromMap,i + 1);
      try {
        Object toValue=valueCastFunction.invoke(fromValue);
        appendToBlockBuilder(toValueType,toValue,blockBuilder);
      }
 catch (      Throwable t) {
        Throwables.propagateIfInstanceOf(t,Error.class);
        Throwables.propagateIfInstanceOf(t,PrestoException.class);
        throw new PrestoException(StandardErrorCode.GENERIC_INTERNAL_ERROR,t);
      }
    }
 else {
      throw new PrestoException(StandardErrorCode.INVALID_CAST_ARGUMENT,"duplicate keys");
    }
  }
  return blockBuilder.build();
}
