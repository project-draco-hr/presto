{
  for (  Map.Entry<String,Class<?>> entry : specializedTypeParameters.entrySet()) {
    if (!entry.getValue().isAssignableFrom(boundVariables.getTypeVariable(entry.getKey()).getJavaType())) {
      return Optional.empty();
    }
  }
  Class<?> returnContainerType=getNullAwareContainerType(typeManager.getType(boundSignature.getReturnType()).getJavaType(),nullable);
  if (!returnContainerType.equals(methodHandle.type().returnType())) {
    return Optional.empty();
  }
  for (int i=0; i < boundSignature.getArgumentTypes().size(); i++) {
    Class<?> argumentContainerType=getNullAwareContainerType(typeManager.getType(boundSignature.getArgumentTypes().get(i)).getJavaType(),nullableArguments.get(i));
    if (!argumentNativeContainerTypes.get(i).isAssignableFrom(argumentContainerType)) {
      return Optional.empty();
    }
  }
  MethodHandle methodHandle=this.methodHandle;
  for (  ImplementationDependency dependency : dependencies) {
    methodHandle=methodHandle.bindTo(dependency.resolve(boundVariables.getTypeVariables(),typeManager,functionRegistry));
  }
  MethodHandle constructor=null;
  if (this.constructor.isPresent()) {
    constructor=this.constructor.get();
    for (    ImplementationDependency dependency : constructorDependencies) {
      constructor=constructor.bindTo(dependency.resolve(boundVariables.getTypeVariables(),typeManager,functionRegistry));
    }
  }
  return Optional.of(new MethodHandleAndConstructor(methodHandle,Optional.ofNullable(constructor)));
}
