{
  checkArgument(sourceName.startsWith("hive_"),"bad source name: %s",sourceName);
  final String metastoreName=sourceName.split("_",2)[1];
  checkArgument(!metastoreName.isEmpty(),"bad metastore name: %s",metastoreName);
  List<ServiceDescriptor> descriptors=ImmutableList.copyOf(selector.selectAllServices());
  List<HostAndPort> metastores=new ArrayList<>();
  for (  ServiceDescriptor descriptor : descriptors) {
    String thrift=descriptor.getProperties().get("thrift");
    String name=descriptor.getProperties().get("name");
    if (thrift != null && metastoreName.equals(name)) {
      try {
        HostAndPort metastore=HostAndPort.fromString(thrift);
        checkArgument(metastore.hasPort());
        metastores.add(metastore);
      }
 catch (      IllegalArgumentException ignored) {
      }
    }
  }
  if (metastores.isEmpty()) {
    throw new RuntimeException(String.format("hive metastore not available for name %s in pool %s",metastoreName,selector.getPool()));
  }
  MetadataCache metadataCache;
  try {
    metadataCache=metadataCaches.get(metastoreName,new Callable<MetadataCache>(){
      @Override public MetadataCache call() throws Exception {
        String jmxName=format("com.facebook.presto:type=metadatacache,group=%s",metastoreName);
        MetadataCache cache=new HiveMetadataCache(new Duration(60.0,TimeUnit.MINUTES));
        Map<String,Object> jmxExposed=cache.getMetadataCacheStats();
        for (        Map.Entry<String,Object> jmx : jmxExposed.entrySet()) {
          mbeanExporter.export(format("%s,name=%s",jmxName,jmx.getKey()),jmx.getValue());
        }
        return cache;
      }
    }
);
  }
 catch (  ExecutionException e) {
    throw Throwables.propagate(e.getCause());
  }
  HostAndPort metastore=shuffle(metastores).get(0);
  return new CachingHiveClient(metastore.getHostText(),metastore.getPort(),metadataCache,maxChunkSize.toBytes());
}
