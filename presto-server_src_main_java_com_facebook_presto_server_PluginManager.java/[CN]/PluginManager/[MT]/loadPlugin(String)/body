{
  log.info("-- Loading plugin %s --",plugin);
  URLClassLoader pluginClassLoader=buildClassLoader(plugin);
  try (ThreadContextClassLoader threadContextClassLoader=new ThreadContextClassLoader(pluginClassLoader)){
    ServiceLoader<ImportClientFactoryFactory> serviceLoader=ServiceLoader.load(ImportClientFactoryFactory.class,pluginClassLoader);
    List<ImportClientFactoryFactory> importClientFactoryFactories=ImmutableList.copyOf(serviceLoader);
    for (    ImportClientFactoryFactory importClientFactoryFactory : importClientFactoryFactories) {
      if (importClientFactoryFactory.getClass().isAnnotationPresent(PrestoInternalPlugin.class)) {
        injector.injectMembers(importClientFactoryFactory);
      }
      Map<String,String> requiredConfig=loadPluginConfig(importClientFactoryFactory.getConfigName());
      ImportClientFactory importClientFactory=importClientFactoryFactory.createImportClientFactory(requiredConfig,optionalConfig);
      importClientFactory=new ClassLoaderSafeImportClientFactory(importClientFactory,pluginClassLoader);
      importClientManager.addImportClientFactory(plugin,importClientFactory);
    }
  }
   log.info("-- Finished loading plugin %s --",plugin);
}
