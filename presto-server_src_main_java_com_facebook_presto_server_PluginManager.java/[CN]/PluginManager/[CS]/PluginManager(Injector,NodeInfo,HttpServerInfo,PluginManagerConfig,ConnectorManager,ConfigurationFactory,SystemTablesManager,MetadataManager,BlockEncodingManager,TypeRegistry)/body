{
  checkNotNull(injector,"injector is null");
  checkNotNull(nodeInfo,"nodeInfo is null");
  checkNotNull(httpServerInfo,"httpServerInfo is null");
  checkNotNull(config,"config is null");
  checkNotNull(configurationFactory,"configurationFactory is null");
  this.injector=injector;
  installedPluginsDir=config.getInstalledPluginsDir();
  if (config.getPlugins() == null) {
    this.plugins=ImmutableList.of();
  }
 else {
    this.plugins=ImmutableList.copyOf(config.getPlugins());
  }
  this.resolver=new ArtifactResolver(config.getMavenLocalRepository(),config.getMavenRemoteRepository());
  Map<String,String> optionalConfig=new TreeMap<>(configurationFactory.getProperties());
  optionalConfig.put("node.id",nodeInfo.getNodeId());
  optionalConfig.put("http-server.http.port",Integer.toString(httpServerInfo.getHttpUri().getPort()));
  this.optionalConfig=ImmutableMap.copyOf(optionalConfig);
  this.connectorManager=checkNotNull(connectorManager,"connectorManager is null");
  this.systemTablesManager=checkNotNull(systemTablesManager,"systemTablesManager is null");
  this.metadataManager=checkNotNull(metadataManager,"metadataManager is null");
  this.blockEncodingManager=checkNotNull(blockEncodingManager,"blockEncodingManager is null");
  this.typeRegistry=checkNotNull(typeRegistry,"typeRegistry is null");
}
