{
  checkNotNull(typeIterable,"typeIterable is null");
  this.types=ImmutableList.copyOf(typeIterable);
  int[] offsets=new int[types.size() + 1];
  int nullBytes=((types.size() - 1) >> 3) + 1;
  int currentOffset=nullBytes;
  for (int i=0; i < types.size(); i++) {
    Type type=types.get(i);
    if (type.isFixedSize()) {
      offsets[i]=currentOffset;
      currentOffset+=type.getSize();
    }
  }
  boolean hasVariableLengthFields=false;
  int firstVariableLengthField=-1;
  int secondVariableLengthField=-1;
  int variableLengthFieldCount=0;
  for (int i=0; i < types.size(); i++) {
    Type type=types.get(i);
    if (!type.isFixedSize()) {
      ++variableLengthFieldCount;
      offsets[i]=currentOffset;
      if (hasVariableLengthFields) {
        currentOffset+=SIZE_OF_INT;
        if (secondVariableLengthField == -1) {
          secondVariableLengthField=i;
        }
      }
 else {
        firstVariableLengthField=i;
      }
      hasVariableLengthFields=true;
    }
  }
  if (secondVariableLengthField == -1) {
    secondVariableLengthField=types.size();
  }
  offsets[offsets.length - 1]=currentOffset;
  if (hasVariableLengthFields) {
    size=-1;
  }
 else {
    size=currentOffset;
  }
  this.firstVariableLengthField=firstVariableLengthField;
  this.secondVariableLengthField=secondVariableLengthField;
  this.variableLengthFieldCount=variableLengthFieldCount;
  this.offsets=ImmutableList.copyOf(Ints.asList(offsets));
  int variablePartOffset=nullBytes;
  boolean isFirst=true;
  for (  TupleInfo.Type type : getTypes()) {
    if (!type.isFixedSize()) {
      if (!isFirst) {
        variablePartOffset+=SizeOf.SIZE_OF_INT;
      }
      isFirst=false;
    }
 else {
      variablePartOffset+=type.getSize();
    }
  }
  variablePartOffset+=SizeOf.SIZE_OF_INT;
  this.variablePartOffset=variablePartOffset;
}
