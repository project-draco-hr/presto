{
  if (object instanceof Expression) {
    return (Expression)object;
  }
  if (object == null) {
    if (type == UNKNOWN) {
      return new NullLiteral();
    }
    return new Cast(new NullLiteral(),type.getTypeSignature().toString());
  }
  if (type.equals(BIGINT)) {
    return new LongLiteral(object.toString());
  }
  if (type.equals(DOUBLE)) {
    Double value=(Double)object;
    if (value.isNaN()) {
      return new FunctionCall(new QualifiedName("nan"),ImmutableList.<Expression>of());
    }
 else     if (value.equals(Double.NEGATIVE_INFINITY)) {
      return ArithmeticUnaryExpression.negative(new FunctionCall(new QualifiedName("infinity"),ImmutableList.<Expression>of()));
    }
 else     if (value.equals(Double.POSITIVE_INFINITY)) {
      return new FunctionCall(new QualifiedName("infinity"),ImmutableList.<Expression>of());
    }
 else {
      return new DoubleLiteral(object.toString());
    }
  }
  if (type.equals(VARCHAR)) {
    if (object instanceof Slice) {
      return new StringLiteral(((Slice)object).toString(UTF_8));
    }
    if (object instanceof String) {
      return new StringLiteral((String)object);
    }
  }
  if (type.equals(BOOLEAN)) {
    return new BooleanLiteral(object.toString());
  }
  if (type.equals(VARBINARY) && object instanceof Slice) {
    return new FunctionCall(new QualifiedName("from_base64"),ImmutableList.of(new StringLiteral(VarbinaryFunctions.toBase64((Slice)object).toStringUtf8())));
  }
  Signature signature=FunctionRegistry.getMagicLiteralFunctionSignature(type);
  Expression rawLiteral=toExpression(object,FunctionRegistry.type(type.getJavaType()));
  return new FunctionCall(new QualifiedName(signature.getName()),ImmutableList.of(rawLiteral));
}
