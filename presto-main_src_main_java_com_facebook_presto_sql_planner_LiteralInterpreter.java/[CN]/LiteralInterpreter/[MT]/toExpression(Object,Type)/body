{
  if (object instanceof Expression) {
    return (Expression)object;
  }
  if (object == null) {
    return new Cast(new NullLiteral(),type.getName());
  }
  if (type == BigintType.BIGINT) {
    return new LongLiteral(object.toString());
  }
  if (type == DoubleType.DOUBLE) {
    Double value=(Double)object;
    if (value.isNaN()) {
      return new FunctionCall(new QualifiedName("nan"),ImmutableList.<Expression>of());
    }
 else     if (value == Double.NEGATIVE_INFINITY) {
      return new NegativeExpression(new FunctionCall(new QualifiedName("infinity"),ImmutableList.<Expression>of()));
    }
 else     if (value == Double.POSITIVE_INFINITY) {
      return new FunctionCall(new QualifiedName("infinity"),ImmutableList.<Expression>of());
    }
 else {
      return new DoubleLiteral(object.toString());
    }
  }
  if (type == VarcharType.VARCHAR) {
    if (object instanceof Slice) {
      return new StringLiteral(((Slice)object).toString(UTF_8));
    }
    if (object instanceof String) {
      return new StringLiteral((String)object);
    }
  }
  if (type == BooleanType.BOOLEAN) {
    return new BooleanLiteral(object.toString());
  }
  throw new UnsupportedOperationException("not yet implemented: " + object.getClass().getName());
}
