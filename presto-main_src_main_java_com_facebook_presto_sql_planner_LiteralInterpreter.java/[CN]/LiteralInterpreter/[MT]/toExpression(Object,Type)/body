{
  requireNonNull(type,"type is null");
  if (object instanceof Expression) {
    return (Expression)object;
  }
  if (object == null) {
    if (type.equals(UNKNOWN)) {
      return new NullLiteral();
    }
    return new Cast(new NullLiteral(),type.getTypeSignature().toString(),false,true);
  }
  if (type.equals(INTEGER)) {
    return new LongLiteral(object.toString());
  }
  if (type.equals(BIGINT)) {
    LongLiteral expression=new LongLiteral(object.toString());
    if (expression.getValue() >= Integer.MIN_VALUE && expression.getValue() <= Integer.MAX_VALUE) {
      return new GenericLiteral("BIGINT",object.toString());
    }
    return new LongLiteral(object.toString());
  }
  checkArgument(Primitives.wrap(type.getJavaType()).isInstance(object),"object.getClass (%s) and type.getJavaType (%s) do not agree",object.getClass(),type.getJavaType());
  if (type.equals(DOUBLE)) {
    Double value=(Double)object;
    if (value.isNaN()) {
      return new FunctionCall(QualifiedName.of("nan"),ImmutableList.<Expression>of());
    }
 else     if (value.equals(Double.NEGATIVE_INFINITY)) {
      return ArithmeticUnaryExpression.negative(new FunctionCall(QualifiedName.of("infinity"),ImmutableList.<Expression>of()));
    }
 else     if (value.equals(Double.POSITIVE_INFINITY)) {
      return new FunctionCall(QualifiedName.of("infinity"),ImmutableList.<Expression>of());
    }
 else {
      return new DoubleLiteral(object.toString());
    }
  }
  if (type.equals(REAL)) {
    Float value=intBitsToFloat(((Long)object).intValue());
    if (value.isNaN()) {
      return new Cast(new FunctionCall(QualifiedName.of("nan"),ImmutableList.of()),StandardTypes.REAL);
    }
 else     if (value.equals(Float.NEGATIVE_INFINITY)) {
      return ArithmeticUnaryExpression.negative(new Cast(new FunctionCall(QualifiedName.of("infinity"),ImmutableList.of()),StandardTypes.REAL));
    }
 else     if (value.equals(Float.POSITIVE_INFINITY)) {
      return new Cast(new FunctionCall(QualifiedName.of("infinity"),ImmutableList.of()),StandardTypes.REAL);
    }
 else {
      return new GenericLiteral("REAL",value.toString());
    }
  }
  if (type instanceof VarcharType) {
    if (object instanceof String) {
      object=Slices.utf8Slice((String)object);
    }
    if (object instanceof Slice) {
      Slice value=(Slice)object;
      int length=SliceUtf8.countCodePoints(value);
      if (length == ((VarcharType)type).getLength()) {
        return new StringLiteral(value.toStringUtf8());
      }
      return new Cast(new StringLiteral(value.toStringUtf8()),type.getDisplayName(),false,true);
    }
    throw new IllegalArgumentException("object must be instance of Slice or String when type is VARCHAR");
  }
  if (type.equals(BOOLEAN)) {
    return new BooleanLiteral(object.toString());
  }
  if (object instanceof Block) {
    SliceOutput output=new DynamicSliceOutput(((Block)object).getSizeInBytes());
    BlockSerdeUtil.writeBlock(output,(Block)object);
    object=output.slice();
  }
  if (object instanceof Slice) {
    FunctionCall fromBase64=new FunctionCall(QualifiedName.of("from_base64"),ImmutableList.of(new StringLiteral(VarbinaryFunctions.toBase64((Slice)object).toStringUtf8())));
    Signature signature=FunctionRegistry.getMagicLiteralFunctionSignature(type);
    return new FunctionCall(QualifiedName.of(signature.getName()),ImmutableList.of(fromBase64));
  }
  Signature signature=FunctionRegistry.getMagicLiteralFunctionSignature(type);
  Expression rawLiteral=toExpression(object,FunctionRegistry.typeForMagicLiteral(type));
  return new FunctionCall(QualifiedName.of(signature.getName()),ImmutableList.of(rawLiteral));
}
