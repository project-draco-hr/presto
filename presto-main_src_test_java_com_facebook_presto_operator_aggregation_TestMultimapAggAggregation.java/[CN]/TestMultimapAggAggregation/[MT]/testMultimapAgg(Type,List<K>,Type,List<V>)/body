{
  checkState(expectedKeys.size() == expectedValues.size(),"expectedKeys and expectedValues should have equal size");
  MapType mapType=new MapType(keyType,new ArrayType(valueType));
  Signature signature=new Signature(NAME,AGGREGATE,mapType.getTypeSignature(),keyType.getTypeSignature(),valueType.getTypeSignature());
  InternalAggregationFunction aggFunc=metadata.getFunctionRegistry().getAggregateFunctionImplementation(signature);
  Map<K,List<V>> map=new HashMap<>();
  for (int i=0; i < expectedKeys.size(); i++) {
    if (!map.containsKey(expectedKeys.get(i))) {
      map.put(expectedKeys.get(i),new ArrayList<>());
    }
    map.get(expectedKeys.get(i)).add(expectedValues.get(i));
  }
  RowPageBuilder builder=RowPageBuilder.rowPageBuilder(keyType,valueType);
  for (int i=0; i < expectedKeys.size(); i++) {
    builder.row(expectedKeys.get(i),expectedValues.get(i));
  }
  assertAggregation(aggFunc,1.0,map.isEmpty() ? null : map,builder.build().getBlocks());
}
