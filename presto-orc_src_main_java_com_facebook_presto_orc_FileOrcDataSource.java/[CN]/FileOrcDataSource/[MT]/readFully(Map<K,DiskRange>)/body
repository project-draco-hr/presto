{
  checkNotNull(diskRanges,"diskRanges is null");
  if (diskRanges.isEmpty()) {
    return ImmutableMap.of();
  }
  Iterable<DiskRange> mergedRanges=mergeAdjacentDiskRanges(diskRanges.values(),maxMergeDistance,new DataSize(8,Unit.MEGABYTE));
  Map<DiskRange,byte[]> buffers=new LinkedHashMap<>();
  for (  DiskRange mergedRange : mergedRanges) {
    byte[] buffer=new byte[mergedRange.getLength()];
    readFully(mergedRange.getOffset(),buffer);
    buffers.put(mergedRange,buffer);
  }
  ImmutableMap.Builder<K,Slice> slices=ImmutableMap.builder();
  for (  Entry<K,DiskRange> entry : diskRanges.entrySet()) {
    slices.put(entry.getKey(),getDiskRangeSlice(entry.getValue(),buffers));
  }
  return slices.build();
}
