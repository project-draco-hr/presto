{
  List<KeyAndPosition> positionSorted=Ordering.from(KeyAndPosition.positionComparator()).sortedCopy(pageValueAndPositions);
  Block[] blocks=page.getBlocks();
  BlockCursor[] cursors=new BlockCursor[blocks.length];
  for (int i=0; i < blocks.length; i++) {
    cursors[i]=blocks[i].cursor();
  }
  for (  KeyAndPosition keyAndPosition : positionSorted) {
    for (    BlockCursor cursor : cursors) {
      checkState(cursor.advanceToPosition(keyAndPosition.getPosition()));
    }
    if (globalCandidates.size() < n) {
      globalCandidates.add(new KeyAndTuples(keyAndPosition.getKey(),getTuples(keyAndPosition,cursors)));
    }
 else     if (ordering.compare(keyAndPosition.getKey(),globalCandidates.peek().getKey()) > 0) {
      globalCandidates.remove();
      globalCandidates.add(new KeyAndTuples(keyAndPosition.getKey(),getTuples(keyAndPosition,cursors)));
    }
  }
}
