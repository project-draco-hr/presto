{
  long memorySize=0;
  PriorityQueue<KeyAndTuples> globalCandidates=new PriorityQueue<>(Math.min(n,MAX_INITIAL_PRIORITY_QUEUE_SIZE),KeyAndTuples.keyComparator(ordering));
  while (!isMaxMemoryExceeded(memorySize) && source.hasNext()) {
    Page page=source.next();
    Iterable<KeyAndPosition> keyAndPositions=computePageCandidatePositions(globalCandidates,page);
    long sizeDelta=mergeWithGlobalCandidates(globalCandidates,page,keyAndPositions);
    memorySize=taskMemoryManager.updateOperatorReservation(memorySize,memorySize + sizeDelta);
  }
  if (isMaxMemoryExceeded(memorySize)) {
    checkState(partial && memorySize > taskMemoryManager.getMinFlushSize().toBytes(),"Task exceeded max memory size of %s",taskMemoryManager.getMaxMemorySize());
  }
  ImmutableList.Builder<KeyAndTuples> minSortedGlobalCandidates=ImmutableList.builder();
  while (!globalCandidates.isEmpty()) {
    minSortedGlobalCandidates.add(globalCandidates.remove());
  }
  return minSortedGlobalCandidates.build().reverse().iterator();
}
