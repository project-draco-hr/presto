{
  long sizeDelta=0;
  List<KeyAndPosition> positionSorted=Ordering.from(KeyAndPosition.positionComparator()).sortedCopy(pageValueAndPositions);
  Block[] blocks=page.getBlocks();
  BlockCursor[] cursors=new BlockCursor[blocks.length];
  for (int i=0; i < blocks.length; i++) {
    cursors[i]=blocks[i].cursor();
  }
  for (  KeyAndPosition keyAndPosition : positionSorted) {
    for (    BlockCursor cursor : cursors) {
      checkState(cursor.advanceToPosition(keyAndPosition.getPosition()));
    }
    if (globalCandidates.size() < n) {
      Tuple[] tuples=getTuples(keyAndPosition,cursors);
      for (      Tuple tuple : tuples) {
        sizeDelta+=tuple.size();
      }
      sizeDelta+=OVERHEAD_PER_TUPLE.toBytes();
      globalCandidates.add(new KeyAndTuples(keyAndPosition.getKey(),tuples));
    }
 else     if (ordering.compare(keyAndPosition.getKey(),globalCandidates.peek().getKey()) > 0) {
      KeyAndTuples previous=globalCandidates.remove();
      for (      Tuple tuple : previous.getTuples()) {
        sizeDelta-=tuple.size();
      }
      Tuple[] tuples=getTuples(keyAndPosition,cursors);
      globalCandidates.add(new KeyAndTuples(keyAndPosition.getKey(),tuples));
      for (      Tuple tuple : tuples) {
        sizeDelta+=tuple.size();
      }
      sizeDelta+=keyAndPosition.getKey().size();
    }
  }
  return sizeDelta;
}
