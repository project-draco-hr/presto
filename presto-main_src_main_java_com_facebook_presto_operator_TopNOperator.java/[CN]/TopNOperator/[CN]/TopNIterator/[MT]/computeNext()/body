{
  if (globalCandidateIterator == null) {
    while (pageIterator.hasNext()) {
      Page page=pageIterator.next();
      mergeWithGlobalCandidates(page,computePageCandidatePositions(page));
    }
    globalCandidateIterator=globalCandidates.iterator();
  }
  if (!globalCandidateIterator.hasNext()) {
    return endOfData();
  }
  BlockBuilder[] outputs=new BlockBuilder[projections.size()];
  for (int i=0; i < outputs.length; i++) {
    outputs[i]=new BlockBuilder(position,projections.get(i).getTupleInfo());
  }
  while (!isFull(outputs) && globalCandidateIterator.hasNext()) {
    KeyAndTuples next=globalCandidateIterator.next();
    for (int i=0; i < projections.size(); i++) {
      projections.get(i).project(next.getTuples(),outputs[i]);
    }
  }
  Block[] blocks=new Block[projections.size()];
  for (int i=0; i < blocks.length; i++) {
    blocks[i]=outputs[i].build();
  }
  Page page=new Page(blocks);
  position+=page.getPositionCount();
  return page;
}
