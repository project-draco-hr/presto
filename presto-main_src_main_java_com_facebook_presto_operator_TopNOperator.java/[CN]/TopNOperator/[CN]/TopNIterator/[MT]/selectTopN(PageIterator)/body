{
  long currentEstimatedSize=0;
  PriorityQueue<KeyAndTuples> globalCandidates=new PriorityQueue<>(Math.min(n,MAX_INITIAL_PRIORITY_QUEUE_SIZE),KeyAndTuples.keyComparator(ordering));
  try (PageIterator pageIterator=iterator){
    while (pageIterator.hasNext()) {
      Page page=pageIterator.next();
      Iterable<KeyAndPosition> keyAndPositions=computePageCandidatePositions(globalCandidates,page);
      long sizeDelta=mergeWithGlobalCandidates(globalCandidates,page,keyAndPositions);
      currentEstimatedSize+=sizeDelta;
      Preconditions.checkState(currentEstimatedSize + globalCandidates.size() * OVERHEAD_PER_TUPLE.toBytes() <= maxSize.toBytes(),"Query exceeded max operator memory size of %s",maxSize.convertToMostSuccinctDataSize());
    }
  }
   ImmutableList.Builder<KeyAndTuples> minSortedGlobalCandidates=ImmutableList.builder();
  while (!globalCandidates.isEmpty()) {
    minSortedGlobalCandidates.add(globalCandidates.remove());
  }
  return minSortedGlobalCandidates.build().reverse().iterator();
}
