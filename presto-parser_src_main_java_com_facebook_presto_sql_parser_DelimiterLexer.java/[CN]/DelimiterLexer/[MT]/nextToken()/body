{
  if (_input == null) {
    throw new IllegalStateException("nextToken requires a non-null input stream.");
  }
  int tokenStartMarker=_input.mark();
  try {
    outer:     while (true) {
      if (_hitEOF) {
        emitEOF();
        return _token;
      }
      _token=null;
      _channel=Token.DEFAULT_CHANNEL;
      _tokenStartCharIndex=_input.index();
      _tokenStartCharPositionInLine=getInterpreter().getCharPositionInLine();
      _tokenStartLine=getInterpreter().getLine();
      _text=null;
      do {
        _type=Token.INVALID_TYPE;
        int ttype=-1;
        boolean found=false;
        for (        String terminator : delimiters) {
          if (match(terminator)) {
            ttype=SqlBaseParser.DELIMITER;
            found=true;
            break;
          }
        }
        if (!found) {
          try {
            ttype=getInterpreter().match(_input,_mode);
          }
 catch (          LexerNoViableAltException e) {
            notifyListeners(e);
            recover(e);
            ttype=SKIP;
          }
        }
        if (_input.LA(1) == IntStream.EOF) {
          _hitEOF=true;
        }
        if (_type == Token.INVALID_TYPE) {
          _type=ttype;
        }
        if (_type == SKIP) {
          continue outer;
        }
      }
 while (_type == MORE);
      if (_token == null) {
        emit();
      }
      return _token;
    }
  }
  finally {
    _input.release(tokenStartMarker);
  }
}
