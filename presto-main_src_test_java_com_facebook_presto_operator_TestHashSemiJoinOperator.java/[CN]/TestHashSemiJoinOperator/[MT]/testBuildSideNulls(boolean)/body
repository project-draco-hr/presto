{
  DriverContext driverContext=taskContext.addPipelineContext(true,true).addDriverContext();
  OperatorContext operatorContext=driverContext.addOperatorContext(0,new PlanNodeId("test"),ValuesOperator.class.getSimpleName());
  List<Type> buildTypes=ImmutableList.<Type>of(BIGINT);
  RowPagesBuilder rowPagesBuilder=rowPagesBuilder(hashEnabled,Ints.asList(0),buildTypes);
  Operator buildOperator=new ValuesOperator(operatorContext,buildTypes,rowPagesBuilder.row(0L).row(1L).row(2L).row(2L).row(3L).row((Object)null).build());
  SetBuilderOperatorFactory setBuilderOperatorFactory=new SetBuilderOperatorFactory(1,new PlanNodeId("test"),buildOperator.getTypes().get(0),0,rowPagesBuilder.getHashChannel(),10);
  Operator setBuilderOperator=setBuilderOperatorFactory.createOperator(driverContext);
  Driver driver=new Driver(driverContext,buildOperator,setBuilderOperator);
  while (!driver.isFinished()) {
    driver.process();
  }
  List<Type> probeTypes=ImmutableList.<Type>of(BIGINT);
  RowPagesBuilder rowPagesBuilderProbe=rowPagesBuilder(hashEnabled,Ints.asList(0),probeTypes);
  List<Page> probeInput=rowPagesBuilderProbe.addSequencePage(4,1).build();
  HashSemiJoinOperatorFactory joinOperatorFactory=new HashSemiJoinOperatorFactory(2,new PlanNodeId("test"),setBuilderOperatorFactory.getSetProvider(),rowPagesBuilderProbe.getTypes(),0);
  Operator joinOperator=joinOperatorFactory.createOperator(driverContext);
  MaterializedResult expected=resultBuilder(driverContext.getSession(),concat(probeTypes,ImmutableList.of(BOOLEAN))).row(1L,true).row(2L,true).row(3L,true).row(4L,null).build();
  OperatorAssertion.assertOperatorEquals(joinOperator,probeInput,expected,hashEnabled,ImmutableList.of(probeTypes.size()));
}
