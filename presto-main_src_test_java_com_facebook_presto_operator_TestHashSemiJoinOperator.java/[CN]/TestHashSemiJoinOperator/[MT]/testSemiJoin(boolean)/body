{
  DriverContext driverContext=taskContext.addPipelineContext(true,true).addDriverContext();
  OperatorContext operatorContext=driverContext.addOperatorContext(0,new PlanNodeId("test"),ValuesOperator.class.getSimpleName());
  RowPagesBuilder rowPagesBuilder=rowPagesBuilder(hashEnabled,Ints.asList(0),BIGINT);
  Operator buildOperator=new ValuesOperator(operatorContext,rowPagesBuilder.getTypes(),rowPagesBuilder.row(10L).row(30L).row(30L).row(35L).row(36L).row(37L).row(50L).build());
  SetBuilderOperatorFactory setBuilderOperatorFactory=new SetBuilderOperatorFactory(1,new PlanNodeId("test"),buildOperator.getTypes().get(0),0,rowPagesBuilder.getHashChannel(),10);
  Operator setBuilderOperator=setBuilderOperatorFactory.createOperator(driverContext);
  Driver driver=new Driver(driverContext,buildOperator,setBuilderOperator);
  while (!driver.isFinished()) {
    driver.process();
  }
  List<Type> probeTypes=ImmutableList.<Type>of(BIGINT,BIGINT);
  RowPagesBuilder rowPagesBuilderProbe=rowPagesBuilder(hashEnabled,Ints.asList(0),BIGINT,BIGINT);
  List<Page> probeInput=rowPagesBuilderProbe.addSequencePage(10,30,0).build();
  HashSemiJoinOperatorFactory joinOperatorFactory=new HashSemiJoinOperatorFactory(2,new PlanNodeId("test"),setBuilderOperatorFactory.getSetProvider(),rowPagesBuilderProbe.getTypes(),0);
  Operator joinOperator=joinOperatorFactory.createOperator(driverContext);
  MaterializedResult expected=resultBuilder(driverContext.getSession(),concat(probeTypes,ImmutableList.of(BOOLEAN))).row(30L,0L,true).row(31L,1L,false).row(32L,2L,false).row(33L,3L,false).row(34L,4L,false).row(35L,5L,true).row(36L,6L,true).row(37L,7L,true).row(38L,8L,false).row(39L,9L,false).build();
  OperatorAssertion.assertOperatorEquals(joinOperator,probeInput,expected,hashEnabled,ImmutableList.of(probeTypes.size()));
}
