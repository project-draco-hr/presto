{
  checkArgument(percentileChannel == -1,"Intermediate input is only allowed for a final aggregation");
  digests.ensureCapacity(groupIdsBlock.getGroupCount());
  BlockCursor intermediates=block.cursor();
  for (int position=0; position < groupIdsBlock.getPositionCount(); position++) {
    checkState(intermediates.advanceNextPosition());
    if (!intermediates.isNull(0)) {
      long groupId=groupIdsBlock.getGroupId(position);
      DigestAndPercentile currentValue=digests.get(groupId);
      if (currentValue == null) {
        currentValue=new DigestAndPercentile(new QuantileDigest(0.01));
        digests.set(groupId,currentValue);
        sizeOfValues+=currentValue.getDigest().estimatedInMemorySizeInBytes();
      }
      SliceInput input=intermediates.getSlice(0).getInput();
      sizeOfValues-=currentValue.getDigest().estimatedInMemorySizeInBytes();
      currentValue.getDigest().merge(QuantileDigest.deserialize(input));
      sizeOfValues+=currentValue.getDigest().estimatedInMemorySizeInBytes();
      currentValue.setPercentile(input.readDouble());
    }
  }
}
