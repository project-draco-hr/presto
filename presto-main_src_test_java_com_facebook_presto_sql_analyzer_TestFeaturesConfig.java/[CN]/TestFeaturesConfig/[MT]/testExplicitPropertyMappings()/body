{
  Map<String,String> propertiesLegacy=new ImmutableMap.Builder<String,String>().put("analyzer.experimental-syntax-enabled","true").put("distributed-index-joins-enabled","true").put("distributed-joins-enabled","false").put("redistribute-writes","false").put("optimizer.optimize-metadata-queries","true").put("optimizer.optimize-hash-generation","false").put("optimizer.optimize-single-distinct","false").put("optimizer.push-table-write-through-union","true").put("optimizer.use-intermediate-aggregations","true").put("optimizer.columnar-processing","true").put("optimizer.columnar-processing-dictionary","true").build();
  Map<String,String> properties=new ImmutableMap.Builder<String,String>().put("experimental-syntax-enabled","true").put("distributed-index-joins-enabled","true").put("distributed-joins-enabled","false").put("redistribute-writes","false").put("optimizer.optimize-metadata-queries","true").put("optimizer.optimize-hash-generation","false").put("optimizer.optimize-single-distinct","false").put("optimizer.push-table-write-through-union","true").put("optimizer.use-intermediate-aggregations","true").put("optimizer.columnar-processing","true").put("optimizer.columnar-processing-dictionary","true").build();
  FeaturesConfig expected=new FeaturesConfig().setExperimentalSyntaxEnabled(true).setDistributedIndexJoinsEnabled(true).setDistributedJoinsEnabled(false).setRedistributeWrites(false).setOptimizeMetadataQueries(true).setOptimizeHashGeneration(false).setOptimizeSingleDistinct(false).setPushTableWriteThroughUnion(true).setIntermediateAggregationsEnabled(true).setColumnarProcessing(true).setColumnarProcessingDictionary(true);
  assertFullMapping(properties,expected);
  assertDeprecatedEquivalence(FeaturesConfig.class,properties,propertiesLegacy);
}
