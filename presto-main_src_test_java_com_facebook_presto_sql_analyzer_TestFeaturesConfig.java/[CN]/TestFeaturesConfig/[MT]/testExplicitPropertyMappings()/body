{
  Map<String,String> propertiesLegacy=new ImmutableMap.Builder<String,String>().put("analyzer.experimental-syntax-enabled","true").put("experimental.resource-groups-enabled","true").put("deprecated.legacy-array-agg","true").put("distributed-index-joins-enabled","true").put("distributed-joins-enabled","false").put("colocated-joins-enabled","true").put("redistribute-writes","false").put("optimizer.optimize-metadata-queries","true").put("optimizer.optimize-hash-generation","false").put("optimizer.optimize-single-distinct","false").put("optimizer.push-table-write-through-union","false").put("optimizer.processing-optimization","columnar_dictionary").put("optimizer.dictionary-aggregation","true").put("regex-library","RE2J").put("re2j.dfa-states-limit","42").put("re2j.dfa-retries","42").build();
  Map<String,String> properties=new ImmutableMap.Builder<String,String>().put("experimental-syntax-enabled","true").put("experimental.resource-groups-enabled","true").put("deprecated.legacy-array-agg","true").put("distributed-index-joins-enabled","true").put("distributed-joins-enabled","false").put("colocated-joins-enabled","true").put("redistribute-writes","false").put("optimizer.optimize-metadata-queries","true").put("optimizer.optimize-hash-generation","false").put("optimizer.optimize-single-distinct","false").put("optimizer.push-table-write-through-union","false").put("optimizer.processing-optimization","columnar_dictionary").put("optimizer.dictionary-aggregation","true").put("regex-library","RE2J").put("re2j.dfa-states-limit","42").put("re2j.dfa-retries","42").build();
  FeaturesConfig expected=new FeaturesConfig().setExperimentalSyntaxEnabled(true).setResourceGroupsEnabled(true).setDistributedIndexJoinsEnabled(true).setDistributedJoinsEnabled(false).setColocatedJoinsEnabled(true).setRedistributeWrites(false).setOptimizeMetadataQueries(true).setOptimizeHashGeneration(false).setOptimizeSingleDistinct(false).setPushTableWriteThroughUnion(false).setProcessingOptimization(COLUMNAR_DICTIONARY).setDictionaryAggregation(true).setLegacyArrayAgg(true).setRegexLibrary(RE2J).setRe2JDfaStatesLimit(42).setRe2JDfaRetries(42);
  assertFullMapping(properties,expected);
  assertDeprecatedEquivalence(FeaturesConfig.class,properties,propertiesLegacy);
}
