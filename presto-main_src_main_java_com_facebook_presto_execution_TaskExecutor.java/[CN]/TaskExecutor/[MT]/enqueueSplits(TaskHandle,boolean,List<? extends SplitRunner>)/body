{
  List<PrioritizedSplitRunner> splitsToDestroy=new ArrayList<>();
  List<ListenableFuture<?>> finishedFutures=new ArrayList<>(taskSplits.size());
synchronized (this) {
    for (    SplitRunner taskSplit : taskSplits) {
      PrioritizedSplitRunner prioritizedSplitRunner=new PrioritizedSplitRunner(taskHandle,taskSplit,ticker);
      if (taskHandle.isDestroyed()) {
        splitsToDestroy.add(prioritizedSplitRunner);
      }
 else       if (forceStart) {
        startSplit(prioritizedSplitRunner);
        taskHandle.recordForcedRunningSplit(prioritizedSplitRunner);
      }
 else {
        taskHandle.enqueueSplit(prioritizedSplitRunner);
        scheduleTaskIfNecessary(taskHandle);
        addNewEntrants();
      }
      finishedFutures.add(prioritizedSplitRunner.getFinishedFuture());
    }
  }
  for (  PrioritizedSplitRunner split : splitsToDestroy) {
    split.destroy();
  }
  return finishedFutures;
}
