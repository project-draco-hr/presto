{
  try (SetThreadName runnerName=new SetThreadName("SplitRunner-%s",runnerId)){
    while (!closed && !Thread.currentThread().isInterrupted()) {
      final SplitWorker split;
      try {
        split=preemptedSplits.take();
        if (split.updatePriorityLevel()) {
          preemptedSplits.put(split);
          continue;
        }
      }
 catch (      InterruptedException e) {
        Thread.currentThread().interrupt();
        return;
      }
      try (SetThreadName splitName=new SetThreadName(split.toString())){
        runningSplits.add(split);
        boolean finished;
        ListenableFuture<?> blocked;
        try {
          blocked=split.process();
          finished=split.isFinished();
        }
  finally {
          runningSplits.remove(split);
        }
        if (finished) {
          log.debug("%s is finished",split);
          splitFinished(split);
        }
 else {
          if (blocked.isDone()) {
            preemptedSplits.put(split);
          }
 else {
            blockedSplits.add(split);
            blocked.addListener(new Runnable(){
              @Override public void run(){
                blockedSplits.remove(split);
                split.updatePriorityLevel();
                preemptedSplits.put(split);
              }
            }
,executor);
          }
        }
      }
 catch (      Throwable t) {
        log.error(t,"Error processing %s",split);
        splitFinished(split);
      }
    }
  }
  finally {
    if (!closed) {
      addRunnerThread();
    }
  }
}
