{
  try (SetThreadName runnerName=new SetThreadName("SplitRunner-%s",runnerId)){
    while (!closed && !Thread.currentThread().isInterrupted()) {
      final PrioritizedSplitRunner split;
      try {
        split=pendingSplits.take();
        if (split.updatePriorityLevel()) {
          pendingSplits.put(split);
          continue;
        }
      }
 catch (      InterruptedException e) {
        Thread.currentThread().interrupt();
        return;
      }
      try (SetThreadName splitName=new SetThreadName(split.getTaskHandle().getTaskId() + "-" + split.getSplitId())){
        runningSplits.add(split);
        boolean finished;
        ListenableFuture<?> blocked;
        try {
          blocked=split.process();
          finished=split.isFinished();
        }
  finally {
          runningSplits.remove(split);
        }
        if (finished) {
          log.debug("%s is finished",split.getInfo());
          splitFinished(split);
        }
 else {
          if (blocked.isDone()) {
            pendingSplits.put(split);
          }
 else {
            blockedSplits.add(split);
            blocked.addListener(new Runnable(){
              @Override public void run(){
                blockedSplits.remove(split);
                split.updatePriorityLevel();
                pendingSplits.put(split);
              }
            }
,executor);
          }
        }
      }
 catch (      Throwable t) {
        if (t instanceof PrestoException) {
          PrestoException e=(PrestoException)t;
          log.error("Error processing %s: %s: %s",split.getInfo(),e.getErrorCode().getName(),e.getMessage());
        }
 else {
          log.error(t,"Error processing %s",split.getInfo());
        }
        splitFinished(split);
      }
    }
  }
  finally {
    if (!closed) {
      addRunnerThread();
    }
  }
}
