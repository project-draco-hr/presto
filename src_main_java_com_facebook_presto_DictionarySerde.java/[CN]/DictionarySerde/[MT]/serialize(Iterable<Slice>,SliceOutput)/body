{
  final BiMap<Slice,Long> idMap=HashBiMap.create();
  PackedLongSerde packedLongSerde=new PackedLongSerde(reqBitSpace);
  packedLongSerde.serialize(new Iterable<Long>(){
    @Override public Iterator<Long> iterator(){
      return new AbstractIterator<Long>(){
        Iterator<Slice> sliceIterator=slices.iterator();
        long nextId=-1L << (reqBitSpace - 1);
        @Override protected Long computeNext(){
          if (!sliceIterator.hasNext()) {
            return endOfData();
          }
          Slice slice=sliceIterator.next();
          Long id=idMap.get(slice);
          if (id == null) {
            id=nextId;
            nextId++;
            idMap.put(slice,id);
          }
          return id;
        }
      }
;
    }
  }
,sliceOutput);
  int footerBytes=new Footer(idMap.inverse()).serialize(sliceOutput);
  sliceOutput.writeInt(footerBytes);
}
