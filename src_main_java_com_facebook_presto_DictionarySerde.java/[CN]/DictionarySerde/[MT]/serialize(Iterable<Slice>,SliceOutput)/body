{
  final BiMap<Slice,Long> idMap=HashBiMap.create();
  PackedLongSerde packedLongSerde=new PackedLongSerde(requiredBitSpace);
  packedLongSerde.serialize(new Iterable<Long>(){
    @Override public Iterator<Long> iterator(){
      return Iterators.transform(slices.iterator(),new Function<Slice,Long>(){
        long nextId=-1L << (requiredBitSpace - 1);
        @Override public Long apply(        Slice input){
          Long id=idMap.get(input);
          if (id == null) {
            id=nextId;
            nextId++;
            idMap.put(input,id);
          }
          return id;
        }
      }
);
    }
  }
,sliceOutput);
  int footerBytes=new Footer(idMap.inverse()).serialize(sliceOutput);
  sliceOutput.writeInt(footerBytes);
}
