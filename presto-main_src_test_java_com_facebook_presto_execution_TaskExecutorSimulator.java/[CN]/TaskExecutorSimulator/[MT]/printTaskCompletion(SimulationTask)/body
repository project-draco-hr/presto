{
  if (!PRINT_TASK_COMPLETION) {
    return;
  }
  long taskStart=Long.MAX_VALUE;
  long taskEnd=0;
  long taskQueuedTime=0;
  long totalCpuTime=0;
  for (  SimulationSplit split : task.getSplits()) {
    taskStart=Math.min(taskStart,split.getStartNanos());
    taskEnd=Math.max(taskEnd,split.getDoneNanos());
    taskQueuedTime+=split.getQueuedNanos();
    totalCpuTime+=MILLISECONDS.toNanos(split.getRequiredProcessMillis());
  }
  System.out.printf("%-12s %8s %8s %.2f\n",task.getTaskId() + ":",new Duration(taskQueuedTime,NANOSECONDS).convertTo(MILLISECONDS),new Duration(taskEnd - taskStart,NANOSECONDS).convertTo(MILLISECONDS),1.0 * totalCpuTime / (taskEnd - taskStart));
  if (PRINT_SPLIT_COMPLETION) {
    for (    SimulationSplit split : task.getSplits()) {
      Duration totalQueueTime=new Duration(split.getQueuedNanos(),NANOSECONDS).convertTo(MILLISECONDS);
      Duration executionWallTime=new Duration(split.getDoneNanos() - split.getStartNanos(),NANOSECONDS).convertTo(MILLISECONDS);
      Duration totalWallTime=new Duration(split.getDoneNanos() - split.getCreatedNanos(),NANOSECONDS).convertTo(MILLISECONDS);
      System.out.printf("         %8s %8s %8s\n",totalQueueTime,executionWallTime,totalWallTime);
    }
    System.out.println();
  }
}
