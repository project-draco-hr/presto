{
  checkArgument(!isPartitionColumn[column],"Column is a partition key");
  loaded[column]=true;
  nulls[column]=false;
  Object object=getFieldValue(row,hiveColumnIndexes[column]);
  if (object == null) {
    nulls[column]=true;
    return;
  }
  HiveType type=hiveTypes[column];
  if (isStructuralType(type)) {
    slices[column]=getBlockSlice(object,fieldInspectors[column]);
  }
 else   if (type.equals(HIVE_STRING)) {
    Text text=Types.checkType(object,Text.class,"materialized string value");
    slices[column]=Slices.copyOf(Slices.wrappedBuffer(text.getBytes()),0,text.getLength());
  }
 else   if (type.equals(HIVE_BINARY)) {
    BytesWritable bytesWritable=Types.checkType(object,BytesWritable.class,"materialized binary value");
    slices[column]=Slices.copyOf(Slices.wrappedBuffer(bytesWritable.getBytes()),0,bytesWritable.getLength());
  }
 else {
    throw new RuntimeException(String.format("%s is not a valid STRING type",type));
  }
}
