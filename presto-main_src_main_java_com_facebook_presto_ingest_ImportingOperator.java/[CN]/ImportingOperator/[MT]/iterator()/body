{
  Preconditions.checkState(!used,"Import operator can only be used once");
  used=true;
  return new AbstractIterator<Page>(){
    private final Iterator<Page> iterator=source.iterator();
    @Override protected Page computeNext(){
      if (!iterator.hasNext()) {
        close();
        return endOfData();
      }
      Page page=iterator.next();
      Block[] blocks=page.getBlocks();
      for (int i=0; i < blocks.length; i++) {
        Block block=blocks[i];
        fileWriters.get(i).append(toTupleIterable(block));
      }
      return page;
    }
    public void close(){
      for (      BlocksFileWriter fileWriter : fileWriters) {
        fileWriter.close();
      }
      endOfData();
    }
  }
;
}
