{
  if (tupleDomains.isEmpty()) {
    throw new IllegalArgumentException("tupleDomains must have at least one element");
  }
  if (tupleDomains.size() == 1) {
    return tupleDomains.get(0);
  }
  Set<T> commonColumns=new HashSet<>();
  boolean found=false;
  Iterator<TupleDomain<T>> domains=tupleDomains.iterator();
  while (domains.hasNext()) {
    TupleDomain<T> domain=domains.next();
    if (!domain.isNone()) {
      found=true;
      commonColumns.addAll(domain.getDomains().get().keySet());
      break;
    }
  }
  if (!found) {
    return TupleDomain.none();
  }
  while (domains.hasNext()) {
    TupleDomain<T> domain=domains.next();
    if (!domain.isNone()) {
      commonColumns.retainAll(domain.getDomains().get().keySet());
    }
  }
  Map<T,List<Domain>> domainsByColumn=new HashMap<>(tupleDomains.size());
  for (  TupleDomain<T> domain : tupleDomains) {
    if (!domain.isNone()) {
      for (      Map.Entry<T,Domain> entry : domain.getDomains().get().entrySet()) {
        if (commonColumns.contains(entry.getKey())) {
          List<Domain> domainForColumn=domainsByColumn.get(entry.getKey());
          if (domainForColumn == null) {
            domainForColumn=new ArrayList<>();
            domainsByColumn.put(entry.getKey(),domainForColumn);
          }
          domainForColumn.add(entry.getValue());
        }
      }
    }
  }
  Map<T,Domain> result=new HashMap<>(domainsByColumn.size());
  for (  Map.Entry<T,List<Domain>> entry : domainsByColumn.entrySet()) {
    result.put(entry.getKey(),Domain.union(entry.getValue()));
  }
  return withColumnDomains(result);
}
