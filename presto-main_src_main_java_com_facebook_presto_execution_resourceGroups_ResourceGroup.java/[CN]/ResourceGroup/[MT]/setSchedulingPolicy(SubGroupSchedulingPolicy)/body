{
synchronized (root) {
    if (policy == schedulingPolicy) {
      return;
    }
    if (parent.isPresent() && parent.get().schedulingPolicy == QUERY_PRIORITY) {
      checkArgument(policy == QUERY_PRIORITY,"Parent of %s uses query priority scheduling, so %s must also",id,id);
    }
    UpdateablePriorityQueue<ResourceGroup> queue;
    UpdateablePriorityQueue<QueryExecution> queryQueue;
switch (policy) {
case FAIR:
      queue=new FifoQueue<>();
    queryQueue=new FifoQueue<>();
  break;
case WEIGHTED:
queue=new StochasticPriorityQueue<>();
queryQueue=new StochasticPriorityQueue<>();
break;
case QUERY_PRIORITY:
for (ResourceGroup group : subGroups.values()) {
group.setSchedulingPolicy(QUERY_PRIORITY);
}
queue=new IndexedPriorityQueue<>();
queryQueue=new IndexedPriorityQueue<>();
break;
default :
throw new UnsupportedOperationException("Unsupported scheduling policy: " + policy);
}
while (!eligibleSubGroups.isEmpty()) {
ResourceGroup group=eligibleSubGroups.poll();
queue.addOrUpdate(group,getSubGroupSchedulingPriority(policy,group));
}
eligibleSubGroups=queue;
while (!queuedQueries.isEmpty()) {
QueryExecution query=queuedQueries.poll();
queryQueue.addOrUpdate(query,getQueryPriority(query.getSession()));
}
queuedQueries=queryQueue;
schedulingPolicy=policy;
}
}
