{
  Duration elapsedTime=Duration.nanosSince(start);
  StageInfo outputStage=queryInfo.getOutputStage();
  ExecutionStats inputExecutionStats=new ExecutionStats();
  sumStats(outputStage,inputExecutionStats,true);
  ExecutionStats globalExecutionStats=new ExecutionStats();
  sumStats(outputStage,globalExecutionStats,false);
  int nodes=uniqueNodes(outputStage).size();
  long completedDataSizePerNode=inputExecutionStats.getCompletedDataSize() / nodes;
  if (REAL_TERMINAL) {
    Duration wallTime=elapsedTime;
    String querySummary=String.format("Query %s: %s, %,d nodes, %.1fs elapsed",queryInfo.getQueryId(),queryInfo.getState(),nodes,wallTime.convertTo(SECONDS));
    reprintLine(querySummary);
    String splitsSummary=String.format("Splits: %,4d total, %,4d pending, %,4d running, %,4d done",globalExecutionStats.getSplits(),max(0,globalExecutionStats.getSplits() - globalExecutionStats.getStartedSplits()),max(0,globalExecutionStats.getSplits() - globalExecutionStats.getCompletedSplits()),globalExecutionStats.getCompletedSplits());
    reprintLine(splitsSummary);
    Duration userTime=new Duration(globalExecutionStats.getSplitCpuTime(),MILLISECONDS);
    Duration userTimePerNode=new Duration(userTime.toMillis() / nodes,MILLISECONDS);
    String cpuUserSummary=String.format("CPU user: %5.1fs %7s total, %5.1fs %7s per node",userTime.convertTo(SECONDS),formatDataRate(inputExecutionStats.getCompletedDataSize(),userTime,true),userTimePerNode.convertTo(SECONDS),formatDataRate(completedDataSizePerNode,userTime,true));
    reprintLine(cpuUserSummary);
    Duration wallTimePerNode=new Duration(wallTime.toMillis() / nodes,MILLISECONDS);
    String cpuWallSummary=String.format("CPU wall: %5.1fs %7s total, %5.1fs %7s per node",wallTime.convertTo(SECONDS),formatDataRate(inputExecutionStats.getCompletedDataSize(),wallTime,true),wallTimePerNode.convertTo(SECONDS),formatDataRate(completedDataSizePerNode,wallTime,true));
    reprintLine(cpuWallSummary);
    reprintLine("");
    String stagesHeader=String.format("%10s%1s  %5s  %5s  %5s  %5s  %5s  %5s %5s","STAGE","S","ROWS","ROW/S","BYTES","B/S","PEND","RUN","DONE");
    reprintLine(stagesHeader);
    printStageTree(outputStage,"");
  }
 else {
    String querySummary=String.format("Query %s [%s] i[%,d %s %s] o[%,d %s %s] splits[%,d/%,d/%,d]",queryInfo.getQueryId(),queryInfo.getState().toString().charAt(0),globalExecutionStats.getInputPositionCount(),formatDataSize(globalExecutionStats.getInputDataSize()),formatDataRate(globalExecutionStats.getCompletedDataSize(),elapsedTime,false),globalExecutionStats.getOutputPositionCount(),formatDataSize(globalExecutionStats.getOutputDataSize()),formatDataRate(globalExecutionStats.getOutputDataSize(),elapsedTime,false),max(0,globalExecutionStats.getSplits() - globalExecutionStats.getStartedSplits()),max(0,globalExecutionStats.getSplits() - globalExecutionStats.getCompletedSplits()),globalExecutionStats.getCompletedSplits());
    reprintLine(querySummary);
  }
}
