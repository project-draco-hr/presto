{
  Duration elapsedTime=Duration.nanosSince(start);
  ExecutionStats executionStats=stageOnlyExecutionStats(stage);
  String id=stage.getStageId().substring(stage.getQueryId().length() + 1);
  StringBuilder nameBuilder=new StringBuilder();
  nameBuilder.append(indent).append(id);
  while (nameBuilder.length() < 10) {
    nameBuilder.append('.');
  }
  StageState state=stage.getState();
  String bytesPerSecond;
  String rowsPerSecond;
  if (state.isDone()) {
    bytesPerSecond=formatDataRate(new DataSize(0,BYTE),new Duration(0,SECONDS),false);
    rowsPerSecond=formatCountRate(0,new Duration(0,SECONDS),false);
  }
 else {
    bytesPerSecond=formatDataRate(executionStats.getCompletedDataSize(),elapsedTime,false);
    rowsPerSecond=formatCountRate(executionStats.getCompletedPositionCount(),elapsedTime,false);
  }
  String stageSummary=String.format("%10s%1s  %5s  %6s  %5s  %7s  %6s  %5s  %5s",nameBuilder.toString(),state.toString().charAt(0),formatCount(executionStats.getCompletedPositionCount()),rowsPerSecond,formatDataSize(executionStats.getCompletedDataSize(),false),bytesPerSecond,executionStats.getQueuedSplits(),executionStats.getRunningSplits(),executionStats.getCompletedSplits());
  reprintLine(stageSummary);
  for (  StageInfo subStage : stage.getSubStages()) {
    printStageTree(subStage,indent + "  ");
  }
}
