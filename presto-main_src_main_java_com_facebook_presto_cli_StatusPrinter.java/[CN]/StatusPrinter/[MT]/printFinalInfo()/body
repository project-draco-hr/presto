{
  Duration wallTime=Duration.nanosSince(start);
  QueryResults results=client.current();
  StatementStats stats=results.getStats();
  int nodes=stats.getNodes();
  if ((nodes == 0) || (stats.getTotalSplits() == 0)) {
    return;
  }
  out.println();
  String querySummary=String.format("Query %s, %s, %,d %s",results.getQueryId(),stats.getState(),nodes,pluralize("node",nodes));
  out.println(querySummary);
  if (client.isDebug()) {
    out.println(results.getQueryInfoUri() + "?pretty");
  }
  String splitsSummary=String.format("Splits: %,d total, %,d done (%.2f%%)",stats.getTotalSplits(),stats.getCompletedSplits(),percentage(stats.getCompletedSplits(),stats.getTotalSplits()));
  out.println(splitsSummary);
  if (client.isDebug()) {
    Duration cpuTime=millis(stats.getCpuTimeMillis());
    String cpuTimeSummary=String.format("CPU Time: %.1fs total, %5s rows/s, %8s, %d%% active",cpuTime.convertTo(SECONDS),formatCountRate(stats.getProcessedRows(),cpuTime,false),formatDataRate(bytes(stats.getProcessedBytes()),cpuTime,true),(int)percentage(stats.getCpuTimeMillis(),stats.getWallTimeMillis()));
    out.println(cpuTimeSummary);
    double parallelism=cpuTime.toMillis() / wallTime.toMillis();
    DataSize bytesPerNode=bytes(stats.getProcessedBytes() / nodes);
    String perNodeSummary=String.format("Per Node: %.1f parallelism, %5s rows/s, %8s",parallelism / nodes,formatCountRate((int)(stats.getProcessedRows() / nodes),wallTime,false),formatDataRate(bytesPerNode,wallTime,true));
    reprintLine(perNodeSummary);
    out.println(String.format("Parallelism: %.1f",parallelism));
  }
  String statsLine=String.format("%s [%s rows, %s] [%s rows/s, %s]",formatTime(wallTime),formatCount(stats.getProcessedRows()),formatDataSize(bytes(stats.getProcessedBytes()),true),formatCountRate(stats.getProcessedRows(),wallTime,false),formatDataRate(bytes(stats.getProcessedBytes()),wallTime,true));
  out.println(statsLine);
  out.println();
}
