{
  Duration elapsedTime=Duration.nanosSince(start);
  QueryInfo queryInfo=queryClient.getQueryInfo(true);
  ExecutionStats executionStats=new ExecutionStats();
  StageInfo outputStage=queryInfo.getOutputStage();
  sumStats(outputStage,executionStats);
  int nodes=uniqueNodes(outputStage).size();
  out.println();
  String querySummary=String.format("Query %s: %s, %,d nodes, %,d splits",queryInfo.getQueryId(),queryInfo.getState(),nodes,executionStats.getSplits());
  out.println(querySummary);
  Duration wallTime=new Duration(elapsedTime.toMillis() * nodes,TimeUnit.MILLISECONDS);
  Duration wallTimePerNode=elapsedTime;
  String cpuWallSummary=String.format("CPU wall: %s %s total, %s %s per node",wallTime.toString(TimeUnit.SECONDS),formatDataRate(executionStats.getCompletedDataSize(),wallTime),wallTimePerNode.toString(TimeUnit.SECONDS),formatDataRate(executionStats.getCompletedDataSize(),wallTimePerNode));
  out.println(cpuWallSummary);
  Duration userTime=new Duration(executionStats.getSplitCpuTime(),TimeUnit.MILLISECONDS);
  Duration userTimePerNode=new Duration(userTime.toMillis() / nodes,TimeUnit.MILLISECONDS);
  String cpuUserSummary=String.format("CPU user: %s %s total, %s %s per node",userTime.toString(TimeUnit.SECONDS),formatDataRate(executionStats.getCompletedDataSize(),userTime),userTimePerNode.toString(TimeUnit.SECONDS),formatDataRate(executionStats.getCompletedDataSize(),userTimePerNode));
  out.println(cpuUserSummary);
  out.println();
}
