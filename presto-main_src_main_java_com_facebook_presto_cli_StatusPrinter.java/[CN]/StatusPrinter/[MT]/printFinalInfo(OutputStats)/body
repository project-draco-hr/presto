{
  Duration elapsedTime=Duration.nanosSince(start);
  QueryInfo queryInfo=queryClient.getQueryInfo(true);
  QueryStats queryStats=queryInfo.getQueryStats();
  StageInfo outputStage=queryInfo.getOutputStage();
  ExecutionStats inputExecutionStats=new ExecutionStats();
  sumStats(outputStage,inputExecutionStats,true);
  ExecutionStats globalExecutionStats=new ExecutionStats();
  sumStats(outputStage,globalExecutionStats,false);
  int nodes=uniqueNodes(outputStage).size();
  out.println();
  String querySummary=String.format("Query %s: %s, %,d nodes, %,d splits",queryInfo.getQueryId(),queryInfo.getState(),nodes,queryStats.getSplits());
  out.println(querySummary);
  Duration userTime=new Duration(globalExecutionStats.getSplitCpuTime(),MILLISECONDS);
  Duration userTimePerNode=new Duration(userTime.toMillis() / nodes,MILLISECONDS);
  long completedDataSizePerNode=inputExecutionStats.getCompletedDataSize() / nodes;
  String cpuUserSummary=String.format("CPU user: %s %s total, %s %s per node",userTime.toString(SECONDS),formatDataRate(inputExecutionStats.getCompletedDataSize(),userTime,true),userTimePerNode.toString(SECONDS),formatDataRate(completedDataSizePerNode,userTimePerNode,true));
  out.println(cpuUserSummary);
  Duration wallTime=elapsedTime;
  Duration wallTimePerNode=new Duration(wallTime.toMillis() / nodes,MILLISECONDS);
  String cpuWallSummary=String.format("CPU wall: %s %s total, %s %s per node",wallTime.toString(SECONDS),formatDataRate(inputExecutionStats.getCompletedDataSize(),wallTime,true),wallTimePerNode.toString(SECONDS),formatDataRate(completedDataSizePerNode,wallTime,true));
  out.println(cpuWallSummary);
  out.println();
}
