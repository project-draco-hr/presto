{
  Duration elapsedTime=Duration.nanosSince(start);
  ExecutionStats executionStats=new ExecutionStats();
  for (  TaskInfo info : concat(queryInfo.getStages().values())) {
    executionStats.add(info.getStats());
  }
  QueryState queryState=queryInfo.getState();
  Duration cpuTime=new Duration(executionStats.getSplitCpuTime(),TimeUnit.MILLISECONDS);
  int completedStaged=0;
  int stages=0;
  String infoString=String.format("%s QueryId %s: Stages [%,d of %,d]: Splits [%,d total, %,d pending, %,d running, %,d finished]: Input [%,d rows %s]: CPU Time %s %s: Elapsed %s %s",queryState,queryInfo.getQueryId(),completedStaged,stages,executionStats.getSplits(),executionStats.getSplits() - executionStats.getStartedSplits(),executionStats.getStartedSplits() - executionStats.getCompletedSplits(),executionStats.getCompletedSplits(),executionStats.getInputPositionCount(),StatusPrinter.formatDataSize(executionStats.getInputDataSize()),cpuTime.toString(TimeUnit.SECONDS),StatusPrinter.formatDataRate(executionStats.getCompletedDataSize(),cpuTime),elapsedTime.toString(TimeUnit.SECONDS),StatusPrinter.formatDataRate(executionStats.getCompletedDataSize(),elapsedTime));
  if (infoString.length() < maxInfoString) {
    infoString=String.format("%-" + maxInfoString + "s",infoString);
  }
  maxInfoString=infoString.length();
  return infoString;
}
