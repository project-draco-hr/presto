{
  this.networkLocationCache=networkLocationCache;
  this.nodeManager=nodeManager;
  this.minCandidates=config.getMinCandidates();
  this.includeCoordinator=config.isIncludeCoordinator();
  this.doubleScheduling=config.isMultipleTasksPerNodeEnabled();
  this.maxSplitsPerNode=config.getMaxSplitsPerNode();
  this.maxPendingSplitsPerNodePerStageWhenFull=config.getMaxPendingSplitsPerNodePerStage();
  this.nodeTaskMap=requireNonNull(nodeTaskMap,"nodeTaskMap is null");
  checkArgument(maxSplitsPerNode > maxPendingSplitsPerNodePerStageWhenFull,"maxSplitsPerNode must be > maxPendingSplitsPerNodePerStageWhenFull");
  this.useNetworkTopology=!config.getNetworkTopology().equals(NetworkTopologyType.LEGACY);
  ImmutableList.Builder<CounterStat> builder=ImmutableList.builder();
  if (useNetworkTopology) {
    networkLocationSegmentNames=ImmutableList.copyOf(networkTopology.getLocationSegmentNames());
    for (int i=0; i < networkLocationSegmentNames.size() + 1; i++) {
      builder.add(new CounterStat());
    }
  }
 else {
    networkLocationSegmentNames=ImmutableList.of();
  }
  topologicalSplitCounters=builder.build();
}
