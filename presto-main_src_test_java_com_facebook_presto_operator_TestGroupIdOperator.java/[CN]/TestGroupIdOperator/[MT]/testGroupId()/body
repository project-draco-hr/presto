{
  RowPagesBuilder rowPagesBuilder=rowPagesBuilder(false,ImmutableList.of(),BIGINT,VARCHAR,BOOLEAN,BIGINT);
  List<Page> input=rowPagesBuilder.addSequencePage(3,100,400,0,1000).addSequencePage(3,200,500,0,1100).build();
  GroupIdOperatorFactory operatorFactory=new GroupIdOperatorFactory(0,new PlanNodeId("test"),ImmutableList.of(BIGINT,VARCHAR,BOOLEAN,BIGINT),ImmutableList.of(ImmutableList.of(1,2),ImmutableList.of(3)));
  Operator operator=operatorFactory.createOperator(driverContext);
  MaterializedResult expected=resultBuilder(driverContext.getSession(),BIGINT,VARCHAR,BOOLEAN,BIGINT,BIGINT).row(100L,"400",true,null,0L).row(101L,"401",false,null,0L).row(102L,"402",true,null,0L).row(200L,"500",true,null,0L).row(201L,"501",false,null,0L).row(202L,"502",true,null,0L).row(100L,null,null,1000L,1L).row(101L,null,null,1001L,1L).row(102L,null,null,1002L,1L).row(200L,null,null,1100L,1L).row(201L,null,null,1101L,1L).row(202L,null,null,1102L,1L).build();
  List<Page> pages=toPages(operator,input.iterator());
  MaterializedResult actual=toMaterializedResult(operator.getOperatorContext().getSession(),operator.getTypes(),pages);
  assertEqualsIgnoreOrder(actual.getMaterializedRows(),expected.getMaterializedRows());
}
