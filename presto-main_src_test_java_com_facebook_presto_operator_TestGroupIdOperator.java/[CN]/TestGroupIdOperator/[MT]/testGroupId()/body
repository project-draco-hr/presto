{
  RowPagesBuilder rowPagesBuilder=rowPagesBuilder(false,ImmutableList.of(),BIGINT,VARCHAR,BOOLEAN,BIGINT);
  List<Page> input=rowPagesBuilder.addSequencePage(3,100,400,0,1000).addSequencePage(3,200,500,0,1100).build();
  GroupIdOperatorFactory operatorFactory=new GroupIdOperatorFactory(0,new PlanNodeId("test"),ImmutableList.of(BIGINT,VARCHAR,BOOLEAN,BIGINT),ImmutableList.of(ImmutableList.of(1,2),ImmutableList.of(3)));
  Operator operator=operatorFactory.createOperator(driverContext);
  MaterializedResult expected=resultBuilder(driverContext.getSession(),BIGINT,VARCHAR,BOOLEAN,BIGINT,BIGINT).row(100,"400",true,null,0).row(101,"401",false,null,0).row(102,"402",true,null,0).row(200,"500",true,null,0).row(201,"501",false,null,0).row(202,"502",true,null,0).row(100,null,null,1000,1).row(101,null,null,1001,1).row(102,null,null,1002,1).row(200,null,null,1100,1).row(201,null,null,1101,1).row(202,null,null,1102,1).build();
  List<Page> pages=toPages(operator,input.iterator());
  MaterializedResult actual=toMaterializedResult(operator.getOperatorContext().getSession(),operator.getTypes(),pages);
  assertEqualsIgnoreOrder(actual.getMaterializedRows(),expected.getMaterializedRows());
}
