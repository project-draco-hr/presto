{
switch (fieldInspector.getCategory()) {
case PRIMITIVE:
    PrimitiveObjectInspector.PrimitiveCategory primitiveCategory=((PrimitiveObjectInspector)fieldInspector).getPrimitiveCategory();
  return getPrimitiveType(primitiveCategory);
case MAP:
MapObjectInspector mapObjectInspector=checkType(fieldInspector,MapObjectInspector.class,"fieldInspector");
Type keyType=getType(mapObjectInspector.getMapKeyObjectInspector(),typeManager);
Type valueType=getType(mapObjectInspector.getMapValueObjectInspector(),typeManager);
if (keyType == null || valueType == null) {
return null;
}
return typeManager.getParameterizedType(StandardTypes.MAP,ImmutableList.of(keyType.getTypeSignature(),valueType.getTypeSignature()),ImmutableList.of());
case LIST:
ListObjectInspector listObjectInspector=checkType(fieldInspector,ListObjectInspector.class,"fieldInspector");
Type elementType=getType(listObjectInspector.getListElementObjectInspector(),typeManager);
if (elementType == null) {
return null;
}
return typeManager.getParameterizedType(StandardTypes.ARRAY,ImmutableList.of(elementType.getTypeSignature()),ImmutableList.of());
case STRUCT:
StructObjectInspector structObjectInspector=checkType(fieldInspector,StructObjectInspector.class,"fieldInspector");
List<TypeSignature> fieldTypes=new ArrayList<>();
List<Object> fieldNames=new ArrayList<>();
for (StructField field : structObjectInspector.getAllStructFieldRefs()) {
fieldNames.add(field.getFieldName());
Type fieldType=getType(field.getFieldObjectInspector(),typeManager);
if (fieldType == null) {
return null;
}
fieldTypes.add(fieldType.getTypeSignature());
}
return typeManager.getParameterizedType(StandardTypes.ROW,fieldTypes,fieldNames);
default :
throw new IllegalArgumentException("Unsupported hive type " + fieldInspector.getTypeName());
}
}
