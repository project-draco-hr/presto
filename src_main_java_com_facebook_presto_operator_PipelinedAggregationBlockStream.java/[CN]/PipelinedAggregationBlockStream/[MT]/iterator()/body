{
  final Cursor groupByCursor=groupBySource.cursor();
  final Cursor aggregationCursor=aggregationSource.cursor();
  aggregationCursor.advanceNextPosition();
  return new AbstractIterator<UncompressedBlock>(){
    private long position;
    @Override protected UncompressedBlock computeNext(){
      if (!groupByCursor.advanceNextValue()) {
        endOfData();
        return null;
      }
      BlockBuilder builder=new BlockBuilder(position,info);
      do {
        long groupEndPosition=groupByCursor.getCurrentValueEndPosition();
        if (aggregationCursor.advanceToPosition(groupByCursor.getPosition()) && aggregationCursor.getPosition() <= groupEndPosition) {
          AggregationFunction aggregation=functionProvider.get();
          aggregation.add(aggregationCursor,groupEndPosition);
          Tuple value=aggregation.evaluate();
          builder.append(groupByCursor.getTuple());
          builder.append(value);
        }
      }
 while (!builder.isFull() && groupByCursor.advanceNextValue());
      UncompressedBlock block=builder.build();
      position+=block.getCount();
      return block;
    }
  }
;
}
