{
  PlanNodeId sourceId=new PlanNodeId("source");
  final List<Type> types=ImmutableList.<Type>of(VARCHAR,BIGINT,BIGINT);
  TableScanOperator source=new NotBlockedTableScanOperator(driverContext.addOperatorContext(99,new PlanNodeId("test"),"values"),sourceId,new PageSourceProvider(){
    @Override public ConnectorPageSource createPageSource(    Session session,    Split split,    List<ColumnHandle> columns){
      return new FixedPageSource(rowPagesBuilder(types).addSequencePage(10,20,30,40).build());
    }
  }
,types,ImmutableList.<ColumnHandle>of());
  BrokenOperator brokenOperator=new BrokenOperator(driverContext.addOperatorContext(0,new PlanNodeId("test"),"source"));
  final Driver driver=new Driver(driverContext,source,brokenOperator);
  Future<Boolean> driverProcessFor=executor.submit(new Callable<Boolean>(){
    @Override public Boolean call() throws Exception {
      return driver.processFor(new Duration(1,TimeUnit.MILLISECONDS)).isDone();
    }
  }
);
  brokenOperator.waitForLocked();
  assertSame(driver.getDriverContext(),driverContext);
  assertFalse(driver.isFinished());
  assertTrue(driver.processFor(new Duration(1,TimeUnit.MILLISECONDS)).isDone());
  assertFalse(driver.isFinished());
  driver.updateSource(new TaskSource(sourceId,ImmutableSet.of(new ScheduledSplit(0,sourceId,newMockSplit())),true));
  assertFalse(driver.isFinished());
  assertTrue(driver.processFor(new Duration(1,TimeUnit.SECONDS)).isDone());
  assertFalse(driver.isFinished());
  driver.close();
  assertTrue(driver.isFinished());
  try {
    driverProcessFor.get(1,TimeUnit.SECONDS);
    fail("Expected InterruptedException");
  }
 catch (  ExecutionException e) {
    checkArgument(getRootCause(e) instanceof InterruptedException,"Expected root cause exception to be an instance of InterruptedException");
  }
}
