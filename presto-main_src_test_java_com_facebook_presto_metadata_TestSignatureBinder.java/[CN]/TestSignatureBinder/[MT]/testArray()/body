{
  Signature getFunction=functionSignature().returnType(parseTypeSignature("T")).argumentTypes(parseTypeSignature("array(T)")).typeVariableConstraints(ImmutableList.of(typeVariable("T"))).build();
  assertThat(getFunction).boundTo("array(bigint)").produces(new BoundVariables(ImmutableMap.of("T",type("bigint")),ImmutableMap.of()));
  assertThat(getFunction).boundTo("bigint").withCoercion().fails();
  Signature containsFunction=functionSignature().returnType(parseTypeSignature("T")).argumentTypes(parseTypeSignature("array(T)"),parseTypeSignature("T")).typeVariableConstraints(ImmutableList.of(comparableTypeParameter("T"))).build();
  assertThat(containsFunction).boundTo("array(bigint)","bigint").produces(new BoundVariables(ImmutableMap.of("T",type("bigint")),ImmutableMap.of()));
  assertThat(containsFunction).boundTo("array(bigint)","varchar").withCoercion().fails();
  assertThat(containsFunction).boundTo("array(HyperLogLog)","HyperLogLog").withCoercion().fails();
  Signature castFunction=functionSignature().returnType(parseTypeSignature("array(T2)")).argumentTypes(parseTypeSignature("array(T1)"),parseTypeSignature("array(T2)")).typeVariableConstraints(ImmutableList.of(typeVariable("T1"),typeVariable("T2"))).build();
  assertThat(castFunction).boundTo("array(unknown)","array(decimal(2,1))").withCoercion().produces(new BoundVariables(ImmutableMap.of("T1",type("unknown"),"T2",type("decimal(2,1)")),ImmutableMap.of()));
  Signature fooFunction=functionSignature().returnType(parseTypeSignature("T")).argumentTypes(parseTypeSignature("array(T)"),parseTypeSignature("array(T)")).typeVariableConstraints(ImmutableList.of(typeVariable("T"))).build();
  assertThat(fooFunction).boundTo("array(bigint)","array(bigint)").produces(new BoundVariables(ImmutableMap.of("T",type("bigint")),ImmutableMap.of()));
  assertThat(fooFunction).boundTo("array(bigint)","array(varchar)").withCoercion().fails();
}
