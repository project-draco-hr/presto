{
  cursorOffset=messageAndOffset.offset() + 1;
  totalBytes+=messageAndOffset.message().payloadSize();
  totalMessages++;
  ByteBuffer key=messageAndOffset.message().key();
  byte[] keyData=new byte[key.limit() - key.position()];
  key.get(keyData);
  ByteBuffer message=messageAndOffset.message().payload();
  byte[] messageData=new byte[message.limit() - message.position()];
  message.get(messageData);
  Set<KafkaFieldValueProvider> fieldValueProviders=new HashSet<>();
  fieldValueProviders.addAll(globalInternalFieldValueProviders);
  fieldValueProviders.add(KafkaInternalFieldDescription.SEGMENT_COUNT_FIELD.forLongValue(totalMessages));
  fieldValueProviders.add(KafkaInternalFieldDescription.PARTITION_OFFSET_FIELD.forLongValue(messageAndOffset.offset()));
  fieldValueProviders.add(KafkaInternalFieldDescription.MESSAGE_FIELD.forByteValue(messageData));
  fieldValueProviders.add(KafkaInternalFieldDescription.MESSAGE_LENGTH_FIELD.forLongValue(messageData.length));
  fieldValueProviders.add(KafkaInternalFieldDescription.KEY_FIELD.forByteValue(keyData));
  fieldValueProviders.add(KafkaInternalFieldDescription.KEY_LENGTH_FIELD.forLongValue(keyData.length));
  fieldValueProviders.add(KafkaInternalFieldDescription.KEY_CORRUPT_FIELD.forBooleanValue(keyDecoder.decodeRow(keyData,fieldValueProviders,columnHandles,keyFieldDecoders)));
  fieldValueProviders.add(KafkaInternalFieldDescription.MESSAGE_CORRUPT_FIELD.forBooleanValue(messageDecoder.decodeRow(messageData,fieldValueProviders,columnHandles,messageFieldDecoders)));
  this.fieldValueProviders=new KafkaFieldValueProvider[columnHandles.size()];
  for (int i=0; i < columnHandles.size(); i++) {
    for (    KafkaFieldValueProvider fieldValueProvider : fieldValueProviders) {
      if (fieldValueProvider.accept(columnHandles.get(i))) {
        this.fieldValueProviders[i]=fieldValueProvider;
        break;
      }
    }
  }
  return true;
}
