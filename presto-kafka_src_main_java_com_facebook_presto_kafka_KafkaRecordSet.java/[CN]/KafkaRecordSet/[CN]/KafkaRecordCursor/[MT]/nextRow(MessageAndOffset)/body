{
  cursorOffset=messageAndOffset.offset() + 1;
  totalBytes+=messageAndOffset.message().payloadSize();
  totalMessages++;
  byte[] keyData=EMPTY_BYTE_ARRAY;
  byte[] messageData=EMPTY_BYTE_ARRAY;
  ByteBuffer key=messageAndOffset.message().key();
  if (key != null) {
    keyData=new byte[key.remaining()];
    key.get(keyData);
  }
  ByteBuffer message=messageAndOffset.message().payload();
  if (message != null) {
    messageData=new byte[message.remaining()];
    message.get(messageData);
  }
  Set<FieldValueProvider> fieldValueProviders=new HashSet<>();
  fieldValueProviders.addAll(globalInternalFieldValueProviders);
  fieldValueProviders.add(KafkaInternalFieldDescription.SEGMENT_COUNT_FIELD.forLongValue(totalMessages));
  fieldValueProviders.add(KafkaInternalFieldDescription.PARTITION_OFFSET_FIELD.forLongValue(messageAndOffset.offset()));
  fieldValueProviders.add(KafkaInternalFieldDescription.MESSAGE_FIELD.forByteValue(messageData));
  fieldValueProviders.add(KafkaInternalFieldDescription.MESSAGE_LENGTH_FIELD.forLongValue(messageData.length));
  fieldValueProviders.add(KafkaInternalFieldDescription.KEY_FIELD.forByteValue(keyData));
  fieldValueProviders.add(KafkaInternalFieldDescription.KEY_LENGTH_FIELD.forLongValue(keyData.length));
  fieldValueProviders.add(KafkaInternalFieldDescription.KEY_CORRUPT_FIELD.forBooleanValue(keyDecoder.decodeRow(keyData,null,fieldValueProviders,columnHandles,keyFieldDecoders)));
  fieldValueProviders.add(KafkaInternalFieldDescription.MESSAGE_CORRUPT_FIELD.forBooleanValue(messageDecoder.decodeRow(messageData,null,fieldValueProviders,columnHandles,messageFieldDecoders)));
  this.fieldValueProviders=new FieldValueProvider[columnHandles.size()];
  for (int i=0; i < columnHandles.size(); i++) {
    for (    FieldValueProvider fieldValueProvider : fieldValueProviders) {
      if (fieldValueProvider.accept(columnHandles.get(i))) {
        this.fieldValueProviders[i]=fieldValueProvider;
        break;
      }
    }
  }
  return true;
}
