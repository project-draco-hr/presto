{
  this.split=requireNonNull(split,"split is null");
  this.globalInternalFieldValueProviders=ImmutableSet.of(KafkaInternalFieldDescription.PARTITION_ID_FIELD.forLongValue(split.getPartitionId()),KafkaInternalFieldDescription.SEGMENT_START_FIELD.forLongValue(split.getStart()),KafkaInternalFieldDescription.SEGMENT_END_FIELD.forLongValue(split.getEnd()));
  this.consumerManager=requireNonNull(consumerManager,"consumerManager is null");
  this.keyDecoder=requireNonNull(keyDecoder,"rowDecoder is null");
  this.messageDecoder=requireNonNull(messageDecoder,"rowDecoder is null");
  this.keyFieldDecoders=requireNonNull(keyFieldDecoders,"keyFieldDecoders is null");
  this.messageFieldDecoders=requireNonNull(messageFieldDecoders,"messageFieldDecoders is null");
  this.columnHandles=requireNonNull(columnHandles,"columnHandles is null");
  ImmutableList.Builder<Type> typeBuilder=ImmutableList.builder();
  for (  KafkaColumnHandle handle : columnHandles) {
    typeBuilder.add(handle.getType());
  }
  this.columnTypes=typeBuilder.build();
}
