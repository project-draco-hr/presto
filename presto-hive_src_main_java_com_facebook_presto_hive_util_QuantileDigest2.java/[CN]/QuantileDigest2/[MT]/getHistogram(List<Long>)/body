{
  checkArgument(Ordering.natural().isOrdered(bucketUpperBounds),"buckets must be sorted in increasing order");
  final ImmutableList.Builder<Bucket> builder=ImmutableList.builder();
  final PeekingIterator<Long> iterator=Iterators.peekingIterator(bucketUpperBounds.iterator());
  final AtomicDouble sum=new AtomicDouble();
  final AtomicDouble lastSum=new AtomicDouble();
  final AtomicDouble bucketWeightedSum=new AtomicDouble();
  final double normalizationFactor=weight(TimeUnit.NANOSECONDS.toSeconds(ticker.read()));
  postOrderTraversal(root,new Callback(){
    public boolean process(    Node node){
      while (iterator.hasNext() && iterator.peek() <= node.getUpperBound()) {
        double bucketCount=sum.get() - lastSum.get();
        Bucket bucket=new Bucket(bucketCount / normalizationFactor,bucketWeightedSum.get() / bucketCount);
        builder.add(bucket);
        lastSum.set(sum.get());
        bucketWeightedSum.set(0);
        iterator.next();
      }
      bucketWeightedSum.addAndGet(node.getMiddle() * node.weightedCount);
      sum.addAndGet(node.weightedCount);
      return iterator.hasNext();
    }
  }
);
  while (iterator.hasNext()) {
    double bucketCount=sum.get() - lastSum.get();
    Bucket bucket=new Bucket(bucketCount / normalizationFactor,bucketWeightedSum.get() / bucketCount);
    builder.add(bucket);
    iterator.next();
  }
  return builder.build();
}
