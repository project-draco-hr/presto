{
  checkArgument(Ordering.natural().isOrdered(quantiles),"quantiles must be sorted in increasing order");
  for (  double quantile : quantiles) {
    checkArgument(quantile >= 0 && quantile <= 1,"quantile must be between [0,1]");
  }
  final ImmutableList.Builder<Long> builder=ImmutableList.builder();
  final PeekingIterator<Double> iterator=Iterators.peekingIterator(quantiles.iterator());
  postOrderTraversal(root,new Callback(){
    private double sum=0;
    public boolean process(    Node node){
      sum+=node.weightedCount;
      while (iterator.hasNext() && sum > iterator.peek() * weightedCount) {
        iterator.next();
        long value=Math.min(node.getUpperBound(),max);
        builder.add(value);
      }
      return iterator.hasNext();
    }
  }
);
  while (iterator.hasNext()) {
    builder.add(max);
    iterator.next();
  }
  return builder.build();
}
