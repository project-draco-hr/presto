{
  ++compressions;
  final int compressionFactor=calculateCompressionFactor();
  postOrderTraversal(root,new Callback(){
    public boolean process(    Node node){
      if (node.isLeaf()) {
        return true;
      }
      double leftWeight=0;
      if (node.left != null) {
        leftWeight=node.left.weightedCount;
      }
      double rightWeight=0;
      if (node.right != null) {
        rightWeight=node.right.weightedCount;
      }
      boolean shouldCompress=node.weightedCount + leftWeight + rightWeight < weightedCount / compressionFactor;
      double oldNodeWeight=node.weightedCount;
      if (shouldCompress || leftWeight < ZERO_WEIGHT_THRESHOLD) {
        node.left=tryRemove(node.left);
        weightedCount+=leftWeight;
        node.weightedCount+=leftWeight;
      }
      if (shouldCompress || rightWeight < ZERO_WEIGHT_THRESHOLD) {
        node.right=tryRemove(node.right);
        weightedCount+=rightWeight;
        node.weightedCount+=rightWeight;
      }
      if (oldNodeWeight < ZERO_WEIGHT_THRESHOLD && node.weightedCount >= ZERO_WEIGHT_THRESHOLD) {
        ++nonZeroNodeCount;
      }
      return true;
    }
  }
);
  if (root != null && root.weightedCount < ZERO_WEIGHT_THRESHOLD) {
    root=tryRemove(root);
  }
  maxTotalNodesAfterCompress=Math.max(maxTotalNodesAfterCompress,totalNodeCount);
}
