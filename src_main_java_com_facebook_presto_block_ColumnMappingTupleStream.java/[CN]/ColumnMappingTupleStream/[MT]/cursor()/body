{
  return new ForwardingCursor(delegate.cursor()){
    @Override public TupleInfo getTupleInfo(){
      return tupleInfo;
    }
    @Override public Tuple getTuple(){
      Tuple originalTuple=getDelegate().getTuple();
      TupleInfo.Builder builder=tupleInfo.builder();
      for (      int column : selectedColumns) {
switch (originalTuple.getTupleInfo().getTypes().get(column)) {
case FIXED_INT_64:
          builder.append(originalTuple.getLong(column));
        break;
case DOUBLE:
      builder.append(originalTuple.getDouble(column));
    break;
case VARIABLE_BINARY:
  builder.append(originalTuple.getSlice(column));
break;
default :
throw new IllegalArgumentException("Unknown type " + tupleInfo.getTypes().get(column));
}
}
return builder.build();
}
@Override public long getLong(int field){
return getDelegate().getLong(remapColumnIndex(field));
}
@Override public double getDouble(int field){
return getDelegate().getDouble(remapColumnIndex(field));
}
@Override public Slice getSlice(int field){
return getDelegate().getSlice(remapColumnIndex(field));
}
@Override public boolean currentTupleEquals(Tuple value){
checkNotNull(value,"value is null");
if (!tupleInfo.equals(value.getTupleInfo())) {
return false;
}
for (int index=0; index < tupleInfo.getFieldCount(); index++) {
switch (tupleInfo.getTypes().get(index)) {
case FIXED_INT_64:
if (getDelegate().getLong(remapColumnIndex(index)) != value.getLong(index)) {
return false;
}
break;
case DOUBLE:
if (getDelegate().getDouble(remapColumnIndex(index)) != value.getDouble(index)) {
return false;
}
break;
case VARIABLE_BINARY:
if (!getDelegate().getSlice(remapColumnIndex(index)).equals(value.getSlice(index))) {
return false;
}
break;
default :
throw new IllegalArgumentException("Unknown type " + tupleInfo.getTypes().get(index));
}
}
return true;
}
private int remapColumnIndex(int column){
checkPositionIndex(column,selectedColumns.length,"invalid column index");
return selectedColumns[column];
}
}
;
}
