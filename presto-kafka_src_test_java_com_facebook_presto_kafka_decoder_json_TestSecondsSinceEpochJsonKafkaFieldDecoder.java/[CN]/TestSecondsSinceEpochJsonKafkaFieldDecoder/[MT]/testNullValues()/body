{
  byte[] json="{}".getBytes(StandardCharsets.UTF_8);
  JsonKafkaRowDecoder rowDecoder=new JsonKafkaRowDecoder(PROVIDER.get());
  KafkaColumnHandle row1=new KafkaColumnHandle("",0,"row1",BigintType.BIGINT,"a_number",DEFAULT_FIELD_DECODER_NAME,null,false,false,false);
  KafkaColumnHandle row2=new KafkaColumnHandle("",1,"row2",VarcharType.VARCHAR,"a_string",DEFAULT_FIELD_DECODER_NAME,null,false,false,false);
  KafkaColumnHandle row3=new KafkaColumnHandle("",2,"row3",BigintType.BIGINT,"a_number",SecondsSinceEpochJsonKafkaFieldDecoder.NAME,null,false,false,false);
  KafkaColumnHandle row4=new KafkaColumnHandle("",3,"row4",BigintType.BIGINT,"a_string",SecondsSinceEpochJsonKafkaFieldDecoder.NAME,null,false,false,false);
  KafkaColumnHandle row5=new KafkaColumnHandle("",4,"row5",VarcharType.VARCHAR,"a_number",SecondsSinceEpochJsonKafkaFieldDecoder.NAME,null,false,false,false);
  KafkaColumnHandle row6=new KafkaColumnHandle("",5,"row6",VarcharType.VARCHAR,"a_string",SecondsSinceEpochJsonKafkaFieldDecoder.NAME,null,false,false,false);
  List<KafkaColumnHandle> columns=ImmutableList.of(row1,row2,row3,row4,row5,row6);
  Set<KafkaFieldValueProvider> providers=new HashSet<>();
  boolean corrupt=rowDecoder.decodeRow(json,providers,columns,buildMap(columns));
  assertFalse(corrupt);
  assertEquals(providers.size(),columns.size());
  checkIsNull(providers,row1);
  checkIsNull(providers,row2);
  checkIsNull(providers,row3);
  checkIsNull(providers,row4);
  checkIsNull(providers,row5);
  checkIsNull(providers,row6);
}
