{
  checkNotNull(session,"session is null");
  checkNotNull(query,"query is null");
  checkNotNull(httpClient,"httpClient is null");
  checkNotNull(executor,"executor is null");
  checkNotNull(queryInfoCodec,"queryInfoCodec is null");
  checkNotNull(taskInfoCodec,"taskInfoCodec is null");
  this.httpClient=httpClient;
  this.executor=executor;
  this.queryInfoCodec=queryInfoCodec;
  this.taskInfoCodec=taskInfoCodec;
  this.debug=session.isDebug();
  URI queryUri=HttpUriBuilder.uriBuilderFrom(session.getServer()).appendPath("/v1/query").build();
  Request.Builder requestBuilder=preparePost().setUri(queryUri).setBodyGenerator(createStaticBodyGenerator(query,Charsets.UTF_8));
  if (session.getUser() != null) {
    requestBuilder.setHeader(PrestoHeaders.PRESTO_USER,session.getUser());
  }
  if (session.getCatalog() != null) {
    requestBuilder.setHeader(PrestoHeaders.PRESTO_CATALOG,session.getCatalog());
  }
  if (session.getSchema() != null) {
    requestBuilder.setHeader(PrestoHeaders.PRESTO_SCHEMA,session.getSchema());
  }
  Request request=requestBuilder.build();
  JsonResponse<QueryInfo> response=httpClient.execute(request,createFullJsonResponseHandler(queryInfoCodec));
  Preconditions.checkState(response.getStatusCode() == 201,"Expected response code to be 201, but was %s: %s",response.getStatusCode(),response.getStatusMessage());
  String location=response.getHeader("Location");
  Preconditions.checkState(location != null);
  this.queryLocation=URI.create(location);
}
