{
  String stageId=queryId + "." + nextStageId.getAndIncrement();
  Set<ExchangeNode> exchanges=IterableTransformer.on(stageExecutionPlan.getFragment().getSources()).select(Predicates.instanceOf(ExchangeNode.class)).cast(ExchangeNode.class).set();
  Map<PlanFragmentId,StageExecution> subStages=IterableTransformer.on(stageExecutionPlan.getSubStages()).uniqueIndex(fragmentIdGetter()).transformValues(stageCreator(nextStageId,stageExecutionPlan.getPartitions())).immutableMap();
  URI stageLocation=locationFactory.createStageLocation(stageId);
  int taskId=0;
  ImmutableList.Builder<RemoteTask> tasks=ImmutableList.builder();
  for (  Partition partition : stageExecutionPlan.getPartitions()) {
    String nodeIdentifier=partition.getNode().getNodeIdentifier();
    ImmutableMap.Builder<PlanNodeId,ExchangePlanFragmentSource> exchangeSources=ImmutableMap.builder();
    for (    ExchangeNode exchange : exchanges) {
      StageExecution childStage=subStages.get(exchange.getSourceFragmentId());
      ExchangePlanFragmentSource source=childStage.getExchangeSourceFor(nodeIdentifier);
      exchangeSources.put(exchange.getId(),source);
    }
    tasks.add(remoteTaskFactory.createRemoteTask(session,queryId,stageId,stageId + '.' + taskId++,partition.getNode(),stageExecutionPlan.getFragment(),partition.getSplits(),exchangeSources.build(),outputIds));
    queryStats.addSplits(partition.getSplits().size());
  }
  return stageManager.createStage(queryId,stageId,stageLocation,stageExecutionPlan.getFragment(),tasks.build(),subStages.values());
}
