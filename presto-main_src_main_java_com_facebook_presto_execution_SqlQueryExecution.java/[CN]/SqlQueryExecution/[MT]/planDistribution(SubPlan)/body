{
  long distributedPlanningStart=System.nanoTime();
  DistributedExecutionPlanner distributedPlanner=new DistributedExecutionPlanner(splitManager,stateMachine.getSession(),shardManager);
  StageExecutionPlan outputStageExecutionPlan=distributedPlanner.plan(subplan);
  if (stateMachine.isDone()) {
    return;
  }
  stateMachine.setOutputFieldNames(outputStageExecutionPlan.getFieldNames());
  SqlStageExecution outputStage=new SqlStageExecution(stateMachine.getQueryId(),locationFactory,outputStageExecutionPlan,nodeScheduler,remoteTaskFactory,stateMachine.getSession(),maxPendingSplitsPerNode,queryExecutor);
  this.outputStage.set(outputStage);
  outputStage.addStateChangeListener(new StageStateChangeListener(){
    @Override public void stateChanged(    StageInfo stageInfo){
      doUpdateState(stageInfo);
    }
  }
);
  stateMachine.getStats().recordDistributedPlanningTime(distributedPlanningStart);
}
