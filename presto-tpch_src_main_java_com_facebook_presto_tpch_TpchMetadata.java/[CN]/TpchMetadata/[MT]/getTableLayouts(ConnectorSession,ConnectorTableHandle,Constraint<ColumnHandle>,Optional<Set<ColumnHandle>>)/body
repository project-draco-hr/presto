{
  TpchTableHandle tableHandle=checkType(table,TpchTableHandle.class,"table");
  Optional<ConnectorNodePartitioning> nodePartition=Optional.empty();
  Optional<Set<ColumnHandle>> partitioningColumns=Optional.empty();
  List<LocalProperty<ColumnHandle>> localProperties=ImmutableList.of();
  Map<String,ColumnHandle> columns=getColumnHandles(session,tableHandle);
  if (tableHandle.getTableName().equals(TpchTable.ORDERS.getTableName())) {
    ColumnHandle orderKeyColumn=columns.get(OrderColumn.ORDER_KEY.getColumnName());
    nodePartition=Optional.of(new ConnectorNodePartitioning(new TpchPartitioningHandle(TpchTable.ORDERS.getTableName(),calculateTotalRows(OrderGenerator.SCALE_BASE,tableHandle.getScaleFactor())),ImmutableList.of(orderKeyColumn)));
    partitioningColumns=Optional.of(ImmutableSet.of(orderKeyColumn));
    localProperties=ImmutableList.of(new SortingProperty<>(orderKeyColumn,SortOrder.ASC_NULLS_FIRST));
  }
 else   if (tableHandle.getTableName().equals(TpchTable.LINE_ITEM.getTableName())) {
    ColumnHandle orderKeyColumn=columns.get(OrderColumn.ORDER_KEY.getColumnName());
    nodePartition=Optional.of(new ConnectorNodePartitioning(new TpchPartitioningHandle(TpchTable.ORDERS.getTableName(),calculateTotalRows(OrderGenerator.SCALE_BASE,tableHandle.getScaleFactor())),ImmutableList.of(orderKeyColumn)));
    partitioningColumns=Optional.of(ImmutableSet.of(orderKeyColumn));
    localProperties=ImmutableList.of(new SortingProperty<>(orderKeyColumn,SortOrder.ASC_NULLS_FIRST),new SortingProperty<>(columns.get(LineItemColumn.LINE_NUMBER.getColumnName()),SortOrder.ASC_NULLS_FIRST));
  }
  ConnectorTableLayout layout=new ConnectorTableLayout(new TpchTableLayoutHandle(tableHandle),Optional.<List<ColumnHandle>>empty(),TupleDomain.<ColumnHandle>all(),nodePartition,partitioningColumns,Optional.empty(),localProperties);
  return ImmutableList.of(new ConnectorTableLayoutResult(layout,constraint.getSummary()));
}
