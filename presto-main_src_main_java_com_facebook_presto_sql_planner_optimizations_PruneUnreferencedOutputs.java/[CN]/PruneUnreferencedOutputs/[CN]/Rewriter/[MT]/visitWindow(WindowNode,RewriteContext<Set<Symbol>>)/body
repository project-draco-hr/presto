{
  ImmutableSet.Builder<Symbol> expectedInputs=ImmutableSet.<Symbol>builder().addAll(context.get()).addAll(node.getPartitionBy()).addAll(node.getOrderBy());
  if (node.getFrame().getStartValue().isPresent()) {
    expectedInputs.add(node.getFrame().getStartValue().get());
  }
  if (node.getFrame().getEndValue().isPresent()) {
    expectedInputs.add(node.getFrame().getEndValue().get());
  }
  if (node.getHashSymbol().isPresent()) {
    expectedInputs.add(node.getHashSymbol().get());
  }
  ImmutableMap.Builder<Symbol,Signature> functionsBuilder=ImmutableMap.builder();
  ImmutableMap.Builder<Symbol,FunctionCall> functionCallsBuilder=ImmutableMap.builder();
  for (  Map.Entry<Symbol,FunctionCall> entry : node.getWindowFunctions().entrySet()) {
    Symbol symbol=entry.getKey();
    if (context.get().contains(symbol)) {
      FunctionCall call=entry.getValue();
      expectedInputs.addAll(DependencyExtractor.extractUnique(call));
      functionCallsBuilder.put(symbol,call);
      functionsBuilder.put(symbol,node.getSignatures().get(symbol));
    }
  }
  PlanNode source=context.rewrite(node.getSource(),expectedInputs.build());
  Map<Symbol,Signature> functions=functionsBuilder.build();
  if (functions.size() == 0) {
    return source;
  }
  return new WindowNode(node.getId(),source,node.getSpecification(),functionCallsBuilder.build(),functions,node.getHashSymbol(),node.getPrePartitionedInputs(),node.getPreSortedOrderPrefix());
}
