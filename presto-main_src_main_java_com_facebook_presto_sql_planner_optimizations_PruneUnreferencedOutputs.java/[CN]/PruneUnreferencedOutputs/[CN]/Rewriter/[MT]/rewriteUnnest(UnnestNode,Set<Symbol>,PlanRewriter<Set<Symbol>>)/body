{
  List<Symbol> replicateSymbols=FluentIterable.from(node.getReplicateSymbols()).filter(in(expectedOutputs)).toList();
  ImmutableMap.Builder<Symbol,List<Symbol>> builder=ImmutableMap.builder();
  for (  Map.Entry<Symbol,List<Symbol>> entry : node.getUnnestSymbols().entrySet()) {
    if (Iterables.any(entry.getValue(),in(expectedOutputs))) {
      builder.put(entry);
    }
  }
  Map<Symbol,List<Symbol>> unnestSymbols=builder.build();
  ImmutableSet.Builder<Symbol> expectedInputs=ImmutableSet.<Symbol>builder().addAll(replicateSymbols).addAll(unnestSymbols.keySet());
  PlanNode source=planRewriter.rewrite(node.getSource(),expectedInputs.build());
  return new UnnestNode(node.getId(),source,replicateSymbols,unnestSymbols);
}
