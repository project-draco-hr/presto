{
  Set<Symbol> requiredTableScanOutputs=FluentIterable.from(expectedOutputs).filter(in(node.getOutputSymbols())).toSet();
  if (requiredTableScanOutputs.isEmpty()) {
    for (    Symbol symbol : node.getOutputSymbols()) {
      if (Type.isNumeric(types.get(symbol))) {
        requiredTableScanOutputs=ImmutableSet.of(symbol);
        break;
      }
    }
    if (requiredTableScanOutputs.isEmpty()) {
      requiredTableScanOutputs=ImmutableSet.of(node.getOutputSymbols().get(0));
    }
  }
  checkState(!requiredTableScanOutputs.isEmpty());
  List<Symbol> newOutputSymbols=FluentIterable.from(node.getOutputSymbols()).filter(in(requiredTableScanOutputs)).toList();
  return new TableScanNode(node.getId(),node.getTable(),newOutputSymbols,node.getAssignments(),node.getGeneratedPartitions());
}
