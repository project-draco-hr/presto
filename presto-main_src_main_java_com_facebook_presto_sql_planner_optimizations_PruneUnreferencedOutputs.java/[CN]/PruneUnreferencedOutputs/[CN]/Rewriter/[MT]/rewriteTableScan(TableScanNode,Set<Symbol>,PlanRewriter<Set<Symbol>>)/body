{
  Set<Symbol> requiredTableScanOutputs=ImmutableSet.copyOf(filter(expectedOutputs,in(node.getOutputSymbols())));
  if (requiredTableScanOutputs.isEmpty()) {
    for (    Symbol symbol : node.getOutputSymbols()) {
      if (Type.isNumeric(types.get(symbol))) {
        requiredTableScanOutputs=ImmutableSet.of(symbol);
        break;
      }
    }
    if (requiredTableScanOutputs.isEmpty()) {
      requiredTableScanOutputs=ImmutableSet.of(node.getOutputSymbols().get(0));
    }
  }
  checkState(!requiredTableScanOutputs.isEmpty());
  Set<Symbol> requiredSymbols=Sets.union(requiredTableScanOutputs,DependencyExtractor.extract(node.getPartitionPredicate()));
  Map<Symbol,ColumnHandle> newAssignments=Maps.filterKeys(node.getAssignments(),in(requiredSymbols));
  return new TableScanNode(node.getId(),node.getTable(),ImmutableList.copyOf(requiredTableScanOutputs),newAssignments,node.getPartitionPredicate(),node.getUpstreamPredicateHint());
}
