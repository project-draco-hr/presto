{
  ImmutableListMultimap.Builder<Symbol,Symbol> rewrittenSymbolMappingBuilder=ImmutableListMultimap.builder();
  for (  Symbol symbol : node.getOutputSymbols()) {
    if (context.get().contains(symbol)) {
      rewrittenSymbolMappingBuilder.putAll(symbol,node.getSymbolMapping().get(symbol));
    }
  }
  ListMultimap<Symbol,Symbol> rewrittenSymbolMapping=rewrittenSymbolMappingBuilder.build();
  ImmutableList.Builder<PlanNode> rewrittenSubPlans=ImmutableList.builder();
  for (int i=0; i < node.getSources().size(); i++) {
    ImmutableSet.Builder<Symbol> expectedInputSymbols=ImmutableSet.builder();
    for (    Collection<Symbol> symbols : rewrittenSymbolMapping.asMap().values()) {
      expectedInputSymbols.add(Iterables.get(symbols,i));
    }
    rewrittenSubPlans.add(context.rewrite(node.getSources().get(i),expectedInputSymbols.build()));
  }
  return new UnionNode(node.getId(),rewrittenSubPlans.build(),rewrittenSymbolMapping);
}
