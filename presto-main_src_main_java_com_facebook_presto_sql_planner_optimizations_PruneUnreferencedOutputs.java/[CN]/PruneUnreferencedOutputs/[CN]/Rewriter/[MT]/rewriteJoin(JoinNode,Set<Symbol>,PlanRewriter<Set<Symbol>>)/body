{
  ImmutableSet.Builder<Symbol> leftInputsBuilder=ImmutableSet.builder();
  leftInputsBuilder.addAll(expectedOutputs).addAll(Iterables.transform(node.getCriteria(),leftGetter()));
  if (node.getLeftHashSymbol().isPresent()) {
    leftInputsBuilder.add(node.getLeftHashSymbol().get());
  }
  Set<Symbol> leftInputs=leftInputsBuilder.build();
  ImmutableSet.Builder<Symbol> rightInputsBuilder=ImmutableSet.builder();
  rightInputsBuilder.addAll(expectedOutputs).addAll(Iterables.transform(node.getCriteria(),rightGetter()));
  if (node.getRightHashSymbol().isPresent()) {
    rightInputsBuilder.add(node.getRightHashSymbol().get());
  }
  Set<Symbol> rightInputs=rightInputsBuilder.build();
  PlanNode left=planRewriter.rewrite(node.getLeft(),leftInputs);
  PlanNode right=planRewriter.rewrite(node.getRight(),rightInputs);
  return new JoinNode(node.getId(),node.getType(),left,right,node.getCriteria(),node.getLeftHashSymbol(),node.getRightHashSymbol());
}
