{
  Page inputPage=getNonLazyPage(page);
  int[] selectedPositions=filterPage(inputPage);
  Map<UUID,UUID> dictionarySourceIds=new HashMap<>();
  if (selectedPositions.length == 0) {
    return null;
  }
  if (projections.isEmpty()) {
    return new Page(selectedPositions.length);
  }
  PageBuilder pageBuilder=new PageBuilder(types);
  Block[] inputBlocks=page.getBlocks();
  Block[] outputBlocks=new Block[projections.size()];
  for (int projectionIndex=0; projectionIndex < projections.size(); projectionIndex++) {
    ProjectionFunction projection=projections.get(projectionIndex);
    if (canDictionaryProcess(projection,inputPage)) {
      outputBlocks[projectionIndex]=projectColumnarDictionary(inputPage,selectedPositions,projection,dictionarySourceIds);
    }
 else {
      outputBlocks[projectionIndex]=projectColumnar(selectedPositions,pageBuilder.getBlockBuilder(projectionIndex),inputBlocks,projection).build();
    }
  }
  for (  Block block : outputBlocks) {
    verify(block.getPositionCount() == selectedPositions.length);
  }
  return new Page(selectedPositions.length,outputBlocks);
}
