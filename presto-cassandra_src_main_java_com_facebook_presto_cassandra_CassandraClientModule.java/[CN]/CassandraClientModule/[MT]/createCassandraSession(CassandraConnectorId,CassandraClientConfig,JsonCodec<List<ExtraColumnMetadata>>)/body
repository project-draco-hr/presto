{
  requireNonNull(config,"config is null");
  requireNonNull(extraColumnMetadataCodec,"extraColumnMetadataCodec is null");
  Cluster.Builder clusterBuilder=Cluster.builder();
  List<String> contactPoints=requireNonNull(config.getContactPoints(),"contactPoints is null");
  checkArgument(!contactPoints.isEmpty(),"empty contactPoints");
  clusterBuilder.addContactPoints(contactPoints.toArray(new String[contactPoints.size()]));
  clusterBuilder.withPort(config.getNativeProtocolPort());
  clusterBuilder.withReconnectionPolicy(new ExponentialReconnectionPolicy(500,10000));
  clusterBuilder.withRetryPolicy(config.getRetryPolicy().getPolicy());
  LoadBalancingPolicy loadPolicy=new RoundRobinPolicy();
  if (config.isUseDCAware()) {
    requireNonNull(config.getDcAwareLocalDC(),"DCAwarePolicy localDC is null");
    DCAwareRoundRobinPolicy.Builder builder=DCAwareRoundRobinPolicy.builder().withLocalDc(config.getDcAwareLocalDC());
    if (config.getDcAwareUsedHostsPerRemoteDc() > 0) {
      builder.withUsedHostsPerRemoteDc(config.getDcAwareUsedHostsPerRemoteDc());
      if (config.isDcAwareAllowRemoteDCsForLocal()) {
        builder.allowRemoteDCsForLocalConsistencyLevel();
      }
    }
    loadPolicy=builder.build();
  }
  if (config.isUseTokenAware()) {
    loadPolicy=new TokenAwarePolicy(loadPolicy,config.isTokenAwareShuffleReplicas());
  }
  if (config.isUseWhiteList()) {
    checkArgument(!config.getWhiteListAddresses().isEmpty(),"empty WhiteListAddresses");
    List<InetSocketAddress> whiteList=new ArrayList<>();
    for (    String point : config.getWhiteListAddresses()) {
      whiteList.add(new InetSocketAddress(point,config.getNativeProtocolPort()));
    }
    loadPolicy=new WhiteListPolicy(loadPolicy,whiteList);
  }
  clusterBuilder.withLoadBalancingPolicy(loadPolicy);
  SocketOptions socketOptions=new SocketOptions();
  socketOptions.setReadTimeoutMillis(Ints.checkedCast(config.getClientReadTimeout().toMillis()));
  socketOptions.setConnectTimeoutMillis(Ints.checkedCast(config.getClientConnectTimeout().toMillis()));
  if (config.getClientSoLinger() != null) {
    socketOptions.setSoLinger(config.getClientSoLinger());
  }
  clusterBuilder.withSocketOptions(socketOptions);
  if (config.getUsername() != null && config.getPassword() != null) {
    clusterBuilder.withCredentials(config.getUsername(),config.getPassword());
  }
  QueryOptions options=new QueryOptions();
  options.setFetchSize(config.getFetchSize());
  options.setConsistencyLevel(config.getConsistencyLevel());
  clusterBuilder.withQueryOptions(options);
  return new CassandraSession(connectorId.toString(),clusterBuilder,config.getFetchSizeForPartitionKeySelect(),config.getLimitForPartitionKeySelect(),extraColumnMetadataCodec,config.getNoHostAvailableRetryCount());
}
