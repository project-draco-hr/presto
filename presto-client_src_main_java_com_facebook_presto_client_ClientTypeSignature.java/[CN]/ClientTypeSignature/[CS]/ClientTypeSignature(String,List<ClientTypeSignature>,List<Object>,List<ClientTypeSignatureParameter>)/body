{
  requireNonNull(rawType,"rawType is null");
  this.rawType=rawType;
  checkArgument(!rawType.isEmpty(),"rawType is empty");
  checkArgument(!PATTERN.matcher(rawType).matches(),"Bad characters in rawType type: %s",rawType);
  if (arguments != null) {
    this.arguments=unmodifiableList(new ArrayList<>(arguments));
  }
 else {
    requireNonNull(typeArguments,"typeArguments is null");
    requireNonNull(literalArguments,"literalArguments is null");
    ImmutableList.Builder<ClientTypeSignatureParameter> convertedArguments=ImmutableList.builder();
    if (rawType.equals(StandardTypes.ROW)) {
      checkArgument(typeArguments.size() == literalArguments.size());
      for (int i=0; i < typeArguments.size(); i++) {
        Object value=literalArguments.get(i);
        checkArgument(value instanceof String,"Expected literalArgument %d in %s to be a string",i,literalArguments);
        convertedArguments.add(new ClientTypeSignatureParameter(TypeSignatureParameter.of(new NamedTypeSignature((String)value,toTypeSignature(typeArguments.get(i))))));
      }
    }
 else {
      checkArgument(literalArguments.isEmpty(),"Unexpected literal arguments from legacy server");
      for (      ClientTypeSignature typeArgument : typeArguments) {
        convertedArguments.add(new ClientTypeSignatureParameter(ParameterKind.TYPE,typeArgument));
      }
    }
    this.arguments=convertedArguments.build();
  }
}
