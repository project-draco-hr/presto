{
  fetchData(keyString);
  byte[] keyData=keyString.getBytes(StandardCharsets.UTF_8);
  byte[] valueData=EMPTY_BYTE_ARRAY;
  if (valueString != null) {
    valueData=valueString.getBytes(StandardCharsets.UTF_8);
  }
  totalBytes+=valueData.length;
  totalValues++;
  Set<FieldValueProvider> fieldValueProviders=new HashSet<>();
  fieldValueProviders.add(KEY_FIELD.forByteValue(keyData));
  fieldValueProviders.add(VALUE_FIELD.forByteValue(valueData));
  fieldValueProviders.add(KEY_LENGTH_FIELD.forLongValue(keyData.length));
  fieldValueProviders.add(VALUE_LENGTH_FIELD.forLongValue(valueData.length));
  fieldValueProviders.add(KEY_CORRUPT_FIELD.forBooleanValue(keyDecoder.decodeRow(keyData,null,fieldValueProviders,columnHandles,keyFieldDecoders)));
  fieldValueProviders.add(VALUE_CORRUPT_FIELD.forBooleanValue(valueDecoder.decodeRow(valueData,valueMap,fieldValueProviders,columnHandles,valueFieldDecoders)));
  this.fieldValueProviders=new FieldValueProvider[columnHandles.size()];
  for (int i=0; i < columnHandles.size(); i++) {
    for (    FieldValueProvider fieldValueProvider : fieldValueProviders) {
      if (fieldValueProvider.accept(columnHandles.get(i))) {
        this.fieldValueProviders[i]=fieldValueProvider;
        break;
      }
    }
  }
  return true;
}
