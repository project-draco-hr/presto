{
  List<Symbol> groupBy=ImmutableList.of();
  if (!canSkipHashGeneration(node.getGroupBy())) {
    groupBy=node.getGroupBy();
  }
  PlanWithProperties child=planAndEnforce(node.getSource(),groupBy.isEmpty() ? new HashSymbolPreference() : new HashSymbolPreference(groupBy));
  Optional<Symbol> hashSymbol=Optional.empty();
  if (!groupBy.isEmpty()) {
    hashSymbol=Optional.of(child.getRequiredHashSymbol(groupBy));
  }
  return new PlanWithProperties(new AggregationNode(idAllocator.getNextId(),child.getNode(),node.getGroupBy(),node.getAggregations(),node.getFunctions(),node.getMasks(),node.getStep(),node.getSampleWeight(),node.getConfidence(),hashSymbol),groupBy.isEmpty() ? ImmutableMap.of() : ImmutableMap.of(groupBy,hashSymbol.get()));
}
