{
  this.addresses=requireNonNull(addresses,"addresses is null");
  this.pagesHashStrategy=requireNonNull(pagesHashStrategy,"pagesHashStrategy is null");
  this.filterFunctionVerifier=requireNonNull(filterFunctionVerifierOptional,"filterFunctionVerifierOptional can not be null").orElse(null);
  this.channelCount=pagesHashStrategy.getChannelCount();
  int hashSize=HashCommon.arraySize(addresses.size(),0.75f);
  mask=hashSize - 1;
  key=new int[hashSize];
  Arrays.fill(key,-1);
  this.positionLinks=new int[addresses.size()];
  Arrays.fill(positionLinks,-1);
  positionToHashes=new byte[addresses.size()];
  int positionsInStep=Math.min(addresses.size() + 1,(int)CACHE_SIZE.toBytes() / Integer.SIZE);
  long[] positionToFullHashes=new long[positionsInStep];
  for (int step=0; step * positionsInStep <= addresses.size(); step++) {
    int stepBeginPosition=step * positionsInStep;
    int stepEndPosition=Math.min((step + 1) * positionsInStep,addresses.size());
    int stepSize=stepEndPosition - stepBeginPosition;
    for (int position=0; position < stepSize; position++) {
      int realPosition=position + stepBeginPosition;
      long hash=readHashPosition(realPosition);
      positionToFullHashes[position]=hash;
      positionToHashes[realPosition]=(byte)hash;
    }
    for (int position=0; position < stepSize; position++) {
      int realPosition=position + stepBeginPosition;
      if (isPositionNull(realPosition)) {
        continue;
      }
      long hash=positionToFullHashes[position];
      int pos=getHashPosition(hash,mask);
      while (key[pos] != -1) {
        int currentKey=key[pos];
        if (((byte)hash) == positionToHashes[currentKey] && positionEqualsPositionIgnoreNulls(currentKey,realPosition)) {
          positionLinks[realPosition]=currentKey;
          break;
        }
        pos=(pos + 1) & mask;
      }
      key[pos]=realPosition;
    }
  }
  size=sizeOf(addresses.elements()) + pagesHashStrategy.getSizeInBytes() + sizeOf(key)+ sizeOf(positionLinks)+ sizeOf(positionToHashes);
}
