{
  this.addresses=requireNonNull(addresses,"addresses is null");
  this.pagesHashStrategy=requireNonNull(pagesHashStrategy,"pagesHashStrategy is null");
  this.channelCount=pagesHashStrategy.getChannelCount();
  this.filterFunctionPresent=pagesHashStrategy.getFilterFunction().isPresent();
  int hashSize=HashCommon.arraySize(addresses.size(),0.75f);
  size=sizeOfIntArray(hashSize) + sizeOfBooleanArray(hashSize) + sizeOfIntArray(addresses.size())+ sizeOf(addresses.elements())+ pagesHashStrategy.getSizeInBytes();
  mask=hashSize - 1;
  key=new int[hashSize];
  Arrays.fill(key,-1);
  this.positionLinks=new int[addresses.size()];
  Arrays.fill(positionLinks,-1);
  for (int position=0; position < addresses.size(); position++) {
    if (isPositionNull(position)) {
      continue;
    }
    int pos=(int)getHashPosition(hashPosition(position),mask);
    while (key[pos] != -1) {
      int currentKey=key[pos];
      if (positionEqualsPositionIgnoreNulls(currentKey,position)) {
        positionLinks[position]=currentKey;
        break;
      }
      pos=(pos + 1) & mask;
    }
    key[pos]=position;
  }
}
