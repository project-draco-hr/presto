{
  Expression originalPredicate=or(and(greaterThan(A,bigintLiteral(1L)),unprocessableExpression1(A)),and(lessThan(A,bigintLiteral(5L)),unprocessableExpression2(A)));
  ExtractionResult result=fromPredicate(originalPredicate);
  assertEquals(result.getRemainingExpression(),originalPredicate);
  assertEquals(result.getTupleDomain(),withColumnDomains(ImmutableMap.of(A,Domain.notNull(BIGINT))));
  originalPredicate=or(and(equal(A,bigintLiteral(1L)),unprocessableExpression1(A)),and(equal(A,bigintLiteral(2L)),unprocessableExpression2(A)));
  result=fromPredicate(originalPredicate);
  assertEquals(result.getRemainingExpression(),originalPredicate);
  assertEquals(result.getTupleDomain(),withColumnDomains(ImmutableMap.of(A,Domain.create(ValueSet.ofRanges(Range.equal(BIGINT,1L),Range.equal(BIGINT,2L)),false))));
  originalPredicate=or(and(equal(A,bigintLiteral(1L)),unprocessableExpression1(A)),and(equal(A,bigintLiteral(2L)),unprocessableExpression1(A)));
  result=fromPredicate(originalPredicate);
  assertEquals(result.getRemainingExpression(),unprocessableExpression1(A));
  assertEquals(result.getTupleDomain(),withColumnDomains(ImmutableMap.of(A,Domain.create(ValueSet.ofRanges(Range.equal(BIGINT,1L),Range.equal(BIGINT,2L)),false))));
  originalPredicate=or(and(equal(A,bigintLiteral(1L)),unprocessableExpression1(A)),and(equal(B,doubleLiteral(2.0)),unprocessableExpression1(A)));
  result=fromPredicate(originalPredicate);
  assertEquals(result.getRemainingExpression(),originalPredicate);
  assertTrue(result.getTupleDomain().isAll());
  originalPredicate=or(and(greaterThan(A,bigintLiteral(1L)),greaterThan(B,doubleLiteral(1.0)),unprocessableExpression1(A)),and(greaterThan(A,bigintLiteral(2L)),greaterThan(B,doubleLiteral(2.0)),unprocessableExpression1(A)));
  result=fromPredicate(originalPredicate);
  assertEquals(result.getRemainingExpression(),unprocessableExpression1(A));
  assertEquals(result.getTupleDomain(),withColumnDomains(ImmutableMap.of(A,Domain.create(ValueSet.ofRanges(Range.greaterThan(BIGINT,1L)),false),B,Domain.create(ValueSet.ofRanges(Range.greaterThan(DOUBLE,1.0)),false))));
  originalPredicate=or(and(equal(A,bigintLiteral(1L)),randPredicate(A)),and(equal(A,bigintLiteral(2L)),randPredicate(A)));
  result=fromPredicate(originalPredicate);
  assertEquals(result.getRemainingExpression(),originalPredicate);
  assertEquals(result.getTupleDomain(),withColumnDomains(ImmutableMap.of(A,Domain.create(ValueSet.ofRanges(Range.equal(BIGINT,1L),Range.equal(BIGINT,2L)),false))));
  originalPredicate=not(or(and(greaterThan(A,bigintLiteral(1L)),unprocessableExpression1(A)),and(lessThan(A,bigintLiteral(5L)),unprocessableExpression2(A))));
  result=fromPredicate(originalPredicate);
  assertEquals(result.getRemainingExpression(),and(not(and(greaterThan(A,bigintLiteral(1L)),unprocessableExpression1(A))),not(and(lessThan(A,bigintLiteral(5L)),unprocessableExpression2(A)))));
  assertTrue(result.getTupleDomain().isAll());
  originalPredicate=not(or(not(and(greaterThan(A,bigintLiteral(1L)),unprocessableExpression1(A))),not(and(lessThan(A,bigintLiteral(5L)),unprocessableExpression2(A)))));
  result=fromPredicate(originalPredicate);
  assertEquals(result.getRemainingExpression(),and(unprocessableExpression1(A),unprocessableExpression2(A)));
  assertEquals(result.getTupleDomain(),withColumnDomains(ImmutableMap.of(A,Domain.create(ValueSet.ofRanges(Range.range(BIGINT,1L,false,5L,false)),false))));
}
