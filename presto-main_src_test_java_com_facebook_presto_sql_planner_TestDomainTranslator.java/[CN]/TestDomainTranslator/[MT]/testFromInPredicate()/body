{
  Expression originalExpression=in(A,ImmutableList.of(1L));
  ExtractionResult result=fromPredicate(MANAGER,SESSION,originalExpression,TYPES,COLUMN_HANDLES);
  Assert.assertEquals(result.getRemainingExpression(),TRUE_LITERAL);
  Assert.assertEquals(result.getTupleDomain(),withColumnDomains(ImmutableMap.<ColumnHandle,Domain>of(ACH,Domain.singleValue(1L))));
  originalExpression=in(A,ImmutableList.of(1L,2L));
  result=fromPredicate(MANAGER,SESSION,originalExpression,TYPES,COLUMN_HANDLES);
  Assert.assertEquals(result.getRemainingExpression(),TRUE_LITERAL);
  Assert.assertEquals(result.getTupleDomain(),withColumnDomains(ImmutableMap.<ColumnHandle,Domain>of(ACH,Domain.create(SortedRangeSet.of(Range.equal(1L),Range.equal(2L)),false))));
  originalExpression=not(in(A,ImmutableList.of(1L,2L)));
  result=fromPredicate(MANAGER,SESSION,originalExpression,TYPES,COLUMN_HANDLES);
  Assert.assertEquals(result.getRemainingExpression(),TRUE_LITERAL);
  Assert.assertEquals(result.getTupleDomain(),withColumnDomains(ImmutableMap.<ColumnHandle,Domain>of(ACH,Domain.create(SortedRangeSet.of(Range.lessThan(1L),Range.range(1L,false,2L,false),Range.greaterThan(2L)),false))));
}
