{
  testSimpleComparison(greaterThanOrEqual(O,bigintLiteral(2L)),O,Range.greaterThanOrEqual(INTEGER,2L));
  testSimpleComparison(greaterThanOrEqual(O,bigintLiteral(Integer.MAX_VALUE + 1L)),O,Range.greaterThan(INTEGER,(long)Integer.MAX_VALUE));
  testSimpleComparison(greaterThan(O,bigintLiteral(2L)),O,Range.greaterThan(INTEGER,2L));
  testSimpleComparison(greaterThan(O,bigintLiteral(Integer.MAX_VALUE + 1L)),O,Range.greaterThan(INTEGER,(long)Integer.MAX_VALUE));
  testSimpleComparison(lessThanOrEqual(O,bigintLiteral(-2L)),O,Range.lessThanOrEqual(INTEGER,-2L));
  testSimpleComparison(lessThanOrEqual(O,bigintLiteral(Integer.MIN_VALUE - 1L)),O,Range.lessThan(INTEGER,(long)Integer.MIN_VALUE));
  testSimpleComparison(lessThan(O,bigintLiteral(-2L)),O,Range.lessThan(INTEGER,-2L));
  testSimpleComparison(lessThan(O,bigintLiteral(Integer.MIN_VALUE - 1L)),O,Range.lessThan(INTEGER,(long)Integer.MIN_VALUE));
  testSimpleComparison(equal(O,bigintLiteral(Integer.MIN_VALUE - 1L)),O,Domain.none(INTEGER));
  testSimpleComparison(equal(O,bigintLiteral(-2L)),O,Range.equal(INTEGER,-2L));
  testSimpleComparison(notEqual(O,bigintLiteral(Integer.MAX_VALUE + 1L)),O,Domain.notNull(INTEGER));
  testSimpleComparison(notEqual(O,bigintLiteral(2L)),O,Domain.create(ValueSet.ofRanges(Range.lessThan(INTEGER,2L),Range.greaterThan(INTEGER,2L)),false));
  testSimpleComparison(isDistinctFrom(O,bigintLiteral(Integer.MAX_VALUE + 1L)),O,Domain.all(INTEGER));
  testSimpleComparison(isDistinctFrom(O,bigintLiteral(2L)),O,Domain.create(ValueSet.ofRanges(Range.lessThan(INTEGER,2L),Range.greaterThan(INTEGER,2L)),true));
}
