{
  Expression originalExpression=greaterThan(A,longLiteral(2L));
  ExtractionResult result=fromPredicate(originalExpression);
  assertEquals(result.getRemainingExpression(),TRUE_LITERAL);
  assertEquals(result.getTupleDomain(),withColumnDomains(ImmutableMap.of(A,Domain.create(SortedRangeSet.of(Range.greaterThan(2L)),false))));
  originalExpression=greaterThanOrEqual(A,longLiteral(2L));
  result=fromPredicate(originalExpression);
  assertEquals(result.getRemainingExpression(),TRUE_LITERAL);
  assertEquals(result.getTupleDomain(),withColumnDomains(ImmutableMap.of(A,Domain.create(SortedRangeSet.of(Range.greaterThanOrEqual(2L)),false))));
  originalExpression=lessThan(A,longLiteral(2L));
  result=fromPredicate(originalExpression);
  assertEquals(result.getRemainingExpression(),TRUE_LITERAL);
  assertEquals(result.getTupleDomain(),withColumnDomains(ImmutableMap.of(A,Domain.create(SortedRangeSet.of(Range.lessThan(2L)),false))));
  originalExpression=lessThanOrEqual(A,longLiteral(2L));
  result=fromPredicate(originalExpression);
  assertEquals(result.getRemainingExpression(),TRUE_LITERAL);
  assertEquals(result.getTupleDomain(),withColumnDomains(ImmutableMap.of(A,Domain.create(SortedRangeSet.of(Range.lessThanOrEqual(2L)),false))));
  originalExpression=equal(A,longLiteral(2L));
  result=fromPredicate(originalExpression);
  assertEquals(result.getRemainingExpression(),TRUE_LITERAL);
  assertEquals(result.getTupleDomain(),withColumnDomains(ImmutableMap.of(A,Domain.create(SortedRangeSet.of(Range.equal(2L)),false))));
  originalExpression=notEqual(A,longLiteral(2L));
  result=fromPredicate(originalExpression);
  assertEquals(result.getRemainingExpression(),TRUE_LITERAL);
  assertEquals(result.getTupleDomain(),withColumnDomains(ImmutableMap.of(A,Domain.create(SortedRangeSet.of(Range.lessThan(2L),Range.greaterThan(2L)),false))));
  originalExpression=isDistinctFrom(A,longLiteral(2L));
  result=fromPredicate(originalExpression);
  assertEquals(result.getRemainingExpression(),TRUE_LITERAL);
  assertEquals(result.getTupleDomain(),withColumnDomains(ImmutableMap.of(A,Domain.create(SortedRangeSet.of(Range.lessThan(2L),Range.greaterThan(2L)),true))));
  originalExpression=not(greaterThan(A,longLiteral(2L)));
  result=fromPredicate(originalExpression);
  assertEquals(result.getRemainingExpression(),TRUE_LITERAL);
  assertEquals(result.getTupleDomain(),withColumnDomains(ImmutableMap.of(A,Domain.create(SortedRangeSet.of(Range.lessThanOrEqual(2L)),false))));
  originalExpression=not(greaterThanOrEqual(A,longLiteral(2L)));
  result=fromPredicate(originalExpression);
  assertEquals(result.getRemainingExpression(),TRUE_LITERAL);
  assertEquals(result.getTupleDomain(),withColumnDomains(ImmutableMap.of(A,Domain.create(SortedRangeSet.of(Range.lessThan(2L)),false))));
  originalExpression=not(lessThan(A,longLiteral(2L)));
  result=fromPredicate(originalExpression);
  assertEquals(result.getRemainingExpression(),TRUE_LITERAL);
  assertEquals(result.getTupleDomain(),withColumnDomains(ImmutableMap.of(A,Domain.create(SortedRangeSet.of(Range.greaterThanOrEqual(2L)),false))));
  originalExpression=not(lessThanOrEqual(A,longLiteral(2L)));
  result=fromPredicate(originalExpression);
  assertEquals(result.getRemainingExpression(),TRUE_LITERAL);
  assertEquals(result.getTupleDomain(),withColumnDomains(ImmutableMap.of(A,Domain.create(SortedRangeSet.of(Range.greaterThan(2L)),false))));
  originalExpression=not(equal(A,longLiteral(2L)));
  result=fromPredicate(originalExpression);
  assertEquals(result.getRemainingExpression(),TRUE_LITERAL);
  assertEquals(result.getTupleDomain(),withColumnDomains(ImmutableMap.of(A,Domain.create(SortedRangeSet.of(Range.lessThan(2L),Range.greaterThan(2L)),false))));
  originalExpression=not(notEqual(A,longLiteral(2L)));
  result=fromPredicate(originalExpression);
  assertEquals(result.getRemainingExpression(),TRUE_LITERAL);
  assertEquals(result.getTupleDomain(),withColumnDomains(ImmutableMap.of(A,Domain.create(SortedRangeSet.of(Range.equal(2L)),false))));
  originalExpression=not(isDistinctFrom(A,longLiteral(2L)));
  result=fromPredicate(originalExpression);
  assertEquals(result.getRemainingExpression(),TRUE_LITERAL);
  assertEquals(result.getTupleDomain(),withColumnDomains(ImmutableMap.of(A,Domain.create(SortedRangeSet.of(Range.equal(2L)),false))));
}
