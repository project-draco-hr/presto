{
  Expression originalExpression=greaterThan(A,longLiteral(2L));
  ExtractionResult result=fromPredicate(originalExpression);
  assertEquals(result.getRemainingExpression(),TRUE_LITERAL);
  assertEquals(result.getTupleDomain(),withColumnDomains(ImmutableMap.of(A,Domain.create(ValueSet.ofRanges(Range.greaterThan(BIGINT,2L)),false))));
  originalExpression=greaterThanOrEqual(A,longLiteral(2L));
  result=fromPredicate(originalExpression);
  assertEquals(result.getRemainingExpression(),TRUE_LITERAL);
  assertEquals(result.getTupleDomain(),withColumnDomains(ImmutableMap.of(A,Domain.create(ValueSet.ofRanges(Range.greaterThanOrEqual(BIGINT,2L)),false))));
  originalExpression=lessThan(A,longLiteral(2L));
  result=fromPredicate(originalExpression);
  assertEquals(result.getRemainingExpression(),TRUE_LITERAL);
  assertEquals(result.getTupleDomain(),withColumnDomains(ImmutableMap.of(A,Domain.create(ValueSet.ofRanges(Range.lessThan(BIGINT,2L)),false))));
  originalExpression=lessThanOrEqual(A,longLiteral(2L));
  result=fromPredicate(originalExpression);
  assertEquals(result.getRemainingExpression(),TRUE_LITERAL);
  assertEquals(result.getTupleDomain(),withColumnDomains(ImmutableMap.of(A,Domain.create(ValueSet.ofRanges(Range.lessThanOrEqual(BIGINT,2L)),false))));
  originalExpression=equal(A,longLiteral(2L));
  result=fromPredicate(originalExpression);
  assertEquals(result.getRemainingExpression(),TRUE_LITERAL);
  assertEquals(result.getTupleDomain(),withColumnDomains(ImmutableMap.of(A,Domain.create(ValueSet.ofRanges(Range.equal(BIGINT,2L)),false))));
  originalExpression=notEqual(A,longLiteral(2L));
  result=fromPredicate(originalExpression);
  assertEquals(result.getRemainingExpression(),TRUE_LITERAL);
  assertEquals(result.getTupleDomain(),withColumnDomains(ImmutableMap.of(A,Domain.create(ValueSet.ofRanges(Range.lessThan(BIGINT,2L),Range.greaterThan(BIGINT,2L)),false))));
  originalExpression=isDistinctFrom(A,longLiteral(2L));
  result=fromPredicate(originalExpression);
  assertEquals(result.getRemainingExpression(),TRUE_LITERAL);
  assertEquals(result.getTupleDomain(),withColumnDomains(ImmutableMap.of(A,Domain.create(ValueSet.ofRanges(Range.lessThan(BIGINT,2L),Range.greaterThan(BIGINT,2L)),true))));
  originalExpression=equal(J,colorLiteral(COLOR_VALUE_1));
  result=fromPredicate(originalExpression);
  assertEquals(result.getRemainingExpression(),TRUE_LITERAL);
  assertEquals(result.getTupleDomain(),withColumnDomains(ImmutableMap.of(J,Domain.create(ValueSet.of(COLOR,COLOR_VALUE_1),false))));
  originalExpression=in(J,ImmutableList.of(colorLiteral(COLOR_VALUE_1),colorLiteral(COLOR_VALUE_2)));
  result=fromPredicate(originalExpression);
  assertEquals(result.getRemainingExpression(),TRUE_LITERAL);
  assertEquals(result.getTupleDomain(),withColumnDomains(ImmutableMap.of(J,Domain.create(ValueSet.of(COLOR,COLOR_VALUE_1,COLOR_VALUE_2),false))));
  originalExpression=isDistinctFrom(J,colorLiteral(COLOR_VALUE_1));
  result=fromPredicate(originalExpression);
  assertEquals(result.getRemainingExpression(),TRUE_LITERAL);
  assertEquals(result.getTupleDomain(),withColumnDomains(ImmutableMap.of(J,Domain.create(ValueSet.of(COLOR,COLOR_VALUE_1).complement(),true))));
  originalExpression=not(greaterThan(A,longLiteral(2L)));
  result=fromPredicate(originalExpression);
  assertEquals(result.getRemainingExpression(),TRUE_LITERAL);
  assertEquals(result.getTupleDomain(),withColumnDomains(ImmutableMap.of(A,Domain.create(ValueSet.ofRanges(Range.lessThanOrEqual(BIGINT,2L)),false))));
  originalExpression=not(greaterThanOrEqual(A,longLiteral(2L)));
  result=fromPredicate(originalExpression);
  assertEquals(result.getRemainingExpression(),TRUE_LITERAL);
  assertEquals(result.getTupleDomain(),withColumnDomains(ImmutableMap.of(A,Domain.create(ValueSet.ofRanges(Range.lessThan(BIGINT,2L)),false))));
  originalExpression=not(lessThan(A,longLiteral(2L)));
  result=fromPredicate(originalExpression);
  assertEquals(result.getRemainingExpression(),TRUE_LITERAL);
  assertEquals(result.getTupleDomain(),withColumnDomains(ImmutableMap.of(A,Domain.create(ValueSet.ofRanges(Range.greaterThanOrEqual(BIGINT,2L)),false))));
  originalExpression=not(lessThanOrEqual(A,longLiteral(2L)));
  result=fromPredicate(originalExpression);
  assertEquals(result.getRemainingExpression(),TRUE_LITERAL);
  assertEquals(result.getTupleDomain(),withColumnDomains(ImmutableMap.of(A,Domain.create(ValueSet.ofRanges(Range.greaterThan(BIGINT,2L)),false))));
  originalExpression=not(equal(A,longLiteral(2L)));
  result=fromPredicate(originalExpression);
  assertEquals(result.getRemainingExpression(),TRUE_LITERAL);
  assertEquals(result.getTupleDomain(),withColumnDomains(ImmutableMap.of(A,Domain.create(ValueSet.ofRanges(Range.lessThan(BIGINT,2L),Range.greaterThan(BIGINT,2L)),false))));
  originalExpression=not(notEqual(A,longLiteral(2L)));
  result=fromPredicate(originalExpression);
  assertEquals(result.getRemainingExpression(),TRUE_LITERAL);
  assertEquals(result.getTupleDomain(),withColumnDomains(ImmutableMap.of(A,Domain.create(ValueSet.ofRanges(Range.equal(BIGINT,2L)),false))));
  originalExpression=not(isDistinctFrom(A,longLiteral(2L)));
  result=fromPredicate(originalExpression);
  assertEquals(result.getRemainingExpression(),TRUE_LITERAL);
  assertEquals(result.getTupleDomain(),withColumnDomains(ImmutableMap.of(A,Domain.create(ValueSet.ofRanges(Range.equal(BIGINT,2L)),false))));
  originalExpression=not(equal(J,colorLiteral(COLOR_VALUE_1)));
  result=fromPredicate(originalExpression);
  assertEquals(result.getRemainingExpression(),TRUE_LITERAL);
  assertEquals(result.getTupleDomain(),withColumnDomains(ImmutableMap.of(J,Domain.create(ValueSet.of(COLOR,COLOR_VALUE_1).complement(),false))));
  originalExpression=not(in(J,ImmutableList.of(colorLiteral(COLOR_VALUE_1),colorLiteral(COLOR_VALUE_2))));
  result=fromPredicate(originalExpression);
  assertEquals(result.getRemainingExpression(),TRUE_LITERAL);
  assertEquals(result.getTupleDomain(),withColumnDomains(ImmutableMap.of(J,Domain.create(ValueSet.of(COLOR,COLOR_VALUE_1,COLOR_VALUE_2).complement(),false))));
  originalExpression=not(isDistinctFrom(J,colorLiteral(COLOR_VALUE_1)));
  result=fromPredicate(originalExpression);
  assertEquals(result.getRemainingExpression(),TRUE_LITERAL);
  assertEquals(result.getTupleDomain(),withColumnDomains(ImmutableMap.of(J,Domain.create(ValueSet.of(COLOR,COLOR_VALUE_1),false))));
}
