{
  ComparisonExpression originalExpression=comparison(GREATER_THAN,longLiteral(2L),reference(A));
  ExtractionResult result=fromPredicate(originalExpression,TYPES,COLUMN_HANDLES);
  Assert.assertEquals(result.getRemainingExpression(),TRUE_LITERAL);
  Assert.assertEquals(result.getTupleDomain(),withColumnDomains(ImmutableMap.<ColumnHandle,Domain>of(ACH,Domain.create(SortedRangeSet.of(Range.lessThan(2L)),false))));
  originalExpression=comparison(GREATER_THAN_OR_EQUAL,longLiteral(2L),reference(A));
  result=fromPredicate(originalExpression,TYPES,COLUMN_HANDLES);
  Assert.assertEquals(result.getRemainingExpression(),TRUE_LITERAL);
  Assert.assertEquals(result.getTupleDomain(),withColumnDomains(ImmutableMap.<ColumnHandle,Domain>of(ACH,Domain.create(SortedRangeSet.of(Range.lessThanOrEqual(2L)),false))));
  originalExpression=comparison(LESS_THAN,longLiteral(2L),reference(A));
  result=fromPredicate(originalExpression,TYPES,COLUMN_HANDLES);
  Assert.assertEquals(result.getRemainingExpression(),TRUE_LITERAL);
  Assert.assertEquals(result.getTupleDomain(),withColumnDomains(ImmutableMap.<ColumnHandle,Domain>of(ACH,Domain.create(SortedRangeSet.of(Range.greaterThan(2L)),false))));
  originalExpression=comparison(LESS_THAN_OR_EQUAL,longLiteral(2L),reference(A));
  result=fromPredicate(originalExpression,TYPES,COLUMN_HANDLES);
  Assert.assertEquals(result.getRemainingExpression(),TRUE_LITERAL);
  Assert.assertEquals(result.getTupleDomain(),withColumnDomains(ImmutableMap.<ColumnHandle,Domain>of(ACH,Domain.create(SortedRangeSet.of(Range.greaterThanOrEqual(2L)),false))));
  originalExpression=comparison(EQUAL,longLiteral(2L),reference(A));
  result=fromPredicate(originalExpression,TYPES,COLUMN_HANDLES);
  Assert.assertEquals(result.getRemainingExpression(),TRUE_LITERAL);
  Assert.assertEquals(result.getTupleDomain(),withColumnDomains(ImmutableMap.<ColumnHandle,Domain>of(ACH,Domain.create(SortedRangeSet.of(Range.equal(2L)),false))));
  originalExpression=comparison(NOT_EQUAL,longLiteral(2L),reference(A));
  result=fromPredicate(originalExpression,TYPES,COLUMN_HANDLES);
  Assert.assertEquals(result.getRemainingExpression(),TRUE_LITERAL);
  Assert.assertEquals(result.getTupleDomain(),withColumnDomains(ImmutableMap.<ColumnHandle,Domain>of(ACH,Domain.create(SortedRangeSet.of(Range.lessThan(2L),Range.greaterThan(2L)),false))));
  originalExpression=comparison(IS_DISTINCT_FROM,longLiteral(2L),reference(A));
  result=fromPredicate(originalExpression,TYPES,COLUMN_HANDLES);
  Assert.assertEquals(result.getRemainingExpression(),TRUE_LITERAL);
  Assert.assertEquals(result.getTupleDomain(),withColumnDomains(ImmutableMap.<ColumnHandle,Domain>of(ACH,Domain.create(SortedRangeSet.of(Range.lessThan(2L),Range.greaterThan(2L)),true))));
  originalExpression=comparison(IS_DISTINCT_FROM,nullLiteral(),reference(A));
  result=fromPredicate(originalExpression,TYPES,COLUMN_HANDLES);
  Assert.assertEquals(result.getRemainingExpression(),TRUE_LITERAL);
  Assert.assertEquals(result.getTupleDomain(),withColumnDomains(ImmutableMap.<ColumnHandle,Domain>of(ACH,Domain.notNull(Long.class))));
}
