{
  ComparisonExpression originalExpression=comparison(GREATER_THAN,bigintLiteral(2L),A.toSymbolReference());
  ExtractionResult result=fromPredicate(originalExpression);
  assertEquals(result.getRemainingExpression(),TRUE_LITERAL);
  assertEquals(result.getTupleDomain(),withColumnDomains(ImmutableMap.of(A,Domain.create(ValueSet.ofRanges(Range.lessThan(BIGINT,2L)),false))));
  originalExpression=comparison(GREATER_THAN_OR_EQUAL,bigintLiteral(2L),A.toSymbolReference());
  result=fromPredicate(originalExpression);
  assertEquals(result.getRemainingExpression(),TRUE_LITERAL);
  assertEquals(result.getTupleDomain(),withColumnDomains(ImmutableMap.of(A,Domain.create(ValueSet.ofRanges(Range.lessThanOrEqual(BIGINT,2L)),false))));
  originalExpression=comparison(LESS_THAN,bigintLiteral(2L),A.toSymbolReference());
  result=fromPredicate(originalExpression);
  assertEquals(result.getRemainingExpression(),TRUE_LITERAL);
  assertEquals(result.getTupleDomain(),withColumnDomains(ImmutableMap.of(A,Domain.create(ValueSet.ofRanges(Range.greaterThan(BIGINT,2L)),false))));
  originalExpression=comparison(LESS_THAN_OR_EQUAL,bigintLiteral(2L),A.toSymbolReference());
  result=fromPredicate(originalExpression);
  assertEquals(result.getRemainingExpression(),TRUE_LITERAL);
  assertEquals(result.getTupleDomain(),withColumnDomains(ImmutableMap.of(A,Domain.create(ValueSet.ofRanges(Range.greaterThanOrEqual(BIGINT,2L)),false))));
  originalExpression=comparison(EQUAL,bigintLiteral(2L),A.toSymbolReference());
  result=fromPredicate(originalExpression);
  assertEquals(result.getRemainingExpression(),TRUE_LITERAL);
  assertEquals(result.getTupleDomain(),withColumnDomains(ImmutableMap.of(A,Domain.create(ValueSet.ofRanges(Range.equal(BIGINT,2L)),false))));
  originalExpression=comparison(EQUAL,colorLiteral(COLOR_VALUE_1),J.toSymbolReference());
  result=fromPredicate(originalExpression);
  assertEquals(result.getRemainingExpression(),TRUE_LITERAL);
  assertEquals(result.getTupleDomain(),withColumnDomains(ImmutableMap.of(J,Domain.create(ValueSet.of(COLOR,COLOR_VALUE_1),false))));
  originalExpression=comparison(NOT_EQUAL,bigintLiteral(2L),A.toSymbolReference());
  result=fromPredicate(originalExpression);
  assertEquals(result.getRemainingExpression(),TRUE_LITERAL);
  assertEquals(result.getTupleDomain(),withColumnDomains(ImmutableMap.of(A,Domain.create(ValueSet.ofRanges(Range.lessThan(BIGINT,2L),Range.greaterThan(BIGINT,2L)),false))));
  originalExpression=comparison(NOT_EQUAL,colorLiteral(COLOR_VALUE_1),J.toSymbolReference());
  result=fromPredicate(originalExpression);
  assertEquals(result.getRemainingExpression(),TRUE_LITERAL);
  assertEquals(result.getTupleDomain(),withColumnDomains(ImmutableMap.of(J,Domain.create(ValueSet.of(COLOR,COLOR_VALUE_1).complement(),false))));
  originalExpression=comparison(IS_DISTINCT_FROM,bigintLiteral(2L),A.toSymbolReference());
  result=fromPredicate(originalExpression);
  assertEquals(result.getRemainingExpression(),TRUE_LITERAL);
  assertEquals(result.getTupleDomain(),withColumnDomains(ImmutableMap.of(A,Domain.create(ValueSet.ofRanges(Range.lessThan(BIGINT,2L),Range.greaterThan(BIGINT,2L)),true))));
  originalExpression=comparison(IS_DISTINCT_FROM,colorLiteral(COLOR_VALUE_1),J.toSymbolReference());
  result=fromPredicate(originalExpression);
  assertEquals(result.getRemainingExpression(),TRUE_LITERAL);
  assertEquals(result.getTupleDomain(),withColumnDomains(ImmutableMap.of(J,Domain.create(ValueSet.of(COLOR,COLOR_VALUE_1).complement(),true))));
  originalExpression=comparison(IS_DISTINCT_FROM,nullLiteral(),A.toSymbolReference());
  result=fromPredicate(originalExpression);
  assertEquals(result.getRemainingExpression(),TRUE_LITERAL);
  assertEquals(result.getTupleDomain(),withColumnDomains(ImmutableMap.of(A,Domain.notNull(BIGINT))));
}
