{
  TupleDomain<Symbol> tupleDomain;
  tupleDomain=withColumnDomains(ImmutableMap.of(A,Domain.notNull(BIGINT)));
  assertEquals(toPredicate(tupleDomain),isNotNull(A));
  tupleDomain=withColumnDomains(ImmutableMap.of(A,Domain.onlyNull(BIGINT)));
  assertEquals(toPredicate(tupleDomain),isNull(A));
  tupleDomain=withColumnDomains(ImmutableMap.of(A,Domain.none(BIGINT)));
  assertEquals(toPredicate(tupleDomain),FALSE_LITERAL);
  tupleDomain=withColumnDomains(ImmutableMap.of(A,Domain.all(BIGINT)));
  assertEquals(toPredicate(tupleDomain),TRUE_LITERAL);
  tupleDomain=withColumnDomains(ImmutableMap.of(A,Domain.create(ValueSet.ofRanges(Range.greaterThan(BIGINT,1L)),false)));
  assertEquals(toPredicate(tupleDomain),greaterThan(A,longLiteral(1L)));
  tupleDomain=withColumnDomains(ImmutableMap.of(A,Domain.create(ValueSet.ofRanges(Range.greaterThanOrEqual(BIGINT,1L)),false)));
  assertEquals(toPredicate(tupleDomain),greaterThanOrEqual(A,longLiteral(1L)));
  tupleDomain=withColumnDomains(ImmutableMap.of(A,Domain.create(ValueSet.ofRanges(Range.lessThan(BIGINT,1L)),false)));
  assertEquals(toPredicate(tupleDomain),lessThan(A,longLiteral(1L)));
  tupleDomain=withColumnDomains(ImmutableMap.of(A,Domain.create(ValueSet.ofRanges(Range.range(BIGINT,0L,false,1L,true)),false)));
  assertEquals(toPredicate(tupleDomain),and(greaterThan(A,longLiteral(0L)),lessThanOrEqual(A,longLiteral(1L))));
  tupleDomain=withColumnDomains(ImmutableMap.of(A,Domain.create(ValueSet.ofRanges(Range.lessThanOrEqual(BIGINT,1L)),false)));
  assertEquals(toPredicate(tupleDomain),lessThanOrEqual(A,longLiteral(1L)));
  tupleDomain=withColumnDomains(ImmutableMap.of(A,Domain.singleValue(BIGINT,1L)));
  assertEquals(toPredicate(tupleDomain),equal(A,longLiteral(1L)));
  tupleDomain=withColumnDomains(ImmutableMap.of(A,Domain.create(ValueSet.ofRanges(Range.equal(BIGINT,1L),Range.equal(BIGINT,2L)),false)));
  assertEquals(toPredicate(tupleDomain),in(A,ImmutableList.of(1L,2L)));
  tupleDomain=withColumnDomains(ImmutableMap.of(A,Domain.create(ValueSet.ofRanges(Range.lessThan(BIGINT,1L)),true)));
  assertEquals(toPredicate(tupleDomain),or(lessThan(A,longLiteral(1L)),isNull(A)));
  tupleDomain=withColumnDomains(ImmutableMap.of(J,Domain.create(ValueSet.of(COLOR,COLOR_VALUE_1),true)));
  assertEquals(toPredicate(tupleDomain),or(equal(J,colorLiteral(COLOR_VALUE_1)),isNull(J)));
  tupleDomain=withColumnDomains(ImmutableMap.of(J,Domain.create(ValueSet.of(COLOR,COLOR_VALUE_1).complement(),true)));
  assertEquals(toPredicate(tupleDomain),or(not(equal(J,colorLiteral(COLOR_VALUE_1))),isNull(J)));
  tupleDomain=withColumnDomains(ImmutableMap.of(K,Domain.onlyNull(HYPER_LOG_LOG)));
  assertEquals(toPredicate(tupleDomain),isNull(K));
  tupleDomain=withColumnDomains(ImmutableMap.of(K,Domain.notNull(HYPER_LOG_LOG)));
  assertEquals(toPredicate(tupleDomain),isNotNull(K));
}
