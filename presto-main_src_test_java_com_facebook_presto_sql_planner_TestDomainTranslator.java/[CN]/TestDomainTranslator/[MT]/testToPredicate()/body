{
  TupleDomain tupleDomain;
  tupleDomain=withColumnDomains(ImmutableMap.<ColumnHandle,Domain>of(ACH,Domain.notNull(Long.class)));
  Assert.assertEquals(toPredicate(tupleDomain,COLUMN_HANDLES.inverse()),isNotNull(A));
  tupleDomain=withColumnDomains(ImmutableMap.<ColumnHandle,Domain>of(ACH,Domain.onlyNull(Long.class)));
  Assert.assertEquals(toPredicate(tupleDomain,COLUMN_HANDLES.inverse()),isNull(A));
  tupleDomain=withColumnDomains(ImmutableMap.<ColumnHandle,Domain>of(ACH,Domain.none(Long.class)));
  Assert.assertEquals(toPredicate(tupleDomain,COLUMN_HANDLES.inverse()),FALSE_LITERAL);
  tupleDomain=withColumnDomains(ImmutableMap.<ColumnHandle,Domain>of(ACH,Domain.all(Long.class)));
  Assert.assertEquals(toPredicate(tupleDomain,COLUMN_HANDLES.inverse()),TRUE_LITERAL);
  tupleDomain=withColumnDomains(ImmutableMap.<ColumnHandle,Domain>of(ACH,Domain.create(SortedRangeSet.of(Range.greaterThan(1L)),false)));
  Assert.assertEquals(toPredicate(tupleDomain,COLUMN_HANDLES.inverse()),greaterThan(A,longLiteral(1L)));
  tupleDomain=withColumnDomains(ImmutableMap.<ColumnHandle,Domain>of(ACH,Domain.create(SortedRangeSet.of(Range.greaterThanOrEqual(1L)),false)));
  Assert.assertEquals(toPredicate(tupleDomain,COLUMN_HANDLES.inverse()),greaterThanOrEqual(A,longLiteral(1L)));
  tupleDomain=withColumnDomains(ImmutableMap.<ColumnHandle,Domain>of(ACH,Domain.create(SortedRangeSet.of(Range.lessThan(1L)),false)));
  Assert.assertEquals(toPredicate(tupleDomain,COLUMN_HANDLES.inverse()),lessThan(A,longLiteral(1L)));
  tupleDomain=withColumnDomains(ImmutableMap.<ColumnHandle,Domain>of(ACH,Domain.create(SortedRangeSet.of(Range.range(0L,false,1L,true)),false)));
  Assert.assertEquals(toPredicate(tupleDomain,COLUMN_HANDLES.inverse()),and(greaterThan(A,longLiteral(0L)),lessThanOrEqual(A,longLiteral(1L))));
  tupleDomain=withColumnDomains(ImmutableMap.<ColumnHandle,Domain>of(ACH,Domain.create(SortedRangeSet.of(Range.lessThanOrEqual(1L)),false)));
  Assert.assertEquals(toPredicate(tupleDomain,COLUMN_HANDLES.inverse()),lessThanOrEqual(A,longLiteral(1L)));
  tupleDomain=withColumnDomains(ImmutableMap.<ColumnHandle,Domain>of(ACH,Domain.singleValue(1L)));
  Assert.assertEquals(toPredicate(tupleDomain,COLUMN_HANDLES.inverse()),equal(A,longLiteral(1L)));
  tupleDomain=withColumnDomains(ImmutableMap.<ColumnHandle,Domain>of(ACH,Domain.create(SortedRangeSet.of(Range.equal(1L),Range.equal(2L)),false)));
  Assert.assertEquals(toPredicate(tupleDomain,COLUMN_HANDLES.inverse()),in(A,ImmutableList.of(1L,2L)));
  tupleDomain=withColumnDomains(ImmutableMap.<ColumnHandle,Domain>of(ACH,Domain.create(SortedRangeSet.of(Range.lessThan(1L)),true)));
  Assert.assertEquals(toPredicate(tupleDomain,COLUMN_HANDLES.inverse()),or(lessThan(A,longLiteral(1L)),isNull(A)));
}
