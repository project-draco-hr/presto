{
  Expression originalExpression=between(A,longLiteral(1L),longLiteral(2L));
  ExtractionResult result=fromPredicate(originalExpression);
  assertEquals(result.getRemainingExpression(),TRUE_LITERAL);
  assertEquals(result.getTupleDomain(),withColumnDomains(ImmutableMap.of(A,Domain.create(SortedRangeSet.of(Range.range(1L,true,2L,true)),false))));
  originalExpression=between(A,longLiteral(1L),doubleLiteral(2.1));
  result=fromPredicate(originalExpression);
  assertEquals(result.getRemainingExpression(),TRUE_LITERAL);
  assertEquals(result.getTupleDomain(),withColumnDomains(ImmutableMap.of(A,Domain.create(SortedRangeSet.of(Range.range(1L,true,2L,true)),false))));
  originalExpression=between(A,longLiteral(1L),nullLiteral());
  result=fromPredicate(originalExpression);
  assertEquals(result.getRemainingExpression(),TRUE_LITERAL);
  assertTrue(result.getTupleDomain().isNone());
  originalExpression=not(between(A,longLiteral(1L),longLiteral(2L)));
  result=fromPredicate(originalExpression);
  assertEquals(result.getRemainingExpression(),TRUE_LITERAL);
  assertEquals(result.getTupleDomain(),withColumnDomains(ImmutableMap.of(A,Domain.create(SortedRangeSet.of(Range.lessThan(1L),Range.greaterThan(2L)),false))));
  originalExpression=not(between(A,longLiteral(1L),doubleLiteral(2.1)));
  result=fromPredicate(originalExpression);
  assertEquals(result.getRemainingExpression(),TRUE_LITERAL);
  assertEquals(result.getTupleDomain(),withColumnDomains(ImmutableMap.of(A,Domain.create(SortedRangeSet.of(Range.lessThan(1L),Range.greaterThan(2L)),false))));
  originalExpression=not(between(A,longLiteral(1L),nullLiteral()));
  result=fromPredicate(originalExpression);
  assertEquals(result.getRemainingExpression(),TRUE_LITERAL);
  assertEquals(result.getTupleDomain(),withColumnDomains(ImmutableMap.of(A,Domain.create(SortedRangeSet.of(Range.lessThan(1L)),false))));
}
