{
  Expression originalExpression=greaterThan(A,nullLiteral());
  ExtractionResult result=fromPredicate(originalExpression);
  assertEquals(result.getRemainingExpression(),TRUE_LITERAL);
  assertTrue(result.getTupleDomain().isNone());
  originalExpression=greaterThanOrEqual(A,nullLiteral());
  result=fromPredicate(originalExpression);
  assertEquals(result.getRemainingExpression(),TRUE_LITERAL);
  assertTrue(result.getTupleDomain().isNone());
  originalExpression=lessThan(A,nullLiteral());
  result=fromPredicate(originalExpression);
  assertEquals(result.getRemainingExpression(),TRUE_LITERAL);
  assertTrue(result.getTupleDomain().isNone());
  originalExpression=lessThanOrEqual(A,nullLiteral());
  result=fromPredicate(originalExpression);
  assertEquals(result.getRemainingExpression(),TRUE_LITERAL);
  assertTrue(result.getTupleDomain().isNone());
  originalExpression=equal(A,nullLiteral());
  result=fromPredicate(originalExpression);
  assertEquals(result.getRemainingExpression(),TRUE_LITERAL);
  assertTrue(result.getTupleDomain().isNone());
  originalExpression=notEqual(A,nullLiteral());
  result=fromPredicate(originalExpression);
  assertEquals(result.getRemainingExpression(),TRUE_LITERAL);
  assertTrue(result.getTupleDomain().isNone());
  originalExpression=isDistinctFrom(A,nullLiteral());
  result=fromPredicate(originalExpression);
  assertEquals(result.getRemainingExpression(),TRUE_LITERAL);
  assertEquals(result.getTupleDomain(),withColumnDomains(ImmutableMap.of(ACH,Domain.notNull(Long.class))));
  originalExpression=not(greaterThan(A,nullLiteral()));
  result=fromPredicate(originalExpression);
  assertEquals(result.getRemainingExpression(),TRUE_LITERAL);
  assertTrue(result.getTupleDomain().isNone());
  originalExpression=not(greaterThanOrEqual(A,nullLiteral()));
  result=fromPredicate(originalExpression);
  assertEquals(result.getRemainingExpression(),TRUE_LITERAL);
  assertTrue(result.getTupleDomain().isNone());
  originalExpression=not(lessThan(A,nullLiteral()));
  result=fromPredicate(originalExpression);
  assertEquals(result.getRemainingExpression(),TRUE_LITERAL);
  assertTrue(result.getTupleDomain().isNone());
  originalExpression=not(lessThanOrEqual(A,nullLiteral()));
  result=fromPredicate(originalExpression);
  assertEquals(result.getRemainingExpression(),TRUE_LITERAL);
  assertTrue(result.getTupleDomain().isNone());
  originalExpression=not(equal(A,nullLiteral()));
  result=fromPredicate(originalExpression);
  assertEquals(result.getRemainingExpression(),TRUE_LITERAL);
  assertTrue(result.getTupleDomain().isNone());
  originalExpression=not(notEqual(A,nullLiteral()));
  result=fromPredicate(originalExpression);
  assertEquals(result.getRemainingExpression(),TRUE_LITERAL);
  assertTrue(result.getTupleDomain().isNone());
  originalExpression=not(isDistinctFrom(A,nullLiteral()));
  result=fromPredicate(originalExpression);
  assertEquals(result.getRemainingExpression(),TRUE_LITERAL);
  assertEquals(result.getTupleDomain(),withColumnDomains(ImmutableMap.of(ACH,Domain.onlyNull(Long.class))));
}
