{
  Expression originalExpression=greaterThan(A,nullLiteral());
  ExtractionResult result=fromPredicate(originalExpression);
  assertEquals(result.getRemainingExpression(),TRUE_LITERAL);
  assertTrue(result.getTupleDomain().isNone());
  originalExpression=greaterThan(C,new Cast(nullLiteral(),StandardTypes.VARCHAR));
  result=fromPredicate(originalExpression);
  assertEquals(result.getRemainingExpression(),TRUE_LITERAL);
  assertEquals(result.getTupleDomain(),withColumnDomains(ImmutableMap.of(C,Domain.create(ValueSet.none(VARCHAR),false))));
  originalExpression=greaterThanOrEqual(A,nullLiteral());
  result=fromPredicate(originalExpression);
  assertEquals(result.getRemainingExpression(),TRUE_LITERAL);
  assertTrue(result.getTupleDomain().isNone());
  originalExpression=lessThan(A,nullLiteral());
  result=fromPredicate(originalExpression);
  assertEquals(result.getRemainingExpression(),TRUE_LITERAL);
  assertTrue(result.getTupleDomain().isNone());
  originalExpression=lessThanOrEqual(A,nullLiteral());
  result=fromPredicate(originalExpression);
  assertEquals(result.getRemainingExpression(),TRUE_LITERAL);
  assertTrue(result.getTupleDomain().isNone());
  originalExpression=equal(A,nullLiteral());
  result=fromPredicate(originalExpression);
  assertEquals(result.getRemainingExpression(),TRUE_LITERAL);
  assertTrue(result.getTupleDomain().isNone());
  originalExpression=equal(J,nullLiteral());
  result=fromPredicate(originalExpression);
  assertEquals(result.getRemainingExpression(),TRUE_LITERAL);
  assertTrue(result.getTupleDomain().isNone());
  originalExpression=notEqual(A,nullLiteral());
  result=fromPredicate(originalExpression);
  assertEquals(result.getRemainingExpression(),TRUE_LITERAL);
  assertTrue(result.getTupleDomain().isNone());
  originalExpression=notEqual(J,nullLiteral());
  result=fromPredicate(originalExpression);
  assertEquals(result.getRemainingExpression(),TRUE_LITERAL);
  assertTrue(result.getTupleDomain().isNone());
  originalExpression=isDistinctFrom(A,nullLiteral());
  result=fromPredicate(originalExpression);
  assertEquals(result.getRemainingExpression(),TRUE_LITERAL);
  assertEquals(result.getTupleDomain(),withColumnDomains(ImmutableMap.of(A,Domain.notNull(BIGINT))));
  originalExpression=isDistinctFrom(J,nullLiteral());
  result=fromPredicate(originalExpression);
  assertEquals(result.getRemainingExpression(),TRUE_LITERAL);
  assertEquals(result.getTupleDomain(),withColumnDomains(ImmutableMap.of(J,Domain.notNull(COLOR))));
  originalExpression=not(greaterThan(A,nullLiteral()));
  result=fromPredicate(originalExpression);
  assertEquals(result.getRemainingExpression(),TRUE_LITERAL);
  assertTrue(result.getTupleDomain().isNone());
  originalExpression=not(greaterThanOrEqual(A,nullLiteral()));
  result=fromPredicate(originalExpression);
  assertEquals(result.getRemainingExpression(),TRUE_LITERAL);
  assertTrue(result.getTupleDomain().isNone());
  originalExpression=not(lessThan(A,nullLiteral()));
  result=fromPredicate(originalExpression);
  assertEquals(result.getRemainingExpression(),TRUE_LITERAL);
  assertTrue(result.getTupleDomain().isNone());
  originalExpression=not(lessThanOrEqual(A,nullLiteral()));
  result=fromPredicate(originalExpression);
  assertEquals(result.getRemainingExpression(),TRUE_LITERAL);
  assertTrue(result.getTupleDomain().isNone());
  originalExpression=not(equal(A,nullLiteral()));
  result=fromPredicate(originalExpression);
  assertEquals(result.getRemainingExpression(),TRUE_LITERAL);
  assertTrue(result.getTupleDomain().isNone());
  originalExpression=not(equal(J,nullLiteral()));
  result=fromPredicate(originalExpression);
  assertEquals(result.getRemainingExpression(),TRUE_LITERAL);
  assertTrue(result.getTupleDomain().isNone());
  originalExpression=not(notEqual(A,nullLiteral()));
  result=fromPredicate(originalExpression);
  assertEquals(result.getRemainingExpression(),TRUE_LITERAL);
  assertTrue(result.getTupleDomain().isNone());
  originalExpression=not(notEqual(J,nullLiteral()));
  result=fromPredicate(originalExpression);
  assertEquals(result.getRemainingExpression(),TRUE_LITERAL);
  assertTrue(result.getTupleDomain().isNone());
  originalExpression=not(isDistinctFrom(A,nullLiteral()));
  result=fromPredicate(originalExpression);
  assertEquals(result.getRemainingExpression(),TRUE_LITERAL);
  assertEquals(result.getTupleDomain(),withColumnDomains(ImmutableMap.of(A,Domain.onlyNull(BIGINT))));
  originalExpression=not(isDistinctFrom(J,nullLiteral()));
  result=fromPredicate(originalExpression);
  assertEquals(result.getRemainingExpression(),TRUE_LITERAL);
  assertEquals(result.getTupleDomain(),withColumnDomains(ImmutableMap.of(J,Domain.onlyNull(COLOR))));
}
