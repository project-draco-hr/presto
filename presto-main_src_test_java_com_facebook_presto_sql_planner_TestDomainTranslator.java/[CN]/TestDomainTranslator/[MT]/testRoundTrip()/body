{
  TupleDomain<Symbol> tupleDomain=withColumnDomains(ImmutableMap.<Symbol,Domain>builder().put(A,Domain.singleValue(BIGINT,1L)).put(B,Domain.onlyNull(DOUBLE)).put(C,Domain.notNull(VARCHAR)).put(D,Domain.singleValue(BOOLEAN,true)).put(E,Domain.singleValue(BIGINT,2L)).put(F,Domain.create(ValueSet.ofRanges(Range.lessThanOrEqual(DOUBLE,1.1),Range.equal(DOUBLE,2.0),Range.range(DOUBLE,3.0,false,3.5,true)),true)).put(G,Domain.create(ValueSet.ofRanges(Range.lessThanOrEqual(VARCHAR,utf8Slice("2013-01-01")),Range.greaterThan(VARCHAR,utf8Slice("2013-10-01"))),false)).put(H,Domain.singleValue(TIMESTAMP,TIMESTAMP_VALUE)).put(I,Domain.singleValue(DATE,DATE_VALUE)).put(J,Domain.singleValue(COLOR,COLOR_VALUE_1)).put(K,Domain.notNull(HYPER_LOG_LOG)).build());
  ExtractionResult result=fromPredicate(toPredicate(tupleDomain));
  assertEquals(result.getRemainingExpression(),TRUE_LITERAL);
  assertEquals(result.getTupleDomain(),tupleDomain);
}
