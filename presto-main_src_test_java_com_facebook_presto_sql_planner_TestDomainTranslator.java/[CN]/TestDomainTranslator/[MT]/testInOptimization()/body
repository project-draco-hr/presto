{
  Domain testDomain=Domain.create(ValueSet.all(BIGINT).subtract(ValueSet.ofRanges(Range.equal(BIGINT,1L),Range.equal(BIGINT,2L),Range.equal(BIGINT,3L))),false);
  TupleDomain<Symbol> tupleDomain=withColumnDomains(ImmutableMap.<Symbol,Domain>builder().put(A,testDomain).build());
  assertEquals(toPredicate(tupleDomain),not(in(A,ImmutableList.of(1L,2L,3L))));
  testDomain=Domain.create(ValueSet.ofRanges(Range.lessThan(BIGINT,4L)).intersect(ValueSet.all(BIGINT).subtract(ValueSet.ofRanges(Range.equal(BIGINT,1L),Range.equal(BIGINT,2L),Range.equal(BIGINT,3L)))),false);
  tupleDomain=withColumnDomains(ImmutableMap.<Symbol,Domain>builder().put(A,testDomain).build());
  assertEquals(toPredicate(tupleDomain),and(lessThan(A,bigintLiteral(4L)),not(in(A,ImmutableList.of(1L,2L,3L)))));
  testDomain=Domain.create(ValueSet.ofRanges(Range.range(BIGINT,1L,true,3L,true),Range.range(BIGINT,5L,true,7L,true),Range.range(BIGINT,9L,true,11L,true)),false);
  tupleDomain=withColumnDomains(ImmutableMap.<Symbol,Domain>builder().put(A,testDomain).build());
  assertEquals(toPredicate(tupleDomain),or(between(A,bigintLiteral(1L),bigintLiteral(3L)),(between(A,bigintLiteral(5L),bigintLiteral(7L))),(between(A,bigintLiteral(9L),bigintLiteral(11L)))));
  testDomain=Domain.create(ValueSet.ofRanges(Range.lessThan(BIGINT,4L)).intersect(ValueSet.all(BIGINT).subtract(ValueSet.ofRanges(Range.equal(BIGINT,1L),Range.equal(BIGINT,2L),Range.equal(BIGINT,3L)))).union(ValueSet.ofRanges(Range.range(BIGINT,7L,true,9L,true))),false);
  tupleDomain=withColumnDomains(ImmutableMap.<Symbol,Domain>builder().put(A,testDomain).build());
  assertEquals(toPredicate(tupleDomain),or(and(lessThan(A,bigintLiteral(4L)),not(in(A,ImmutableList.of(1L,2L,3L)))),between(A,bigintLiteral(7L),bigintLiteral(9L))));
  testDomain=Domain.create(ValueSet.ofRanges(Range.lessThan(BIGINT,4L)).intersect(ValueSet.all(BIGINT).subtract(ValueSet.ofRanges(Range.equal(BIGINT,1L),Range.equal(BIGINT,2L),Range.equal(BIGINT,3L)))).union(ValueSet.ofRanges(Range.range(BIGINT,7L,false,9L,false),Range.range(BIGINT,11L,false,13L,false))),false);
  tupleDomain=withColumnDomains(ImmutableMap.<Symbol,Domain>builder().put(A,testDomain).build());
  assertEquals(toPredicate(tupleDomain),or(and(lessThan(A,bigintLiteral(4L)),not(in(A,ImmutableList.of(1L,2L,3L)))),and(greaterThan(A,bigintLiteral(7L)),lessThan(A,bigintLiteral(9L))),and(greaterThan(A,bigintLiteral(11L)),lessThan(A,bigintLiteral(13L)))));
}
