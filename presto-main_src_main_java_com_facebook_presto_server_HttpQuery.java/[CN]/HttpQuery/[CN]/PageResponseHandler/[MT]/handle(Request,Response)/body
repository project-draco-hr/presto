{
  if (isDone()) {
    return null;
  }
  try {
    if (response.getStatusCode() == Status.GONE.getStatusCode()) {
      done();
      return null;
    }
    if (response.getStatusCode() != Status.NO_CONTENT.getStatusCode()) {
      if (response.getStatusCode() != Status.OK.getStatusCode()) {
        fail(new UnexpectedResponseException(String.format("Expected response code to be 200, but was %s: %s",response.getStatusCode(),response.getStatusMessage()),request,response));
        return null;
      }
      String contentType=response.getHeader("Content-Type");
      if (!MediaType.valueOf(contentType).isCompatible(PRESTO_PAGES_TYPE)) {
        throw new UnexpectedResponseException(String.format("Expected %s response from server but got %s",PRESTO_PAGES_TYPE,contentType),request,response);
      }
      InputStreamSliceInput sliceInput=new InputStreamSliceInput(response.getInputStream());
      Iterator<Page> pageIterator=PagesSerde.readPages(sliceInput);
      while (pageIterator.hasNext()) {
        Page page=pageIterator.next();
        outputBuffer.addPage(page);
      }
    }
  }
 catch (  InterruptedException e) {
    Thread.currentThread().interrupt();
    fail(e);
    throw Throwables.propagate(e);
  }
catch (  Exception e) {
    log.warn(e,"Error fetching pages from  %s: status: %s %s",request.getUri(),response.getStatusCode(),response.getStatusMessage());
  }
  rescheduleRequest();
  return null;
}
