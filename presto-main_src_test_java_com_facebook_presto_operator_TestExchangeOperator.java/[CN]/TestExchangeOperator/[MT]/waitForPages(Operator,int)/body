{
  long endTime=System.nanoTime() + TimeUnit.SECONDS.toNanos(10);
  List<Page> outputPages=new ArrayList<>();
  boolean greaterThanZero=false;
  while (System.nanoTime() < endTime) {
    if (operator.isFinished()) {
      break;
    }
    if (operator.getOperatorContext().getOperatorStats().getSystemMemoryReservation().toBytes() > 0) {
      greaterThanZero=true;
      break;
    }
 else {
      Thread.sleep(10);
    }
  }
  assertTrue(greaterThanZero);
  while (outputPages.size() < expectedPageCount && System.nanoTime() < endTime) {
    assertEquals(operator.needsInput(),false);
    if (operator.isFinished()) {
      break;
    }
    Page outputPage=operator.getOutput();
    if (outputPage != null) {
      outputPages.add(outputPage);
    }
 else {
      Thread.sleep(10);
    }
  }
  Thread.sleep(10);
  assertEquals(operator.needsInput(),false);
  assertNull(operator.getOutput());
  assertEquals(outputPages.size(),expectedPageCount);
  for (  Page page : outputPages) {
    assertPageEquals(operator.getTypes(),page,PAGE);
  }
  assertEquals(operator.getOperatorContext().getOperatorStats().getSystemMemoryReservation().toBytes(),0);
  return outputPages;
}
