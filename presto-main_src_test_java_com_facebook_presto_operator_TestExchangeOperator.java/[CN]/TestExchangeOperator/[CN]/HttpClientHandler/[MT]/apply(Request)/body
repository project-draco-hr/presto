{
  ImmutableList<String> parts=ImmutableList.copyOf(Splitter.on("/").omitEmptyStrings().split(request.getUri().getPath()));
  assertEquals(parts.size(),2);
  String taskId=parts.get(0);
  int pageToken=Integer.parseInt(parts.get(1));
  Builder<String,String> headers=ImmutableListMultimap.builder();
  headers.put(PRESTO_PAGE_TOKEN,String.valueOf(pageToken));
  TaskBuffer taskBuffer=taskBuffers.getUnchecked(taskId);
  Page page=taskBuffer.getPage(pageToken);
  if (page != null) {
    headers.put(CONTENT_TYPE,PRESTO_PAGES);
    headers.put(PRESTO_PAGE_NEXT_TOKEN,String.valueOf(pageToken + 1));
    DynamicSliceOutput output=new DynamicSliceOutput(256);
    PagesSerde.writePages(blockEncodingSerde,output,page);
    return new TestingResponse(HttpStatus.OK,headers.build(),output.slice().getInput());
  }
 else   if (taskBuffer.isFinished()) {
    headers.put(PRESTO_PAGE_NEXT_TOKEN,String.valueOf(pageToken));
    return new TestingResponse(HttpStatus.GONE,headers.build(),new byte[0]);
  }
 else {
    headers.put(PRESTO_PAGE_NEXT_TOKEN,String.valueOf(pageToken));
    return new TestingResponse(HttpStatus.NO_CONTENT,headers.build(),new byte[0]);
  }
}
