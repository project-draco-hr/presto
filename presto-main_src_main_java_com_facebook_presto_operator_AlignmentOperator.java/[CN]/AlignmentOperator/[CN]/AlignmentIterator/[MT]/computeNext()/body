{
  if (cursors[0].getRemainingPositions() <= 0 && !iterators[0].hasNext()) {
    for (    Iterator<? extends Block> iterator : iterators) {
      checkState(!iterator.hasNext());
    }
    return endOfData();
  }
  int length=Integer.MAX_VALUE;
  for (int i=0; i < iterators.length; i++) {
    Iterator<? extends Block> iterator=iterators[i];
    BlockCursor cursor=cursors[i];
    if (cursor.getRemainingPositions() <= 0) {
      cursor=iterator.next().cursor();
      cursors[i]=cursor;
    }
    length=Math.min(length,cursor.getRemainingPositions());
  }
  Block[] blocks=new Block[iterators.length];
  for (int i=0; i < cursors.length; i++) {
    blocks[i]=cursors[i].getRegionAndAdvance(length);
  }
  Page page=new Page(blocks);
  operatorStats.addActualDataSize(page.getDataSize().toBytes());
  operatorStats.addActualPositionCount(page.getPositionCount());
  return page;
}
