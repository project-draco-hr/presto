{
  ArrayListMultimap<InetAddress,Node> nodesByHost=indexNodesByHost(nodeManager.getActiveDatasourceNodes(sourceName));
  List<Node> chosen=new ArrayList<>(limit);
  List<InetAddress> nonLocalHosts=new ArrayList<>();
  for (  InetAddress host : hosts) {
    List<Node> nodes=nodesByHost.get(host);
    if (nodes != null && !nodes.isEmpty()) {
      Node node=nodes.remove(0);
      scheduleLocal.incrementAndGet();
      chosen.add(node);
      if (chosen.size() == limit) {
        return ImmutableList.copyOf(chosen);
      }
    }
 else {
      nonLocalHosts.add(host);
    }
  }
  for (  InetAddress nonLocalHost : nonLocalHosts) {
    for (    Entry<InetAddress,Node> entry : ImmutableList.copyOf(nodesByHost.entries())) {
      if (isRackLocal(nonLocalHost,entry.getKey())) {
        nodesByHost.remove(entry.getKey(),entry.getValue());
        scheduleRack.incrementAndGet();
        chosen.add(entry.getValue());
        if (chosen.size() == limit) {
          return ImmutableList.copyOf(chosen);
        }
      }
    }
  }
  if (chosen.size() < limit) {
    int randomCount=limit - chosen.size();
    scheduleRandom.addAndGet(randomCount);
    chosen.addAll(limit(shuffle(nodesByHost.values()),randomCount));
  }
  return ImmutableList.copyOf(chosen);
}
