{
  Set<ComparisonExpression> comparisons=IterableTransformer.on(extractConjuncts(predicate)).select(instanceOf(ComparisonExpression.class)).cast(ComparisonExpression.class).select(or(matchesPattern(ComparisonExpression.Type.EQUAL,QualifiedNameReference.class,StringLiteral.class),matchesPattern(ComparisonExpression.Type.EQUAL,StringLiteral.class,QualifiedNameReference.class))).set();
  ImmutableMap.Builder<T,String> filters=ImmutableMap.builder();
  for (  ComparisonExpression comparison : comparisons) {
    QualifiedNameReference reference;
    StringLiteral literal;
    if (comparison.getLeft() instanceof QualifiedNameReference) {
      reference=(QualifiedNameReference)comparison.getLeft();
      literal=(StringLiteral)comparison.getRight();
    }
 else {
      reference=(QualifiedNameReference)comparison.getRight();
      literal=(StringLiteral)comparison.getRight();
    }
    Symbol symbol=Symbol.fromQualifiedName(reference.getName());
    String value=literal.getValue();
    T columnHandle=mappings.get(symbol);
    if (columnHandle != null) {
      filters.put(columnHandle,value);
    }
  }
  return filters.build();
}
