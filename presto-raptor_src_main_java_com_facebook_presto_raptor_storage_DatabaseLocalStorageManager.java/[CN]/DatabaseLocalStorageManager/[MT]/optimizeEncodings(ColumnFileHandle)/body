{
  UUID shardUuid=columnFileHandle.getShardUuid();
  File shardPath=getShardPath(baseStorageDir,shardUuid);
  ImmutableList.Builder<Iterable<Block>> sourcesBuilder=ImmutableList.builder();
  ColumnFileHandle.Builder builder=ColumnFileHandle.builder(shardUuid,blockEncodingSerde);
  for (  Map.Entry<ConnectorColumnHandle,File> entry : columnFileHandle.getFiles().entrySet()) {
    File file=entry.getValue();
    RaptorColumnHandle columnHandle=checkType(entry.getKey(),RaptorColumnHandle.class,"columnHandle");
    if (file.length() > 0) {
      Slice slice=mappedFileCache.getUnchecked(file.getAbsoluteFile());
      checkState(file.length() == slice.length(),"File %s, length %s was mapped to Slice length %s",file.getAbsolutePath(),file.length(),slice.length());
      BlocksFileReader blocks=BlocksFileReader.readBlocks(blockEncodingSerde,slice);
      BlocksFileStats stats=blocks.getStats();
      boolean rleEncode=stats.getAvgRunLength() > RUN_LENGTH_AVERAGE_CUTOFF;
      boolean dicEncode=stats.getUniqueCount() < DICTIONARY_CARDINALITY_CUTOFF;
      BlocksFileEncoding encoding=defaultEncoding;
      if (ENABLE_OPTIMIZATION) {
        if (dicEncode && rleEncode) {
          encoding=BlocksFileEncoding.DIC_RLE;
        }
 else         if (dicEncode) {
          encoding=BlocksFileEncoding.DIC_RAW;
        }
 else         if (rleEncode) {
          encoding=BlocksFileEncoding.RLE;
        }
      }
      File outputFile=getColumnFile(shardPath,columnHandle,encoding);
      Files.createParentDirs(outputFile);
      if (encoding == defaultEncoding) {
        Files.move(file,outputFile);
        builder.addColumn(columnHandle,outputFile);
      }
 else {
        sourcesBuilder.add(blocks);
        builder.addColumn(columnHandle,outputFile,encoding);
      }
    }
 else {
      File outputFile=getColumnFile(shardPath,columnHandle,defaultEncoding);
      builder.addColumn(columnHandle,outputFile);
    }
  }
  List<Iterable<Block>> sources=sourcesBuilder.build();
  ColumnFileHandle targetFileHandle=builder.build();
  if (!sources.isEmpty()) {
    importData(new RaptorPageSource(sources),targetFileHandle);
  }
  targetFileHandle.commit();
  return targetFileHandle;
}
