{
  final RaptorOutputTableHandle table=checkType(outputTableHandle,RaptorOutputTableHandle.class,"outputTableHandle");
  long tableId=dbi.inTransaction(new TransactionCallback<Long>(){
    @Override public Long inTransaction(    Handle dbiHandle,    TransactionStatus status){
      MetadataDao dao=dbiHandle.attach(MetadataDao.class);
      long tableId=dao.insertTable(connectorId,table.getSchemaName(),table.getTableName());
      for (int i=0; i < table.getColumnTypes().size(); i++) {
        RaptorColumnHandle column=table.getColumnHandles().get(i);
        Type columnType=table.getColumnTypes().get(i);
        dao.insertColumn(tableId,i + 1,column.getColumnName(),i,columnType.getName());
      }
      return tableId;
    }
  }
);
  ImmutableMap.Builder<UUID,String> shards=ImmutableMap.builder();
  for (  String fragment : fragments) {
    Iterator<String> split=Splitter.on(':').split(fragment).iterator();
    String nodeId=split.next();
    UUID shardUuid=UUID.fromString(split.next());
    shards.put(shardUuid,nodeId);
  }
  shardManager.commitUnpartitionedTable(tableId,shards.build());
}
