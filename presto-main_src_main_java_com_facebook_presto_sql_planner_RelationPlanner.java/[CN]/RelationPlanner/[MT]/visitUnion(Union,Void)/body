{
  checkArgument(!node.getRelations().isEmpty(),"No relations specified for UNION");
  List<Symbol> unionOutputSymbols=null;
  ImmutableList.Builder<PlanNode> sources=ImmutableList.builder();
  ImmutableListMultimap.Builder<Symbol,Symbol> symbolMapping=ImmutableListMultimap.builder();
  List<RelationPlan> subPlans=IterableTransformer.on(node.getRelations()).transform(new Function<Relation,RelationPlan>(){
    @Override public RelationPlan apply(    Relation relation){
      return process(relation,context);
    }
  }
).list();
  boolean hasSampleWeight=false;
  for (  RelationPlan subPlan : subPlans) {
    if (subPlan.getSampleWeight().isPresent()) {
      hasSampleWeight=true;
      break;
    }
  }
  Optional<Symbol> outputSampleWeight=Optional.absent();
  for (  RelationPlan relationPlan : subPlans) {
    if (hasSampleWeight && !relationPlan.getSampleWeight().isPresent()) {
      relationPlan=addConstantSampleWeight(relationPlan);
    }
    List<Symbol> childOutputSymobls=relationPlan.getOutputSymbols();
    if (unionOutputSymbols == null) {
      TupleDescriptor descriptor=relationPlan.getDescriptor();
      ImmutableList.Builder<Symbol> outputSymbolBuilder=ImmutableList.builder();
      for (      Field field : descriptor.getVisibleFields()) {
        int fieldIndex=descriptor.indexOf(field);
        Symbol symbol=childOutputSymobls.get(fieldIndex);
        outputSymbolBuilder.add(symbolAllocator.newSymbol(symbol.getName(),symbolAllocator.getTypes().get(symbol)));
      }
      unionOutputSymbols=outputSymbolBuilder.build();
      outputSampleWeight=relationPlan.getSampleWeight();
    }
    TupleDescriptor descriptor=relationPlan.getDescriptor();
    checkArgument(descriptor.getVisibleFieldCount() == unionOutputSymbols.size(),"Expected relation to have %s symbols but has %s symbols",descriptor.getVisibleFieldCount(),unionOutputSymbols.size());
    int unionFieldId=0;
    for (    Field field : descriptor.getVisibleFields()) {
      int fieldIndex=descriptor.indexOf(field);
      symbolMapping.put(unionOutputSymbols.get(unionFieldId),childOutputSymobls.get(fieldIndex));
      unionFieldId++;
    }
    sources.add(relationPlan.getRoot());
  }
  PlanNode planNode=new UnionNode(idAllocator.getNextId(),sources.build(),symbolMapping.build());
  if (node.isDistinct()) {
    planNode=distinct(planNode);
  }
  return new RelationPlan(planNode,analysis.getOutputDescriptor(node),planNode.getOutputSymbols(),outputSampleWeight);
}
