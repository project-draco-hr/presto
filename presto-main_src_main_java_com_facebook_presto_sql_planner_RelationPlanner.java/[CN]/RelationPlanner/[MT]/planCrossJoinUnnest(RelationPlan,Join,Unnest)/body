{
  RelationType unnestOutputDescriptor=analysis.getOutputDescriptor(node);
  ImmutableList.Builder<Symbol> unnestedSymbolsBuilder=ImmutableList.builder();
  for (  Field field : unnestOutputDescriptor.getVisibleFields()) {
    Symbol symbol=symbolAllocator.newSymbol(field);
    unnestedSymbolsBuilder.add(symbol);
  }
  ImmutableList<Symbol> unnestedSymbols=unnestedSymbolsBuilder.build();
  PlanBuilder planBuilder=initializePlanBuilder(leftPlan);
  planBuilder=planBuilder.appendProjections(node.getExpressions(),symbolAllocator,idAllocator);
  TranslationMap translations=planBuilder.getTranslations();
  ProjectNode projectNode=checkType(planBuilder.getRoot(),ProjectNode.class,"planBuilder.getRoot()");
  ImmutableMap.Builder<Symbol,List<Symbol>> unnestSymbols=ImmutableMap.builder();
  UnmodifiableIterator<Symbol> unnestedSymbolsIterator=unnestedSymbols.iterator();
  for (  Expression expression : node.getExpressions()) {
    Type type=analysis.getType(expression);
    Symbol inputSymbol=translations.get(expression);
    if (type instanceof ArrayType) {
      unnestSymbols.put(inputSymbol,ImmutableList.of(unnestedSymbolsIterator.next()));
    }
 else     if (type instanceof MapType) {
      unnestSymbols.put(inputSymbol,ImmutableList.of(unnestedSymbolsIterator.next(),unnestedSymbolsIterator.next()));
    }
 else {
      throw new IllegalArgumentException("Unsupported type for UNNEST: " + type);
    }
  }
  Optional<Symbol> ordinalitySymbol=node.isWithOrdinality() ? Optional.of(unnestedSymbolsIterator.next()) : Optional.empty();
  checkState(!unnestedSymbolsIterator.hasNext(),"Not all output symbols were matched with input symbols");
  UnnestNode unnestNode=new UnnestNode(idAllocator.getNextId(),projectNode,leftPlan.getOutputSymbols(),unnestSymbols.build(),ordinalitySymbol);
  return new RelationPlan(unnestNode,analysis.getScope(joinNode),unnestNode.getOutputSymbols(),Optional.empty());
}
