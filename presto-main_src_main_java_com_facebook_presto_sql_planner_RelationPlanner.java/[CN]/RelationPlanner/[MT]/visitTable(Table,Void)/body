{
  if (!node.getName().getPrefix().isPresent()) {
    Query namedQuery=analysis.getNamedQuery(node);
    if (namedQuery != null) {
      RelationPlan subPlan=process(namedQuery,null);
      return new RelationPlan(subPlan.getRoot(),analysis.getOutputDescriptor(node),subPlan.getOutputSymbols());
    }
  }
  TupleDescriptor descriptor=analysis.getOutputDescriptor(node);
  TableHandle handle=analysis.getTableHandle(node);
  ImmutableList.Builder<Symbol> outputSymbolsBuilder=ImmutableList.builder();
  ImmutableMap.Builder<Symbol,ColumnHandle> columns=ImmutableMap.builder();
  for (int i=0; i < descriptor.getFields().size(); i++) {
    Field field=descriptor.getFields().get(i);
    Symbol symbol=symbolAllocator.newSymbol(field.getName().get(),field.getType());
    outputSymbolsBuilder.add(symbol);
    columns.put(symbol,analysis.getColumn(field));
  }
  List<Symbol> planOutputSymbols=outputSymbolsBuilder.build();
  Optional<ColumnHandle> sampleWeightColumn=metadata.getSampleWeightColumnHandle(handle);
  Symbol sampleWeightSymbol=null;
  if (sampleWeightColumn.isPresent()) {
    sampleWeightSymbol=symbolAllocator.newSymbol("$sampleWeight",Type.BIGINT);
    outputSymbolsBuilder.add(sampleWeightSymbol);
    columns.put(sampleWeightSymbol,sampleWeightColumn.get());
  }
  List<Symbol> nodeOutputSymbols=outputSymbolsBuilder.build();
  PlanNode root=new TableScanNode(idAllocator.getNextId(),handle,nodeOutputSymbols,columns.build(),null,Optional.<GeneratedPartitions>absent());
  if (sampleWeightSymbol != null) {
    root=new MaterializeSampleNode(idAllocator.getNextId(),root,sampleWeightSymbol);
  }
  return new RelationPlan(root,descriptor,planOutputSymbols);
}
