{
  Scope scope=analysis.getScope(node);
  ImmutableList.Builder<Symbol> outputSymbolsBuilder=ImmutableList.builder();
  for (  Field field : scope.getRelationType().getVisibleFields()) {
    Symbol symbol=symbolAllocator.newSymbol(field);
    outputSymbolsBuilder.add(symbol);
  }
  ImmutableList.Builder<List<Expression>> rows=ImmutableList.builder();
  for (  Expression row : node.getRows()) {
    ImmutableList.Builder<Expression> values=ImmutableList.builder();
    if (row instanceof Row) {
      List<Expression> items=((Row)row).getItems();
      for (int i=0; i < items.size(); i++) {
        Expression expression=items.get(i);
        expression=ExpressionTreeRewriter.rewriteWith(new ParameterRewriter(analysis.getParameters(),analysis),expression);
        Object constantValue=evaluateConstantExpression(expression,analysis.getCoercions(),metadata,session,analysis.getColumnReferences(),analysis.getParameters());
        values.add(LiteralInterpreter.toExpression(constantValue,scope.getRelationType().getFieldByIndex(i).getType()));
      }
    }
 else {
      row=ExpressionTreeRewriter.rewriteWith(new ParameterRewriter(analysis.getParameters(),analysis),row);
      Object constantValue=evaluateConstantExpression(row,analysis.getCoercions(),metadata,session,analysis.getColumnReferences(),analysis.getParameters());
      values.add(LiteralInterpreter.toExpression(constantValue,scope.getRelationType().getFieldByIndex(0).getType()));
    }
    rows.add(values.build());
  }
  ValuesNode valuesNode=new ValuesNode(idAllocator.getNextId(),outputSymbolsBuilder.build(),rows.build());
  return new RelationPlan(valuesNode,scope,outputSymbolsBuilder.build(),Optional.empty());
}
