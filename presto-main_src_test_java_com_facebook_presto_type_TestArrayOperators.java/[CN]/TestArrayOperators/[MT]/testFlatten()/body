{
  assertFunction("flatten(ARRAY [ARRAY [TRUE, FALSE], ARRAY [FALSE]])",new ArrayType(BOOLEAN),ImmutableList.of(true,false,false));
  assertFunction("flatten(ARRAY [ARRAY [TRUE, FALSE], NULL])",new ArrayType(BOOLEAN),ImmutableList.of(true,false));
  assertFunction("flatten(ARRAY [ARRAY [TRUE, FALSE]])",new ArrayType(BOOLEAN),ImmutableList.of(true,false));
  assertFunction("flatten(ARRAY [NULL, ARRAY [TRUE, FALSE]])",new ArrayType(BOOLEAN),ImmutableList.of(true,false));
  assertFunction("flatten(ARRAY [ARRAY [TRUE], ARRAY [FALSE], ARRAY [TRUE, FALSE]])",new ArrayType(BOOLEAN),ImmutableList.of(true,false,true,false));
  assertFunction("flatten(ARRAY [NULL, ARRAY [TRUE], NULL, ARRAY [FALSE], ARRAY [FALSE, TRUE]])",new ArrayType(BOOLEAN),ImmutableList.of(true,false,false,true));
  assertFunction("flatten(ARRAY [ARRAY ['1', '2'], ARRAY ['3']])",new ArrayType(createVarcharType(1)),ImmutableList.of("1","2","3"));
  assertFunction("flatten(ARRAY [ARRAY ['1', '2'], NULL])",new ArrayType(createVarcharType(1)),ImmutableList.of("1","2"));
  assertFunction("flatten(ARRAY [NULL, ARRAY ['1', '2']])",new ArrayType(createVarcharType(1)),ImmutableList.of("1","2"));
  assertFunction("flatten(ARRAY [ARRAY ['0'], ARRAY ['1'], ARRAY ['2', '3']])",new ArrayType(createVarcharType(1)),ImmutableList.of("0","1","2","3"));
  assertFunction("flatten(ARRAY [NULL, ARRAY ['0'], NULL, ARRAY ['1'], ARRAY ['2', '3']])",new ArrayType(createVarcharType(1)),ImmutableList.of("0","1","2","3"));
  assertFunction("flatten(ARRAY [ARRAY [1, 2], ARRAY [3]])",new ArrayType(INTEGER),ImmutableList.of(1,2,3));
  assertFunction("flatten(ARRAY [ARRAY [1, 2], NULL])",new ArrayType(INTEGER),ImmutableList.of(1,2));
  assertFunction("flatten(ARRAY [NULL, ARRAY [1, 2]])",new ArrayType(INTEGER),ImmutableList.of(1,2));
  assertFunction("flatten(ARRAY [ARRAY [0], ARRAY [1], ARRAY [2, 3]])",new ArrayType(INTEGER),ImmutableList.of(0,1,2,3));
  assertFunction("flatten(ARRAY [NULL, ARRAY [0], NULL, ARRAY [1], ARRAY [2, 3]])",new ArrayType(INTEGER),ImmutableList.of(0,1,2,3));
  assertFunction("flatten(ARRAY [ARRAY [1.2, 2.2], ARRAY [3.2]])",new ArrayType(DOUBLE),ImmutableList.of(1.2,2.2,3.2));
  assertFunction("flatten(ARRAY [ARRAY [1.2, 2.2], NULL])",new ArrayType(DOUBLE),ImmutableList.of(1.2,2.2));
  assertFunction("flatten(ARRAY [NULL, ARRAY [1.2, 2.2]])",new ArrayType(DOUBLE),ImmutableList.of(1.2,2.2));
  assertFunction("flatten(ARRAY [ARRAY[0.2], ARRAY [1.2], ARRAY [2.2, 3.2]])",new ArrayType(DOUBLE),ImmutableList.of(0.2,1.2,2.2,3.2));
  assertFunction("flatten(ARRAY [NULL, ARRAY [0.2], NULL, ARRAY [1.2], ARRAY [2.2, 3.2]])",new ArrayType(DOUBLE),ImmutableList.of(0.2,1.2,2.2,3.2));
  assertFunction("flatten(ARRAY [ARRAY [ARRAY [1, 2], ARRAY [3, 4]], ARRAY [ARRAY [5, 6], ARRAY [7, 8]]])",new ArrayType(new ArrayType(INTEGER)),ImmutableList.of(ImmutableList.of(1,2),ImmutableList.of(3,4),ImmutableList.of(5,6),ImmutableList.of(7,8)));
  assertFunction("flatten(ARRAY [ARRAY [ARRAY [1, 2], ARRAY [3, 4]], NULL])",new ArrayType(new ArrayType(INTEGER)),ImmutableList.of(ImmutableList.of(1,2),ImmutableList.of(3,4)));
  assertFunction("flatten(ARRAY [NULL, ARRAY [ARRAY [5, 6], ARRAY [7, 8]]])",new ArrayType(new ArrayType(INTEGER)),ImmutableList.of(ImmutableList.of(5,6),ImmutableList.of(7,8)));
  assertFunction("flatten(ARRAY [ARRAY [MAP (ARRAY [1, 2], ARRAY [1, 2])], ARRAY [MAP (ARRAY [3, 4], ARRAY [3, 4])]])",new ArrayType(new MapType(INTEGER,INTEGER)),ImmutableList.of(ImmutableMap.of(1,1,2,2),ImmutableMap.of(3,3,4,4)));
  assertFunction("flatten(ARRAY [ARRAY [MAP (ARRAY [1, 2], ARRAY [1, 2])], NULL])",new ArrayType(new MapType(INTEGER,INTEGER)),ImmutableList.of(ImmutableMap.of(1,1,2,2)));
  assertFunction("flatten(ARRAY [NULL, ARRAY [MAP (ARRAY [3, 4], ARRAY [3, 4])]])",new ArrayType(new MapType(INTEGER,INTEGER)),ImmutableList.of(ImmutableMap.of(3,3,4,4)));
}
