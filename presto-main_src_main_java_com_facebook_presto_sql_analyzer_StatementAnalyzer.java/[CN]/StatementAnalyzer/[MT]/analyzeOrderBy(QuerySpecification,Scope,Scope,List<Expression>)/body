{
  List<SortItem> items=node.getOrderBy();
  ImmutableList.Builder<Expression> orderByExpressionsBuilder=ImmutableList.builder();
  if (!items.isEmpty()) {
    ImmutableMultimap.Builder<QualifiedName,Expression> byAliasBuilder=ImmutableMultimap.builder();
    for (    SelectItem item : node.getSelect().getSelectItems()) {
      if (item instanceof SingleColumn) {
        Optional<String> alias=((SingleColumn)item).getAlias();
        if (alias.isPresent()) {
          byAliasBuilder.put(QualifiedName.of(alias.get()),((SingleColumn)item).getExpression());
        }
      }
    }
    Multimap<QualifiedName,Expression> byAlias=byAliasBuilder.build();
    for (    SortItem item : items) {
      Expression expression=item.getSortKey();
      Expression orderByExpression=null;
      if (expression instanceof QualifiedNameReference && !((QualifiedNameReference)expression).getName().getPrefix().isPresent()) {
        QualifiedName name=((QualifiedNameReference)expression).getName();
        Collection<Expression> expressions=byAlias.get(name);
        if (expressions.size() > 1) {
          throw new SemanticException(AMBIGUOUS_ATTRIBUTE,expression,"'%s' in ORDER BY is ambiguous",name.getSuffix());
        }
        if (expressions.size() == 1) {
          orderByExpression=Iterables.getOnlyElement(expressions);
        }
      }
 else       if (expression instanceof LongLiteral) {
        long ordinal=((LongLiteral)expression).getValue();
        if (ordinal < 1 || ordinal > outputExpressions.size()) {
          throw new SemanticException(INVALID_ORDINAL,expression,"ORDER BY position %s is not in select list",ordinal);
        }
        int field=Ints.checkedCast(ordinal - 1);
        Type type=outputScope.getRelationType().getFieldByIndex(field).getType();
        if (!type.isOrderable()) {
          throw new SemanticException(TYPE_MISMATCH,node,"The type of expression in position %s is not orderable (actual: %s), and therefore cannot be used in ORDER BY",ordinal,type);
        }
        orderByExpression=outputExpressions.get(field);
      }
      if (orderByExpression == null) {
        orderByExpression=expression;
      }
      ExpressionAnalysis expressionAnalysis=analyzeExpression(orderByExpression,sourceScope);
      analysis.recordSubqueries(node,expressionAnalysis);
      Type type=expressionAnalysis.getType(orderByExpression);
      if (!type.isOrderable()) {
        throw new SemanticException(TYPE_MISMATCH,node,"Type %s is not orderable, and therefore cannot be used in ORDER BY: %s",type,expression);
      }
      orderByExpressionsBuilder.add(orderByExpression);
    }
  }
  List<Expression> orderByExpressions=orderByExpressionsBuilder.build();
  analysis.setOrderByExpressions(node,orderByExpressions);
  if (node.getSelect().isDistinct() && !outputExpressions.containsAll(orderByExpressions)) {
    throw new SemanticException(ORDER_BY_MUST_BE_IN_SELECT,node.getSelect(),"For SELECT DISTINCT, ORDER BY expressions must appear in select list");
  }
  return orderByExpressions;
}
