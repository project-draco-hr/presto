{
  String catalogName=session.getCatalog();
  String schemaName=session.getSchema();
  Optional<QualifiedName> schema=showTables.getSchema();
  if (schema.isPresent()) {
    List<String> parts=schema.get().getParts();
    if (parts.size() > 2) {
      throw new SemanticException(INVALID_SCHEMA_NAME,showTables,"Too many parts in schema name: %s",schema);
    }
    if (parts.size() == 2) {
      catalogName=parts.get(0);
    }
    schemaName=schema.get().getSuffix();
  }
  if (!metadata.listSchemaNames(session,catalogName).contains(schemaName)) {
    throw new SemanticException(MISSING_SCHEMA,showTables,"Schema '%s' does not exist",schemaName);
  }
  Expression predicate=equal(nameReference("table_schema"),new StringLiteral(schemaName));
  Optional<String> likePattern=showTables.getLikePattern();
  if (likePattern.isPresent()) {
    Expression likePredicate=new LikePredicate(nameReference("table_name"),new StringLiteral(likePattern.get()),null);
    predicate=logicalAnd(predicate,likePredicate);
  }
  Query query=simpleQuery(selectList(aliasedName("table_name","Table")),from(catalogName,TABLE_TABLES),predicate,ordering(ascending("table_name")));
  return process(query,context);
}
