{
  String catalogName=session.getCatalog();
  String schemaName=session.getSchema();
  QualifiedName schema=showTables.getSchema();
  if (schema != null) {
    List<String> parts=schema.getParts();
    if (parts.size() > 2) {
      throw new SemanticException(INVALID_SCHEMA_NAME,showTables,"too many parts in schema name: %s",schema);
    }
    if (parts.size() == 2) {
      catalogName=parts.get(0);
    }
    schemaName=schema.getSuffix();
  }
  Expression predicate=equal(nameReference("table_schema"),new StringLiteral(schemaName));
  String likePattern=showTables.getLikePattern();
  if (likePattern != null) {
    Expression likePredicate=new LikePredicate(nameReference("table_name"),new StringLiteral(likePattern),null);
    predicate=logicalAnd(predicate,likePredicate);
  }
  Query query=new Query(Optional.<With>absent(),new QuerySpecification(selectList(aliasedName("table_name","Table")),table(QualifiedName.of(catalogName,TABLE_TABLES.getSchemaName(),TABLE_TABLES.getTableName())),Optional.of(predicate),ImmutableList.<Expression>of(),Optional.<Expression>absent(),ImmutableList.of(ascending("table_name")),Optional.<String>absent()),ImmutableList.<SortItem>of(),Optional.<String>absent());
  return process(query,context);
}
