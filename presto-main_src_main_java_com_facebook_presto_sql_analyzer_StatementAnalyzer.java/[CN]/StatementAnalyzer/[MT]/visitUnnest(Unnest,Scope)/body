{
  ImmutableList.Builder<Field> outputFields=ImmutableList.builder();
  for (  Expression expression : node.getExpressions()) {
    ExpressionAnalysis expressionAnalysis=analyzeExpression(expression,scope);
    Type expressionType=expressionAnalysis.getType(expression);
    if (expressionType instanceof ArrayType) {
      outputFields.add(Field.newUnqualified(Optional.empty(),((ArrayType)expressionType).getElementType()));
    }
 else     if (expressionType instanceof MapType) {
      outputFields.add(Field.newUnqualified(Optional.empty(),((MapType)expressionType).getKeyType()));
      outputFields.add(Field.newUnqualified(Optional.empty(),((MapType)expressionType).getValueType()));
    }
 else {
      throw new PrestoException(INVALID_FUNCTION_ARGUMENT,"Cannot unnest type: " + expressionType);
    }
  }
  if (node.isWithOrdinality()) {
    outputFields.add(Field.newUnqualified(Optional.empty(),BIGINT));
  }
  return createScope(node,scope,outputFields.build());
}
