{
  ImmutableList.Builder<Field> outputFields=ImmutableList.builder();
  for (  SelectItem item : node.getSelect().getSelectItems()) {
    if (item instanceof AllColumns) {
      Optional<QualifiedName> starPrefix=((AllColumns)item).getPrefix();
      for (      Field field : inputTupleDescriptor.resolveFieldsWithPrefix(starPrefix)) {
        outputFields.add(Field.newUnqualified(field.getName(),field.getType()));
      }
    }
 else     if (item instanceof SingleColumn) {
      SingleColumn column=(SingleColumn)item;
      Expression expression=column.getExpression();
      Optional<String> alias=column.getAlias();
      if (!alias.isPresent()) {
        QualifiedName name=null;
        if (expression instanceof QualifiedNameReference) {
          name=((QualifiedNameReference)expression).getName();
        }
 else         if (expression instanceof DereferenceExpression) {
          name=DereferenceExpression.getQualifiedName((DereferenceExpression)expression);
        }
        if (name != null) {
          alias=Optional.of(getLast(name.getOriginalParts()));
        }
      }
      outputFields.add(Field.newUnqualified(alias,analysis.getType(expression)));
    }
 else {
      throw new IllegalArgumentException("Unsupported SelectItem type: " + item.getClass().getName());
    }
  }
  return new TupleDescriptor(outputFields.build());
}
