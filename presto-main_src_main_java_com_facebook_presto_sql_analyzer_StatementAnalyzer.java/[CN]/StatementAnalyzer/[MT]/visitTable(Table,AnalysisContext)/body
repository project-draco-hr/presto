{
  if (!table.getName().getPrefix().isPresent()) {
    String name=table.getName().getSuffix();
    Query query=context.getNamedQuery(name);
    if (query != null) {
      analysis.registerNamedQuery(table,query);
      RelationType queryDescriptor=analysis.getOutputDescriptor(query);
      ImmutableList.Builder<Field> fields=ImmutableList.builder();
      for (      Field field : queryDescriptor.getAllFields()) {
        fields.add(Field.newQualified(QualifiedName.of(name),field.getName(),field.getType(),false));
      }
      RelationType descriptor=new RelationType(fields.build());
      analysis.setOutputDescriptor(table,descriptor);
      return descriptor;
    }
  }
  QualifiedObjectName name=MetadataUtil.createQualifiedObjectName(session,table,table.getName());
  Optional<ViewDefinition> optionalView=metadata.getView(session,name);
  if (optionalView.isPresent()) {
    ViewDefinition view=optionalView.get();
    Query query=parseView(view.getOriginalSql(),name,table);
    analysis.registerNamedQuery(table,query);
    accessControl.checkCanSelectFromView(session.getRequiredTransactionId(),session.getIdentity(),name);
    RelationType descriptor=analyzeView(query,name,view.getCatalog(),view.getSchema(),view.getOwner(),table);
    if (isViewStale(view.getColumns(),descriptor.getVisibleFields())) {
      throw new SemanticException(VIEW_IS_STALE,table,"View '%s' is stale; it must be re-created",name);
    }
    analysis.setOutputDescriptor(table,descriptor);
    return descriptor;
  }
  Optional<TableHandle> tableHandle=metadata.getTableHandle(session,name);
  if (!tableHandle.isPresent()) {
    if (!metadata.getCatalogNames().containsKey(name.getCatalogName())) {
      throw new SemanticException(MISSING_CATALOG,table,"Catalog %s does not exist",name.getCatalogName());
    }
    if (!metadata.listSchemaNames(session,name.getCatalogName()).contains(name.getSchemaName())) {
      throw new SemanticException(MISSING_SCHEMA,table,"Schema %s does not exist",name.getSchemaName());
    }
    if (table.getName().getSuffix().equalsIgnoreCase("DUAL")) {
      throw new SemanticException(MISSING_TABLE,table,"DUAL table is no longer supported. Please use VALUES or FROM-less queries instead");
    }
    throw new SemanticException(MISSING_TABLE,table,"Table %s does not exist",name);
  }
  accessControl.checkCanSelectFromTable(session.getRequiredTransactionId(),session.getIdentity(),name);
  TableMetadata tableMetadata=metadata.getTableMetadata(session,tableHandle.get());
  Map<String,ColumnHandle> columnHandles=metadata.getColumnHandles(session,tableHandle.get());
  ImmutableList.Builder<Field> fields=ImmutableList.builder();
  for (  ColumnMetadata column : tableMetadata.getColumns()) {
    Field field=Field.newQualified(table.getName(),Optional.of(column.getName()),column.getType(),column.isHidden());
    fields.add(field);
    ColumnHandle columnHandle=columnHandles.get(column.getName());
    checkArgument(columnHandle != null,"Unknown field %s",field);
    analysis.setColumn(field,columnHandle);
  }
  analysis.registerTable(table,tableHandle.get());
  RelationType descriptor=new RelationType(fields.build());
  analysis.setOutputDescriptor(table,descriptor);
  return descriptor;
}
