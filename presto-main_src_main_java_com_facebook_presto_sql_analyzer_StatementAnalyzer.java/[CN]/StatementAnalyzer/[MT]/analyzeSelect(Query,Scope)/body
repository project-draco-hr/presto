{
  ImmutableList.Builder<FieldOrExpression> outputExpressionBuilder=ImmutableList.builder();
  for (  Expression expression : node.getSelect().getSelectItems()) {
    if (expression instanceof AllColumns) {
      Optional<QualifiedName> starPrefix=((AllColumns)expression).getPrefix();
      List<TupleDescriptor> descriptors=scope.getDescriptorsMatching(starPrefix);
      if (descriptors.isEmpty()) {
        if (starPrefix.isPresent()) {
          throw new SemanticException(MISSING_TABLE,expression,"Table '%s' not found",starPrefix.get());
        }
 else {
          throw new SemanticException(WILDCARD_WITHOUT_FROM,expression,"SELECT * not allowed in queries without FROM clause");
        }
      }
      for (      TupleDescriptor descriptor : descriptors) {
        for (        Field field : descriptor.getFields()) {
          outputExpressionBuilder.add(new FieldOrExpression(field));
        }
      }
    }
 else {
      Analyzer.analyzeExpression(metadata,scope,analysis,expression);
      outputExpressionBuilder.add(new FieldOrExpression(unalias(expression)));
    }
  }
  ImmutableList<FieldOrExpression> result=outputExpressionBuilder.build();
  analysis.setOutputExpressions(node,result);
  return result;
}
