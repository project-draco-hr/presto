{
  long addInputCalls=this.addInputCalls;
  long addInputWall=this.addInputWall.roundTo(NANOSECONDS);
  long addInputCpu=this.addInputCpu.roundTo(NANOSECONDS);
  long addInputUser=this.addInputUser.roundTo(NANOSECONDS);
  long inputDataSize=this.inputDataSize.toBytes();
  long inputPositions=this.inputPositions;
  long getOutputCalls=this.getOutputCalls;
  long getOutputWall=this.getOutputWall.roundTo(NANOSECONDS);
  long getOutputCpu=this.getOutputCpu.roundTo(NANOSECONDS);
  long getOutputUser=this.getOutputUser.roundTo(NANOSECONDS);
  long outputDataSize=this.outputDataSize.toBytes();
  long outputPositions=this.outputPositions;
  long blockedWall=this.blockedWall.roundTo(NANOSECONDS);
  long finishCalls=this.finishCalls;
  long finishWall=this.finishWall.roundTo(NANOSECONDS);
  long finishCpu=this.finishCpu.roundTo(NANOSECONDS);
  long finishUser=this.finishUser.roundTo(NANOSECONDS);
  long memoryReservation=this.memoryReservation.toBytes();
  long systemMemoryReservation=this.systemMemoryReservation.toBytes();
  Optional<BlockedReason> blockedReason=this.blockedReason;
  Mergeable<?> base=null;
  if (info instanceof Mergeable) {
    base=(Mergeable<?>)info;
  }
  for (  OperatorStats operator : operators) {
    checkArgument(operator.getOperatorId() == operatorId,"Expected operatorId to be %s but was %s",operatorId,operator.getOperatorId());
    addInputCalls+=operator.getAddInputCalls();
    addInputWall+=operator.getAddInputWall().roundTo(NANOSECONDS);
    addInputCpu+=operator.getAddInputCpu().roundTo(NANOSECONDS);
    addInputUser+=operator.getAddInputUser().roundTo(NANOSECONDS);
    inputDataSize+=operator.getInputDataSize().toBytes();
    inputPositions+=operator.getInputPositions();
    getOutputCalls+=operator.getGetOutputCalls();
    getOutputWall+=operator.getGetOutputWall().roundTo(NANOSECONDS);
    getOutputCpu+=operator.getGetOutputCpu().roundTo(NANOSECONDS);
    getOutputUser+=operator.getGetOutputUser().roundTo(NANOSECONDS);
    outputDataSize+=operator.getOutputDataSize().toBytes();
    outputPositions+=operator.getOutputPositions();
    finishCalls+=operator.getFinishCalls();
    finishWall+=operator.getFinishWall().roundTo(NANOSECONDS);
    finishCpu+=operator.getFinishCpu().roundTo(NANOSECONDS);
    finishUser+=operator.getFinishUser().roundTo(NANOSECONDS);
    blockedWall+=operator.getBlockedWall().roundTo(NANOSECONDS);
    memoryReservation+=operator.getMemoryReservation().toBytes();
    systemMemoryReservation+=operator.getSystemMemoryReservation().toBytes();
    if (operator.getBlockedReason().isPresent()) {
      blockedReason=operator.getBlockedReason();
    }
    Object info=operator.getInfo();
    if (base != null && info != null && base.getClass() == info.getClass()) {
      base=mergeInfo(base,info);
    }
  }
  return new OperatorStats(operatorId,operatorType,addInputCalls,new Duration(addInputWall,NANOSECONDS).convertToMostSuccinctTimeUnit(),new Duration(addInputCpu,NANOSECONDS).convertToMostSuccinctTimeUnit(),new Duration(addInputUser,NANOSECONDS).convertToMostSuccinctTimeUnit(),new DataSize(inputDataSize,BYTE).convertToMostSuccinctDataSize(),inputPositions,getOutputCalls,new Duration(getOutputWall,NANOSECONDS).convertToMostSuccinctTimeUnit(),new Duration(getOutputCpu,NANOSECONDS).convertToMostSuccinctTimeUnit(),new Duration(getOutputUser,NANOSECONDS).convertToMostSuccinctTimeUnit(),new DataSize(outputDataSize,BYTE).convertToMostSuccinctDataSize(),outputPositions,new Duration(blockedWall,NANOSECONDS).convertToMostSuccinctTimeUnit(),finishCalls,new Duration(finishWall,NANOSECONDS).convertToMostSuccinctTimeUnit(),new Duration(finishCpu,NANOSECONDS).convertToMostSuccinctTimeUnit(),new Duration(finishUser,NANOSECONDS).convertToMostSuccinctTimeUnit(),new DataSize(memoryReservation,BYTE).convertToMostSuccinctDataSize(),new DataSize(systemMemoryReservation,BYTE).convertToMostSuccinctDataSize(),blockedReason,base);
}
