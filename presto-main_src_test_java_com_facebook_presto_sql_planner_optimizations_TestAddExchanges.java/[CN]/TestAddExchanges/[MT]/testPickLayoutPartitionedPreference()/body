{
  Comparator<ActualProperties> preference=streamingExecutionPreference(PreferredProperties.partitioned());
  List<ActualProperties> input=ImmutableList.<ActualProperties>builder().add(builder().partitioned(ImmutableSet.of(symbol("a"))).build()).add(builder().unpartitioned().build()).add(builder().partitioned().local(ImmutableList.of(grouped("a","b"))).build()).add(builder().partitioned().build()).add(builder().hashPartitioned(ImmutableList.of(symbol("a"))).build()).add(builder().partitioned(ImmutableSet.of()).local(ImmutableList.of(constant("a"),sorted("b",ASC_NULLS_FIRST))).build()).add(builder().unpartitioned().local(ImmutableList.of(sorted("a",ASC_NULLS_FIRST))).build()).build();
  List<ActualProperties> expected=ImmutableList.<ActualProperties>builder().add(builder().partitioned(ImmutableSet.of(symbol("a"))).build()).add(builder().partitioned().local(ImmutableList.of(grouped("a","b"))).build()).add(builder().partitioned().build()).add(builder().hashPartitioned(ImmutableList.of(symbol("a"))).build()).add(builder().partitioned(ImmutableSet.of()).local(ImmutableList.of(constant("a"),sorted("b",ASC_NULLS_FIRST))).build()).add(builder().unpartitioned().build()).add(builder().unpartitioned().local(ImmutableList.of(sorted("a",ASC_NULLS_FIRST))).build()).build();
  Assert.assertEquals(stableSort(input,preference),expected);
}
