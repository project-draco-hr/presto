{
  MaterializedResult result=computeActual("SHOW FUNCTIONS");
  ImmutableMultimap<String,MaterializedRow> functions=Multimaps.index(result.getMaterializedRows(),new Function<MaterializedRow,String>(){
    @Override public String apply(    MaterializedRow input){
      assertEquals(input.getFieldCount(),5);
      return (String)input.getField(0);
    }
  }
);
  assertTrue(functions.containsKey("avg"),"Expected function names " + functions + " to contain 'avg'");
  assertEquals(functions.get("avg").asList().size(),2);
  assertEquals(functions.get("avg").asList().get(0).getField(1),"double");
  assertEquals(functions.get("avg").asList().get(0).getField(2),"bigint");
  assertEquals(functions.get("avg").asList().get(0).getField(3),"aggregate");
  assertEquals(functions.get("avg").asList().get(1).getField(1),"double");
  assertEquals(functions.get("avg").asList().get(1).getField(2),"double");
  assertEquals(functions.get("avg").asList().get(0).getField(3),"aggregate");
  assertTrue(functions.containsKey("abs"),"Expected function names " + functions + " to contain 'abs'");
  assertEquals(functions.get("abs").asList().get(0).getField(3),"scalar");
  assertTrue(functions.containsKey("rand"),"Expected function names " + functions + " to contain 'rand'");
  assertEquals(functions.get("rand").asList().get(0).getField(3),"scalar (non-deterministic)");
  assertTrue(functions.containsKey("rank"),"Expected function names " + functions + " to contain 'rank'");
  assertEquals(functions.get("rank").asList().get(0).getField(3),"window");
  assertTrue(functions.containsKey("rank"),"Expected function names " + functions + " to contain 'split_part'");
  assertEquals(functions.get("split_part").asList().get(0).getField(1),"varchar");
  assertEquals(functions.get("split_part").asList().get(0).getField(2),"varchar, varchar, bigint");
  assertEquals(functions.get("split_part").asList().get(0).getField(3),"scalar");
  assertFalse(functions.containsKey("like"),"Expected function names " + functions + " not to contain 'like'");
}
