{
  assertQuery("SELECT (SELECT (SELECT (SELECT 1)))");
  assertQuery("SELECT * FROM lineitem WHERE orderkey = \n" + "(SELECT max(orderkey) FROM orders)");
  assertQuery("SELECT * FROM lineitem WHERE orderkey = \n" + "(SELECT orderkey FROM orders WHERE 0=1)");
  assertQuery("SELECT * FROM lineitem WHERE \n" + "(SELECT orderkey FROM orders WHERE 0=1) " + "is null");
  assertQuery("SELECT * FROM lineitem WHERE \n" + "(SELECT orderkey FROM orders WHERE 0=1) " + "is not null");
  assertQuery("SELECT (SELECT 1) IN (1, 2, 3)");
  assertQuery("SELECT (SELECT 1) IN (   2, 3)");
  assertQuery("SELECT (SELECT 1) = (SELECT 3)");
  assertQuery("SELECT (SELECT 1) < (SELECT 3)");
  assertQuery("SELECT COUNT(*) FROM lineitem WHERE " + "(SELECT min(orderkey) FROM orders)" + "<"+ "(SELECT max(orderkey) FROM orders)");
  assertQuery("SELECT DISTINCT orderkey FROM lineitem " + "WHERE orderkey BETWEEN" + "   (SELECT avg(orderkey) FROM orders) - 10 "+ "   AND"+ "   (SELECT avg(orderkey) FROM orders) + 10");
  for (  String joinType : ImmutableList.of("INNER","LEFT OUTER")) {
    assertQuery("SELECT l.orderkey, COUNT(*) " + "FROM lineitem l " + joinType + " JOIN orders o ON l.orderkey = o.orderkey "+ "WHERE l.orderkey BETWEEN"+ "   (SELECT avg(orderkey) FROM orders) - 10 "+ "   AND"+ "   (SELECT avg(orderkey) FROM orders) + 10 "+ "GROUP BY l.orderkey");
  }
  assertQuery("SELECT orderkey, totalprice FROM orders ORDER BY (SELECT 2)");
  String multipleRowsErrorMsg="Scalar sub-query has returned multiple rows";
  assertQueryFails("SELECT * FROM lineitem WHERE orderkey = (\n" + "SELECT orderkey FROM orders ORDER BY totalprice)",multipleRowsErrorMsg);
  assertQueryFails("SELECT orderkey, totalprice FROM orders ORDER BY (VALUES 1, 2)",multipleRowsErrorMsg);
  assertQuery("SELECT custkey, (SELECT DISTINCT custkey FROM orders ORDER BY custkey LIMIT 1) FROM orders");
}
