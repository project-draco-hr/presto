{
  assertQuery("SELECT 1 FROM (VALUES (ARRAY[1])) AS t (a) CROSS JOIN UNNEST(a)","SELECT 1");
  assertQuery("SELECT x[1] FROM UNNEST(ARRAY[ARRAY[2, 2, 3]]) t(x)","SELECT 2");
  assertQuery("SELECT x[1][2] FROM UNNEST(ARRAY[ARRAY[ARRAY[2, 2, 3]]]) t(x)","SELECT 2");
  assertQuery("SELECT x[2] FROM UNNEST(ARRAY[MAP(ARRAY[1,2], ARRAY['hello', 'hi'])]) t(x)","SELECT 'hi'");
  assertQuery("SELECT * FROM UNNEST(ARRAY[1, 2, 3])","SELECT * FROM VALUES (1), (2), (3)");
  assertQuery("SELECT a FROM UNNEST(ARRAY[1, 2, 3]) t(a)","SELECT * FROM VALUES (1), (2), (3)");
  assertQuery("SELECT a, b FROM UNNEST(ARRAY[1, 2], ARRAY[3, 4]) t(a, b)","SELECT * FROM VALUES (1, 3), (2, 4)");
  assertQuery("SELECT a, b FROM UNNEST(ARRAY[1, 2, 3], ARRAY[4, 5]) t(a, b)","SELECT * FROM VALUES (1, 4), (2, 5), (3, NULL)");
  assertQuery("SELECT a FROM UNNEST(ARRAY[1, 2, 3], ARRAY[4, 5]) t(a, b)","SELECT * FROM VALUES 1, 2, 3");
  assertQuery("SELECT b FROM UNNEST(ARRAY[1, 2, 3], ARRAY[4, 5]) t(a, b)","SELECT * FROM VALUES 4, 5, NULL");
  assertQuery("SELECT count(*) FROM UNNEST(ARRAY[1, 2, 3], ARRAY[4, 5])","SELECT 3");
  assertQuery("SELECT a FROM UNNEST(ARRAY['kittens', 'puppies']) t(a)","SELECT * FROM VALUES ('kittens'), ('puppies')");
  assertQuery("" + "SELECT c " + "FROM UNNEST(ARRAY[1, 2, 3], ARRAY[4, 5]) t(a, b) "+ "CROSS JOIN (values (8), (9)) t2(c)","SELECT * FROM VALUES 8, 8, 8, 9, 9, 9");
  assertQuery("" + "SELECT a.custkey, t.e " + "FROM (SELECT custkey, ARRAY[1, 2, 3] AS my_array FROM orders ORDER BY orderkey LIMIT 1) a "+ "CROSS JOIN UNNEST(my_array) t(e)","SELECT * FROM (SELECT custkey FROM orders ORDER BY orderkey LIMIT 1) CROSS JOIN (VALUES (1), (2), (3))");
  assertQuery("" + "SELECT a.custkey, t.e " + "FROM (SELECT custkey, ARRAY[1, 2, 3] AS my_array FROM orders ORDER BY orderkey LIMIT 1) a, "+ "UNNEST(my_array) t(e)","SELECT * FROM (SELECT custkey FROM orders ORDER BY orderkey LIMIT 1) CROSS JOIN (VALUES (1), (2), (3))");
  assertQuery("SELECT * FROM UNNEST(ARRAY[0, 1]) CROSS JOIN UNNEST(ARRAY[0, 1]) CROSS JOIN UNNEST(ARRAY[0, 1])","SELECT * FROM VALUES (0, 0, 0), (0, 0, 1), (0, 1, 0), (0, 1, 1), (1, 0, 0), (1, 0, 1), (1, 1, 0), (1, 1, 1)");
  assertQuery("SELECT * FROM UNNEST(ARRAY[0, 1]), UNNEST(ARRAY[0, 1]), UNNEST(ARRAY[0, 1])","SELECT * FROM VALUES (0, 0, 0), (0, 0, 1), (0, 1, 0), (0, 1, 1), (1, 0, 0), (1, 0, 1), (1, 1, 0), (1, 1, 1)");
  assertQuery("SELECT a, b FROM UNNEST(MAP(ARRAY[1,2], ARRAY['cat', 'dog'])) t(a, b)","SELECT * FROM VALUES (1, 'cat'), (2, 'dog')");
  assertQuery("SELECT a, b FROM UNNEST(MAP(ARRAY[1,2], ARRAY['cat', NULL])) t(a, b)","SELECT * FROM VALUES (1, 'cat'), (2, NULL)");
  assertQuery("SELECT 1 FROM (VALUES (ARRAY[1])) AS t (a) CROSS JOIN UNNEST(a) WITH ORDINALITY","SELECT 1");
  assertQuery("SELECT * FROM UNNEST(ARRAY[1, 2, 3]) WITH ORDINALITY","SELECT * FROM VALUES (1, 1), (2, 2), (3, 3)");
  assertQuery("SELECT b FROM UNNEST(ARRAY[10, 20, 30]) WITH ORDINALITY t(a, b)","SELECT * FROM VALUES (1), (2), (3)");
  assertQuery("SELECT a, b, c FROM UNNEST(ARRAY[10, 20, 30], ARRAY[4, 5]) WITH ORDINALITY t(a, b, c)","SELECT * FROM VALUES (10, 4, 1), (20, 5, 2), (30, NULL, 3)");
  assertQuery("SELECT a, b FROM UNNEST(ARRAY['kittens', 'puppies']) WITH ORDINALITY t(a, b)","SELECT * FROM VALUES ('kittens', 1), ('puppies', 2)");
  assertQuery("" + "SELECT c " + "FROM UNNEST(ARRAY[1, 2, 3], ARRAY[4, 5]) WITH ORDINALITY t(a, b, c) "+ "CROSS JOIN (values (8), (9)) t2(d)","SELECT * FROM VALUES 1, 1, 2, 2, 3, 3");
  assertQuery("" + "SELECT a.custkey, t.e, t.f " + "FROM (SELECT custkey, ARRAY[10, 20, 30] AS my_array FROM orders ORDER BY orderkey LIMIT 1) a "+ "CROSS JOIN UNNEST(my_array) WITH ORDINALITY t(e, f)","SELECT * FROM (SELECT custkey FROM orders ORDER BY orderkey LIMIT 1) CROSS JOIN (VALUES (10, 1), (20, 2), (30, 3))");
  assertQuery("" + "SELECT a.custkey, t.e, t.f " + "FROM (SELECT custkey, ARRAY[10, 20, 30] AS my_array FROM orders ORDER BY orderkey LIMIT 1) a, "+ "UNNEST(my_array) WITH ORDINALITY t(e, f)","SELECT * FROM (SELECT custkey FROM orders ORDER BY orderkey LIMIT 1) CROSS JOIN (VALUES (10, 1), (20, 2), (30, 3))");
  assertQuery("SELECT * FROM orders, UNNEST(ARRAY[1])","SELECT orders.*, 1 FROM orders");
}
