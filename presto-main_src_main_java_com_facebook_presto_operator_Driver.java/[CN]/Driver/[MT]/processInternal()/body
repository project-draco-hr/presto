{
  checkLockHeld("Lock must be held to call processInternal");
  try {
    if (!newSources.isEmpty()) {
      processNewSources();
    }
    boolean movedPage=false;
    for (int i=0; i < operators.size() - 1 && !driverContext.isDone(); i++) {
      Operator current=operators.get(i);
      Operator next=operators.get(i + 1);
      if (!isBlocked(current).isDone()) {
        continue;
      }
      if (!isBlocked(next).isDone()) {
        continue;
      }
      if (!current.isFinished() && next.needsInput()) {
        current.getOperatorContext().startIntervalTimer();
        Page page=current.getOutput();
        current.getOperatorContext().recordGetOutput(page);
        if (page != null) {
          next.getOperatorContext().startIntervalTimer();
          next.addInput(page);
          next.getOperatorContext().recordAddInput(page);
          movedPage=true;
        }
      }
      if (current.isFinished()) {
        next.getOperatorContext().startIntervalTimer();
        next.finish();
        next.getOperatorContext().recordFinish();
      }
    }
    if (!movedPage) {
      List<Operator> blockedOperators=new ArrayList<>();
      List<ListenableFuture<?>> blockedFutures=new ArrayList<>();
      for (      Operator operator : operators) {
        ListenableFuture<?> blocked=isBlocked(operator);
        if (!blocked.isDone()) {
          blockedOperators.add(operator);
          blockedFutures.add(blocked);
        }
      }
      if (!blockedFutures.isEmpty()) {
        ListenableFuture<?> blocked=firstFinishedFuture(blockedFutures);
        driverContext.recordBlocked(blocked);
        for (        Operator operator : blockedOperators) {
          operator.getOperatorContext().recordBlocked(blocked);
        }
        return blocked;
      }
    }
    return NOT_BLOCKED;
  }
 catch (  Throwable t) {
    driverContext.failed(t);
    throw t;
  }
}
