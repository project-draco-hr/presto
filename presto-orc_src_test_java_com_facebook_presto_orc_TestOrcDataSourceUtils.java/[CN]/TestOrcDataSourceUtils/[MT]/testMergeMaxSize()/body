{
  List<DiskRange> consistent10ByteGap=ImmutableList.of(new DiskRange(100,90),new DiskRange(200,90),new DiskRange(300,90));
  assertEquals(mergeAdjacentDiskRanges(consistent10ByteGap,new DataSize(10,BYTE),new DataSize(0,BYTE)),consistent10ByteGap);
  assertEquals(mergeAdjacentDiskRanges(consistent10ByteGap,new DataSize(10,BYTE),new DataSize(100,BYTE)),consistent10ByteGap);
  assertEquals(mergeAdjacentDiskRanges(consistent10ByteGap,new DataSize(10,BYTE),new DataSize(190,BYTE)),ImmutableList.of(new DiskRange(100,190),new DiskRange(300,90)));
  assertEquals(mergeAdjacentDiskRanges(consistent10ByteGap,new DataSize(10,BYTE),new DataSize(200,BYTE)),ImmutableList.of(new DiskRange(100,190),new DiskRange(300,90)));
  assertEquals(mergeAdjacentDiskRanges(consistent10ByteGap,new DataSize(10,BYTE),new DataSize(290,BYTE)),ImmutableList.of(new DiskRange(100,290)));
  List<DiskRange> middle10ByteGap=ImmutableList.of(new DiskRange(100,80),new DiskRange(200,90),new DiskRange(300,80),new DiskRange(400,90));
  assertEquals(mergeAdjacentDiskRanges(middle10ByteGap,new DataSize(0,BYTE),new DataSize(1,GIGABYTE)),middle10ByteGap);
  assertEquals(mergeAdjacentDiskRanges(middle10ByteGap,new DataSize(9,BYTE),new DataSize(1,GIGABYTE)),middle10ByteGap);
  assertEquals(mergeAdjacentDiskRanges(middle10ByteGap,new DataSize(10,BYTE),new DataSize(1,GIGABYTE)),ImmutableList.of(new DiskRange(100,80),new DiskRange(200,180),new DiskRange(400,90)));
  assertEquals(mergeAdjacentDiskRanges(middle10ByteGap,new DataSize(100,BYTE),new DataSize(1,GIGABYTE)),ImmutableList.of(new DiskRange(100,390)));
}
