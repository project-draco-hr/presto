{
  Type elementType=types.get("E");
  MethodType newType=METHOD_HANDLE.type().changeParameterType(0,Type.class).changeParameterType(1,ArrayConcatUtils.class);
  int[] permutedIndices=new int[newType.parameterCount()];
  permutedIndices[0]=1;
  permutedIndices[1]=0;
  for (int i=2; i < permutedIndices.length; i++) {
    permutedIndices[i]=i;
  }
  MethodHandle methodHandle=permuteArguments(METHOD_HANDLE,newType,permutedIndices);
  methodHandle=methodHandle.bindTo(elementType);
  MethodHandle instanceFactory=CONSTRUCTOR.bindTo(elementType);
  return new ScalarFunctionImplementation(false,ImmutableList.of(false,false),methodHandle,Optional.of(instanceFactory),isDeterministic());
}
