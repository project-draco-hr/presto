{
  Properties schema=new Properties();
  schema.setProperty("foo","bar");
  schema.setProperty("bar","baz");
  ImmutableList<HivePartitionKey> partitionKeys=ImmutableList.of(new HivePartitionKey("a",HiveType.STRING,"apple"),new HivePartitionKey("b",HiveType.LONG,"42"));
  ImmutableList<HostAddress> addresses=ImmutableList.of(HostAddress.fromParts("127.0.0.1",44),HostAddress.fromParts("127.0.0.1",45));
  HiveSplit expected=new HiveSplit("clientId","db","table","partitionId","path",42,88,schema,partitionKeys,addresses,SESSION);
  String json=codec.toJson(expected);
  HiveSplit actual=codec.fromJson(json);
  assertEquals(actual.getClientId(),expected.getClientId());
  assertEquals(actual.getDatabase(),expected.getDatabase());
  assertEquals(actual.getTable(),expected.getTable());
  assertEquals(actual.getPartitionName(),expected.getPartitionName());
  assertEquals(actual.getPath(),expected.getPath());
  assertEquals(actual.getStart(),expected.getStart());
  assertEquals(actual.getLength(),expected.getLength());
  assertEquals(actual.getSchema(),expected.getSchema());
  assertEquals(actual.getPartitionKeys(),expected.getPartitionKeys());
  assertEquals(actual.getAddresses(),expected.getAddresses());
  assertEquals(actual.getSession().getUser(),expected.getSession().getUser());
  assertEquals(actual.getSession().getLocale(),expected.getSession().getLocale());
  assertEquals(actual.getSession().getTimeZoneKey(),expected.getSession().getTimeZoneKey());
  assertEquals(actual.getSession().getStartTime(),expected.getSession().getStartTime());
}
