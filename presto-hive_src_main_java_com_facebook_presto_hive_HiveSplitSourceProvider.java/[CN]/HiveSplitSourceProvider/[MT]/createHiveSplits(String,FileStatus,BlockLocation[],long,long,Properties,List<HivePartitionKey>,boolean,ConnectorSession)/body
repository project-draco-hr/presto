{
  ImmutableList.Builder<HiveSplit> builder=ImmutableList.builder();
  if (splittable) {
    for (    BlockLocation blockLocation : blockLocations) {
      List<HostAddress> addresses=toHostAddress(blockLocation.getHosts());
      long maxBytes=maxSplitSize.toBytes();
      if (remainingInitialSplits > 0) {
        maxBytes=maxInitialSplitSize.toBytes();
      }
      int chunks=Math.max(1,(int)(blockLocation.getLength() / maxBytes));
      long targetChunkSize=(long)Math.ceil(blockLocation.getLength() * 1.0 / chunks);
      long chunkOffset=0;
      while (chunkOffset < blockLocation.getLength()) {
        long chunkLength=Math.min(targetChunkSize,blockLocation.getLength() - chunkOffset);
        builder.add(new HiveSplit(connectorId,table.getDbName(),table.getTableName(),partitionName,file.getPath().toString(),blockLocation.getOffset() + chunkOffset,chunkLength,schema,partitionKeys,addresses,session));
        chunkOffset+=chunkLength;
        remainingInitialSplits--;
      }
      checkState(chunkOffset == blockLocation.getLength(),"Error splitting blocks");
    }
  }
 else {
    List<HostAddress> addresses=ImmutableList.of();
    if (blockLocations.length > 0) {
      addresses=toHostAddress(blockLocations[0].getHosts());
    }
    builder.add(new HiveSplit(connectorId,table.getDbName(),table.getTableName(),partitionName,file.getPath().toString(),start,length,schema,partitionKeys,addresses,session));
  }
  return builder.build();
}
