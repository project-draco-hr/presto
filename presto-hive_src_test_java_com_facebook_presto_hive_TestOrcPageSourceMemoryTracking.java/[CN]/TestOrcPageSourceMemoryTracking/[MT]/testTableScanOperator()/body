{
  DriverContext driverContext=testPreparer.newDriverContext();
  SourceOperator operator=testPreparer.newTableScanOperator(driverContext);
  assertEquals(driverContext.getSystemMemoryUsage(),0);
  long memoryUsage=-1;
  for (int i=0; i < 20; i++) {
    assertFalse(operator.isFinished());
    Page page=operator.getOutput();
    assertNotNull(page);
    page.getBlock(1);
    if (memoryUsage == -1) {
      memoryUsage=driverContext.getSystemMemoryUsage();
      assertBetweenInclusive(memoryUsage,460000L,469999L);
    }
 else {
      assertEquals(driverContext.getSystemMemoryUsage(),memoryUsage);
    }
  }
  memoryUsage=-1;
  for (int i=20; i < 40; i++) {
    assertFalse(operator.isFinished());
    Page page=operator.getOutput();
    assertNotNull(page);
    page.getBlock(1);
    if (memoryUsage == -1) {
      memoryUsage=driverContext.getSystemMemoryUsage();
      assertBetweenInclusive(memoryUsage,460000L,469999L);
    }
 else {
      assertEquals(driverContext.getSystemMemoryUsage(),memoryUsage);
    }
  }
  memoryUsage=-1;
  for (int i=40; i < 50; i++) {
    assertFalse(operator.isFinished());
    Page page=operator.getOutput();
    assertNotNull(page);
    page.getBlock(1);
    if (memoryUsage == -1) {
      memoryUsage=driverContext.getSystemMemoryUsage();
      assertBetweenInclusive(memoryUsage,360000L,369999L);
    }
 else {
      assertEquals(driverContext.getSystemMemoryUsage(),memoryUsage);
    }
  }
  assertFalse(operator.isFinished());
  assertNull(operator.getOutput());
  assertTrue(operator.isFinished());
  assertEquals(driverContext.getSystemMemoryUsage(),0);
}
