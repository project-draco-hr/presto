{
  ImmutableList.Builder<PlanOptimizer> builder=ImmutableList.builder();
  builder.add(new ImplementSampleAsFilter(),new CanonicalizeExpressions(),new SimplifyExpressions(metadata,sqlParser),new UnaliasSymbolReferences(),new PruneRedundantProjections(),new SetFlatteningOptimizer(),new LimitPushDown(),new PredicatePushDown(metadata,sqlParser),new MergeProjections(),new SimplifyExpressions(metadata,sqlParser),new ProjectionPushDown(),new UnaliasSymbolReferences(),new PruneUnreferencedOutputs(),new IndexJoinOptimizer(metadata,indexManager),new CountConstantOptimizer(),new WindowFilterPushDown(metadata),new HashGenerationOptimizer(),new MergeProjections(),new PruneUnreferencedOutputs(),new PruneRedundantProjections());
  if (featuresConfig.isOptimizeMetadataQueries()) {
    builder.add(new MetadataQueryOptimizer(metadata));
  }
  if (featuresConfig.isOptimizeSingleDistinct()) {
    builder.add(new SingleDistinctOptimizer());
    builder.add(new PruneUnreferencedOutputs());
  }
  if (!forceSingleNode) {
    builder.add(new AddExchanges(metadata,sqlParser,featuresConfig.isDistributedIndexJoinsEnabled()));
  }
  builder.add(new PickLayout(metadata));
  builder.add(new PredicatePushDown(metadata,sqlParser));
  builder.add(new MergeProjections());
  builder.add(new UnaliasSymbolReferences());
  builder.add(new PruneUnreferencedOutputs());
  builder.add(new PruneRedundantProjections());
  builder.add(new BeginTableWrite(metadata));
  this.optimizers=builder.build();
}
