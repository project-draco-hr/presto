{
  if (value == null) {
    return null;
  }
  TypeSignature signature=parseTypeSignature(type);
  if (signature.getBase().equals(ARRAY)) {
    List<Object> fixedValue=new ArrayList<>();
    for (    Object object : List.class.cast(value)) {
      fixedValue.add(fixValue(signature.getTypeParametersAsTypeSignatures().get(0).toString(),object));
    }
    return fixedValue;
  }
  if (signature.getBase().equals(MAP)) {
    String keyType=signature.getTypeParametersAsTypeSignatures().get(0).toString();
    String valueType=signature.getTypeParametersAsTypeSignatures().get(1).toString();
    Map<Object,Object> fixedValue=new HashMap<>();
    for (    Map.Entry<?,?> entry : (Set<Map.Entry<?,?>>)Map.class.cast(value).entrySet()) {
      fixedValue.put(fixValue(keyType,entry.getKey()),fixValue(valueType,entry.getValue()));
    }
    return fixedValue;
  }
  if (signature.getBase().equals(ROW)) {
    Map<String,Object> fixedValue=new LinkedHashMap<>();
    List<Object> listValue=List.class.cast(value);
    checkArgument(listValue.size() == signature.getParameters().size(),"Mismatched data values and row type");
    for (int i=0; i < listValue.size(); i++) {
      TypeSignatureParameter parameter=signature.getParameters().get(i);
      checkArgument(parameter.getKind() == ParameterKind.NAMED_TYPE,"Unexpected parameter [%s] for row type",parameter);
      NamedTypeSignature namedTypeSignature=parameter.getNamedTypeSignature();
      String key=namedTypeSignature.getName();
      fixedValue.put(key,fixValue(namedTypeSignature.getTypeSignature().toString(),listValue.get(i)));
    }
    return fixedValue;
  }
switch (signature.getBase()) {
case BIGINT:
    if (value instanceof String) {
      return Long.parseLong((String)value);
    }
  return ((Number)value).longValue();
case DOUBLE:
if (value instanceof String) {
  return Double.parseDouble((String)value);
}
return ((Number)value).doubleValue();
case BOOLEAN:
if (value instanceof String) {
return Boolean.parseBoolean((String)value);
}
return Boolean.class.cast(value);
case VARCHAR:
case JSON:
case TIME:
case TIME_WITH_TIME_ZONE:
case TIMESTAMP:
case TIMESTAMP_WITH_TIME_ZONE:
case DATE:
case INTERVAL_YEAR_TO_MONTH:
case INTERVAL_DAY_TO_SECOND:
return String.class.cast(value);
default :
if (value instanceof String) {
return Base64.getDecoder().decode((String)value);
}
return value;
}
}
