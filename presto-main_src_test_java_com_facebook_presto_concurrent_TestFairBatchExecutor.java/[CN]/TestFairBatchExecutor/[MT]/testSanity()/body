{
  FairBatchExecutor executor=new FairBatchExecutor(1,daemonThreadsNamed("test-%s"));
  final CountDownLatch readyToStart=new CountDownLatch(1);
  executor.processBatch(ImmutableList.of(new Callable<Object>(){
    @Override public Object call() throws Exception {
      readyToStart.await();
      return null;
    }
  }
));
  BlockingQueue<Integer> executions=new LinkedBlockingDeque<>();
  List<Future<?>> futures=new ArrayList<>();
  MeetingPoint meetingPoint=new MeetingPoint();
  futures.addAll(executor.processBatch(ImmutableList.of(newTask(1,executions),newTask(2,executions),newTask(3,executions),newTask(4,executions),newTask(5,meetingPoint,executions),newTask(6,executions),newTask(7,executions),newTask(8,executions),newTask(9,executions))));
  futures.addAll(executor.processBatch(ImmutableList.of(newTask(2,executions),newTask(3,executions),newTask(4,executions),newTask(5,meetingPoint,executions),newTask(6,executions))));
  futures.addAll(executor.processBatch(ImmutableList.of(newTask(3,executions),newTask(4,executions),newTask(5,meetingPoint,executions),newTask(6,executions),newTask(7,executions),newTask(8,executions))));
  readyToStart.countDown();
  meetingPoint.waitForArrival();
  futures.addAll(executor.processBatch(ImmutableList.of(newTask(5,executions),newTask(6,executions),newTask(7,executions),newTask(8,executions),newTask(9,executions))));
  meetingPoint.notifyAdvance();
  for (  Future<?> future : futures) {
    future.get();
  }
  assertTrue(Ordering.<Integer>natural().isOrdered(executions),executions.toString());
  executor.shutdown();
}
