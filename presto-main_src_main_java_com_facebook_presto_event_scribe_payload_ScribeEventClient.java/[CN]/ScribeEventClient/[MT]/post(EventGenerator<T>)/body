{
  checkNotNull(eventGenerator,"eventGenerator is null");
  if (eventToCategoryMap.isEmpty()) {
    return Futures.immediateCheckedFuture(null);
  }
  try {
    eventGenerator.generate(new EventPoster<T>(){
      @Override public void post(      T event) throws IOException {
        checkNotNull(event,"event is null");
        Event normalizedEvent=normalizeToEvent(event);
        String scribeCategory=eventToCategoryMap.get(normalizedEvent.getType());
        if (scribeCategory == null) {
          log.debug("No Scribe category configured for event '%s'. Skipping event.",normalizedEvent.getType());
        }
 else {
          PayloadBuilder payloadBuilder=new PayloadBuilder(jsonCodec).setAppEventType(normalizedEvent.getType()).addAppData("event_type",normalizedEvent.getType()).addAppData("event_host",normalizedEvent.getHost()).addAppData("event_uuid",normalizedEvent.getUuid()).addAppData("event_time",normalizedEvent.getTimestamp());
          for (          Map.Entry<String,?> entry : normalizedEvent.getData().entrySet()) {
            String key=CaseFormat.LOWER_CAMEL.to(CaseFormat.LOWER_UNDERSCORE,entry.getKey());
            payloadBuilder.addAppData(key,entry.getValue());
          }
          String payload=payloadBuilder.build();
          asyncScribeLogger.log(new LogEntry(scribeCategory,payload));
        }
      }
    }
);
  }
 catch (  IOException e) {
    return Futures.<Void,RuntimeException>immediateFailedCheckedFuture(failedException(e));
  }
  return Futures.immediateCheckedFuture(null);
}
