{
  List<PlanNode> rewrittenSources=IterableTransformer.on(node.getSources()).transform(new Function<PlanNode,PlanNode>(){
    @Override public PlanNode apply(    PlanNode input){
      return planRewriter.rewrite(input,null);
    }
  }
).list();
  if (!Iterables.any(rewrittenSources,Predicates.instanceOf(MaterializeSampleNode.class))) {
    return planRewriter.defaultRewrite(node,null);
  }
  ImmutableListMultimap.Builder<Symbol,Symbol> symbolMapping=ImmutableListMultimap.<Symbol,Symbol>builder().putAll(node.getSymbolMapping());
  ImmutableList.Builder<PlanNode> sources=ImmutableList.builder();
  Symbol outputSymbol=symbolAllocator.newSymbol(((MaterializeSampleNode)Iterables.getFirst(Iterables.filter(rewrittenSources,Predicates.instanceOf(MaterializeSampleNode.class)),null)).getSampleWeightSymbol().getName(),Type.BIGINT);
  for (  PlanNode source : rewrittenSources) {
    if (source instanceof MaterializeSampleNode) {
      symbolMapping.put(outputSymbol,((MaterializeSampleNode)source).getSampleWeightSymbol());
      sources.add(((MaterializeSampleNode)source).getSource());
    }
 else {
      Symbol symbol=symbolAllocator.newSymbol("$sampleWeight",Type.BIGINT);
      symbolMapping.put(outputSymbol,symbol);
      sources.add(addSampleWeight(source,symbol));
    }
  }
  node=new UnionNode(node.getId(),sources.build(),symbolMapping.build());
  return new MaterializeSampleNode(idAllocator.getNextId(),node,outputSymbol);
}
