{
  assertAccessDenied("SET SESSION " + QUERY_MAX_MEMORY + " = '10MB'","Cannot set system session property " + QUERY_MAX_MEMORY,privilege(QUERY_MAX_MEMORY,SET_SESSION));
  assertAccessDenied("CREATE TABLE foo (pk bigint)","Cannot create table .*.foo.*",privilege("foo",CREATE_TABLE));
  assertAccessDenied("DROP TABLE orders","Cannot drop table .*.orders.*",privilege("orders",DROP_TABLE));
  assertAccessDenied("ALTER TABLE orders RENAME TO foo","Cannot rename table .*.orders.* to .*.foo.*",privilege("orders",RENAME_TABLE));
  assertAccessDenied("ALTER TABLE orders ADD COLUMN foo bigint","Cannot add a column to table .*.orders.*",privilege("orders",ADD_COLUMN));
  assertAccessDenied("ALTER TABLE orders RENAME COLUMN orderkey TO foo","Cannot rename a column in table .*.orders.*",privilege("orders",RENAME_COLUMN));
  assertAccessDenied("CREATE VIEW foo as SELECT * FROM orders","Cannot create view .*.foo.*",privilege("foo",CREATE_VIEW));
  try {
    assertAccessDenied("SELECT 1","Principal .* cannot become user " + getSession().getUser() + ".*",privilege(getSession().getUser(),SET_USER));
  }
 catch (  AssertionError e) {
    assertTrue(e.getMessage().contains("statusCode=403"),"Expected error message to contain 'statusCode=403': " + e.getMessage());
  }
}
