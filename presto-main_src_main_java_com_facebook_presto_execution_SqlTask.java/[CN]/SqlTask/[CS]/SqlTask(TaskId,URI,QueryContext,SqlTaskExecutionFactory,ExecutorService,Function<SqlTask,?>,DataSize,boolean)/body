{
  this.taskId=requireNonNull(taskId,"taskId is null");
  this.taskInstanceId=UUID.randomUUID().toString();
  this.location=requireNonNull(location,"location is null");
  this.queryContext=requireNonNull(queryContext,"queryContext is null");
  this.sqlTaskExecutionFactory=requireNonNull(sqlTaskExecutionFactory,"sqlTaskExecutionFactory is null");
  requireNonNull(taskNotificationExecutor,"taskNotificationExecutor is null");
  requireNonNull(onDone,"onDone is null");
  requireNonNull(maxBufferSize,"maxBufferSize is null");
  if (newSinkBufferImplementation) {
    outputBuffer=new LazyOutputBuffer(taskId,taskInstanceId,taskNotificationExecutor,maxBufferSize,new UpdateSystemMemory(queryContext));
  }
 else {
    outputBuffer=new SharedOutputBuffer(taskId,taskInstanceId,taskNotificationExecutor,maxBufferSize,new UpdateSystemMemory(queryContext));
  }
  taskStateMachine=new TaskStateMachine(taskId,taskNotificationExecutor);
  taskStateMachine.addStateChangeListener(new StateChangeListener<TaskState>(){
    @Override public void stateChanged(    TaskState newState){
      if (!newState.isDone()) {
        return;
      }
      while (true) {
        TaskHolder taskHolder=taskHolderReference.get();
        if (taskHolder.isFinished()) {
          return;
        }
        if (taskHolderReference.compareAndSet(taskHolder,new TaskHolder(createTaskInfo(taskHolder),taskHolder.getIoStats()))) {
          break;
        }
      }
      if (newState == TaskState.FAILED || newState == TaskState.ABORTED) {
        outputBuffer.fail();
      }
 else {
        outputBuffer.destroy();
      }
      try {
        onDone.apply(SqlTask.this);
      }
 catch (      Exception e) {
        log.warn(e,"Error running task cleanup callback %s",SqlTask.this.taskId);
      }
    }
  }
);
}
