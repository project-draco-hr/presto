{
  int rows=(int)cpuMsecChunk.getRange().length();
  long[] results=new long[rows];
  BlockCursor cpuMsecCursor=cpuMsecChunk.cursor();
  for (int position=0; position < rows; position++) {
    checkState(cpuMsecCursor.advanceNextPosition());
    results[position]=cpuMsecCursor.getLong(0);
  }
  checkState(!cpuMsecCursor.advanceNextPosition());
  BlockCursor startTimeCursor=startTimeChunk.cursor();
  for (int position=0; position < rows; position++) {
    checkState(startTimeCursor.advanceNextPosition());
    results[position]*=1343350800 - startTimeCursor.getLong(0);
  }
  checkState(!startTimeCursor.advanceNextPosition());
  long[] endTimeMinusStartTime=new long[rows];
{
    BlockCursor endTimeCursor=endTimeChunk.cursor();
    for (int position=0; position < rows; position++) {
      checkState(endTimeCursor.advanceNextPosition());
      endTimeMinusStartTime[position]=endTimeCursor.getLong(0);
    }
    checkState(!endTimeCursor.advanceNextPosition());
    startTimeCursor=startTimeChunk2.cursor();
    for (int position=0; position < rows; position++) {
      checkState(startTimeCursor.advanceNextPosition());
      endTimeMinusStartTime[position]-=startTimeCursor.getLong(0);
    }
    checkState(!startTimeCursor.advanceNextPosition());
  }
  for (int position=0; position < rows; position++) {
    if (bitSet.get(position)) {
      blockBuilder.append(results[position] + endTimeMinusStartTime[position] + (1000 * 86400));
    }
  }
}
