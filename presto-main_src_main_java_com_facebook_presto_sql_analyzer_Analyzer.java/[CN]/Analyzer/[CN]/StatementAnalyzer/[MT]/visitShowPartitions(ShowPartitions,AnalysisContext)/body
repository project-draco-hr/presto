{
  QualifiedName table=showPartitions.getTable();
  List<String> parts=Lists.reverse(table.getParts());
  if (parts.size() > 3) {
    throw new SemanticException(showPartitions,"too many parts in table name: %s",table);
  }
  String catalogName=(parts.size() > 2) ? parts.get(2) : context.getSession().getCatalog();
  String schemaName=(parts.size() > 1) ? parts.get(1) : context.getSession().getSchema();
  String tableName=parts.get(0);
  ImmutableList.Builder<Expression> selectList=ImmutableList.builder();
  for (  String partition : metadata.listTablePartitionKeys(catalogName,schemaName,tableName)) {
    Expression key=equal(nameReference("partition_key"),new StringLiteral(partition));
    Expression function=functionCall("max",caseWhen(key,nameReference("partition_value")));
    selectList.add(new AliasedExpression(function,partition));
  }
  Query query=new Query(selectAll(selectList.build()),table(QualifiedName.of(catalogName,INFORMATION_SCHEMA,TABLE_INTERNAL_PARTITIONS)),Optional.of(logicalAnd(equal(nameReference("table_schema"),new StringLiteral(schemaName)),equal(nameReference("table_name"),new StringLiteral(tableName)))),ImmutableList.of(nameReference("partition_number")),Optional.<Expression>absent(),ImmutableList.of(ascending("partition_number")),Optional.<String>absent());
  return visitQuery(query,context);
}
