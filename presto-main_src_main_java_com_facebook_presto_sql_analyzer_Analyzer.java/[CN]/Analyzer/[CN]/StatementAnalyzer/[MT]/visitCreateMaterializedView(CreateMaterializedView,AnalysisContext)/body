{
  QualifiedTableName dstTableName=MetadataUtil.createQualifiedTableName(session,statement.getName());
  TableMetadata dstTableMetadata=metadata.getTable(dstTableName);
  checkState(dstTableMetadata == null,"Destination table %s already exists",dstTableName);
  AnalysisResult queryAnalysis=process(statement.getTableDefinition(),new AnalysisContext(context.getSession(),context.getSymbolAllocator()));
  ImmutableList.Builder<ColumnMetadata> columns=ImmutableList.builder();
  for (  Field field : queryAnalysis.getOutputDescriptor().getFields()) {
    ColumnMetadata columnMetadata=new ColumnMetadata(field.getAttribute().get(),field.getType().getRawType());
    columns.add(columnMetadata);
  }
  dstTableMetadata=createTable(metadata,dstTableName,columns.build());
  Optional<TableHandle> dstTableHandle=dstTableMetadata.getTableHandle();
  checkState(dstTableHandle.isPresent(),"can not import into a table without table handle");
  checkState(dstTableHandle.get().getDataSourceType() == DataSourceType.NATIVE,"can not import into non-native table %s",dstTableMetadata.getTable());
  QualifiedTableName srcTableName=getTableNameFromQuery(session,queryAnalysis);
  storageManager.insertTableSource(((NativeTableHandle)dstTableHandle.get()),srcTableName);
  if (statement.getRefresh().isPresent()) {
    int importInterval=Integer.parseInt(statement.getRefresh().get());
    checkState(importInterval > 0,"import interval must be > 0");
    PeriodicImportJob job=PeriodicImportJob.createJob(srcTableName,dstTableMetadata.getTable(),importInterval);
    periodicImportManager.insertJob(job);
  }
  return tableWriterResult(context,dstTableName,queryAnalysis);
}
