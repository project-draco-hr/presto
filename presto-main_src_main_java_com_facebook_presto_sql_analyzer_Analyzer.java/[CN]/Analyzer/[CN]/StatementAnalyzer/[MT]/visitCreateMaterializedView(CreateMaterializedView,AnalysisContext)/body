{
  QualifiedTableName dstTableName=MetadataUtil.createQualifiedTableName(session,statement.getName());
  TableMetadata dstTableMetadata=metadata.getTable(dstTableName);
  checkState(dstTableMetadata == null,"Destination table %s already exists!",dstTableName);
  AnalysisResult queryAnalysis=newAnalyzer().analyze(statement.getTableDefinition(),new AnalysisContext(context.getSession(),context.getSymbolAllocator()));
  ImmutableList.Builder<ColumnMetadata> columns=ImmutableList.builder();
  for (  Field field : queryAnalysis.getOutputDescriptor().getFields()) {
    ColumnMetadata columnMetadata=new ColumnMetadata(field.getAttribute().get(),field.getType().getRawType());
    columns.add(columnMetadata);
  }
  dstTableMetadata=createTable(metadata,dstTableName,columns.build());
  Optional<TableHandle> dstTableHandle=dstTableMetadata.getTableHandle();
  checkState(dstTableHandle.isPresent(),"can not import into a table without table handle");
  checkState(dstTableHandle.get().getDataSourceType() == DataSourceType.NATIVE,"can not import into non-native table %s",dstTableMetadata.getTable());
  QualifiedTableName srcTableName=getTableNameFromQuery(session,queryAnalysis);
  storageManager.insertSourceTable(((NativeTableHandle)dstTableHandle.get()),srcTableName);
  Field resultField=Field.getField("imported_rows",context.getSymbolAllocator().newSymbol("imported_rows",Type.LONG),Type.LONG);
  AnalyzedExpression resultFieldExpression=new AnalyzedExpression(resultField.getType(),QueryUtil.nameReference(resultField.getAttribute().get()));
  AnalyzedOutput output=new AnalyzedOutput(new TupleDescriptor(ImmutableList.<Field>of(resultField)),ImmutableMap.of(resultField.getSymbol(),resultFieldExpression));
  AnalyzedDestination destination=new AnalyzedDestination(dstTableName);
  context.addDestination(dstTableName,queryAnalysis);
  return AnalysisResult.newInstance(context,false,output,null,ImmutableList.<AnalyzedExpression>of(),ImmutableSet.<AnalyzedFunction>of(),ImmutableSet.<AnalyzedFunction>of(),null,ImmutableList.<AnalyzedOrdering>of(),null);
}
