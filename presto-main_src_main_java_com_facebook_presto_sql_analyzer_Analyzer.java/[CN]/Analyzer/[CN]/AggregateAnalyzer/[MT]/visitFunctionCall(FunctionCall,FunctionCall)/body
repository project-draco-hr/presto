{
  ImmutableList.Builder<AnalyzedExpression> argumentsAnalysis=ImmutableList.builder();
  ImmutableList.Builder<Type> argumentTypes=ImmutableList.builder();
  for (  Expression expression : node.getArguments()) {
    AnalyzedExpression analysis=new ExpressionAnalyzer(metadata).analyze(expression,descriptor);
    argumentsAnalysis.add(analysis);
    argumentTypes.add(analysis.getType());
  }
  FunctionInfo info=metadata.getFunction(node.getName(),Lists.transform(argumentTypes.build(),Type.toRaw()));
  if (info != null && info.isAggregate()) {
    if (enclosingAggregate != null) {
      throw new SemanticException(node,"Cannot nest aggregate functions: %s",ExpressionFormatter.toString(enclosingAggregate));
    }
    FunctionCall rewritten=TreeRewriter.rewriteWith(new NameToSymbolRewriter(descriptor),node);
    aggregations.add(new AnalyzedFunction(info,argumentsAnalysis.build(),rewritten));
    return super.visitFunctionCall(node,node);
  }
  return super.visitFunctionCall(node,enclosingAggregate);
}
