{
  int numberOfBins=bins.getPositionCount();
  checkCondition(numberOfBins > 0,INVALID_FUNCTION_ARGUMENT,"Bins cannot be an empty array");
  checkCondition(!isNaN(operand),INVALID_FUNCTION_ARGUMENT,"Operand cannot be NaN");
  int lower=0;
  int upper=numberOfBins;
  int index;
  double bin;
  while (lower < upper) {
    if (DOUBLE.getDouble(bins,lower) > DOUBLE.getDouble(bins,upper - 1)) {
      throw new PrestoException(INVALID_FUNCTION_ARGUMENT,"Bin values are not sorted in ascending order");
    }
    index=(lower + upper) / 2;
    bin=DOUBLE.getDouble(bins,index);
    checkCondition(isFinite(bin),INVALID_FUNCTION_ARGUMENT,format("Bin value must be finite, got %s",bin));
    if (operand < bin) {
      upper=index;
    }
 else {
      lower=index + 1;
    }
  }
  return lower;
}
