{
  assertOptimizedEquals("case " + "when true then 33 " + "end","33");
  assertOptimizedEquals("case " + "when false then 1 " + "else 33 "+ "end","33");
  assertOptimizedEquals("case " + "when bound_long = 1234 then 33 " + "end","33");
  assertOptimizedEquals("case " + "when true then bound_long " + "end","1234");
  assertOptimizedEquals("case " + "when false then 1 " + "else bound_long "+ "end","1234");
  assertOptimizedEquals("case " + "when bound_long = 1234 then 33 " + "else unbound_long "+ "end","33");
  assertOptimizedEquals("case " + "when true then bound_long " + "else unbound_long "+ "end","1234");
  assertOptimizedEquals("case " + "when false then unbound_long " + "else bound_long "+ "end","1234");
  assertOptimizedEquals("case " + "when unbound_long = 1234 then 33 " + "else 1 "+ "end","" + "case " + "when unbound_long = 1234 then 33 "+ "else 1 "+ "end");
  assertOptimizedEquals("case when 0 / 0 = 0 then 1 end","case when 0 / 0 = 0 then 1 end");
  assertOptimizedEquals("if(false, 1, 0 / 0)","if (false, 1, 0 / 0)");
}
