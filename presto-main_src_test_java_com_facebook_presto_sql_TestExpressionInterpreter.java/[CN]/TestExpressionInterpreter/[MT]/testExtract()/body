{
  DateTime dateTime=new DateTime(2001,8,22,3,4,5,321,DateTimeZone.UTC);
  double seconds=dateTime.getMillis() / 1000.0;
  assertOptimizedEquals("extract (CENTURY from from_unixtime(" + seconds + "))","21");
  assertOptimizedEquals("extract (YEAR from from_unixtime(" + seconds + "))","2001");
  assertOptimizedEquals("extract (QUARTER from from_unixtime(" + seconds + "))","3");
  assertOptimizedEquals("extract (MONTH from from_unixtime(" + seconds + "))","8");
  assertOptimizedEquals("extract (WEEK from from_unixtime(" + seconds + "))","34");
  assertOptimizedEquals("extract (DOW from from_unixtime(" + seconds + "))","3");
  assertOptimizedEquals("extract (DOY from from_unixtime(" + seconds + "))","234");
  assertOptimizedEquals("extract (DAY from from_unixtime(" + seconds + "))","22");
  assertOptimizedEquals("extract (HOUR from from_unixtime(" + seconds + "))","3");
  assertOptimizedEquals("extract (MINUTE from from_unixtime(" + seconds + "))","4");
  assertOptimizedEquals("extract (SECOND from from_unixtime(" + seconds + "))","5");
  assertOptimizedEquals("extract (TIMEZONE_HOUR from from_unixtime(" + seconds + ", 7, 9))","7");
  assertOptimizedEquals("extract (TIMEZONE_MINUTE from from_unixtime(" + seconds + ", 7, 9))","9");
  assertOptimizedEquals("extract (CENTURY from bound_timestamp)","21");
  assertOptimizedEquals("extract (YEAR from bound_timestamp)","2001");
  assertOptimizedEquals("extract (QUARTER from bound_timestamp)","3");
  assertOptimizedEquals("extract (MONTH from bound_timestamp)","8");
  assertOptimizedEquals("extract (WEEK from bound_timestamp)","34");
  assertOptimizedEquals("extract (DOW from bound_timestamp)","3");
  assertOptimizedEquals("extract (DOY from bound_timestamp)","234");
  assertOptimizedEquals("extract (DAY from bound_timestamp)","22");
  assertOptimizedEquals("extract (HOUR from bound_timestamp)","3");
  assertOptimizedEquals("extract (MINUTE from bound_timestamp)","4");
  assertOptimizedEquals("extract (SECOND from bound_timestamp)","5");
  assertOptimizedEquals("extract (YEAR from unbound_timestamp)","extract (YEAR from unbound_timestamp)");
  assertOptimizedEquals("extract (SECOND from bound_timestamp + INTERVAL '3' SECOND)","8");
}
