{
  DateTime dateTime=new DateTime(2001,8,22,3,4,5,321,DateTimeZone.UTC);
  long seconds=MILLISECONDS.toSeconds(dateTime.getMillis());
  assertOptimizedEquals("extract (CENTURY from " + seconds + ")","20");
  assertOptimizedEquals("extract (YEAR from " + seconds + ")","2001");
  assertOptimizedEquals("extract (QUARTER from " + seconds + ")","3");
  assertOptimizedEquals("extract (MONTH from " + seconds + ")","8");
  assertOptimizedEquals("extract (WEEK from " + seconds + ")","34");
  assertOptimizedEquals("extract (DOW from " + seconds + ")","3");
  assertOptimizedEquals("extract (DOY from " + seconds + ")","234");
  assertOptimizedEquals("extract (DAY from " + seconds + ")","22");
  assertOptimizedEquals("extract (HOUR from " + seconds + ")","3");
  assertOptimizedEquals("extract (MINUTE from " + seconds + ")","4");
  assertOptimizedEquals("extract (SECOND from " + seconds + ")","5");
  assertOptimizedEquals("extract (TIMEZONE_HOUR from " + seconds + ")","0");
  assertOptimizedEquals("extract (TIMEZONE_MINUTE from " + seconds + ")","0");
  assertOptimizedEquals("extract (CENTURY from bound_timestamp)","20");
  assertOptimizedEquals("extract (YEAR from bound_timestamp)","2001");
  assertOptimizedEquals("extract (QUARTER from bound_timestamp)","3");
  assertOptimizedEquals("extract (MONTH from bound_timestamp)","8");
  assertOptimizedEquals("extract (WEEK from bound_timestamp)","34");
  assertOptimizedEquals("extract (DOW from bound_timestamp)","3");
  assertOptimizedEquals("extract (DOY from bound_timestamp)","234");
  assertOptimizedEquals("extract (DAY from bound_timestamp)","22");
  assertOptimizedEquals("extract (HOUR from bound_timestamp)","3");
  assertOptimizedEquals("extract (MINUTE from bound_timestamp)","4");
  assertOptimizedEquals("extract (SECOND from bound_timestamp)","5");
  assertOptimizedEquals("extract (TIMEZONE_HOUR from bound_timestamp)","0");
  assertOptimizedEquals("extract (TIMEZONE_MINUTE from bound_timestamp)","0");
  assertOptimizedEquals("extract (YEAR from unbound_timestamp)","extract (YEAR from unbound_timestamp)");
  assertOptimizedEquals("extract (SECOND from bound_timestamp + 3)","8");
}
