{
  assertOptimizedEquals("case true " + "when true then 33 " + "end","33");
  assertOptimizedEquals("case true " + "when false then 1 " + "else 33 end","33");
  assertOptimizedEquals("case bound_long " + "when 1234 then 33 " + "end","33");
  assertOptimizedEquals("case 1234 " + "when bound_long then 33 " + "end","33");
  assertOptimizedEquals("case true " + "when true then bound_long " + "end","1234");
  assertOptimizedEquals("case true " + "when false then 1 " + "else bound_long "+ "end","1234");
  assertOptimizedEquals("case bound_long " + "when 1234 then 33 " + "else unbound_long "+ "end","33");
  assertOptimizedEquals("case true " + "when true then bound_long " + "else unbound_long "+ "end","1234");
  assertOptimizedEquals("case true " + "when false then unbound_long " + "else bound_long "+ "end","1234");
  assertOptimizedEquals("case unbound_long " + "when 1234 then 33 " + "else 1 "+ "end","" + "case unbound_long " + "when 1234 then 33 "+ "else 1 "+ "end");
}
