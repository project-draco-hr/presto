{
  Configuration config=new Configuration();
  if (resourcePaths != null) {
    for (    String resourcePath : resourcePaths) {
      config.addResource(new Path(resourcePath));
    }
  }
  config.setClass("topology.node.switch.mapping.impl",NoOpDNSToSwitchMapping.class,DNSToSwitchMapping.class);
  if (socksProxy != null) {
    config.setClass("hadoop.rpc.socket.factory.class.default",SocksSocketFactory.class,SocketFactory.class);
    config.set("hadoop.socks.server",socksProxy.toString());
  }
  if (domainSocketPath != null) {
    config.setStrings("dfs.domain.socket.path",domainSocketPath);
  }
  if (!config.get("dfs.domain.socket.path","").trim().isEmpty()) {
    config.setBooleanIfUnset("dfs.client.read.shortcircuit",true);
  }
  config.setInt("dfs.socket.timeout",Ints.checkedCast(dfsTimeout.toMillis()));
  config.setInt("ipc.ping.interval",Ints.checkedCast(dfsTimeout.toMillis()));
  config.setInt("ipc.client.connect.timeout",Ints.checkedCast(dfsConnectTimeout.toMillis()));
  config.setInt("ipc.client.connect.max.retries",dfsConnectMaxRetries);
  config.set("fs.s3.impl","org.apache.hadoop.fs.s3native.NativeS3FileSystem");
  config.set("fs.s3bfs.impl","org.apache.hadoop.fs.s3.S3FileSystem");
  for (  String scheme : ImmutableList.of("s3","s3bfs","s3n")) {
    if (s3AwsAccessKey != null) {
      config.set(format("fs.%s.awsAccessKeyId",scheme),s3AwsAccessKey);
    }
    if (s3AwsSecretKey != null) {
      config.set(format("fs.%s.awsSecretAccessKey",scheme),s3AwsSecretKey);
    }
  }
  updateConfiguration(config);
  return config;
}
