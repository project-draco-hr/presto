{
  RowType nameType=new RowType(ImmutableList.of(VARCHAR,VARCHAR),Optional.empty());
  RowType phoneType=new RowType(ImmutableList.of(VARCHAR,VARCHAR),Optional.empty());
  RowType personType=new RowType(ImmutableList.of(nameType,BIGINT,VARCHAR,new ArrayType(phoneType)),Optional.empty());
  List<TestColumn> testColumns=ImmutableList.<TestColumn>of(new TestColumn("persons",getStandardListObjectInspector(getStandardStructObjectInspector(ImmutableList.of("name","id","email","phones"),ImmutableList.<ObjectInspector>of(getStandardStructObjectInspector(ImmutableList.of("first_name","last_name"),ImmutableList.of(javaStringObjectInspector,javaStringObjectInspector)),javaIntObjectInspector,javaStringObjectInspector,getStandardListObjectInspector(getStandardStructObjectInspector(ImmutableList.of("number","type"),ImmutableList.of(javaStringObjectInspector,javaStringObjectInspector)))))),null,arraySliceOf(personType,rowSliceOf(ImmutableList.of(nameType,BIGINT,VARCHAR,new ArrayType(phoneType)),rowSliceOf(ImmutableList.of(VARCHAR,VARCHAR),"Bob","Roberts"),0,"bob.roberts@example.com",arraySliceOf(phoneType,rowSliceOf(ImmutableList.of(VARCHAR,VARCHAR),"1234567890",null))))));
  InputFormat<?,?> inputFormat=new MapredParquetInputFormat();
  @SuppressWarnings("deprecation") SerDe serde=new ParquetHiveSerDe();
  File file=new File(this.getClass().getClassLoader().getResource("addressbook.parquet").getPath());
  FileSplit split=new FileSplit(new Path(file.getAbsolutePath()),0,file.length(),new String[0]);
  HiveRecordCursorProvider cursorProvider=new ParquetRecordCursorProvider(false);
  testCursorProvider(cursorProvider,split,inputFormat,serde,testColumns,1);
}
