{
  List<TestColumn> testColumns=ImmutableList.copyOf(filter(TEST_COLUMNS,new Predicate<TestColumn>(){
    @Override public boolean apply(    TestColumn testColumn){
      if (testColumn.getName().equals("t_complex") || testColumn.getName().equals("t_array_empty")) {
        return false;
      }
      ObjectInspector objectInspector=testColumn.getObjectInspector();
      return !hasType(objectInspector,PrimitiveCategory.DATE,PrimitiveCategory.TIMESTAMP,PrimitiveCategory.BINARY);
    }
  }
));
  HiveOutputFormat<?,?> outputFormat=new MapredParquetOutputFormat();
  InputFormat<?,?> inputFormat=new MapredParquetInputFormat();
  @SuppressWarnings("deprecation") SerDe serde=new ParquetHiveSerDe();
  File file=File.createTempFile("presto_test","parquet");
  file.delete();
  try {
    FileSplit split=createTestFile(file.getAbsolutePath(),outputFormat,serde,null,testColumns,NUM_ROWS);
    HiveRecordCursorProvider cursorProvider=new ParquetRecordCursorProvider(false);
    testCursorProvider(cursorProvider,split,inputFormat,serde,testColumns,NUM_ROWS);
  }
  finally {
    file.delete();
  }
}
