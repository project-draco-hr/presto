{
  Properties splitProperties=new Properties();
  splitProperties.setProperty(FILE_INPUT_FORMAT,inputFormat.getClass().getName());
  splitProperties.setProperty(SERIALIZATION_LIB,serde.getClass().getName());
  splitProperties.setProperty("columns",Joiner.on(',').join(transform(filter(testColumns,not(partitionKeyFilter())),nameGetter())));
  splitProperties.setProperty("columns.types",Joiner.on(',').join(transform(filter(testColumns,not(partitionKeyFilter())),typeGetter())));
  List<HivePartitionKey> partitionKeys=ImmutableList.copyOf(transform(filter(testColumns,partitionKeyFilter()),new Function<TestColumn,HivePartitionKey>(){
    @Override public HivePartitionKey apply(    TestColumn input){
      return new HivePartitionKey(input.getName(),HiveType.getHiveType(input.getObjectInspector()),(String)input.getWriteValue());
    }
  }
));
  HiveSplit hiveSplit=new HiveSplit("client","database","table","partition",split.getPath().toUri().getPath(),split.getStart(),split.getLength(),splitProperties,partitionKeys,ImmutableList.<HostAddress>of(),SESSION);
  RecordReader<?,BytesRefArrayWritable> recordReader=(RecordReader<?,BytesRefArrayWritable>)inputFormat.getRecordReader(split,new JobConf(),Reporter.NULL);
  HiveRecordCursor cursor=cursorProvider.createHiveRecordCursor(hiveSplit,recordReader,getColumnHandles(testColumns),DateTimeZone.getDefault(),TYPE_MANAGER).get();
  checkCursor(cursor,testColumns);
}
