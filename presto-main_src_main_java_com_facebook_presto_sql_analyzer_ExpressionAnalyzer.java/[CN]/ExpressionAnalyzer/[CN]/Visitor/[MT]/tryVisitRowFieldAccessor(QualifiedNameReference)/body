{
  if (node.getName().getParts().size() < 2) {
    throw createMissingAttributeException(node);
  }
  QualifiedName base=new QualifiedName(node.getName().getParts().subList(0,node.getName().getParts().size() - 1));
  List<Field> matches=tupleDescriptor.resolveFields(base);
  if (matches.isEmpty()) {
    throw createMissingAttributeException(node);
  }
  if (matches.size() > 1) {
    throw new SemanticException(AMBIGUOUS_ATTRIBUTE,node,"Column '%s' is ambiguous",node.getName());
  }
  Field field=Iterables.getOnlyElement(matches);
  if (field.getType() instanceof RowType) {
    RowType rowType=checkType(field.getType(),RowType.class,"field.getType()");
    Type rowFieldType=null;
    for (    RowField rowField : rowType.getFields()) {
      if (rowField.getName().equals(Optional.of(node.getName().getSuffix()))) {
        rowFieldType=rowField.getType();
        break;
      }
    }
    if (rowFieldType == null) {
      throw createMissingAttributeException(node);
    }
    int fieldIndex=tupleDescriptor.indexOf(field);
    resolvedNames.put(node.getName(),fieldIndex);
    expressionTypes.put(node,rowFieldType);
    rowFieldReferences.put(node,true);
    return rowFieldType;
  }
  throw createMissingAttributeException(node);
}
