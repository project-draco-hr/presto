{
  Type superType=UNKNOWN;
  for (  Expression expression : expressions) {
    com.google.common.base.Optional<Type> newSuperType=getCommonSuperType(superType,process(expression,context));
    if (!newSuperType.isPresent()) {
      throw new SemanticException(TYPE_MISMATCH,expression,message,superType);
    }
    superType=newSuperType.get();
  }
  for (  Expression expression : expressions) {
    Type type=process(expression,context);
    if (!type.equals(superType)) {
      if (!canCoerce(type,superType)) {
        throw new SemanticException(TYPE_MISMATCH,expression,message,superType);
      }
      expressionCoercions.put(expression,superType);
    }
  }
  return superType;
}
