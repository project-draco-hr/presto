{
  StatementAnalyzer analyzer=statementAnalyzerFactory.apply(node);
  RelationType descriptor=analyzer.process(node.getQuery(),context.getContext());
  if (descriptor.getVisibleFieldCount() != 1) {
    throw new SemanticException(MULTIPLE_FIELDS_FROM_SUBQUERY,node,"Multiple columns returned by subquery are not yet supported. Found %s",descriptor.getVisibleFieldCount());
  }
  Optional<Node> previousNode=context.getPreviousNode();
  if (previousNode.isPresent() && previousNode.get() instanceof InPredicate) {
    InPredicate inPredicate=(InPredicate)previousNode.get();
    if (inPredicate.getValue() == node) {
      throw new SemanticException(NOT_SUPPORTED,node,"Scalar subqueries not supported as left side for IN expression.");
    }
    subqueryInPredicates.add((InPredicate)previousNode.get());
  }
 else {
    throw new SemanticException(NOT_SUPPORTED,node,"Scalar subqueries not yet supported");
  }
  Type type=Iterables.getOnlyElement(descriptor.getVisibleFields()).getType();
  expressionTypes.put(node,type);
  return type;
}
