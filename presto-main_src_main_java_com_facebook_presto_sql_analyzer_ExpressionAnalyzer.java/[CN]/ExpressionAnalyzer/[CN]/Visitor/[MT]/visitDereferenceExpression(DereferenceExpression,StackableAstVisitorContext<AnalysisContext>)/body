{
  QualifiedName qualifiedName=DereferenceExpression.getQualifiedName(node);
  if (qualifiedName != null) {
    List<Field> matches=tupleDescriptor.resolveFields(qualifiedName);
    if (matches.size() > 1) {
      throw new SemanticException(AMBIGUOUS_ATTRIBUTE,node,"Column '%s' is ambiguous",node);
    }
    if (matches.size() == 1) {
      Field field=Iterables.getOnlyElement(matches);
      int fieldIndex=tupleDescriptor.indexOf(field);
      resolvedNames.put(node,fieldIndex);
      expressionTypes.put(node,field.getType());
      return field.getType();
    }
    if (!isColumnPrefix(qualifiedName,tupleDescriptor)) {
      if (isReferenceToOuterRelation(context.getContext(),qualifiedName)) {
        throw new SemanticException(NOT_SUPPORTED,node,"Correlated queries not yet supported. Invalid column reference: '%s'",qualifiedName);
      }
      throwMissingAttributeException(node,qualifiedName);
    }
  }
  Type baseType=process(node.getBase(),context);
  if (!(baseType instanceof RowType)) {
    throw new SemanticException(TYPE_MISMATCH,node.getBase(),"Expression %s is not of type ROW",node.getBase());
  }
  RowType rowType=(RowType)baseType;
  Type rowFieldType=null;
  for (  RowField rowField : rowType.getFields()) {
    if (node.getFieldName().equalsIgnoreCase(rowField.getName().orElse(null))) {
      rowFieldType=rowField.getType();
      break;
    }
  }
  if (rowFieldType == null) {
    throwMissingAttributeException(node);
  }
  expressionTypes.put(node,rowFieldType);
  return rowFieldType;
}
