{
  RegexTemplate regexTemplate=new RegexTemplate("tpch_sf(?<scale>.*?)_(?<format>.*?)_(?<compression>.*?)");
  assertEquals(regexTemplate.getFieldNames(),ImmutableList.of("scale","format","compression"));
  assertEquals(regexTemplate.parse("tpch_sf100_orc_zlib"),Optional.of(ImmutableMap.of("scale","100","format","orc","compression","zlib")));
  assertEquals(regexTemplate.parse("foo_tpch_sf100_orc_zlib"),Optional.absent());
  assertEquals(regexTemplate.parse("tpch_sf100_orc"),Optional.absent());
  assertEquals(regexTemplate.parse(""),Optional.absent());
  regexTemplate=new RegexTemplate("tpch_sf(?<scale>.*?)_(?<format>.*?)_(?<compression>.*?)\\.sql");
  assertEquals(regexTemplate.parse("tpch_sf100_orc_zlib.sql"),Optional.of(ImmutableMap.of("scale","100","format","orc","compression","zlib")));
  assertEquals(regexTemplate.parse("tpch_sf100_orc_zlibXsql"),Optional.absent());
  assertEquals(regexTemplate.parse("tpch_sf100_orc_zlib.sqlFoo"),Optional.absent());
}
