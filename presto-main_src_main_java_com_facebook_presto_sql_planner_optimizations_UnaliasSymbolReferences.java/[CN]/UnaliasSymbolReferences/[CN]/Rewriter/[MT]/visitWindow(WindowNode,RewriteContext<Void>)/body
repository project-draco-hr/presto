{
  PlanNode source=context.rewrite(node.getSource());
  ImmutableMap.Builder<Symbol,WindowNode.Function> functions=ImmutableMap.builder();
  ImmutableMap.Builder<WindowNode.Function,WindowNode.Frame> frames=ImmutableMap.builder();
  for (  Map.Entry<Symbol,WindowNode.Function> entry : node.getWindowFunctions().entrySet()) {
    Symbol symbol=entry.getKey();
    FunctionCall canonicalFunctionCall=(FunctionCall)canonicalize(entry.getValue().getFunctionCall());
    Signature signature=entry.getValue().getSignature();
    WindowNode.Frame canonicalFrame=canonicalize(entry.getValue().getFrame());
    functions.put(canonicalize(symbol),new WindowNode.Function(canonicalFunctionCall,signature,canonicalFrame));
  }
  ImmutableMap.Builder<Symbol,SortOrder> orderings=ImmutableMap.builder();
  for (  Map.Entry<Symbol,SortOrder> entry : node.getOrderings().entrySet()) {
    orderings.put(canonicalize(entry.getKey()),entry.getValue());
  }
  return new WindowNode(node.getId(),source,canonicalizeAndDistinct(node.getSpecification()),functions.build(),canonicalize(node.getHashSymbol()),canonicalize(node.getPrePartitionedInputs()),node.getPreSortedOrderPrefix());
}
