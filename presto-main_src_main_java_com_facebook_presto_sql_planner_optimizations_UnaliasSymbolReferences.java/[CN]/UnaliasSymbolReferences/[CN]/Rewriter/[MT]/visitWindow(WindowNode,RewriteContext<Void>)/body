{
  PlanNode source=context.rewrite(node.getSource());
  ImmutableMap.Builder<Symbol,WindowNode.Function> functions=ImmutableMap.builder();
  for (  Map.Entry<Symbol,WindowNode.Function> entry : node.getWindowFunctions().entrySet()) {
    Symbol symbol=entry.getKey();
    Symbol canonical=canonicalize(symbol);
    FunctionCall functionCall=entry.getValue().getFunctionCall();
    Signature signature=entry.getValue().getSignature();
    functions.put(canonical,new WindowNode.Function((FunctionCall)canonicalize(functionCall),signature));
  }
  ImmutableMap.Builder<Symbol,SortOrder> orderings=ImmutableMap.builder();
  for (  Map.Entry<Symbol,SortOrder> entry : node.getOrderings().entrySet()) {
    orderings.put(canonicalize(entry.getKey()),entry.getValue());
  }
  WindowNode.Frame frame=node.getFrame();
  frame=new WindowNode.Frame(frame.getType(),frame.getStartType(),canonicalize(frame.getStartValue()),frame.getEndType(),canonicalize(frame.getEndValue()));
  return new WindowNode(node.getId(),source,new WindowNode.Specification(canonicalizeAndDistinct(node.getPartitionBy()),canonicalizeAndDistinct(node.getOrderBy()),orderings.build(),frame),functions.build(),canonicalize(node.getHashSymbol()),canonicalize(node.getPrePartitionedInputs()),node.getPreSortedOrderPrefix());
}
