{
  PlanNode source=planRewriter.rewrite(node.getSource(),context);
  ImmutableMap.Builder<Symbol,Signature> functionInfos=ImmutableMap.builder();
  ImmutableMap.Builder<Symbol,FunctionCall> functionCalls=ImmutableMap.builder();
  ImmutableMap.Builder<Symbol,Symbol> masks=ImmutableMap.builder();
  for (  Map.Entry<Symbol,FunctionCall> entry : node.getAggregations().entrySet()) {
    Symbol symbol=entry.getKey();
    Symbol canonical=canonicalize(symbol);
    FunctionCall canonicalCall=(FunctionCall)canonicalize(entry.getValue());
    functionCalls.put(canonical,canonicalCall);
    functionInfos.put(canonical,node.getFunctions().get(symbol));
  }
  for (  Map.Entry<Symbol,Symbol> entry : node.getMasks().entrySet()) {
    masks.put(canonicalize(entry.getKey()),canonicalize(entry.getValue()));
  }
  List<Symbol> groupByKeys=ImmutableList.copyOf(ImmutableSet.copyOf(canonicalize(node.getGroupBy())));
  return new AggregationNode(node.getId(),source,groupByKeys,functionCalls.build(),functionInfos.build(),masks.build(),canonicalize(node.getSampleWeight()),node.getConfidence(),node.getHashSymbol());
}
