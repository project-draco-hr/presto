{
  this.coordinator=coordinator;
  baseDataDir=Files.createTempDirectory("PrestoTest");
  ImmutableMap.Builder<String,String> serverProperties=ImmutableMap.<String,String>builder().putAll(properties).put("coordinator",String.valueOf(coordinator)).put("presto.version","testversion").put("http-client.max-threads","16").put("task.default-concurrency","4").put("task.max-worker-threads","4").put("analyzer.experimental-syntax-enabled","true");
  if (!properties.containsKey("query.max-memory-per-node")) {
    serverProperties.put("query.max-memory-per-node","512MB");
  }
  if (coordinator) {
    serverProperties.put("failure-detector.enabled","false");
  }
  ImmutableList.Builder<Module> modules=ImmutableList.<Module>builder().add(new TestingNodeModule(Optional.ofNullable(environment))).add(new TestingHttpServerModule()).add(new JsonModule()).add(new JaxrsModule(true)).add(new MBeanModule()).add(new TestingJmxModule()).add(new EventModule()).add(new TraceTokenModule()).add(new ServerMainModule(new SqlParserOptions())).add(new Module(){
    @Override public void configure(    Binder binder){
      binder.bind(TestingAccessControlManager.class).in(Scopes.SINGLETON);
      binder.bind(AccessControlManager.class).to(TestingAccessControlManager.class).in(Scopes.SINGLETON);
      binder.bind(AccessControl.class).to(AccessControlManager.class).in(Scopes.SINGLETON);
    }
  }
).add(new Module(){
    @Override public void configure(    Binder binder){
      binder.bind(ShutdownAction.class).to(TestShutdownAction.class).in(Scopes.SINGLETON);
      binder.bind(GracefulShutdownHandler.class).in(Scopes.SINGLETON);
    }
  }
);
  if (discoveryUri != null) {
    requireNonNull(environment,"environment required when discoveryUri is present");
    serverProperties.put("discovery.uri",discoveryUri.toString());
    modules.add(new DiscoveryModule());
  }
 else {
    modules.add(new TestingDiscoveryModule());
  }
  modules.addAll(additionalModules);
  Bootstrap app=new Bootstrap(modules.build());
  Map<String,String> optionalProperties=new HashMap<>();
  if (environment != null) {
    optionalProperties.put("node.environment",environment);
  }
  Injector injector=app.strictConfig().doNotInitializeLogging().setRequiredConfigurationProperties(serverProperties.build()).setOptionalConfigurationProperties(optionalProperties).initialize();
  injector.getInstance(Announcer.class).start();
  lifeCycleManager=injector.getInstance(LifeCycleManager.class);
  queryManager=injector.getInstance(QueryManager.class);
  pluginManager=injector.getInstance(PluginManager.class);
  connectorManager=injector.getInstance(ConnectorManager.class);
  server=injector.getInstance(TestingHttpServer.class);
  metadata=injector.getInstance(Metadata.class);
  accessControl=injector.getInstance(TestingAccessControlManager.class);
  splitManager=injector.getInstance(SplitManager.class);
  clusterMemoryManager=injector.getInstance(ClusterMemoryManager.class);
  localMemoryManager=injector.getInstance(LocalMemoryManager.class);
  nodeManager=injector.getInstance(InternalNodeManager.class);
  serviceSelectorManager=injector.getInstance(ServiceSelectorManager.class);
  gracefulShutdownHandler=injector.getInstance(GracefulShutdownHandler.class);
  taskManager=injector.getInstance(TaskManager.class);
  shutdownAction=injector.getInstance(ShutdownAction.class);
  announcer=injector.getInstance(Announcer.class);
  announcer.forceAnnounce();
  refreshNodes();
}
