{
  Page expectedPage=new Page(100);
  PageRequestProcessor processor=new PageRequestProcessor();
  CyclicBarrier requestComplete=new CyclicBarrier(2);
  TestingClientCallback callback=new TestingClientCallback(requestComplete);
  URI location=URI.create("http://localhost:8080");
  HttpPageBufferClient client=new HttpPageBufferClient(new TestingHttpClient(processor,newCachedThreadPool(daemonThreadsNamed("test-%s"))),new DataSize(10,Unit.MEGABYTE),location,callback);
  assertStatus(client,location,"queued",0,0,0,"queued");
  processor.addPage(expectedPage);
  callback.resetStats();
  client.scheduleRequest();
  requestComplete.await(1,TimeUnit.SECONDS);
  assertEquals(callback.getPages().size(),1);
  assertPageEquals(expectedPage,callback.getPages().get(0));
  assertEquals(callback.getCompletedRequests(),1);
  assertEquals(callback.getFinishedBuffers(),0);
  assertStatus(client,location,"queued",1,1,1,"queued");
  callback.resetStats();
  client.scheduleRequest();
  requestComplete.await(1,TimeUnit.SECONDS);
  assertEquals(callback.getPages().size(),0);
  assertEquals(callback.getCompletedRequests(),1);
  assertEquals(callback.getFinishedBuffers(),0);
  assertStatus(client,location,"queued",1,2,2,"queued");
  processor.addPage(expectedPage);
  processor.addPage(expectedPage);
  callback.resetStats();
  client.scheduleRequest();
  requestComplete.await(1,TimeUnit.SECONDS);
  assertEquals(callback.getPages().size(),2);
  assertPageEquals(expectedPage,callback.getPages().get(0));
  assertPageEquals(expectedPage,callback.getPages().get(1));
  assertEquals(callback.getCompletedRequests(),1);
  assertEquals(callback.getFinishedBuffers(),0);
  callback.resetStats();
  assertStatus(client,location,"queued",3,3,3,"queued");
  callback.resetStats();
  processor.setComplete(true);
  client.scheduleRequest();
  requestComplete.await(1,TimeUnit.SECONDS);
  assertEquals(callback.getPages().size(),0);
  assertEquals(callback.getCompletedRequests(),0);
  assertEquals(callback.getFinishedBuffers(),1);
  assertStatus(client,location,"closed",3,4,4,"queued");
}
