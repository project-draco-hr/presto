{
  Page expectedPage=new Page(100);
  DataSize expectedMaxSize=new DataSize(11,Unit.MEGABYTE);
  MockExchangeRequestProcessor processor=new MockExchangeRequestProcessor(expectedMaxSize);
  CyclicBarrier requestComplete=new CyclicBarrier(2);
  TestingClientCallback callback=new TestingClientCallback(requestComplete);
  URI location=URI.create("http://localhost:8080");
  HttpPageBufferClient client=new HttpPageBufferClient(new TestingHttpClient(processor,executor),expectedMaxSize,new Duration(1,TimeUnit.MINUTES),location,callback,blockEncodingManager,executor,Stopwatch.createUnstarted());
  assertStatus(client,location,"queued",0,0,0,0,"not scheduled");
  processor.addPage(location,expectedPage);
  callback.resetStats();
  client.scheduleRequest();
  requestComplete.await(10,TimeUnit.SECONDS);
  assertEquals(callback.getPages().size(),1);
  assertPageEquals(expectedPage,callback.getPages().get(0));
  assertEquals(callback.getCompletedRequests(),1);
  assertEquals(callback.getFinishedBuffers(),0);
  assertStatus(client,location,"queued",1,1,1,0,"not scheduled");
  callback.resetStats();
  client.scheduleRequest();
  requestComplete.await(10,TimeUnit.SECONDS);
  assertEquals(callback.getPages().size(),0);
  assertEquals(callback.getCompletedRequests(),1);
  assertEquals(callback.getFinishedBuffers(),0);
  assertStatus(client,location,"queued",1,2,2,0,"not scheduled");
  processor.addPage(location,expectedPage);
  processor.addPage(location,expectedPage);
  callback.resetStats();
  client.scheduleRequest();
  requestComplete.await(10,TimeUnit.SECONDS);
  assertEquals(callback.getPages().size(),2);
  assertPageEquals(expectedPage,callback.getPages().get(0));
  assertPageEquals(expectedPage,callback.getPages().get(1));
  assertEquals(callback.getCompletedRequests(),1);
  assertEquals(callback.getFinishedBuffers(),0);
  assertEquals(callback.getFailedBuffers(),0);
  callback.resetStats();
  assertStatus(client,location,"queued",3,3,3,0,"not scheduled");
  callback.resetStats();
  processor.setComplete(location);
  client.scheduleRequest();
  requestComplete.await(10,TimeUnit.SECONDS);
  assertEquals(callback.getPages().size(),0);
  assertEquals(callback.getCompletedRequests(),1);
  callback.resetStats();
  client.scheduleRequest();
  requestComplete.await(10,TimeUnit.SECONDS);
  assertEquals(callback.getFinishedBuffers(),1);
  assertEquals(callback.getPages().size(),0);
  assertEquals(callback.getCompletedRequests(),0);
  assertEquals(callback.getFailedBuffers(),0);
  assertStatus(client,location,"closed",3,5,5,0,"not scheduled");
}
