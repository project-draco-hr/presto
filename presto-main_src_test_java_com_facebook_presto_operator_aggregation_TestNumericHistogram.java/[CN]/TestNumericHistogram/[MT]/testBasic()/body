{
  double[] data={2.9,3.1,3.4,3.5,3.1,2.9,3,3.8,3.6,3.1,3.6,2.5,2.8,2.3,3,3,3.2,3.8,2.6,2.9,3.9,3.5,2.2,2.9,3,3.2,3.4,3.2,3,4.2,3,2.9,4.4,2.4,3.9,2.8,3.1,3.2,3,3,3.7,2.9,3,3.1,2.5,3.3,2.7,3,3.1,3,2.8,3,3.5,2.6,3.2,2.6,2.9,4,2.8,3.2,2.8,3.2,3.4,2.8,3.7,3.8,2.7,3.3,2.5,2.8,2.4,2.9,3,2.7,3.8,2.8,3,3,3.5,3.4,3.4,3.4,3,3.8,2.9,3,3.6,3.1,3.4,2.7,2.5,2.5,3.2,2.7,2.3,3.3,2.2,3.7,3.5,2.7,2.8,3.4,2.9,3.4,3,2.8,2.7,3.1,3.5,3.3,3.2,3.1,3.2,3.6,3,3.2,3,2.5,3.1,3,3,2.7,2.7,2.6,3,2.3,3.3,2.8,3.2,3.4,2.8,3,3.1,2,3,2.5,2.4,3.3,2.3,3,2.8,2.8,2.6,3.8,3.2,3.4,2.5,4.1,2.2,3.4};
  NumericHistogram histogram=new NumericHistogram(4,data.length);
  Set<Double> uniqueValues=new HashSet<>();
  for (  double value : data) {
    histogram.add(value);
    uniqueValues.add(value);
    if (uniqueValues.size() == 8) {
      histogram.compact();
      uniqueValues.clear();
    }
  }
  Map<Double,Double> expected=ImmutableMap.<Double,Double>builder().put(2.4571428571428564,28.0).put(3.568571428571429,35.0).put(3.0023809523809515,84.0).put(4.233333333333333,3.0).build();
  assertEquals(histogram.getBuckets(),expected);
}
