{
  ImmutableList.Builder<JoinNode.EquiJoinClause> criteriaBuilder=ImmutableList.builder();
  criteriaBuilder.add(new JoinNode.EquiJoinClause(A,D));
  criteriaBuilder.add(new JoinNode.EquiJoinClause(B,E));
  List<JoinNode.EquiJoinClause> criteria=criteriaBuilder.build();
  Map<Symbol,ColumnHandle> leftAssignments=Maps.filterKeys(scanAssignments,Predicates.in(ImmutableList.of(A,B,C)));
  TableScanNode leftScan=new TableScanNode(newId(),new DualTableHandle("default"),ImmutableList.copyOf(leftAssignments.keySet()),leftAssignments,Optional.<GeneratedPartitions>absent());
  Map<Symbol,ColumnHandle> rightAssignments=Maps.filterKeys(scanAssignments,Predicates.in(ImmutableList.of(D,E,F)));
  TableScanNode rightScan=new TableScanNode(newId(),new DualTableHandle("default"),ImmutableList.copyOf(rightAssignments.keySet()),rightAssignments,Optional.<GeneratedPartitions>absent());
  PlanNode node=new JoinNode(newId(),JoinNode.Type.LEFT,filter(leftScan,and(lessThan(BE,AE),lessThan(CE,number(10)))),filter(rightScan,and(equals(DE,EE),lessThan(FE,number(100)))),criteria);
  Expression effectivePredicate=EffectivePredicateExtractor.extract(node);
  Assert.assertEquals(normalizeConjuncts(effectivePredicate),normalizeConjuncts(lessThan(BE,AE),lessThan(CE,number(10)),or(equals(DE,EE),and(isNull(DE),isNull(EE))),or(lessThan(FE,number(100)),isNull(FE)),or(equals(AE,DE),isNull(DE)),or(equals(BE,EE),isNull(EE))));
}
