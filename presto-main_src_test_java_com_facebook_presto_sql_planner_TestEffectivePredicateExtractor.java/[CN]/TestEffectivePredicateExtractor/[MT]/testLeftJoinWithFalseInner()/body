{
  List<JoinNode.EquiJoinClause> criteria=ImmutableList.of(new JoinNode.EquiJoinClause(A,D));
  Map<Symbol,ColumnHandle> leftAssignments=Maps.filterKeys(scanAssignments,Predicates.in(ImmutableList.of(A,B,C)));
  TableScanNode leftScan=new TableScanNode(newId(),DUAL_TABLE_HANDLE,ImmutableList.copyOf(leftAssignments.keySet()),leftAssignments,Optional.empty(),TupleDomain.all(),null);
  Map<Symbol,ColumnHandle> rightAssignments=Maps.filterKeys(scanAssignments,Predicates.in(ImmutableList.of(D,E,F)));
  TableScanNode rightScan=new TableScanNode(newId(),DUAL_TABLE_HANDLE,ImmutableList.copyOf(rightAssignments.keySet()),rightAssignments,Optional.empty(),TupleDomain.all(),null);
  PlanNode node=new JoinNode(newId(),JoinNode.Type.LEFT,filter(leftScan,and(lessThan(BE,AE),lessThan(CE,number(10)))),filter(rightScan,FALSE_LITERAL),criteria,Optional.empty(),Optional.empty());
  Expression effectivePredicate=EffectivePredicateExtractor.extract(node,TYPES);
  Assert.assertEquals(normalizeConjuncts(effectivePredicate),normalizeConjuncts(lessThan(BE,AE),lessThan(CE,number(10)),or(equals(AE,DE),isNull(DE))));
}
