{
  ImmutableList.Builder<JoinNode.EquiJoinClause> criteriaBuilder=ImmutableList.builder();
  criteriaBuilder.add(new JoinNode.EquiJoinClause(A,D));
  criteriaBuilder.add(new JoinNode.EquiJoinClause(B,E));
  List<JoinNode.EquiJoinClause> criteria=criteriaBuilder.build();
  TableScanNode leftScan=new TableScanNode(newId(),new DualTableHandle("default"),ImmutableList.of(A,B,C),scanAssignments,BooleanLiteral.TRUE_LITERAL,BooleanLiteral.TRUE_LITERAL);
  TableScanNode rightScan=new TableScanNode(newId(),new DualTableHandle("default"),ImmutableList.of(D,E,F),scanAssignments,BooleanLiteral.TRUE_LITERAL,BooleanLiteral.TRUE_LITERAL);
  PlanNode node=new JoinNode(newId(),JoinNode.Type.RIGHT,filter(leftScan,and(lessThan(BE,AE),lessThan(CE,number(10)))),filter(rightScan,and(equals(DE,EE),lessThan(FE,number(100)))),criteria);
  Expression effectivePredicate=EffectivePredicateExtractor.extract(node);
  Assert.assertEquals(conjunctsAsSet(effectivePredicate),set(or(lessThan(BE,AE),and(isNull(BE),isNull(AE))),or(lessThan(CE,number(10)),isNull(CE)),equals(DE,EE),lessThan(FE,number(100)),or(equals(AE,DE),isNull(AE)),or(equals(BE,EE),isNull(BE))));
}
