{
  diskRanges=Maps.transformValues(diskRanges,new Function<DiskRange,DiskRange>(){
    @Override public DiskRange apply(    DiskRange diskRange){
      return new DiskRange(stripeOffset + diskRange.getOffset(),diskRange.getLength());
    }
  }
);
  Map<StreamId,Slice> streamsData=orcDataSource.readFully(diskRanges);
  return ImmutableMap.copyOf(Maps.transformValues(streamsData,new Function<Slice,OrcInputStream>(){
    @Override public OrcInputStream apply(    Slice input){
      return new OrcInputStream(orcDataSource.toString(),input.getInput(),compressionKind,bufferSize);
    }
  }
));
}
