{
  File groupByFile=new File("data/rle/column5.string_rle.data");
  TupleStreamSerde groupBySerde=new RunLengthEncodedSerde();
  File aggregateFile=new File("data/rle/column3.fmillis_raw.data");
  TupleStreamSerde aggregateSerde=UncompressedSerde.INSTANCE;
  Slice groupBySlice=Slices.mapFileReadOnly(groupByFile);
  Slice aggregateSlice=Slices.mapFileReadOnly(aggregateFile);
  for (int i=0; i < 100000; ++i) {
    TupleStream groupBySource=groupBySerde.deserialize(groupBySlice);
    TupleStream aggregateSource=aggregateSerde.deserialize(aggregateSlice);
    GroupByOperator groupBy=new GroupByOperator(groupBySource);
    PipelinedAggregationOperator aggregation=new PipelinedAggregationOperator(groupBy,aggregateSource,SumAggregation.PROVIDER);
    Result result=doIt(aggregation);
    long count=result.count;
    Duration duration=result.duration;
    DataSize fileSize=new DataSize(groupByFile.length() + aggregateFile.length(),DataSize.Unit.BYTE);
    System.out.println(String.format("%s, %s, %.2f/s, %2.2f MB/s",duration,count,count / duration.toMillis() * 1000,fileSize.getValue(DataSize.Unit.MEGABYTE) / duration.convertTo(TimeUnit.SECONDS)));
  }
  Thread.sleep(1000);
}
