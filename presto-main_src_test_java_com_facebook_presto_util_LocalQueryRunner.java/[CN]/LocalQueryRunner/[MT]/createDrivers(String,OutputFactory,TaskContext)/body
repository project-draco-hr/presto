{
  Statement statement=SqlParser.createStatement(sql);
  if (printPlan) {
    assertFormattedSql(statement);
  }
  PlanNodeIdAllocator idAllocator=new PlanNodeIdAllocator();
  PlanOptimizersFactory planOptimizersFactory=new PlanOptimizersFactory(metadata,splitManager);
  QueryExplainer queryExplainer=new QueryExplainer(session,planOptimizersFactory.get(),metadata,new MockPeriodicImportManager(),new MockStorageManager());
  Analyzer analyzer=new Analyzer(session,metadata,Optional.of(queryExplainer));
  Analysis analysis=analyzer.analyze(statement);
  Plan plan=new LogicalPlanner(session,planOptimizersFactory.get(),idAllocator,metadata,new MockPeriodicImportManager(),new MockStorageManager()).plan(analysis);
  if (printPlan) {
    System.out.println(PlanPrinter.textLogicalPlan(plan.getRoot(),plan.getTypes()));
  }
  SubPlan subplan=new DistributedLogicalPlanner(metadata,idAllocator).createSubPlans(plan,true);
  assertTrue(subplan.getChildren().isEmpty(),"Expected subplan to have no children");
  LocalExecutionPlanner executionPlanner=new LocalExecutionPlanner(new NodeInfo(new NodeConfig().setEnvironment("test").setNodeId("test-node")),metadata,dataStreamProvider,storageManager,null,compiler);
  LocalExecutionPlan localExecutionPlan=executionPlanner.plan(session,subplan.getFragment().getRoot(),plan.getTypes(),outputFactory);
  List<TaskSource> sources=new ArrayList<>();
  long sequenceId=0;
  for (  PlanNode sourceNode : subplan.getFragment().getSources()) {
    TableScanNode tableScan=(TableScanNode)sourceNode;
    DataSource dataSource=splitManager.getPartitionSplits(tableScan.getTable(),getPartitions(tableScan));
    ImmutableSet.Builder<ScheduledSplit> scheduledSplits=ImmutableSet.builder();
    for (    Split split : dataSource.getSplits()) {
      scheduledSplits.add(new ScheduledSplit(sequenceId++,split));
    }
    sources.add(new TaskSource(tableScan.getId(),scheduledSplits.build(),true));
  }
  List<Driver> drivers=new ArrayList<>();
  Map<PlanNodeId,Driver> driversBySource=new HashMap<>();
  for (  DriverFactory driverFactory : localExecutionPlan.getDriverFactories()) {
    DriverContext driverContext=taskContext.addPipelineContext(driverFactory.isInputDriver(),driverFactory.isOutputDriver()).addDriverContext();
    Driver driver=driverFactory.createDriver(driverContext);
    drivers.add(driver);
    for (    PlanNodeId sourceId : driver.getSourceIds()) {
      driversBySource.put(sourceId,driver);
    }
    driverFactory.close();
  }
  for (  TaskSource source : sources) {
    for (    Driver driver : driversBySource.values()) {
      driver.updateSource(source);
    }
  }
  return ImmutableList.copyOf(drivers);
}
