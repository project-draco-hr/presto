{
  Statement statement=SqlParser.createStatement(sql);
  if (printPlan) {
    assertFormattedSql(statement);
  }
  PlanNodeIdAllocator idAllocator=new PlanNodeIdAllocator();
  PlanOptimizersFactory planOptimizersFactory=new PlanOptimizersFactory(metadata);
  QueryExplainer queryExplainer=new QueryExplainer(session,planOptimizersFactory.get(),metadata,new MockPeriodicImportManager(),new MockStorageManager());
  Analyzer analyzer=new Analyzer(session,metadata,Optional.of(queryExplainer));
  Analysis analysis=analyzer.analyze(statement);
  Plan plan=new LogicalPlanner(session,planOptimizersFactory.get(),idAllocator,metadata,new MockPeriodicImportManager(),new MockStorageManager()).plan(analysis);
  if (printPlan) {
    System.out.println(PlanPrinter.textLogicalPlan(plan.getRoot(),plan.getTypes()));
  }
  SubPlan subplan=new DistributedLogicalPlanner(metadata,idAllocator).createSubplans(plan,true);
  assertTrue(subplan.getChildren().isEmpty(),"Expected subplan to have no children");
  NewLocalExecutionPlanner executionPlanner=new NewLocalExecutionPlanner(new NodeInfo(new NodeConfig().setEnvironment("test").setNodeId("test-node")),metadata,dataStreamProvider,storageManager,null,compiler);
  NewLocalExecutionPlan localExecutionPlan=executionPlanner.plan(session,subplan.getFragment().getRoot(),plan.getTypes(),outputFactory);
  TaskContext taskContext=new TaskContext(new TaskId("query","stage","task"),executor,session);
  List<Driver> drivers=new ArrayList<>();
  Map<PlanNodeId,Driver> driversBySource=new HashMap<>();
  List<DriverFactory> driverFactories=localExecutionPlan.getDriverFactories();
  for (  DriverFactory driverFactory : driverFactories) {
    DriverContext driverContext=taskContext.addPipelineContext(driverFactory.isInputDriver(),driverFactory.isOutputDriver()).addDriverContext();
    Driver driver=driverFactory.createDriver(driverContext);
    drivers.add(driver);
    for (    PlanNodeId sourceId : driver.getSourceIds()) {
      driversBySource.put(sourceId,driver);
    }
    driverFactory.close();
  }
  for (  PlanNode source : subplan.getFragment().getSources()) {
    TableScanNode tableScan=(TableScanNode)source;
    List<Split> splits=ImmutableList.copyOf(splitManager.getSplits(session,tableScan.getTable(),tableScan.getPartitionPredicate(),tableScan.getUpstreamPredicateHint(),Predicates.<Partition>alwaysTrue(),tableScan.getAssignments()).getSplits());
    Driver driver=driversBySource.get(source.getId());
    checkState(driver != null,"Unknown source %s",source.getId());
    for (    Split split : splits) {
      driver.addSplit(source.getId(),split);
    }
  }
  for (  Driver driver : drivers) {
    for (    PlanNodeId sourceId : driver.getSourceIds()) {
      driver.noMoreSplits(sourceId);
    }
  }
  return ImmutableList.copyOf(drivers);
}
