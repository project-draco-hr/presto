{
  this.session=checkNotNull(session,"session is null");
  this.executor=checkNotNull(executor,"executor is null");
  this.nodeManager=new InMemoryNodeManager();
  this.typeRegistry=new TypeRegistry();
  this.metadata=new MetadataManager(new FeaturesConfig().setExperimentalSyntaxEnabled(true),new TypeRegistry());
  this.splitManager=new SplitManager(ImmutableSet.<ConnectorSplitManager>of());
  this.dataStreamProvider=new DataStreamManager();
  this.indexManager=new IndexManager();
  this.recordSinkManager=new RecordSinkManager();
  this.storageManager=MockLocalStorageManager.createMockLocalStorageManager();
  this.compiler=new ExpressionCompiler(metadata);
  SystemTablesMetadata systemTablesMetadata=new SystemTablesMetadata();
  SystemSplitManager systemSplitManager=new SystemSplitManager(nodeManager);
  SystemDataStreamProvider systemDataStreamProvider=new SystemDataStreamProvider();
  SystemTablesManager systemTablesManager=new SystemTablesManager(systemTablesMetadata,systemSplitManager,systemDataStreamProvider,ImmutableSet.<SystemTable>of());
  systemTablesManager.addTable(new NodesSystemTable(nodeManager));
  systemTablesManager.addTable(new CatalogSystemTable(metadata));
  this.connectorManager=new ConnectorManager(metadata,splitManager,dataStreamProvider,indexManager,recordSinkManager,new HandleResolver(),new OutputTableHandleResolver(),ImmutableMap.<String,ConnectorFactory>of(),ImmutableMap.<String,Connector>of(DualConnector.CONNECTOR_ID,new DualConnector(nodeManager),SystemConnector.CONNECTOR_ID,new SystemConnector(systemTablesMetadata,systemSplitManager,systemDataStreamProvider)));
  splitManager.addConnectorSplitManager(new InformationSchemaSplitManager(nodeManager));
  dataStreamProvider.addConnectorDataStreamProvider(new InformationSchemaDataStreamProvider(metadata,splitManager));
}
