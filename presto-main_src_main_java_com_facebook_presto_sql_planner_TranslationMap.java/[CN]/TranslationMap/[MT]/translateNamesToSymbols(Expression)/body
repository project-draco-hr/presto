{
  return ExpressionTreeRewriter.rewriteWith(new ExpressionRewriter<Void>(){
    @Override public Expression rewriteExpression(    Expression node,    Void context,    ExpressionTreeRewriter<Void> treeRewriter){
      Expression rewrittenExpression=treeRewriter.defaultRewrite(node,context);
      Type coercion=analysis.getCoercion(node);
      if (coercion != null) {
        Type type=analysis.getType(node);
        rewrittenExpression=new Cast(rewrittenExpression,coercion.getTypeSignature().toString(),false,isTypeOnlyCoercion(type,coercion));
      }
      return rewrittenExpression;
    }
    @Override public Expression rewriteQualifiedNameReference(    QualifiedNameReference node,    Void context,    ExpressionTreeRewriter<Void> treeRewriter){
      return rewriteExpressionWithResolvedName(node);
    }
    private Expression rewriteExpressionWithResolvedName(    Expression node){
      Optional<Integer> fieldIndex=analysis.getFieldIndex(node);
      checkState(fieldIndex.isPresent(),"No field mapping for node '%s'",node);
      Symbol symbol=rewriteBase.getSymbol(fieldIndex.get());
      checkState(symbol != null,"No symbol mapping for node '%s' (%s)",node,fieldIndex.get());
      Expression rewrittenExpression=new QualifiedNameReference(symbol.toQualifiedName());
      Type coercion=analysis.getCoercion(node);
      if (coercion != null) {
        rewrittenExpression=new Cast(rewrittenExpression,coercion.getTypeSignature().toString());
      }
      return rewrittenExpression;
    }
    @Override public Expression rewriteDereferenceExpression(    DereferenceExpression node,    Void context,    ExpressionTreeRewriter<Void> treeRewriter){
      if (analysis.getFieldIndex(node).isPresent()) {
        return rewriteExpressionWithResolvedName(node);
      }
      QualifiedName mangledName=QualifiedName.of(mangleFieldReference(node.getFieldName()));
      FunctionCall functionCall=new FunctionCall(mangledName,ImmutableList.of(node.getBase()));
      IdentityHashMap<Expression,Type> functionType=new IdentityHashMap<>();
      functionType.put(functionCall,analysis.getType(node));
      analysis.addTypes(functionType);
      Expression rewrittenExpression=rewriteFunctionCall(functionCall,context,treeRewriter);
      Type type=analysis.getType(node);
      Type coercion=analysis.getCoercion(node);
      if (coercion != null) {
        rewrittenExpression=new Cast(rewrittenExpression,coercion.getTypeSignature().toString(),false,isTypeOnlyCoercion(type,coercion));
      }
      return rewrittenExpression;
    }
  }
,expression);
}
