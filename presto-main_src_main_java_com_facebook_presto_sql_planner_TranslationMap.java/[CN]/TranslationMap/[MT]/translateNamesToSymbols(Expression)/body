{
  return ExpressionTreeRewriter.rewriteWith(new ExpressionRewriter<Void>(){
    @Override public Expression rewriteExpression(    Expression node,    Void context,    ExpressionTreeRewriter<Void> treeRewriter){
      Expression rewrittenExpression=treeRewriter.defaultRewrite(node,context);
      return coerceIfNecessary(node,rewrittenExpression);
    }
    @Override public Expression rewriteFieldReference(    FieldReference node,    Void context,    ExpressionTreeRewriter<Void> treeRewriter){
      Symbol symbol=rewriteBase.getSymbol(node.getFieldIndex());
      checkState(symbol != null,"No symbol mapping for node '%s' (%s)",node,node.getFieldIndex());
      return symbol.toSymbolReference();
    }
    @Override public Expression rewriteQualifiedNameReference(    QualifiedNameReference node,    Void context,    ExpressionTreeRewriter<Void> treeRewriter){
      return rewriteExpressionWithResolvedName(node);
    }
    private Expression rewriteExpressionWithResolvedName(    Expression node){
      Optional<Symbol> symbol=rewriteBase.getSymbol(node);
      checkState(symbol.isPresent(),"No symbol mapping for node '%s'",node);
      Expression rewrittenExpression=symbol.get().toSymbolReference();
      return coerceIfNecessary(node,rewrittenExpression);
    }
    @Override public Expression rewriteDereferenceExpression(    DereferenceExpression node,    Void context,    ExpressionTreeRewriter<Void> treeRewriter){
      Optional<ResolvedField> resolvedField=rewriteBase.getScope().tryResolveField(node);
      if (resolvedField.isPresent()) {
        return rewriteExpressionWithResolvedName(node);
      }
      return rewriteExpression(node,context,treeRewriter);
    }
    private Expression coerceIfNecessary(    Expression original,    Expression rewritten){
      Type coercion=analysis.getCoercion(original);
      if (coercion != null) {
        rewritten=new Cast(rewritten,coercion.getTypeSignature().toString(),false,analysis.isTypeOnlyCoercion(original));
      }
      return rewritten;
    }
  }
,expression);
}
