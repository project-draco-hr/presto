{
  tester.testRoundTrip(javaDoubleObjectInspector,ImmutableList.of(1000.0,-1.0,Double.POSITIVE_INFINITY),DOUBLE);
  tester.testRoundTrip(javaDoubleObjectInspector,ImmutableList.of(-1000.0,Double.NEGATIVE_INFINITY,1.0),DOUBLE);
  tester.testRoundTrip(javaDoubleObjectInspector,ImmutableList.of(0.0,Double.NEGATIVE_INFINITY,Double.POSITIVE_INFINITY),DOUBLE);
  tester.testRoundTrip(javaDoubleObjectInspector,ImmutableList.of(Double.NaN,-1.0,1.0),DOUBLE);
  tester.testRoundTrip(javaDoubleObjectInspector,ImmutableList.of(Double.NaN,-1.0,Double.POSITIVE_INFINITY),DOUBLE);
  tester.testRoundTrip(javaDoubleObjectInspector,ImmutableList.of(Double.NaN,Double.NEGATIVE_INFINITY,1.0),DOUBLE);
  tester.testRoundTrip(javaDoubleObjectInspector,ImmutableList.of(Double.NaN,Double.NEGATIVE_INFINITY,Double.POSITIVE_INFINITY),DOUBLE);
}
