{
  DriverContext driverContext=taskContext.addPipelineContext(true,true).addDriverContext();
  OperatorContext operatorContext=driverContext.addOperatorContext(0,ValuesOperator.class.getSimpleName());
  List<Type> buildTypes=ImmutableList.<Type>of(VARCHAR,BIGINT,BIGINT);
  Operator buildOperator=new ValuesOperator(operatorContext,buildTypes,rowPagesBuilder(buildTypes).addSequencePage(10,20,30,40).build());
  HashBuilderOperatorFactory hashBuilderOperatorFactory=new HashBuilderOperatorFactory(1,buildOperator.getTypes(),Ints.asList(0),100);
  Operator sourceHashProvider=hashBuilderOperatorFactory.createOperator(driverContext);
  Driver driver=new Driver(driverContext,buildOperator,sourceHashProvider);
  while (!driver.isFinished()) {
    driver.process();
  }
  List<Type> probeTypes=ImmutableList.<Type>of(VARCHAR,BIGINT,BIGINT);
  List<Page> probeInput=rowPagesBuilder(probeTypes).addSequencePage(1000,0,1000,2000).build();
  OperatorFactory joinOperatorFactory=LookupJoinOperators.innerJoin(0,hashBuilderOperatorFactory.getLookupSourceSupplier(),probeTypes,Ints.asList(0));
  Operator joinOperator=joinOperatorFactory.createOperator(taskContext.addPipelineContext(true,true).addDriverContext());
  MaterializedResult expected=MaterializedResult.resultBuilder(taskContext.getSession(),concat(probeTypes,buildTypes)).row("20",1020,2020,"20",30,40).row("21",1021,2021,"21",31,41).row("22",1022,2022,"22",32,42).row("23",1023,2023,"23",33,43).row("24",1024,2024,"24",34,44).row("25",1025,2025,"25",35,45).row("26",1026,2026,"26",36,46).row("27",1027,2027,"27",37,47).row("28",1028,2028,"28",38,48).row("29",1029,2029,"29",39,49).build();
  assertOperatorEquals(joinOperator,probeInput,expected);
}
