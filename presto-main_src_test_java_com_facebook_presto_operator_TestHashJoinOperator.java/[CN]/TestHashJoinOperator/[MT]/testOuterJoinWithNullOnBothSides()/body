{
  DriverContext driverContext=taskContext.addPipelineContext(true,true).addDriverContext();
  OperatorContext operatorContext=driverContext.addOperatorContext(0,ValuesOperator.class.getSimpleName());
  Operator buildOperator=new ValuesOperator(operatorContext,rowPagesBuilder(VARCHAR).row("a").row((String)null).row((String)null).row("a").row("b").build());
  HashBuilderOperatorFactory hashBuilderOperatorFactory=new HashBuilderOperatorFactory(1,buildOperator.getTypes(),Ints.asList(0),100);
  Operator sourceHashProvider=hashBuilderOperatorFactory.createOperator(driverContext);
  Driver driver=new Driver(driverContext,buildOperator,sourceHashProvider);
  while (!driver.isFinished()) {
    driver.process();
  }
  List<Page> probeInput=rowPagesBuilder(VARCHAR).row("a").row("b").row((String)null).row("c").build();
  OperatorFactory joinOperatorFactory=HashJoinOperators.outerJoin(0,hashBuilderOperatorFactory.getHashSupplier(),ImmutableList.of(VARCHAR),Ints.asList(0));
  Operator joinOperator=joinOperatorFactory.createOperator(taskContext.addPipelineContext(true,true).addDriverContext());
  MaterializedResult expected=MaterializedResult.resultBuilder(taskContext.getSession(),VARCHAR,VARCHAR).row("a","a").row("a","a").row("b","b").row(null,null).row("c",null).build();
  assertOperatorEquals(joinOperator,probeInput,expected);
}
