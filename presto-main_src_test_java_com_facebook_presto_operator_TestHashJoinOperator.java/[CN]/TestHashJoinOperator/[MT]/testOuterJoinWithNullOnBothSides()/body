{
  DriverContext driverContext=taskContext.addPipelineContext(true,true).addDriverContext();
  OperatorContext operatorContext=driverContext.addOperatorContext(0,ValuesOperator.class.getSimpleName());
  List<Type> buildTypes=ImmutableList.<Type>of(VARCHAR);
  Operator buildOperator=new ValuesOperator(operatorContext,buildTypes,rowPagesBuilder(buildTypes).row("a").row((String)null).row((String)null).row("a").row("b").build());
  HashBuilderOperatorFactory hashBuilderOperatorFactory=new HashBuilderOperatorFactory(1,buildOperator.getTypes(),Ints.asList(0),100);
  Operator sourceHashProvider=hashBuilderOperatorFactory.createOperator(driverContext);
  Driver driver=new Driver(driverContext,buildOperator,sourceHashProvider);
  while (!driver.isFinished()) {
    driver.process();
  }
  List<Type> probeTypes=ImmutableList.<Type>of(VARCHAR);
  List<Page> probeInput=rowPagesBuilder(probeTypes).row("a").row("b").row((String)null).row("c").build();
  OperatorFactory joinOperatorFactory=LookupJoinOperators.outerJoin(0,hashBuilderOperatorFactory.getLookupSourceSupplier(),probeTypes,Ints.asList(0));
  Operator joinOperator=joinOperatorFactory.createOperator(taskContext.addPipelineContext(true,true).addDriverContext());
  MaterializedResult expected=MaterializedResult.resultBuilder(taskContext.getSession(),concat(probeTypes,buildTypes)).row("a","a").row("a","a").row("b","b").row(null,null).row("c",null).build();
  assertOperatorEquals(joinOperator,probeInput,expected);
}
