{
  TaskContext taskContext=createTaskContext();
  RowPagesBuilder buildPages=rowPagesBuilder(buildHashEnabled,Ints.asList(0),ImmutableList.of(VARCHAR,BIGINT,BIGINT)).addSequencePage(10,20,30,40);
  LookupSourceSupplier lookupSourceSupplier=buildHash(parallelBuild,taskContext,Ints.asList(0),buildPages);
  RowPagesBuilder probePages=rowPagesBuilder(probeHashEnabled,Ints.asList(0),ImmutableList.<Type>of(VARCHAR,BIGINT,BIGINT));
  List<Page> probeInput=probePages.addSequencePage(1000,0,1000,2000).build();
  OperatorFactory joinOperatorFactory=LookupJoinOperators.innerJoin(0,new PlanNodeId("test"),lookupSourceSupplier,probePages.getTypes(),Ints.asList(0),probePages.getHashChannel());
  Operator joinOperator=joinOperatorFactory.createOperator(taskContext.addPipelineContext(true,true).addDriverContext());
  MaterializedResult expected=MaterializedResult.resultBuilder(taskContext.getSession(),concat(probePages.getTypes(),buildPages.getTypes())).row("20",1020L,2020L,"20",30L,40L).row("21",1021L,2021L,"21",31L,41L).row("22",1022L,2022L,"22",32L,42L).row("23",1023L,2023L,"23",33L,43L).row("24",1024L,2024L,"24",34L,44L).row("25",1025L,2025L,"25",35L,45L).row("26",1026L,2026L,"26",36L,46L).row("27",1027L,2027L,"27",37L,47L).row("28",1028L,2028L,"28",38L,48L).row("29",1029L,2029L,"29",39L,49L).build();
  assertOperatorEquals(joinOperator,probeInput,expected,true,getHashChannels(probePages,buildPages));
}
