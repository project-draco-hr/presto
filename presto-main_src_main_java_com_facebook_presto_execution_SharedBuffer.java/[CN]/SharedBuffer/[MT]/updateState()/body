{
  if (failed.get()) {
    return;
  }
  if (closed.get()) {
    for (Iterator<NamedQueue> iterator=openQueuesBySequenceId.iterator(); iterator.hasNext(); ) {
      NamedQueue namedQueue=iterator.next();
      if (namedQueue.isEmpty()) {
        namedQueue.setFinished();
        iterator.remove();
      }
    }
  }
  if (state == QueueState.NO_MORE_QUEUES && !openQueuesBySequenceId.isEmpty()) {
    long oldMasterSequenceId=masterSequenceId;
    masterSequenceId=openQueuesBySequenceId.iterator().next().getSequenceId();
    int pagesToRemove=Ints.checkedCast(masterSequenceId - oldMasterSequenceId);
    Preconditions.checkState(pagesToRemove >= 0,"Master sequence id moved backwards: oldMasterSequenceId=%s, newMasterSequenceId=%s",oldMasterSequenceId,masterSequenceId);
    for (int i=0; i < pagesToRemove; i++) {
      Page page=masterQueue.removeFirst();
      bufferedBytes-=page.getDataSize().toBytes();
    }
    while (!queuedPages.isEmpty() && bufferedBytes >= maxBufferedBytes) {
      QueuedPage queuedPage=queuedPages.removeFirst();
      addInternal(queuedPage.getPage());
      queuedPage.getFuture().set(null);
    }
  }
  if (state == QueueState.NO_MORE_QUEUES && closed.get() && openQueuesBySequenceId.isEmpty()) {
    state=QueueState.FINISHED;
  }
  this.notifyAll();
}
