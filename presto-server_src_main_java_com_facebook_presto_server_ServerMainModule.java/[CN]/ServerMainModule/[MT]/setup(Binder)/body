{
  ServerConfig serverConfig=buildConfigObject(ServerConfig.class);
  install(new CoordinatorModule());
  if (serverConfig.isCoordinator()) {
    discoveryBinder(binder).bindHttpAnnouncement("presto-coordinator");
  }
  bindFailureDetector(binder,serverConfig.isCoordinator());
  binder.bind(TaskResource.class).in(Scopes.SINGLETON);
  binder.bind(TaskManager.class).to(SqlTaskManager.class).in(Scopes.SINGLETON);
  newExporter(binder).export(TaskManager.class).withGeneratedName();
  binder.bind(TaskExecutor.class).in(Scopes.SINGLETON);
  newExporter(binder).export(TaskExecutor.class).withGeneratedName();
  binder.bind(LocalExecutionPlanner.class).in(Scopes.SINGLETON);
  binder.bind(ExpressionCompiler.class).in(Scopes.SINGLETON);
  newExporter(binder).export(ExpressionCompiler.class).withGeneratedName();
  bindConfig(binder).to(TaskManagerConfig.class);
  jsonCodecBinder(binder).bindJsonCodec(TaskInfo.class);
  binder.bind(PagesMapper.class).in(Scopes.SINGLETON);
  binder.bind(new TypeLiteral<Supplier<ExchangeClient>>(){
  }
).to(ExchangeClientFactory.class).in(Scopes.SINGLETON);
  httpClientBinder(binder).bindAsyncHttpClient("exchange",ForExchange.class).withTracing();
  bindConfig(binder).to(ExchangeClientConfig.class);
  binder.bind(LocationFactory.class).to(HttpLocationFactory.class).in(Scopes.SINGLETON);
  binder.bind(RemoteTaskFactory.class).to(HttpRemoteTaskFactory.class).in(Scopes.SINGLETON);
  httpClientBinder(binder).bindAsyncHttpClient("scheduler",ForScheduler.class).withTracing();
  bindConfig(binder).to(DatabaseLocalStorageManagerConfig.class);
  binder.bind(LocalStorageManager.class).to(DatabaseLocalStorageManager.class).in(Scopes.SINGLETON);
  newExporter(binder).export(LocalStorageManager.class).withGeneratedName();
  binder.bind(DataStreamManager.class).in(Scopes.SINGLETON);
  binder.bind(DataStreamProvider.class).to(DataStreamManager.class).in(Scopes.SINGLETON);
  newSetBinder(binder,ConnectorDataStreamProvider.class);
  binder.bind(RecordSinkManager.class).in(Scopes.SINGLETON);
  binder.bind(RecordSinkProvider.class).to(RecordSinkManager.class).in(Scopes.SINGLETON);
  newSetBinder(binder,ConnectorRecordSinkProvider.class);
  binder.bind(CatalogManager.class).in(Scopes.SINGLETON);
  bindConfig(binder).to(CatalogManagerConfig.class);
  binder.bind(MetadataManager.class).in(Scopes.SINGLETON);
  binder.bind(Metadata.class).to(MetadataManager.class).in(Scopes.SINGLETON);
  binder.bind(TypeRegistry.class).in(Scopes.SINGLETON);
  binder.bind(TypeManager.class).to(TypeRegistry.class).in(Scopes.SINGLETON);
  jsonBinder(binder).addDeserializerBinding(Type.class).to(TypeDeserializer.class);
  newSetBinder(binder,Type.class);
  binder.bind(IndexManager.class).in(Scopes.SINGLETON);
  binder.install(new HandleJsonModule());
  binder.bind(ConnectorManager.class).in(Scopes.SINGLETON);
  MapBinder<String,ConnectorFactory> connectorFactoryBinder=newMapBinder(binder,String.class,ConnectorFactory.class);
  connectorFactoryBinder.addBinding("native").to(NativeConnectorFactory.class);
  connectorFactoryBinder.addBinding("jmx").to(JmxConnectorFactory.class);
  binder.install(new DualModule());
  binder.install(new InformationSchemaModule());
  binder.install(new SystemTablesModule());
  jsonCodecBinder(binder).bindJsonCodec(TaskUpdateRequest.class);
  jsonCodecBinder(binder).bindJsonCodec(ConnectorSplit.class);
  jsonBinder(binder).addSerializerBinding(Slice.class).to(SliceSerializer.class);
  jsonBinder(binder).addDeserializerBinding(Slice.class).to(SliceDeserializer.class);
  jsonBinder(binder).addSerializerBinding(Expression.class).to(ExpressionSerializer.class);
  jsonBinder(binder).addDeserializerBinding(Expression.class).to(ExpressionDeserializer.class);
  jsonBinder(binder).addDeserializerBinding(FunctionCall.class).to(FunctionCallDeserializer.class);
  binder.bind(QueryMonitor.class).in(Scopes.SINGLETON);
  eventBinder(binder).bindEventClient(QueryCreatedEvent.class);
  eventBinder(binder).bindEventClient(QueryCompletionEvent.class);
  eventBinder(binder).bindEventClient(SplitCompletionEvent.class);
  String prestoVersion=serverConfig.getPrestoVersion();
  if (prestoVersion == null) {
    prestoVersion=detectPrestoVersion();
  }
  checkState(prestoVersion != null,"presto.version must be provided when it cannot be automatically determined");
  NodeVersion nodeVersion=new NodeVersion(prestoVersion);
  binder.bind(NodeVersion.class).toInstance(nodeVersion);
  ServiceAnnouncementBuilder prestoAnnouncement=discoveryBinder(binder).bindHttpAnnouncement("presto").addProperty("node_version",nodeVersion.toString());
  if (serverConfig.getDataSources() != null) {
    prestoAnnouncement.addProperty("datasources",serverConfig.getDataSources());
  }
  bindDataSource(binder,"presto-metastore",ForMetadata.class,ForShardManager.class);
  Multibinder<ResultSetMapper<?>> resultSetMapperBinder=newSetBinder(binder,new TypeLiteral<ResultSetMapper<?>>(){
  }
,ForMetadata.class);
  resultSetMapperBinder.addBinding().to(TableColumnMapper.class).in(Scopes.SINGLETON);
  resultSetMapperBinder.addBinding().to(ColumnMetadataMapper.class).in(Scopes.SINGLETON);
  resultSetMapperBinder.addBinding().to(NativePartitionKey.Mapper.class).in(Scopes.SINGLETON);
  jsonCodecBinder(binder).bindJsonCodec(QueryInfo.class);
  jsonCodecBinder(binder).bindJsonCodec(TaskInfo.class);
  jsonCodecBinder(binder).bindJsonCodec(QueryResults.class);
  binder.bind(StatementResource.class).in(Scopes.SINGLETON);
  binder.bind(ExecuteResource.class).in(Scopes.SINGLETON);
  httpClientBinder(binder).bindAsyncHttpClient("execute",ForExecute.class);
  binder.bind(PluginManager.class).in(Scopes.SINGLETON);
  bindConfig(binder).to(PluginManagerConfig.class);
  binder.bind(new TypeLiteral<List<PlanOptimizer>>(){
  }
).toProvider(PlanOptimizersFactory.class).in(Scopes.SINGLETON);
  binder.bind(BlockEncodingSerde.class).to(BlockEncodingManager.class).in(Scopes.SINGLETON);
  Multibinder<BlockEncodingFactory<?>> blockEncodingFactoryBinder=newSetBinder(binder,new TypeLiteral<BlockEncodingFactory<?>>(){
  }
);
  blockEncodingFactoryBinder.addBinding().toInstance(NullType.BLOCK_ENCODING_FACTORY);
  blockEncodingFactoryBinder.addBinding().toInstance(BooleanType.BLOCK_ENCODING_FACTORY);
  blockEncodingFactoryBinder.addBinding().toInstance(BigintType.BLOCK_ENCODING_FACTORY);
  blockEncodingFactoryBinder.addBinding().toInstance(DoubleType.BLOCK_ENCODING_FACTORY);
  blockEncodingFactoryBinder.addBinding().toInstance(VarcharType.BLOCK_ENCODING_FACTORY);
  blockEncodingFactoryBinder.addBinding().toInstance(DateType.BLOCK_ENCODING_FACTORY);
  blockEncodingFactoryBinder.addBinding().toInstance(TimeType.BLOCK_ENCODING_FACTORY);
  blockEncodingFactoryBinder.addBinding().toInstance(TimeWithTimeZoneType.BLOCK_ENCODING_FACTORY);
  blockEncodingFactoryBinder.addBinding().toInstance(TimestampType.BLOCK_ENCODING_FACTORY);
  blockEncodingFactoryBinder.addBinding().toInstance(TimestampWithTimeZoneType.BLOCK_ENCODING_FACTORY);
  blockEncodingFactoryBinder.addBinding().toInstance(IntervalYearMonthType.BLOCK_ENCODING_FACTORY);
  blockEncodingFactoryBinder.addBinding().toInstance(IntervalDayTimeType.BLOCK_ENCODING_FACTORY);
  blockEncodingFactoryBinder.addBinding().toInstance(RunLengthBlockEncoding.FACTORY);
  blockEncodingFactoryBinder.addBinding().toInstance(DictionaryBlockEncoding.FACTORY);
  blockEncodingFactoryBinder.addBinding().toInstance(SnappyBlockEncoding.FACTORY);
  blockEncodingFactoryBinder.addBinding().toInstance(HyperLogLogType.BLOCK_ENCODING_FACTORY);
  blockEncodingFactoryBinder.addBinding().toInstance(ColorType.BLOCK_ENCODING_FACTORY);
  binder.bind(ThreadResource.class).in(Scopes.SINGLETON);
}
