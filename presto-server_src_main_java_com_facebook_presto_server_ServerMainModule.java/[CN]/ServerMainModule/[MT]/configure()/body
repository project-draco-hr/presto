{
  binder.bind(QueryResource.class).in(Scopes.SINGLETON);
  binder.bind(QueryManager.class).to(SqlQueryManager.class).in(Scopes.SINGLETON);
  bindConfig(binder).to(QueryManagerConfig.class);
  binder.bind(StageResource.class).in(Scopes.SINGLETON);
  binder.bind(StageManager.class).to(SqlStageManager.class).in(Scopes.SINGLETON);
  binder.bind(TaskResource.class).in(Scopes.SINGLETON);
  binder.bind(TaskManager.class).to(SqlTaskManager.class).in(Scopes.SINGLETON);
  jsonCodecBinder(binder).bindJsonCodec(TaskInfo.class);
  binder.bind(PagesMapper.class).in(Scopes.SINGLETON);
  binder.bind(LocationFactory.class).to(HttpLocationFactory.class).in(Scopes.SINGLETON);
  binder.bind(RemoteTaskFactory.class).to(HttpRemoteTaskFactory.class).in(Scopes.SINGLETON);
  HttpClientBinder.httpClientBinder(binder).bindAsyncHttpClient("exchange",ForExchange.class).withTracing();
  HttpClientBinder.httpClientBinder(binder).bindHttpClient("scheduler",ForScheduler.class).withTracing();
  binder.bind(PlanFragmentSourceProvider.class).to(HackPlanFragmentSourceProvider.class).in(Scopes.SINGLETON);
  bindConfig(binder).to(StorageManagerConfig.class);
  binder.bind(StorageManager.class).to(DatabaseStorageManager.class).in(Scopes.SINGLETON);
  binder.bind(DataStreamProvider.class).to(DataStreamManager.class).in(Scopes.SINGLETON);
  binder.bind(NativeDataStreamProvider.class).in(Scopes.SINGLETON);
  binder.bind(ImportDataStreamProvider.class).in(Scopes.SINGLETON);
  binder.bind(Metadata.class).to(MetadataManager.class).in(Scopes.SINGLETON);
  binder.bind(NativeMetadata.class).in(Scopes.SINGLETON);
  binder.bind(MetadataResource.class).in(Scopes.SINGLETON);
  binder.bind(InternalMetadata.class).in(Scopes.SINGLETON);
  binder.bind(InternalDataStreamProvider.class).in(Scopes.SINGLETON);
  binder.bind(InformationSchemaMetadata.class).in(Scopes.SINGLETON);
  binder.bind(InformationSchemaData.class).in(Scopes.SINGLETON);
  binder.bind(SystemTables.class).in(Scopes.SINGLETON);
  binder.bind(ImportClientManager.class).in(Scopes.SINGLETON);
  Multibinder.newSetBinder(binder,ImportClientFactory.class);
  binder.bind(ImportMetadata.class).in(Scopes.SINGLETON);
  binder.bind(SplitManager.class).in(Scopes.SINGLETON);
  jsonCodecBinder(binder).bindJsonCodec(QueryFragmentRequest.class);
  jsonBinder(binder).addSerializerBinding(Expression.class).to(ExpressionSerializer.class);
  jsonBinder(binder).addDeserializerBinding(Expression.class).to(ExpressionDeserializer.class);
  jsonBinder(binder).addDeserializerBinding(FunctionCall.class).to(FunctionCallDeserializer.class);
  jsonCodecBinder(binder).bindJsonCodec(StageInfo.class);
  jsonCodecBinder(binder).bindListJsonCodec(FailureInfo.class);
  binder.bind(QueryMonitor.class).in(Scopes.SINGLETON);
  eventBinder(binder).bindEventClient(QueryCreatedEvent.class);
  eventBinder(binder).bindEventClient(QueryCompletionEvent.class);
  discoveryBinder(binder).bindSelector("presto");
  binder.bind(NodeManager.class).in(Scopes.SINGLETON);
  binder.bind(NodeWorkerQueue.class).in(Scopes.SINGLETON);
  binder.bind(ShardManager.class).to(DatabaseShardManager.class).in(Scopes.SINGLETON);
  binder.bind(ImportManager.class).in(Scopes.SINGLETON);
  httpClientBinder(binder).bindHttpClient("importer",ForImportManager.class).withFilter(NodeIdUserAgentRequestFilter.class);
  binder.bind(LocalShardManager.class).in(Scopes.SINGLETON);
  binder.bind(ShardResource.class).in(Scopes.SINGLETON);
  jsonCodecBinder(binder).bindJsonCodec(ShardImport.class);
  ServiceAnnouncementBuilder announcementBuilder=discoveryBinder(binder).bindHttpAnnouncement("presto");
  String datasources=configurationFactory.getProperties().get("datasources");
  if (datasources != null) {
    configurationFactory.consumeProperty("datasources");
    announcementBuilder.addProperty("datasources",datasources);
  }
  String coordinatorProperty=configurationFactory.getProperties().get("coordinator");
  if (coordinatorProperty != null) {
    configurationFactory.consumeProperty("coordinator");
  }
  if (coordinatorProperty == null || Boolean.parseBoolean(coordinatorProperty)) {
    discoveryBinder(binder).bindHttpAnnouncement("presto-coordinator");
  }
  bindDataSource("presto-metastore",ForMetadata.class,ForShardManager.class,ForPeriodicImport.class);
  jsonCodecBinder(binder).bindJsonCodec(QueryInfo.class);
  jsonCodecBinder(binder).bindJsonCodec(TaskInfo.class);
  binder.bind(ExecuteResource.class).in(Scopes.SINGLETON);
  httpClientBinder(binder).bindAsyncHttpClient("execute",ExecuteResource.ForExecute.class);
  binder.install(new TableHandleModule());
  binder.bind(PluginManager.class).in(Scopes.SINGLETON);
  bindConfig(binder).to(PluginManagerConfig.class);
  bindConfig(binder).to(PeriodicImportConfig.class);
  binder.bind(PeriodicImportJobResource.class).in(Scopes.SINGLETON);
  binder.bind(PeriodicImportManager.class).in(Scopes.SINGLETON);
  binder.bind(PeriodicImportController.class).in(Scopes.SINGLETON);
  binder.bind(JobStateFactory.class).in(Scopes.SINGLETON);
  binder.bind(PeriodicImportRunnable.PeriodicImportRunnableFactory.class).in(Scopes.SINGLETON);
  ExportBinder.newExporter(binder).export(PeriodicImportController.class).as("com.facebook.presto:name=periodic-import");
}
