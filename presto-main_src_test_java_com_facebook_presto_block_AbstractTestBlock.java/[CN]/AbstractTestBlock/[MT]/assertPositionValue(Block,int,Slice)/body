{
  if (expectedValue == null) {
    assertTrue(block.isNull(position));
    return;
  }
  assertFalse(block.isNull(position));
  int length=block.getLength(position);
  assertEquals(length,expectedValue.length());
  for (int offset=0; offset <= length - SIZE_OF_BYTE; offset++) {
    assertEquals(block.getByte(position,offset),expectedValue.getByte(offset));
  }
  for (int offset=0; offset <= length - SIZE_OF_SHORT; offset++) {
    assertEquals(block.getShort(position,offset),expectedValue.getShort(offset));
  }
  for (int offset=0; offset <= length - SIZE_OF_INT; offset++) {
    assertEquals(block.getInt(position,offset),expectedValue.getInt(offset));
  }
  for (int offset=0; offset <= length - SIZE_OF_LONG; offset++) {
    assertEquals(block.getLong(position,offset),expectedValue.getLong(offset));
  }
  for (int offset=0; offset <= length - SIZE_OF_FLOAT; offset++) {
    assertEquals(floatToIntBits(block.getFloat(position,offset)),floatToIntBits(expectedValue.getFloat(offset)));
  }
  for (int offset=0; offset <= length - SIZE_OF_DOUBLE; offset++) {
    assertEquals(doubleToLongBits(block.getDouble(position,offset)),doubleToLongBits(expectedValue.getDouble(offset)));
  }
  Block expectedBlock=toSingeValuedBlock(expectedValue);
  for (int offset=0; offset < length - 3; offset++) {
    assertEquals(block.getSlice(position,offset,3),expectedValue.slice(offset,3));
    assertEquals(block.hash(position,offset,3),expectedValue.hashCode(offset,3));
    assertTrue(block.bytesEqual(position,offset,expectedValue,offset,3));
    assertFalse(block.bytesEqual(position,offset,Slices.utf8Slice("XXX"),0,3));
    assertEquals(block.bytesCompare(position,offset,3,expectedValue,offset,3),0);
    assertTrue(block.bytesCompare(position,offset,3,expectedValue,offset,2) > 0);
    Slice greaterSlice=createGreaterValue(expectedValue,offset,3);
    assertTrue(block.bytesCompare(position,offset,3,greaterSlice,0,greaterSlice.length()) < 0);
    assertTrue(block.equals(position,offset,expectedBlock,0,offset,3));
    assertEquals(block.compareTo(position,offset,3,expectedBlock,0,offset,3),0);
    BlockBuilder blockBuilder=VARBINARY.createBlockBuilder(new BlockBuilderStatus(),1);
    block.writeBytesTo(position,offset,3,blockBuilder);
    blockBuilder.closeEntry();
    Block segment=blockBuilder.build();
    assertTrue(block.equals(position,offset,segment,0,0,3));
  }
}
