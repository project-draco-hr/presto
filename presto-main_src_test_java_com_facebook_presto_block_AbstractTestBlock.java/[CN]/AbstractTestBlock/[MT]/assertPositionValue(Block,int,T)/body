{
  if (expectedValue == null) {
    assertTrue(block.isNull(position));
    return;
  }
  assertFalse(block.isNull(position));
  if (expectedValue instanceof Slice) {
    Slice expectedSliceValue=(Slice)expectedValue;
    int length=block.getLength(position);
    assertEquals(length,expectedSliceValue.length());
    if (isByteAccessSupported()) {
      for (int offset=0; offset <= length - SIZE_OF_BYTE; offset++) {
        assertEquals(block.getByte(position,offset),expectedSliceValue.getByte(offset));
      }
    }
    if (isShortAccessSupported()) {
      for (int offset=0; offset <= length - SIZE_OF_SHORT; offset++) {
        assertEquals(block.getShort(position,offset),expectedSliceValue.getShort(offset));
      }
    }
    if (isIntAccessSupported()) {
      for (int offset=0; offset <= length - SIZE_OF_INT; offset++) {
        assertEquals(block.getInt(position,offset),expectedSliceValue.getInt(offset));
      }
    }
    if (isLongAccessSupported()) {
      for (int offset=0; offset <= length - SIZE_OF_LONG; offset++) {
        assertEquals(block.getLong(position,offset),expectedSliceValue.getLong(offset));
      }
    }
    if (isSliceAccessSupported()) {
      assertSlicePosition(block,position,expectedSliceValue);
    }
  }
 else   if (expectedValue instanceof long[]) {
    Block actual=block.getObject(position,Block.class);
    long[] expected=(long[])expectedValue;
    assertEquals(actual.getPositionCount(),expected.length);
    for (int i=0; i < expected.length; i++) {
      assertEquals(BIGINT.getLong(actual,i),expected[i]);
    }
  }
 else   if (expectedValue instanceof Slice[]) {
    Block actual=block.getObject(position,Block.class);
    Slice[] expected=(Slice[])expectedValue;
    assertEquals(actual.getPositionCount(),expected.length);
    for (int i=0; i < expected.length; i++) {
      assertEquals(VARCHAR.getSlice(actual,i),expected[i]);
    }
  }
 else   if (expectedValue instanceof long[][]) {
    Block actual=block.getObject(position,Block.class);
    long[][] expected=(long[][])expectedValue;
    assertEquals(actual.getPositionCount(),expected.length);
    for (int i=0; i < expected.length; i++) {
      assertPositionValue(actual,i,expected[i]);
    }
  }
 else {
    throw new IllegalArgumentException();
  }
}
