{
  if (expectedValue == null) {
    assertTrue(block.isNull(position));
    return;
  }
  assertFalse(block.isNull(position));
  if (expectedValue instanceof Slice) {
    Slice expectedSliceValue=(Slice)expectedValue;
    int length=block.getLength(position);
    assertEquals(length,expectedSliceValue.length());
    for (int offset=0; offset <= length - SIZE_OF_BYTE; offset++) {
      assertEquals(block.getByte(position,offset),expectedSliceValue.getByte(offset));
    }
    for (int offset=0; offset <= length - SIZE_OF_SHORT; offset++) {
      assertEquals(block.getShort(position,offset),expectedSliceValue.getShort(offset));
    }
    for (int offset=0; offset <= length - SIZE_OF_INT; offset++) {
      assertEquals(block.getInt(position,offset),expectedSliceValue.getInt(offset));
    }
    for (int offset=0; offset <= length - SIZE_OF_LONG; offset++) {
      assertEquals(block.getLong(position,offset),expectedSliceValue.getLong(offset));
    }
    for (int offset=0; offset <= length - SIZE_OF_FLOAT; offset++) {
      assertEquals(floatToIntBits(block.getFloat(position,offset)),floatToIntBits(expectedSliceValue.getFloat(offset)));
    }
    for (int offset=0; offset <= length - SIZE_OF_DOUBLE; offset++) {
      assertEquals(doubleToLongBits(block.getDouble(position,offset)),doubleToLongBits(expectedSliceValue.getDouble(offset)));
    }
    Block expectedBlock=toSingeValuedBlock(expectedSliceValue);
    for (int offset=0; offset < length - 3; offset++) {
      assertEquals(block.getSlice(position,offset,3),expectedSliceValue.slice(offset,3));
      assertTrue(block.bytesEqual(position,offset,expectedSliceValue,offset,3));
      assertFalse(block.bytesEqual(position,offset,Slices.utf8Slice("XXX"),0,3));
      assertEquals(block.bytesCompare(position,offset,3,expectedSliceValue,offset,3),0);
      assertTrue(block.bytesCompare(position,offset,3,expectedSliceValue,offset,2) > 0);
      Slice greaterSlice=createGreaterValue(expectedSliceValue,offset,3);
      assertTrue(block.bytesCompare(position,offset,3,greaterSlice,0,greaterSlice.length()) < 0);
      assertTrue(block.equals(position,offset,expectedBlock,0,offset,3));
      assertEquals(block.compareTo(position,offset,3,expectedBlock,0,offset,3),0);
      BlockBuilder blockBuilder=VARBINARY.createBlockBuilder(new BlockBuilderStatus(),1);
      block.writeBytesTo(position,offset,3,blockBuilder);
      blockBuilder.closeEntry();
      Block segment=blockBuilder.build();
      assertTrue(block.equals(position,offset,segment,0,0,3));
    }
  }
 else   if (expectedValue instanceof long[]) {
    Block actual=block.getObject(position,Block.class);
    long[] expected=(long[])expectedValue;
    assertEquals(actual.getPositionCount(),expected.length);
    for (int i=0; i < expected.length; i++) {
      assertEquals(BIGINT.getLong(actual,i),expected[i]);
    }
  }
 else   if (expectedValue instanceof Slice[]) {
    Block actual=block.getObject(position,Block.class);
    Slice[] expected=(Slice[])expectedValue;
    assertEquals(actual.getPositionCount(),expected.length);
    for (int i=0; i < expected.length; i++) {
      assertEquals(VARCHAR.getSlice(actual,i),expected[i]);
    }
  }
 else   if (expectedValue instanceof long[][]) {
    Block actual=block.getObject(position,Block.class);
    long[][] expected=(long[][])expectedValue;
    assertEquals(actual.getPositionCount(),expected.length);
    for (int i=0; i < expected.length; i++) {
      assertPositionValue(actual,i,expected[i]);
    }
  }
 else {
    throw new IllegalArgumentException();
  }
}
