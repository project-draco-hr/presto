{
  assertEquals(block.getType(),expectedType);
  assertEquals(block.getObjectValue(SESSION,position),expectedValue);
  assertEquals(block.hash(position),expectedHash);
  Block expectedBlock=createBlock(expectedType,expectedValue);
  assertTrue(block.equalTo(position,block,position));
  assertTrue(block.equalTo(position,expectedBlock,0));
  assertTrue(expectedBlock.equalTo(0,block,position));
  assertEquals(block.isNull(position),expectedValue == null);
  int length=block.getLength(position);
  assertEquals(length,expectedBlock.getLength(0));
  verifyInvalidPositionHandling(block);
  if (expectedValue instanceof String) {
    assertTrue(block.compareTo(position,0,length,expectedBlock,0,0,length) == 0);
    if (length > 0) {
      assertTrue(block.compareTo(position,1,length - 1,expectedBlock,0,1,length - 1) == 0);
      assertTrue(block.compareTo(position,0,length - 1,expectedBlock,0,0,length - 1) == 0);
    }
    Block greaterValue=expectedType.createBlockBuilder(new BlockBuilderStatus()).appendSlice(Slices.utf8Slice(expectedValue + "_")).build();
    assertTrue(block.compareTo(position,0,length,greaterValue,0,0,length + 1) < 0);
    if (length > 0) {
      assertTrue(block.compareTo(position,1,length - 1,greaterValue,0,1,length) < 0);
      assertTrue(block.compareTo(position,0,length - 1,greaterValue,0,0,length) < 0);
    }
  }
  if (block.isNull(position)) {
    return;
  }
  Type type=block.getType();
  if (type.getJavaType() == boolean.class) {
    assertEquals(block.getBoolean(position),expectedValue);
    try {
      block.getLong(position);
      fail("Expected IllegalStateException or UnsupportedOperationException");
    }
 catch (    IllegalStateException|UnsupportedOperationException expected) {
    }
    try {
      block.getDouble(position);
      fail("Expected IllegalStateException or UnsupportedOperationException");
    }
 catch (    IllegalStateException|UnsupportedOperationException expected) {
    }
  }
 else   if (type.getJavaType() == long.class) {
    assertEquals(block.getLong(position),expectedValue);
    try {
      block.getBoolean(position);
      fail("Expected IllegalStateException or UnsupportedOperationException");
    }
 catch (    IllegalStateException|UnsupportedOperationException expected) {
    }
    try {
      block.getDouble(position);
      fail("Expected IllegalStateException or UnsupportedOperationException");
    }
 catch (    IllegalStateException|UnsupportedOperationException expected) {
    }
  }
 else   if (type.getJavaType() == double.class) {
    assertEquals(block.getDouble(position),expectedValue);
    try {
      block.getBoolean(position);
      fail("Expected IllegalStateException or UnsupportedOperationException");
    }
 catch (    IllegalStateException|UnsupportedOperationException expected) {
    }
    try {
      block.getLong(position);
      fail("Expected IllegalStateException or UnsupportedOperationException");
    }
 catch (    IllegalStateException|UnsupportedOperationException expected) {
    }
  }
 else   if (type.getJavaType() == Slice.class) {
    assertEquals(block.getSlice(position).toStringUtf8(),expectedValue);
    try {
      block.getBoolean(position);
      fail("Expected IllegalStateException or UnsupportedOperationException");
    }
 catch (    IllegalStateException|UnsupportedOperationException expected) {
    }
    try {
      block.getLong(position);
      fail("Expected IllegalStateException or UnsupportedOperationException");
    }
 catch (    IllegalStateException|UnsupportedOperationException expected) {
    }
    try {
      block.getDouble(position);
      fail("Expected IllegalStateException or UnsupportedOperationException");
    }
 catch (    IllegalStateException|UnsupportedOperationException expected) {
    }
  }
}
