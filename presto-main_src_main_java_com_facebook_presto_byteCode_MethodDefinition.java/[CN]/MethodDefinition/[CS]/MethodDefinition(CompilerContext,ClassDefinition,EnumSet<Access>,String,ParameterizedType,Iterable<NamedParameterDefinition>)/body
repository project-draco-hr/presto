{
  this.compilerContext=compilerContext;
  this.declaringClass=declaringClass;
  body=new Block(compilerContext);
  this.access=access;
  this.name=name;
  if (returnType != null) {
    this.returnType=returnType;
  }
 else {
    this.returnType=type(void.class);
  }
  this.parameters=ImmutableList.copyOf(parameters);
  this.parameterTypes=Lists.transform(this.parameters,getNamedParameterType());
  this.parameterAnnotations=ImmutableList.copyOf(transform(parameters,new Function<NamedParameterDefinition,List<AnnotationDefinition>>(){
    @Override public List<AnnotationDefinition> apply(    @Nullable NamedParameterDefinition input){
      return new ArrayList<>();
    }
  }
));
  if (!access.contains(STATIC)) {
    getCompilerContext().declareThisVariable(declaringClass.getType());
  }
  int argId=0;
  for (  NamedParameterDefinition parameter : parameters) {
    String parameterName=parameter.getName();
    if (parameterName == null) {
      parameterName="arg" + argId;
    }
    getCompilerContext().declareParameter(parameter.getType(),parameterName);
    argId++;
  }
}
