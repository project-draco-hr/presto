{
  String[] exceptions=new String[this.exceptions.size()];
  for (int i=0; i < exceptions.length; i++) {
    exceptions[i]=this.exceptions.get(i).getClassName();
  }
  MethodVisitor methodVisitor=visitor.visitMethod(toAccessModifier(access),name,getMethodDescriptor(),genericMethodSignature(returnType,parameterTypes),exceptions);
  if (methodVisitor == null) {
    return;
  }
  for (  AnnotationDefinition annotation : annotations) {
    annotation.visitMethodAnnotation(methodVisitor);
  }
  for (int parameterIndex=0; parameterIndex < parameterAnnotations.size(); parameterIndex++) {
    List<AnnotationDefinition> parameterAnnotations1=this.parameterAnnotations.get(parameterIndex);
    for (    AnnotationDefinition parameterAnnotation : parameterAnnotations1) {
      parameterAnnotation.visitParameterAnnotation(parameterIndex,methodVisitor);
    }
  }
  methodVisitor.visitCode();
  MethodGenerationContext generationContext=new MethodGenerationContext();
  body.accept(methodVisitor,generationContext);
  if (addReturn) {
    new InsnNode(RETURN).accept(methodVisitor);
  }
  for (  LocalVariableNode localVariableNode : localVariableNodes) {
    localVariableNode.accept(methodVisitor,generationContext);
  }
  methodVisitor.visitMaxs(-1,-1);
  methodVisitor.visitEnd();
}
