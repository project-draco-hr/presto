{
  assertByteCodeExpression(constantNull(List.class),null,"null");
  assertByteCodeExpression(constantTrue(),true,"true");
  assertByteCodeExpression(constantFalse(),false,"false");
  assertByteCodeExpression(constantBoolean(true),true,"true");
  assertByteCodeExpression(constantBoolean(false),false,"false");
  assertByteCodeExpression(constantInt(0),0,"0");
  assertByteCodeExpression(constantInt(Integer.MAX_VALUE),Integer.MAX_VALUE,String.valueOf(Integer.MAX_VALUE));
  assertByteCodeExpression(constantInt(Integer.MIN_VALUE),Integer.MIN_VALUE,String.valueOf(Integer.MIN_VALUE));
  assertByteCodeExpression(constantLong(0L),0L,"0L");
  assertByteCodeExpression(constantLong(Long.MAX_VALUE),Long.MAX_VALUE,Long.MAX_VALUE + "L");
  assertByteCodeExpression(constantLong(Long.MIN_VALUE),Long.MIN_VALUE,Long.MIN_VALUE + "L");
  assertByteCodeExpression(constantFloat(0.0f),0.0f,"0.0f");
  assertByteCodeExpression(constantFloat(Float.MAX_VALUE),Float.MAX_VALUE,Float.MAX_VALUE + "f");
  assertByteCodeExpression(constantFloat(Float.MIN_VALUE),Float.MIN_VALUE,Float.MIN_VALUE + "f");
  assertByteCodeExpression(constantFloat(Float.NaN),Float.NaN,"NaNf");
  assertByteCodeExpression(constantDouble(0.0),0.0,"0.0");
  assertByteCodeExpression(constantDouble(Double.MAX_VALUE),Double.MAX_VALUE,String.valueOf(Double.MAX_VALUE));
  assertByteCodeExpression(constantDouble(Double.MIN_VALUE),Double.MIN_VALUE,String.valueOf(Double.MIN_VALUE));
  assertByteCodeExpression(constantDouble(Double.NaN),Double.NaN,"NaN");
  assertByteCodeExpression(constantString(""),"","\"\"");
  assertByteCodeExpression(constantString("foo"),"foo","\"foo\"");
  assertByteCodeExpression(constantClass(List.class),List.class,"List.class");
}
