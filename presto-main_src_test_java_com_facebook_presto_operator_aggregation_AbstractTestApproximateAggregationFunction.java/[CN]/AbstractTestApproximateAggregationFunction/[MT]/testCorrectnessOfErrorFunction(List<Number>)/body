{
  int inRange=0;
  int numberOfRuns=1000;
  double sampleRatio=1 / (double)WEIGHT;
  double actual=getExpectedValue(inputList);
  Random rand=new Random(1);
  for (int i=0; i < numberOfRuns; i++) {
    ImmutableList.Builder<Number> sampledList=ImmutableList.builder();
    for (    Number x : inputList) {
      if (rand.nextDouble() < sampleRatio) {
        sampledList.add(x);
      }
    }
    BlockBuilder builder=getType().createBlockBuilder(new BlockBuilderStatus());
    for (    Number sample : sampledList.build()) {
      if (getType() == BIGINT) {
        BIGINT.writeLong(builder,sample.longValue());
      }
 else       if (getType() == DOUBLE) {
        DOUBLE.writeDouble(builder,sample.doubleValue());
      }
 else {
        throw new AssertionError("Can only handle longs and doubles");
      }
    }
    Page page=new Page(builder.build());
    page=OperatorAssertion.appendSampleWeight(ImmutableList.of(page),WEIGHT).get(0);
    Accumulator accumulator=getFunction().createAggregation(Optional.<Integer>absent(),Optional.of(page.getChannelCount() - 1),getConfidence(),0);
    accumulator.addInput(page);
    Block result=accumulator.evaluateFinal();
    String approxValue=BlockAssertions.toValues(result).get(0).toString();
    double approx=Double.parseDouble(approxValue.split(" ")[0]);
    double error=Double.parseDouble(approxValue.split(" ")[2]);
    if (Math.abs(approx - actual) <= error) {
      inRange++;
    }
  }
  BinomialDistribution binomial=new BinomialDistribution(numberOfRuns,getConfidence());
  int lowerBound=binomial.inverseCumulativeProbability(0.01);
  int upperBound=binomial.inverseCumulativeProbability(0.99);
  assertTrue(lowerBound < inRange && inRange < upperBound,String.format("%d out of %d passed. Expected [%d, %d]",inRange,numberOfRuns,lowerBound,upperBound));
}
