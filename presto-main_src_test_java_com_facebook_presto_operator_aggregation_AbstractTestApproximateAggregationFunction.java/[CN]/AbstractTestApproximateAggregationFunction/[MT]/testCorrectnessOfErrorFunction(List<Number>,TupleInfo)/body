{
  double actualSum=0;
  for (  Number value : inputList) {
    actualSum+=value.doubleValue();
  }
  double actualAvg=actualSum / inputList.size();
  int inRange=0;
  int numberOfRuns=1000;
  double sampleRatio=0.1;
  for (int i=0; i < numberOfRuns; i++) {
    Iterable<Number> sampledList=Iterables.limit(shuffle(inputList),(int)(inputList.size() * sampleRatio));
    BlockBuilder builder=new BlockBuilder(type);
    for (    Number sample : sampledList) {
      if (sample instanceof Double) {
        builder.append(sample.doubleValue());
      }
 else       if (sample instanceof Long) {
        builder.append(sample.longValue());
      }
 else {
        throw new AssertionError("Can only handle longs and doubles");
      }
    }
    Accumulator accumulator=getFunction().createAggregation(Optional.<Integer>absent(),Optional.<Integer>absent(),getConfidence(),0);
    accumulator.addInput(new Page(builder.build()));
    Block result=accumulator.evaluateFinal();
    String approxValue=BlockAssertions.toValues(result).get(0).toString();
    double approxAvg=Double.parseDouble(approxValue.split(" ")[0]);
    double error=Double.parseDouble(approxValue.split(" ")[2]);
    if ((approxAvg - error <= actualAvg) && (approxAvg + error >= actualAvg)) {
      inRange++;
    }
  }
  assertTrue(inRange >= getConfidence() * numberOfRuns);
}
