{
  checkState(!stopped.get(),"ConnectorManager is stopped");
  checkState(!connectors.containsKey(connectorId),"A connector %s already exists",connectorId);
  connectors.put(connectorId,connector);
  ConnectorSplitManager connectorSplitManager=connector.getSplitManager();
  checkState(connectorSplitManager != null,"Connector %s does not have a split manager",connectorId);
  Set<SystemTable> systemTables=connector.getSystemTables();
  requireNonNull(systemTables,"Connector %s returned a null system tables set");
  ConnectorPageSourceProvider connectorPageSourceProvider=null;
  try {
    connectorPageSourceProvider=connector.getPageSourceProvider();
    requireNonNull(connectorPageSourceProvider,format("Connector %s returned a null page source provider",connectorId));
  }
 catch (  UnsupportedOperationException ignored) {
  }
  if (connectorPageSourceProvider == null) {
    ConnectorRecordSetProvider connectorRecordSetProvider=null;
    try {
      connectorRecordSetProvider=connector.getRecordSetProvider();
      requireNonNull(connectorRecordSetProvider,format("Connector %s returned a null record set provider",connectorId));
    }
 catch (    UnsupportedOperationException ignored) {
    }
    checkState(connectorRecordSetProvider != null,"Connector %s has neither a PageSource or RecordSet provider",connectorId);
    connectorPageSourceProvider=new RecordPageSourceProvider(connectorRecordSetProvider);
  }
  ConnectorHandleResolver connectorHandleResolver=connector.getHandleResolver();
  requireNonNull(connectorHandleResolver,format("Connector %s does not have a handle resolver",connectorId));
  ConnectorPageSinkProvider connectorPageSinkProvider=null;
  try {
    connectorPageSinkProvider=connector.getPageSinkProvider();
    requireNonNull(connectorPageSinkProvider,format("Connector %s returned a null page sink provider",connectorId));
  }
 catch (  UnsupportedOperationException ignored) {
  }
  if (connectorPageSinkProvider == null) {
    ConnectorRecordSinkProvider connectorRecordSinkProvider=null;
    try {
      connectorRecordSinkProvider=connector.getRecordSinkProvider();
      requireNonNull(connectorRecordSinkProvider,format("Connector %s returned a null record sink provider",connectorId));
      connectorPageSinkProvider=new RecordPageSinkProvider(connectorRecordSinkProvider);
    }
 catch (    UnsupportedOperationException ignored) {
    }
  }
  ConnectorIndexResolver indexResolver=null;
  try {
    indexResolver=connector.getIndexResolver();
    requireNonNull(indexResolver,format("Connector %s returned a null index resolver",connectorId));
  }
 catch (  UnsupportedOperationException ignored) {
  }
  requireNonNull(connector.getSessionProperties(),format("Connector %s returned null session properties",connectorId));
  requireNonNull(connector.getTableProperties(),format("Connector %s returned null table properties",connectorId));
  TransactionalConnectorAccessControl accessControl=null;
  try {
    accessControl=connector.getAccessControl();
  }
 catch (  UnsupportedOperationException ignored) {
  }
  transactionManager.addConnector(connectorId,connector);
  if (type == ConnectorType.STANDARD) {
    metadataManager.registerConnectorCatalog(connectorId,catalogName);
  }
 else   if (type == ConnectorType.INFORMATION_SCHEMA) {
    metadataManager.registerInformationSchemaCatalog(connectorId,catalogName);
  }
 else   if (type == ConnectorType.SYSTEM) {
    metadataManager.registerSystemTablesCatalog(connectorId,catalogName);
  }
 else {
    throw new IllegalArgumentException("Unhandled type: " + type);
  }
  splitManager.addConnectorSplitManager(connectorId,connectorSplitManager);
  handleResolver.addHandleResolver(connectorId,connectorHandleResolver);
  pageSourceManager.addConnectorPageSourceProvider(connectorId,connectorPageSourceProvider);
  if (connectorPageSinkProvider != null) {
    pageSinkManager.addConnectorPageSinkProvider(connectorId,connectorPageSinkProvider);
  }
  if (indexResolver != null) {
    indexManager.addIndexResolver(connectorId,indexResolver);
  }
  if (accessControl != null) {
    accessControlManager.addCatalogAccessControl(connectorId,catalogName,accessControl);
  }
}
