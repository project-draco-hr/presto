{
  if (loaded) {
    return;
  }
  try {
    BytesRefArrayWritable columnBatch=batch.getColumn(fieldId);
    int positionInBatch=batch.getPositionInBatch();
    int batchSize=block.getPositionCount();
    Slice[] vector=new Slice[batchSize];
    for (int i=0; i < batchSize; i++) {
      BytesRefWritable writable=columnBatch.unCheckedGet(i + positionInBatch);
      int length=writable.getLength();
      if (length > 0) {
        byte[] bytes=writable.getData();
        int start=writable.getStart();
        LazyBinaryObject<? extends ObjectInspector> lazyObject=LazyBinaryFactory.createLazyBinaryObject(fieldInspector);
        ByteArrayRef byteArrayRef=new ByteArrayRef();
        byteArrayRef.setData(bytes);
        lazyObject.init(byteArrayRef,start,length);
        vector[i]=getBlockSlice(sessionTimeZone,lazyObject.getObject(),fieldInspector);
      }
    }
    block.setValues(vector);
    loaded=true;
  }
 catch (  IOException e) {
    throw Throwables.propagate(e);
  }
}
