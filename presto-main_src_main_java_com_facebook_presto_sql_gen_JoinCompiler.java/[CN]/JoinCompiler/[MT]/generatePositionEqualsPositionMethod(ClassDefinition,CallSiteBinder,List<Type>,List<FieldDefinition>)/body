{
  MethodDefinition hashPositionMethod=classDefinition.declareMethod(a(PUBLIC),"positionEqualsPosition",type(boolean.class),arg("leftBlockIndex",int.class),arg("leftBlockPosition",int.class),arg("rightBlockIndex",int.class),arg("rightBlockPosition",int.class));
  CompilerContext compilerContext=hashPositionMethod.getCompilerContext();
  Variable thisVariable=hashPositionMethod.getThis();
  for (int index=0; index < joinChannelTypes.size(); index++) {
    ByteCodeExpression type=constantType(callSiteBinder,joinChannelTypes.get(index));
    Variable blockIndex=compilerContext.getVariable("leftBlockIndex");
    ByteCodeExpression leftBlock=thisVariable.getField(joinChannelFields.get(index)).invoke("get",Object.class,blockIndex).cast(com.facebook.presto.spi.block.Block.class);
    ByteCodeExpression rightBlock=thisVariable.getField(joinChannelFields.get(index)).invoke("get",Object.class,compilerContext.getVariable("rightBlockIndex")).cast(com.facebook.presto.spi.block.Block.class);
    LabelNode checkNextField=new LabelNode("checkNextField");
    hashPositionMethod.getBody().append(typeEquals(type,leftBlock,compilerContext.getVariable("leftBlockPosition"),rightBlock,compilerContext.getVariable("rightBlockPosition"))).ifTrueGoto(checkNextField).push(false).retBoolean().visitLabel(checkNextField);
  }
  hashPositionMethod.getBody().push(true).retInt();
}
