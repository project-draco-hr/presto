{
  Parameter channels=arg("channels",type(List.class,type(List.class,com.facebook.presto.spi.block.Block.class)));
  Parameter hashChannel=arg("hashChannel",type(Optional.class,Integer.class));
  MethodDefinition constructorDefinition=classDefinition.declareConstructor(a(PUBLIC),channels,hashChannel);
  Variable thisVariable=constructorDefinition.getThis();
  Variable blockIndex=constructorDefinition.getScope().declareVariable(int.class,"blockIndex");
  Block constructor=constructorDefinition.getBody().comment("super();").append(thisVariable).invokeConstructor(Object.class);
  constructor.comment("this.size = 0").append(thisVariable.setField(sizeField,constantLong(0L)));
  constructor.comment("Set channel fields");
  for (int index=0; index < channelFields.size(); index++) {
    ByteCodeExpression channel=channels.invoke("get",Object.class,constantInt(index)).cast(type(List.class,com.facebook.presto.spi.block.Block.class));
    constructor.append(thisVariable.setField(channelFields.get(index),channel));
    Block loopBody=new Block();
    constructor.comment("for(blockIndex = 0; blockIndex < channel.size(); blockIndex++) { size += channel.get(i).getRetainedSizeInBytes() }").append(new ForLoop().initialize(blockIndex.set(constantInt(0))).condition(new Block().append(blockIndex).append(channel.invoke("size",int.class)).invokeStatic(CompilerOperations.class,"lessThan",boolean.class,int.class,int.class)).update(new Block().incrementVariable(blockIndex,(byte)1)).body(loopBody));
    loopBody.append(thisVariable).append(thisVariable).getField(sizeField).append(channel.invoke("get",Object.class,blockIndex).cast(type(com.facebook.presto.spi.block.Block.class)).invoke("getRetainedSizeInBytes",int.class).cast(long.class)).longAdd().putField(sizeField);
  }
  constructor.comment("Set join channel fields");
  for (int index=0; index < joinChannelFields.size(); index++) {
    ByteCodeExpression joinChannel=channels.invoke("get",Object.class,constantInt(joinChannels.get(index))).cast(type(List.class,com.facebook.presto.spi.block.Block.class));
    constructor.append(thisVariable.setField(joinChannelFields.get(index),joinChannel));
  }
  constructor.comment("Set hashChannel");
  constructor.append(new IfStatement().condition(hashChannel.invoke("isPresent",boolean.class)).ifTrue(thisVariable.setField(hashChannelField,channels.invoke("get",Object.class,hashChannel.invoke("get",Object.class).cast(Integer.class).cast(int.class)))).ifFalse(thisVariable.setField(hashChannelField,constantNull(hashChannelField.getType()))));
  constructor.ret();
}
