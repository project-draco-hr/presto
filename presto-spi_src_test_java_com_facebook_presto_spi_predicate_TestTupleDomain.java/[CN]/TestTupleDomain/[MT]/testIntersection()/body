{
  TupleDomain<ColumnHandle> tupleDomain1=TupleDomain.withColumnDomains(ImmutableMap.<ColumnHandle,Domain>builder().put(A,Domain.all(VARCHAR)).put(B,Domain.notNull(DOUBLE)).put(C,Domain.singleValue(BIGINT,1L)).put(D,Domain.create(ValueSet.ofRanges(Range.greaterThanOrEqual(DOUBLE,0.0)),true)).build());
  TupleDomain<ColumnHandle> tupleDomain2=TupleDomain.withColumnDomains(ImmutableMap.<ColumnHandle,Domain>builder().put(A,Domain.singleValue(VARCHAR,utf8Slice("value"))).put(B,Domain.singleValue(DOUBLE,0.0)).put(C,Domain.singleValue(BIGINT,1L)).put(D,Domain.create(ValueSet.ofRanges(Range.lessThan(DOUBLE,10.0)),false)).build());
  TupleDomain<ColumnHandle> expectedTupleDomain=TupleDomain.withColumnDomains(ImmutableMap.<ColumnHandle,Domain>builder().put(A,Domain.singleValue(VARCHAR,utf8Slice("value"))).put(B,Domain.singleValue(DOUBLE,0.0)).put(C,Domain.singleValue(BIGINT,1L)).put(D,Domain.create(ValueSet.ofRanges(Range.range(DOUBLE,0.0,true,10.0,false)),false)).build());
  assertEquals(tupleDomain1.intersect(tupleDomain2),expectedTupleDomain);
}
