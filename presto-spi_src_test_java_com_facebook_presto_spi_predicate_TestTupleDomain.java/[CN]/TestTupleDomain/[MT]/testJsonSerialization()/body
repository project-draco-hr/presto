{
  TestingTypeManager typeManager=new TestingTypeManager();
  TestingBlockEncodingSerde blockEncodingSerde=new TestingBlockEncodingSerde(typeManager);
  ObjectMapper mapper=new ObjectMapperProvider().get().registerModule(new SimpleModule().addDeserializer(ColumnHandle.class,new JsonDeserializer<ColumnHandle>(){
    @Override public ColumnHandle deserialize(    JsonParser jsonParser,    DeserializationContext deserializationContext) throws IOException {
      return new ObjectMapperProvider().get().readValue(jsonParser,TestingColumnHandle.class);
    }
  }
).addDeserializer(Type.class,new TestingTypeDeserializer(typeManager)).addSerializer(Block.class,new TestingBlockJsonSerde.Serializer(blockEncodingSerde)).addDeserializer(Block.class,new TestingBlockJsonSerde.Deserializer(blockEncodingSerde)));
  TupleDomain<ColumnHandle> tupleDomain=TupleDomain.all();
  assertEquals(tupleDomain,mapper.readValue(mapper.writeValueAsString(tupleDomain),new TypeReference<TupleDomain<ColumnHandle>>(){
  }
));
  tupleDomain=TupleDomain.none();
  assertEquals(tupleDomain,mapper.readValue(mapper.writeValueAsString(tupleDomain),new TypeReference<TupleDomain<ColumnHandle>>(){
  }
));
  tupleDomain=TupleDomain.fromFixedValues(ImmutableMap.of(A,NullableValue.of(BIGINT,1L),B,NullableValue.asNull(VARCHAR)));
  assertEquals(tupleDomain,mapper.readValue(mapper.writeValueAsString(tupleDomain),new TypeReference<TupleDomain<ColumnHandle>>(){
  }
));
}
