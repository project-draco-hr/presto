{
  List<ImmutableList.Builder<Block>> blockBuilders=new ArrayList<>();
  List<TupleInfo> tupleInfos=new ArrayList<>();
  for (int i=0; i < operator.getChannelCount(); i++) {
    blockBuilders.add(ImmutableList.<Block>builder());
    tupleInfos.add(i,TupleInfo.SINGLE_VARBINARY);
  }
  PageIterator iterator=operator.iterator(new OperatorStats());
  while (iterator.hasNext()) {
    Page page=iterator.next();
    Block[] blocks=page.getBlocks();
    if (tupleInfos == null) {
      ImmutableList.Builder<TupleInfo> tupleInfosBuilder=ImmutableList.builder();
      for (int i=0; i < blocks.length; i++) {
        tupleInfosBuilder.add(blocks[i].getTupleInfo());
        blockBuilders.get(i).add(blocks[i]);
      }
      tupleInfos=tupleInfosBuilder.build();
    }
 else {
      for (int i=0; i < blocks.length; i++) {
        blockBuilders.get(i).add(blocks[i]);
      }
    }
  }
  assertEquals(blockBuilders.size(),tupleInfos.size(),"Number of block builders does not match number of tuple infos");
  Iterator<TupleInfo> tupleInfoIterator=tupleInfos.iterator();
  ImmutableList.Builder<BlockIterable> blockIterables=ImmutableList.builder();
  for (  ImmutableList.Builder<Block> blockBuilder : blockBuilders) {
    blockIterables.add(BlockIterables.createBlockIterable(tupleInfoIterator.next(),blockBuilder.build()));
  }
  return blockIterables.build();
}
