{
  final Cursor groupByCursor=groupBySource.cursor();
  final Cursor aggregationCursor=aggregationSource.cursor();
  if (!Cursors.advanceNextPositionNoYield(groupByCursor)) {
    return BlockIterators.emptyIterator();
  }
  if (!Cursors.advanceNextPositionNoYield(aggregationCursor)) {
    return BlockIterators.emptyIterator();
  }
  return new AbstractBlockIterator<UncompressedBlock>(){
    private final Map<Tuple,AggregationFunction> aggregationMap=new HashMap<>();
    private Iterator<Entry<Tuple,AggregationFunction>> aggregations;
    private long position;
    @Override protected UncompressedBlock computeNext(){
      if (aggregations == null) {
        while (!groupByCursor.isFinished() && !aggregationCursor.isFinished()) {
          long groupEndPosition=groupByCursor.getCurrentValueEndPosition();
          if (groupEndPosition <= aggregationCursor.getPosition()) {
            AdvanceResult result=groupByCursor.advanceNextValue();
            if (result != AdvanceResult.SUCCESS) {
              if (result == MUST_YIELD) {
                return setMustYield();
              }
 else               if (result == AdvanceResult.FINISHED) {
                if (aggregationCursor.advanceToPosition(Long.MAX_VALUE) == MUST_YIELD) {
                  return setMustYield();
                }
                break;
              }
            }
            groupEndPosition=groupByCursor.getCurrentValueEndPosition();
          }
          if (aggregationCursor.getPosition() < groupEndPosition) {
            AdvanceResult result=aggregationCursor.advanceToPosition(groupByCursor.getPosition());
            if (result == MUST_YIELD) {
              return setMustYield();
            }
 else             if (result == AdvanceResult.FINISHED) {
              if (groupByCursor.advanceToPosition(Long.MAX_VALUE) == MUST_YIELD) {
                return setMustYield();
              }
              break;
            }
          }
          Tuple key=groupByCursor.getTuple();
          AggregationFunction aggregation=aggregationMap.get(key);
          if (aggregation == null) {
            aggregation=functionProvider.get();
            aggregationMap.put(key,aggregation);
          }
          aggregation.add(aggregationCursor,groupEndPosition);
        }
        this.aggregations=aggregationMap.entrySet().iterator();
      }
      if (!aggregations.hasNext()) {
        endOfData();
        return null;
      }
      BlockBuilder blockBuilder=new BlockBuilder(position,info);
      while (!blockBuilder.isFull() && aggregations.hasNext()) {
        Entry<Tuple,AggregationFunction> aggregation=aggregations.next();
        Tuple key=aggregation.getKey();
        Tuple value=aggregation.getValue().evaluate();
        blockBuilder.append(key);
        blockBuilder.append(value);
      }
      UncompressedBlock block=blockBuilder.build();
      position+=block.getCount();
      return block;
    }
  }
;
}
