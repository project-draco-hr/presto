{
  this.session=checkNotNull(session,"session is null");
  this.executor=checkNotNull(executor,"executor is null");
  this.nodeInfo=new NodeInfo(new NodeConfig().setEnvironment("test").setNodeId("local"));
  this.nodeManager=new InMemoryNodeManager();
  this.typeRegistry=new TypeRegistry();
  this.metadata=new MetadataManager(new FeaturesConfig().setExperimentalSyntaxEnabled(true),typeRegistry);
  this.splitManager=new SplitManager();
  this.dataStreamProvider=new DataStreamManager();
  this.indexManager=new IndexManager();
  this.recordSinkManager=new RecordSinkManager();
  this.compiler=new ExpressionCompiler(metadata);
  SystemTablesMetadata systemTablesMetadata=new SystemTablesMetadata();
  SystemSplitManager systemSplitManager=new SystemSplitManager(nodeManager);
  SystemDataStreamProvider systemDataStreamProvider=new SystemDataStreamProvider();
  SystemTablesManager systemTablesManager=new SystemTablesManager(systemTablesMetadata,systemSplitManager,systemDataStreamProvider,ImmutableSet.<SystemTable>of());
  systemTablesManager.addTable(new NodesSystemTable(nodeManager));
  systemTablesManager.addTable(new CatalogSystemTable(metadata));
  this.connectorManager=new ConnectorManager(metadata,splitManager,dataStreamProvider,indexManager,recordSinkManager,new HandleResolver(),new OutputTableHandleResolver(),ImmutableMap.<String,ConnectorFactory>of(),ImmutableMap.<String,Connector>of(SystemConnector.CONNECTOR_ID,new SystemConnector(systemTablesMetadata,systemSplitManager,systemDataStreamProvider)),nodeManager);
}
