{
  SubPlanBuilder current=node.getSource().accept(this,context);
  if (current.isDistributed()) {
    current.setRoot(new TopNRowNumberNode(node.getId(),current.getRoot(),node.getPartitionBy(),node.getOrderBy(),node.getOrderings(),node.getRowNumberSymbol(),node.getMaxRowCountPerPartition(),true));
    current.setRoot(new SinkNode(idAllocator.getNextId(),current.getRoot(),current.getRoot().getOutputSymbols()));
    ExchangeNode source=new ExchangeNode(idAllocator.getNextId(),current.getId(),current.getRoot().getOutputSymbols());
    TopNRowNumberNode merge=new TopNRowNumberNode(node.getId(),source,node.getPartitionBy(),node.getOrderBy(),node.getOrderings(),node.getRowNumberSymbol(),node.getMaxRowCountPerPartition(),false);
    if (node.getPartitionBy().isEmpty()) {
      current=createSingleNodePlan(merge).addChild(current.build());
    }
 else {
      current.setHashOutputPartitioning(node.getPartitionBy());
      current=createFixedDistributionPlan(merge).addChild(current.build());
    }
  }
 else {
    current.setRoot(new TopNRowNumberNode(node.getId(),current.getRoot(),node.getPartitionBy(),node.getOrderBy(),node.getOrderings(),node.getRowNumberSymbol(),node.getMaxRowCountPerPartition(),false));
  }
  return current;
}
