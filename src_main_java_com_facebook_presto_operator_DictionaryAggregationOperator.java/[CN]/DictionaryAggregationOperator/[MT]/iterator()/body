{
  final DictionaryEncodedCursor groupByCursor=groupBySource.cursor();
  final Cursor aggregationCursor=aggregationSource.cursor();
  aggregationCursor.advanceNextPosition();
  return new AbstractIterator<UncompressedBlock>(){
    private final AggregationFunction[] aggregationMap=new AggregationFunction[dictionary.size()];
    private int index=-1;
    private int position=0;
    @Override protected UncompressedBlock computeNext(){
      if (index < 0) {
        while (groupByCursor.advanceNextValue()) {
          int key=groupByCursor.getDictionaryKey();
          long groupEndPosition=groupByCursor.getCurrentValueEndPosition();
          if (aggregationCursor.advanceToPosition(groupByCursor.getPosition()) && aggregationCursor.getPosition() <= groupEndPosition) {
            AggregationFunction aggregation=aggregationMap[key];
            if (aggregation == null) {
              aggregation=functionProvider.get();
              aggregationMap[key]=aggregation;
            }
            aggregation.add(aggregationCursor,groupEndPosition);
          }
        }
        index=0;
      }
      if (index >= aggregationMap.length) {
        endOfData();
        return null;
      }
      BlockBuilder blockBuilder=new BlockBuilder(position,info);
      while (!blockBuilder.isFull() && index < aggregationMap.length) {
        if (aggregationMap[index] != null) {
          Tuple key=dictionary.getTuple(index);
          Tuple value=aggregationMap[index].evaluate();
          blockBuilder.append(key);
          blockBuilder.append(value);
        }
        index++;
      }
      UncompressedBlock block=blockBuilder.build();
      position+=block.getCount();
      return block;
    }
  }
;
}
