{
  checkNotNull(tableHandle,"tableHandle is null");
  checkNotNull(effectivePredicate,"effectivePredicate is null");
  if (effectivePredicate.isNone()) {
    return new ConnectorPartitionResult(ImmutableList.of(),TupleDomain.none());
  }
  SchemaTableName tableName=schemaTableName(tableHandle);
  Table table=getTable(tableName);
  Optional<HiveBucketing.HiveBucket> bucket=getHiveBucket(table,effectivePredicate.extractFixedValues());
  TupleDomain<HiveColumnHandle> compactEffectivePredicate=toCompactTupleDomain(effectivePredicate);
  if (table.getPartitionKeys().isEmpty()) {
    return new ConnectorPartitionResult(ImmutableList.of(new HivePartition(tableName,compactEffectivePredicate,bucket)),effectivePredicate);
  }
  List<HiveColumnHandle> partitionColumns=getPartitionKeyColumnHandles(connectorId,table,0);
  List<String> partitionNames=getFilteredPartitionNames(tableName,partitionColumns,effectivePredicate);
  ImmutableList.Builder<ConnectorPartition> partitions=ImmutableList.builder();
  for (  String partitionName : partitionNames) {
    Optional<Map<ColumnHandle,SerializableNativeValue>> values=parseValuesAndFilterPartition(partitionName,partitionColumns,effectivePredicate);
    if (values.isPresent()) {
      partitions.add(new HivePartition(tableName,compactEffectivePredicate,partitionName,values.get(),bucket));
    }
  }
  TupleDomain<ColumnHandle> remainingTupleDomain=TupleDomain.withColumnDomains(Maps.filterKeys(effectivePredicate.getDomains(),not(Predicates.<ColumnHandle>in(partitionColumns))));
  return new ConnectorPartitionResult(partitions.build(),remainingTupleDomain);
}
