{
  this.types=ImmutableList.copyOf(requireNonNull(types,"types is null"));
  this.hashChannels=ImmutableList.copyOf(requireNonNull(hashChannels,"hashChannels is null"));
  this.hashChannel=requireNonNull(hashChannel,"hashChannel is null");
  checkArgument(expectedPositions >= 0,"expectedPositions is negative");
  this.expectedPositions=expectedPositions;
  checkArgument(Integer.bitCount(partitionCount) == 1,"partitionCount must be a power of 2");
  ImmutableList.Builder<SettableFuture<PagesIndex>> pagesIndexFutures=ImmutableList.builder();
  ImmutableList.Builder<SettableFuture<SharedLookupSource>> lookupSourceFutures=ImmutableList.builder();
  for (int i=0; i < partitionCount; i++) {
    pagesIndexFutures.add(SettableFuture.create());
    lookupSourceFutures.add(SettableFuture.create());
  }
  this.pagesIndexFutures=pagesIndexFutures.build();
  this.lookupSourceFutures=lookupSourceFutures.build();
  lookupSourceSupplier=new ParallelLookupSourceSupplier(types,hashChannels,this.lookupSourceFutures);
}
