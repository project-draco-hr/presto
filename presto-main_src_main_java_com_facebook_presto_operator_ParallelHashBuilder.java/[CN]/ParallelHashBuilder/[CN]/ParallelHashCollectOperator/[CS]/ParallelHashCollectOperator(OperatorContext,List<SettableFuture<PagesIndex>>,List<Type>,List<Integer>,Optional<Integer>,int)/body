{
  this.operatorContext=operatorContext;
  this.partitionFutures=partitionFutures;
  this.types=types;
  if (hashChannel.isPresent()) {
    this.hashGenerator=new PrecomputedHashGenerator(hashChannel.get());
  }
 else {
    ImmutableList.Builder<Type> hashChannelTypes=ImmutableList.builder();
    for (    int channel : hashChannels) {
      hashChannelTypes.add(types.get(channel));
    }
    this.hashGenerator=new InterpretedHashGenerator(hashChannelTypes.build(),Ints.toArray(hashChannels));
  }
  parallelStreamMask=partitionFutures.size() - 1;
  partitions=new PagesIndex[partitionFutures.size()];
  for (int partition=0; partition < partitions.length; partition++) {
    this.partitions[partition]=new PagesIndex(types,expectedPositions);
  }
}
