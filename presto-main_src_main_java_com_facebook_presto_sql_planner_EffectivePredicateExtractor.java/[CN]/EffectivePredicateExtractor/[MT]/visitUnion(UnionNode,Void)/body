{
  List<Set<Expression>> sourceOutputConjuncts=new ArrayList<>();
  for (int i=0; i < node.getSources().size(); i++) {
    Expression underlyingPredicate=node.getSources().get(i).accept(this,context);
    Iterable<Expression> equalities=FluentIterable.from(node.outputSymbolMap(i).entries()).filter(not(symbolMatchesExpression())).transform(entryToEquality());
    sourceOutputConjuncts.add(ImmutableSet.copyOf(extractConjuncts(pullExpressionThroughSymbols(combineConjuncts(ImmutableList.<Expression>builder().addAll(equalities).add(underlyingPredicate).build()),node.getOutputSymbols()))));
  }
  Iterator<Set<Expression>> iterator=sourceOutputConjuncts.iterator();
  Set<Expression> potentialOutputConjuncts=iterator.next();
  while (iterator.hasNext()) {
    potentialOutputConjuncts=Sets.intersection(potentialOutputConjuncts,iterator.next());
  }
  return combineConjuncts(potentialOutputConjuncts);
}
