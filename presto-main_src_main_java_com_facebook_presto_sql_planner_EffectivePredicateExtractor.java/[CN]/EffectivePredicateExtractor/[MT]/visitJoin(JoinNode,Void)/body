{
  Expression leftPredicate=node.getLeft().accept(this,context);
  Expression rightPredicate=node.getRight().accept(this,context);
  List<Expression> joinConjuncts=new ArrayList<>();
  for (  JoinNode.EquiJoinClause clause : node.getCriteria()) {
    joinConjuncts.add(new ComparisonExpression(ComparisonExpression.Type.EQUAL,new QualifiedNameReference(clause.getLeft().toQualifiedName()),new QualifiedNameReference(clause.getRight().toQualifiedName())));
  }
switch (node.getType()) {
case INNER:
    return combineConjuncts(ImmutableList.<Expression>builder().add(leftPredicate).add(rightPredicate).addAll(joinConjuncts).build());
case LEFT:
  return combineConjuncts(ImmutableList.<Expression>builder().add(leftPredicate).addAll(pullNullableConjunctsThroughOuterJoin(extractConjuncts(rightPredicate),in(node.getRight().getOutputSymbols()))).addAll(pullNullableConjunctsThroughOuterJoin(joinConjuncts,in(node.getRight().getOutputSymbols()))).build());
case RIGHT:
return combineConjuncts(ImmutableList.<Expression>builder().add(rightPredicate).addAll(pullNullableConjunctsThroughOuterJoin(extractConjuncts(leftPredicate),in(node.getLeft().getOutputSymbols()))).addAll(pullNullableConjunctsThroughOuterJoin(joinConjuncts,in(node.getLeft().getOutputSymbols()))).build());
case FULL:
return combineConjuncts(ImmutableList.<Expression>builder().addAll(pullNullableConjunctsThroughOuterJoin(extractConjuncts(leftPredicate),in(node.getLeft().getOutputSymbols()))).addAll(pullNullableConjunctsThroughOuterJoin(extractConjuncts(rightPredicate),in(node.getRight().getOutputSymbols()))).addAll(pullNullableConjunctsThroughOuterJoin(joinConjuncts,in(node.getLeft().getOutputSymbols()),in(node.getRight().getOutputSymbols()))).build());
default :
throw new UnsupportedOperationException("Unknown join type: " + node.getType());
}
}
