{
  int positionCount=getPositionCount();
  if (position < 0 || length < 0 || position + length > positionCount) {
    throw new IndexOutOfBoundsException("Invalid position " + position + " in block with "+ positionCount+ " positions");
  }
  int startValueOffset=getOffset(position);
  int endValueOffset=getOffset(position + length);
  Block newValues;
  Slice newOffsets;
  Slice newValueIsNull;
  int newOffsetBase;
  if (compact) {
    newValues=getValues().copyRegion(startValueOffset,endValueOffset - startValueOffset);
    int[] newOffsetsArray=new int[length];
    for (int i=0; i < length; i++) {
      newOffsetsArray[i]=getOffset(position + i + 1) - getOffset(position);
    }
    newOffsets=Slices.wrappedIntArray(newOffsetsArray);
    newValueIsNull=Slices.copyOf(getValueIsNull(),position,length);
    newOffsetBase=0;
  }
 else {
    if (position == 0 && length == positionCount) {
      return this;
    }
 else {
      newValues=getValues().getRegion(startValueOffset,endValueOffset - startValueOffset);
      newOffsets=getOffsets().slice(position * 4,length * 4);
      newValueIsNull=getValueIsNull().slice(position,length);
      newOffsetBase=startValueOffset + getOffsetBase();
    }
  }
  return new ArrayBlock(newValues,newOffsets,newOffsetBase,newValueIsNull);
}
