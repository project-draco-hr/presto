{
  assertQuery("" + "SELECT table_schema, table_name, sum(row_count)\n" + "FROM system.table_stats\n"+ "WHERE table_schema = 'tpch'\n"+ "  AND table_name IN ('orders', 'lineitem')\n"+ "GROUP BY 1, 2","" + "SELECT 'tpch', 'orders', (SELECT count(*) FROM orders)\n" + "UNION ALL\n"+ "SELECT 'tpch', 'lineitem', (SELECT count(*) FROM lineitem)");
  assertQuery("" + "SELECT\n" + "  bool_and(row_count >= shard_count)\n"+ ", bool_and(update_time >= create_time)\n"+ ", bool_and(table_version >= 1)\n"+ "FROM system.table_stats\n"+ "WHERE row_count > 0","SELECT true, true, true");
  assertUpdate("CREATE TABLE test_table_stats (x bigint)");
  @Language("SQL") String sql="" + "SELECT create_time, update_time, table_version," + "  shard_count, row_count, uncompressed_size\n"+ "FROM system.table_stats\n"+ "WHERE table_schema = 'tpch'\n"+ "  AND table_name = 'test_table_stats'";
  MaterializedRow row=getOnlyElement(computeActual(sql).getMaterializedRows());
  Timestamp createTime=(Timestamp)row.getField(0);
  Timestamp updateTime1=(Timestamp)row.getField(1);
  assertEquals(createTime,updateTime1);
  assertEquals(row.getField(2),1L);
  assertEquals(row.getField(3),0L);
  assertEquals(row.getField(4),0L);
  long size1=(long)row.getField(5);
  assertUpdate("INSERT INTO test_table_stats VALUES (1), (2), (3), (4)",4);
  row=getOnlyElement(computeActual(sql).getMaterializedRows());
  assertEquals(row.getField(0),createTime);
  Timestamp updateTime2=(Timestamp)row.getField(1);
  assertLessThan(updateTime1,updateTime2);
  assertEquals(row.getField(2),2L);
  assertGreaterThanOrEqual((Long)row.getField(3),1L);
  assertEquals(row.getField(4),4L);
  long size2=(long)row.getField(5);
  assertGreaterThan(size2,size1);
  assertUpdate("DELETE FROM test_table_stats WHERE x IN (2, 4)",2);
  row=getOnlyElement(computeActual(sql).getMaterializedRows());
  assertEquals(row.getField(0),createTime);
  Timestamp updateTime3=(Timestamp)row.getField(1);
  assertLessThan(updateTime2,updateTime3);
  assertEquals(row.getField(2),3L);
  assertGreaterThanOrEqual((Long)row.getField(3),1L);
  assertEquals(row.getField(4),2L);
  long size3=(long)row.getField(5);
  assertLessThan(size3,size2);
  assertUpdate("ALTER TABLE test_table_stats ADD COLUMN y bigint");
  row=getOnlyElement(computeActual(sql).getMaterializedRows());
  assertEquals(row.getField(0),createTime);
  assertLessThan(updateTime3,(Timestamp)row.getField(1));
  assertEquals(row.getField(2),4L);
  assertEquals(row.getField(4),2L);
  assertEquals(row.getField(5),size3);
  assertUpdate("DROP TABLE test_table_stats");
}
