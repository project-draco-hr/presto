{
  Preconditions.checkNotNull(query,"query is null");
  Preconditions.checkArgument(query.length() > 0,"query must not be empty string");
  String queryId=String.valueOf(nextQueryId++);
  final QueryState queryState=new QueryState(1,pageBufferMax);
  ImmutableList<String> strings=ImmutableList.copyOf(Splitter.on(":").split(query));
  String queryBase=strings.get(0);
  QueryTask queryTask;
switch (queryBase) {
case "sum":
    queryTask=new SumQuery(queryState,executor,URI.create("http://localhost:8080/v1/presto/query"),URI.create("http://localhost:8080/v1/presto/query"),URI.create("http://localhost:8080/v1/presto/query"),URI.create("http://localhost:8080/v1/presto/query"),URI.create("http://localhost:8080/v1/presto/query"),URI.create("http://localhost:8080/v1/presto/query"),URI.create("http://localhost:8080/v1/presto/query"),URI.create("http://localhost:8080/v1/presto/query"),URI.create("http://localhost:8080/v1/presto/query"),URI.create("http://localhost:8080/v1/presto/query"),URI.create("http://localhost:8080/v1/presto/query"),URI.create("http://localhost:8080/v1/presto/query"),URI.create("http://localhost:8080/v1/presto/query"),URI.create("http://localhost:8080/v1/presto/query"),URI.create("http://localhost:8080/v1/presto/query"),URI.create("http://localhost:8080/v1/presto/query"));
  break;
case "sum-partial":
queryTask=new PartialSumQuery(metadata,storageManager,queryState);
break;
case "import-delimited":
List<Type> types=ImmutableList.copyOf(Iterables.transform(Splitter.on(",").split(strings.get(2)),new Function<String,Type>(){
@Override public Type apply(String input){
return Type.fromName(input);
}
}
));
queryTask=new ImportDelimited(queryState,storageManager,strings.get(1),strings.get(2),new TupleInfo(types),new File(strings.get(3)),Splitter.on(strings.get(4)));
break;
case "import-table":
queryTask=new ImportTableQuery(queryState,importClient,importManager,metadata,strings.get(1),strings.get(2),strings.get(3));
break;
default :
throw new IllegalArgumentException("Unsupported query " + query);
}
queries.put(queryId,queryState);
executor.submit(queryTask);
return new QueryInfo(queryId,queryTask.getTupleInfos());
}
