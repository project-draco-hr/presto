{
  Preconditions.checkNotNull(query,"query is null");
  Preconditions.checkArgument(query.length() > 0,"query must not be empty string");
  String queryId=String.valueOf(nextQueryId++);
  ImmutableList<String> strings=ImmutableList.copyOf(Splitter.on(":").split(query));
  String queryBase=strings.get(0);
  MasterQueryTask queryTask;
  if (query.startsWith("sql:")) {
    String sql=query.substring("sql:".length());
    queryTask=new SqlFragmentMaster(queryId,pageBufferMax,queryExecutor,metadata,splitManager,queryFragmentRequestJsonCodec,sql);
  }
 else {
switch (queryBase) {
case "import-delimited":
      List<Type> types=ImmutableList.copyOf(transform(Splitter.on(",").split(strings.get(2)),new Function<String,Type>(){
        @Override public Type apply(        String input){
          return Type.fromName(input);
        }
      }
));
    queryTask=new ImportDelimited(queryId,pageBufferMax,strings.get(1),strings.get(2),new TupleInfo(types),new File(strings.get(3)),Splitter.on(strings.get(4)));
  break;
case "import-table":
queryTask=new ImportTableQuery(queryId,pageBufferMax,importClientFactory,importManager,metadata,strings.get(1),strings.get(2),strings.get(3));
break;
default :
throw new IllegalArgumentException("Unsupported query " + query);
}
}
MasterQueryState masterQueryState=queryTask.getMasterQueryState();
masterQueries.put(queryId,masterQueryState);
queries.put(queryId,masterQueryState.getOutputQueryState());
queryExecutor.submit(queryTask);
return new QueryInfo(queryId,queryTask.getTupleInfos(),State.PREPARING,0);
}
