{
  Preconditions.checkNotNull(query,"query is null");
  Preconditions.checkArgument(query.length() > 0,"query must not be empty string");
  String queryId=String.valueOf(nextQueryId++);
  final QueryState queryState=new QueryState(1,pageBufferMax);
  ImmutableList<String> strings=ImmutableList.copyOf(Splitter.on(":").split(query));
  String queryBase=strings.get(0);
  QueryTask queryTask;
switch (queryBase) {
case "import-delimited":
    List<Type> types=ImmutableList.copyOf(Iterables.transform(Splitter.on(",").split(strings.get(2)),new Function<String,Type>(){
      @Override public Type apply(      String input){
        return Type.fromName(input);
      }
    }
));
  queryTask=new ImportDelimited(queryState,strings.get(1),strings.get(2),new TupleInfo(types),new File(strings.get(3)),Splitter.on(strings.get(4)));
break;
case "import-table":
queryTask=new ImportTableQuery(queryState,importClientFactory,importManager,metadata,strings.get(1),strings.get(2),strings.get(3));
break;
case "sum-frag":
queryTask=new SumFragmentMaster(queryState,masterExecutor,metadata,splitManager,queryFragmentRequestJsonCodec,strings.get(1));
break;
default :
throw new IllegalArgumentException("Unsupported query " + query);
}
queries.put(queryId,queryState);
masterExecutor.submit(queryTask);
return new QueryInfo(queryId,queryTask.getTupleInfos());
}
