{
  this.queryId=queryId;
  this.queryTaskManager=queryTaskManager;
  this.executor=executor;
  this.queryFragmentRequestCodec=queryFragmentRequestCodec;
  httpClient=new ApacheHttpClient(new HttpClientConfig().setConnectTimeout(new Duration(5,TimeUnit.SECONDS)).setReadTimeout(new Duration(5,TimeUnit.SECONDS)));
  this.splitManager=splitManager;
  this.queryTaskInfoCodec=queryTaskInfoCodec;
  try {
    Statement statement=SqlParser.createStatement(sql);
    sessionMetadata=new SessionMetadata(metadata);
    Analyzer analyzer=new Analyzer(sessionMetadata);
    AnalysisResult analysis=analyzer.analyze(statement);
    Planner planner=new Planner();
    PlanNode plan=planner.plan((Query)statement,analysis);
    FragmentPlanner fragmentPlanner=new FragmentPlanner(sessionMetadata);
    fragments=fragmentPlanner.createFragments(plan,analysis.getSymbolAllocator(),false);
    Preconditions.checkArgument(fragments.size() == 2,"Distributed plans with more than 2 levels not yet supported");
  }
 catch (  Exception e) {
    throw Throwables.propagate(e);
  }
  PlanFragment top=fragments.get(1);
  tupleInfos=ImmutableList.copyOf(IterableTransformer.on(top.getRoot().getOutputSymbols()).transform(Functions.forMap(top.getSymbols())).transform(com.facebook.presto.sql.compiler.Type.toRaw()).transform(new Function<Type,TupleInfo>(){
    @Override public TupleInfo apply(    Type input){
      return new TupleInfo(input);
    }
  }
).list());
}
