{
  this.queryId=queryId;
  this.taskScheduler=taskScheduler;
  try {
    Statement statement=SqlParser.createStatement(sql);
    Analyzer analyzer=new Analyzer(session,metadata);
    AnalysisResult analysis=analyzer.analyze(statement);
    Planner planner=new Planner();
    PlanNode plan=planner.plan((Query)statement,analysis);
    SubPlan subplan=new DistributedLogicalPlanner(metadata).createSubplans(plan,analysis.getSymbolAllocator(),false);
    DistributedExecutionPlanner distributedPlanner=new DistributedExecutionPlanner(nodeManager,splitManager);
    outputStage=distributedPlanner.plan(subplan);
  }
 catch (  Exception e) {
    throw Throwables.propagate(e);
  }
}
