{
  this.queryId=queryId;
  this.taskScheduler=taskScheduler;
  this.sessionMetadata=sessionMetadata;
  try {
    Statement statement=SqlParser.createStatement(sql);
    Analyzer analyzer=new Analyzer(this.sessionMetadata);
    AnalysisResult analysis=analyzer.analyze(statement);
    Planner planner=new Planner();
    PlanNode plan=planner.plan((Query)statement,analysis);
    FragmentPlanner fragmentPlanner=new FragmentPlanner(this.sessionMetadata);
    fragments=fragmentPlanner.createFragments(plan,analysis.getSymbolAllocator(),false);
  }
 catch (  Exception e) {
    throw Throwables.propagate(e);
  }
  PlanFragment top=fragments.get(fragments.size() - 1);
  tupleInfos=ImmutableList.copyOf(IterableTransformer.on(top.getRoot().getOutputSymbols()).transform(Functions.forMap(top.getSymbols())).transform(com.facebook.presto.sql.compiler.Type.toRaw()).transform(new Function<Type,TupleInfo>(){
    @Override public TupleInfo apply(    Type input){
      return new TupleInfo(input);
    }
  }
).list());
}
