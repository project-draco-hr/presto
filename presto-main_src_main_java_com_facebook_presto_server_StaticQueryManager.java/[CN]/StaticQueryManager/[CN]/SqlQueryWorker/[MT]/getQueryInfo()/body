{
  ImmutableMap.Builder<String,List<QueryTaskInfo>> map=ImmutableMap.builder();
  for (  Entry<String,List<HttpTaskClient>> stage : stages.entrySet()) {
    map.put(String.valueOf(stage.getKey()),ImmutableList.copyOf(Iterables.transform(stage.getValue(),new Function<HttpTaskClient,QueryTaskInfo>(){
      @Override public QueryTaskInfo apply(      HttpTaskClient taskClient){
        QueryTaskInfo taskInfo=taskClient.getQueryTaskInfo();
        if (taskInfo == null) {
          RuntimeException exception=new RuntimeException(String.format("Query %s task %s has been deleted",queryId,taskClient.getTaskId()));
          cancel();
          throw exception;
        }
        return taskInfo;
      }
    }
)));
  }
  ImmutableMap<String,List<QueryTaskInfo>> stages=map.build();
  State overallState=queryState.get();
  if (!stages.isEmpty()) {
    if (overallState == State.PREPARING) {
      overallState=State.RUNNING;
      queryState.set(overallState);
    }
    if (overallState == State.RUNNING) {
      List<QueryTaskInfo> outputTasks=stages.get(outputStage.getStageId());
      if (outputTasks != null && !outputTasks.isEmpty() && all(transform(outputTasks,stateGetter()),inDoneState())) {
        overallState=State.FINISHED;
        queryState.set(overallState);
      }
 else       if (any(transform(concat(stages.values()),stateGetter()),equalTo(State.FAILED))) {
        overallState=State.FAILED;
        queryState.set(overallState);
        log.debug("A task for query %s failed, canceling all tasks: stages %s",queryId,this.stages);
        cancel();
      }
    }
  }
  return new QueryInfo(queryId,outputStage.getTupleInfos(),outputStage.getFieldNames(),overallState,outputStage.getStageId(),stages);
}
