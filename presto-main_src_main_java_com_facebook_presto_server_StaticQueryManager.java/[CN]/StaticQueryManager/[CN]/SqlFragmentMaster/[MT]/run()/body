{
  try {
    PlanFragment top=fragments.get(1);
    final PlanFragment bottom=fragments.get(0);
    TableScan tableScan=(TableScan)Iterables.getOnlyElement(bottom.getSources());
    Iterable<SplitAssignments> splitAssignments=splitManager.getSplitAssignments(tableScan.getTable());
    Multimap<Node,Split> nodeSplits=SplitAssignments.randomNodeAssignment(new Random(),splitAssignments);
    List<HttpQueryProvider> providers=ImmutableList.copyOf(transform(nodeSplits.asMap().entrySet(),new Function<Entry<Node,Collection<Split>>,HttpQueryProvider>(){
      @Override public HttpQueryProvider apply(      Entry<Node,Collection<Split>> splits){
        QueryFragmentRequest queryFragmentRequest=new QueryFragmentRequest(ImmutableMap.<String,List<Split>>of("source",ImmutableList.copyOf(splits.getValue())),bottom);
        return new HttpQueryProvider(jsonBodyGenerator(codec,queryFragmentRequest),Optional.of(MediaType.APPLICATION_JSON),httpClient,executor,splits.getKey().getHttpUri().resolve("/v1/presto/query"));
      }
    }
));
    masterQueryState.addStage("sql-frag-worker",providers);
    waitForRunning(providers);
    QueryDriversOperator operator=new QueryDriversOperator(10,providers);
    ExecutionPlanner executionPlanner=new ExecutionPlanner(sessionMetadata,null,top.getSymbols(),ImmutableMap.<Integer,Operator>of(bottom.getId(),operator),null);
    Operator aggregation=executionPlanner.plan(top.getRoot());
    for (    Page page : aggregation) {
      queryState.addPage(page);
    }
    queryState.sourceFinished();
  }
 catch (  InterruptedException e) {
    Thread.currentThread().interrupt();
    queryState.queryFailed(e);
    throw Throwables.propagate(e);
  }
catch (  Exception e) {
    queryState.queryFailed(e);
    throw Throwables.propagate(e);
  }
}
