{
  QueryState queryState=masterQueryState.getOutputQueryState();
  try {
    final TableMetadata table=metadata.getTable(catalogName,"default","hivedba_query_stats");
    Iterable<SplitAssignments> splitAssignments=splitManager.getSplitAssignments(table.getTableHandle().get());
    Multimap<Node,Split> nodeSplits=SplitAssignments.randomNodeAssignment(new Random(),splitAssignments);
    List<HttpQueryProvider> providers=ImmutableList.copyOf(transform(nodeSplits.asMap().entrySet(),new Function<Entry<Node,Collection<Split>>,HttpQueryProvider>(){
      @Override public HttpQueryProvider apply(      Entry<Node,Collection<Split>> splits){
        QueryFragmentRequest queryFragmentRequest=new QueryFragmentRequest(ImmutableMap.<String,List<Split>>of("source",ImmutableList.copyOf(splits.getValue())),new PlanFragment("sum-frag-worker",ImmutableList.of(table.getColumns().get(2).getColumnHandle().get(),table.getColumns().get(6).getColumnHandle().get())));
        return new HttpQueryProvider(jsonBodyGenerator(codec,queryFragmentRequest),Optional.of(MediaType.APPLICATION_JSON),asyncHttpClient,splits.getKey().getHttpUri().resolve("/v1/presto/query"));
      }
    }
));
    masterQueryState.addStage("sum-frag-worker",providers);
    QueryDriversOperator operator=new QueryDriversOperator(10,providers);
    HashAggregationOperator aggregation=new HashAggregationOperator(operator,0,ImmutableList.of(finalAggregation(longSumAggregation(1,0))),ImmutableList.of(concat(singleColumn(VARIABLE_BINARY,0,0),singleColumn(FIXED_INT_64,1,0))));
    for (    Page page : aggregation) {
      queryState.addPage(page);
    }
    queryState.sourceFinished();
  }
 catch (  InterruptedException e) {
    Thread.currentThread().interrupt();
    queryState.queryFailed(e);
    throw Throwables.propagate(e);
  }
catch (  Exception e) {
    queryState.queryFailed(e);
    throw Throwables.propagate(e);
  }
}
