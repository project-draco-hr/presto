{
  try {
    QueryDriversTupleStream tupleStream=new QueryDriversTupleStream(new TupleInfo(Type.VARIABLE_BINARY,Type.FIXED_INT_64),10,Iterables.transform(servers,new Function<URI,QueryDriverProvider>(){
      @Override public QueryDriverProvider apply(      @Nullable URI uri){
        return new HttpQueryProvider("sum-partial",asyncHttpClient,uri);
      }
    }
));
    com.facebook.presto.operator.Splitter<UncompressedBlock> splitIterator=new com.facebook.presto.operator.Splitter<>(tupleStream.getTupleInfo(),2,10,tupleStream);
    TupleStream groupBy=new ProjectionTupleStream(splitIterator.getSplit(0),0);
    TupleStream aggregateSource=new ProjectionTupleStream(splitIterator.getSplit(1),1);
    HashAggregationOperator aggregation=new HashAggregationOperator(groupBy,aggregateSource,LongSumAggregation.PROVIDER);
    Cursor cursor=aggregation.cursor(new QuerySession());
    long position=0;
    while (Cursors.advanceNextPositionNoYield(cursor)) {
      BlockBuilder blockBuilder=new BlockBuilder(position,cursor.getTupleInfo());
      do {
        blockBuilder.append(cursor.getTuple());
      }
 while (!blockBuilder.isFull() && Cursors.advanceNextPositionNoYield(cursor));
      UncompressedBlock block=blockBuilder.build();
      queryState.addBlock(block);
      position+=block.getCount();
    }
    queryState.sourceFinished();
  }
 catch (  InterruptedException e) {
    Thread.currentThread().interrupt();
    queryState.queryFailed(e);
    throw Throwables.propagate(e);
  }
catch (  Exception e) {
    queryState.queryFailed(e);
    throw Throwables.propagate(e);
  }
}
