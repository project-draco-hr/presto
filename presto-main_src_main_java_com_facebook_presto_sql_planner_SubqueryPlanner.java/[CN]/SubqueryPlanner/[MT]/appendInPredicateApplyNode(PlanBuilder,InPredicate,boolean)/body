{
  subPlan=subPlan.appendProjections(ImmutableList.of(inPredicate.getValue()),symbolAllocator,idAllocator);
  checkState(inPredicate.getValueList() instanceof SubqueryExpression);
  PlanNode subquery=createRelationPlan(((SubqueryExpression)inPredicate.getValueList()).getQuery()).getRoot();
  Map<Expression,Symbol> correlation=extractCorrelation(subPlan,subquery);
  if (!correlationAllowed && correlation.isEmpty()) {
    throwNotSupportedException(inPredicate,"Correlated subquery in given context");
  }
  subPlan=subPlan.appendProjections(correlation.keySet(),symbolAllocator,idAllocator);
  subquery=replaceExpressionsWithSymbols(subquery,correlation);
  TranslationMap translationMap=subPlan.copyTranslations();
  InPredicate parametersReplaced=ExpressionTreeRewriter.rewriteWith(new ParameterRewriter(parameters,analysis),inPredicate);
  translationMap.addIntermediateMapping(inPredicate,parametersReplaced);
  SymbolReference valueList=getOnlyElement(subquery.getOutputSymbols()).toSymbolReference();
  translationMap.addIntermediateMapping(parametersReplaced,new InPredicate(parametersReplaced.getValue(),valueList));
  return new PlanBuilder(translationMap,new ApplyNode(idAllocator.getNextId(),subPlan.getRoot(),subquery,ImmutableList.copyOf(correlation.values())),subPlan.getSampleWeight(),analysis.getParameters());
}
