{
  long tableId=1;
  TableHandle tableHandle=new NativeTableHandle("demo","test",tableId,null);
  UUID shardId1=UUID.randomUUID();
  UUID shardId2=UUID.randomUUID();
  assertNotEquals(shardId2,shardId1);
  Set<String> nodes=shardManager.getTableNodes(tableHandle);
  assertTrue(nodes.isEmpty());
  shardManager.commitPartition(tableHandle,"some-partition",ImmutableList.<PartitionKey>of(),ImmutableMap.of(shardId1,"some-node"));
  shardManager.commitPartition(tableHandle,"some-other-partition",ImmutableList.<PartitionKey>of(),ImmutableMap.of(shardId2,"some-node"));
  nodes=shardManager.getTableNodes(tableHandle);
  assertEquals(nodes,ImmutableSet.of("some-node"));
  Set<TablePartition> partitions=shardManager.getPartitions(tableHandle);
  assertEquals(partitions.size(),2);
  long partitionId=partitions.iterator().next().getPartitionId();
  Multimap<Long,Entry<UUID,String>> allShardNodes=shardManager.getShardNodesByPartition(tableHandle);
  assertNotNull(allShardNodes);
  assertEquals(allShardNodes.size(),2);
  Collection<Entry<UUID,String>> partitionShards=allShardNodes.get(partitionId);
  assertEquals(partitionShards.size(),1);
}
