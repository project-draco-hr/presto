{
  long tableId=1;
  TableHandle tableHandle=new NativeTableHandle("demo","test",tableId);
  long shardId1=shardManager.allocateShard(tableHandle);
  long shardId2=shardManager.allocateShard(tableHandle);
  assertNotEquals(shardId2,shardId1);
  Multimap<Long,String> shardNodes=shardManager.getCommittedShardNodesByTableId(tableHandle);
  assertNotNull(shardNodes);
  assertEquals(shardNodes.size(),0);
  shardManager.commitPartition(tableHandle,"some-partition",ImmutableList.<PartitionKey>of(),ImmutableMap.of(shardId1,"some-node"));
  shardManager.commitPartition(tableHandle,"some-other-partition",ImmutableList.<PartitionKey>of(),ImmutableMap.of(shardId2,"some-node"));
  shardNodes=shardManager.getCommittedShardNodesByTableId(tableHandle);
  assertNotNull(shardNodes);
  assertEquals(shardNodes.size(),2);
  assertNotNull(shardNodes.get(shardId1));
  assertNotNull(shardNodes.get(shardId2));
  Set<TablePartition> partitions=shardManager.getPartitions(tableHandle);
  assertNotNull(partitions);
  assertEquals(partitions.size(),2);
  long partitionId=partitions.iterator().next().getPartitionId();
  Multimap<Long,Entry<Long,String>> allShardNodes=shardManager.getCommittedPartitionShardNodes(tableHandle);
  assertNotNull(allShardNodes);
  assertEquals(allShardNodes.size(),2);
  Collection<Entry<Long,String>> partitionShards=allShardNodes.get(partitionId);
  assertEquals(partitionShards.size(),1);
}
