{
  if (object == null) {
    generator.writeNull();
    return;
  }
switch (inspector.getPrimitiveCategory()) {
case BOOLEAN:
    generator.writeBoolean(((BooleanObjectInspector)inspector).get(object));
  return;
case BYTE:
generator.writeNumber(((ByteObjectInspector)inspector).get(object));
return;
case SHORT:
generator.writeNumber(((ShortObjectInspector)inspector).get(object));
return;
case INT:
generator.writeNumber(((IntObjectInspector)inspector).get(object));
return;
case LONG:
generator.writeNumber(((LongObjectInspector)inspector).get(object));
return;
case FLOAT:
generator.writeNumber(((FloatObjectInspector)inspector).get(object));
return;
case DOUBLE:
generator.writeNumber(((DoubleObjectInspector)inspector).get(object));
return;
case STRING:
generator.writeString(((StringObjectInspector)inspector).getPrimitiveJavaObject(object));
return;
case DATE:
if (context == JsonContext.JSON_STACK) {
generator.writeNumber(formatDateAsLong(object,(DateObjectInspector)inspector));
}
 else {
generator.writeString(formatDate(object,(DateObjectInspector)inspector));
}
return;
case TIMESTAMP:
if (context == JsonContext.JSON_STACK) {
generator.writeNumber(formatTimestampAsLong(object,(TimestampObjectInspector)inspector));
}
 else {
generator.writeString(formatTimestamp(sessionTimeZone,object,(TimestampObjectInspector)inspector));
}
return;
case BINARY:
generator.writeBinary(((BinaryObjectInspector)inspector).getPrimitiveJavaObject(object));
return;
}
throw new RuntimeException("Unknown primitive type: " + inspector.getPrimitiveCategory());
}
