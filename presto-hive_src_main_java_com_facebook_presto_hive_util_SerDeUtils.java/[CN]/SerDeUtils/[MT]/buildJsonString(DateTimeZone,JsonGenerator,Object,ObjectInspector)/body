{
switch (objectInspector.getCategory()) {
case PRIMITIVE:
{
      PrimitiveObjectInspector primitiveObjectInspector=(PrimitiveObjectInspector)objectInspector;
      if (object == null) {
        generator.writeNull();
        break;
      }
switch (primitiveObjectInspector.getPrimitiveCategory()) {
case BOOLEAN:
        generator.writeBoolean(((BooleanObjectInspector)primitiveObjectInspector).get(object));
      break;
case BYTE:
    generator.writeNumber(((ByteObjectInspector)primitiveObjectInspector).get(object));
  break;
case SHORT:
generator.writeNumber(((ShortObjectInspector)primitiveObjectInspector).get(object));
break;
case INT:
generator.writeNumber(((IntObjectInspector)primitiveObjectInspector).get(object));
break;
case LONG:
generator.writeNumber(((LongObjectInspector)primitiveObjectInspector).get(object));
break;
case FLOAT:
generator.writeNumber(((FloatObjectInspector)primitiveObjectInspector).get(object));
break;
case DOUBLE:
generator.writeNumber(((DoubleObjectInspector)primitiveObjectInspector).get(object));
break;
case STRING:
generator.writeString(((StringObjectInspector)primitiveObjectInspector).getPrimitiveJavaObject(object));
break;
case TIMESTAMP:
generator.writeString(formatTimestamp(sessionTimeZone,object,(TimestampObjectInspector)objectInspector));
break;
case BINARY:
generator.writeBinary(((BinaryObjectInspector)objectInspector).getPrimitiveJavaObject(object));
break;
default :
throw new RuntimeException("Unknown primitive type: " + primitiveObjectInspector.getPrimitiveCategory());
}
break;
}
case LIST:
{
ListObjectInspector listInspector=(ListObjectInspector)objectInspector;
List<?> objectList=listInspector.getList(object);
if (objectList == null) {
generator.writeNull();
}
 else {
generator.writeStartArray();
ObjectInspector elementInspector=listInspector.getListElementObjectInspector();
for (Object element : objectList) {
buildJsonString(sessionTimeZone,generator,element,elementInspector);
}
generator.writeEndArray();
}
break;
}
case MAP:
{
MapObjectInspector mapInspector=(MapObjectInspector)objectInspector;
Map<?,?> objectMap=mapInspector.getMap(object);
if (objectMap == null) {
generator.writeNull();
}
 else {
generator.writeStartObject();
ObjectInspector keyInspector=mapInspector.getMapKeyObjectInspector();
checkState(keyInspector instanceof PrimitiveObjectInspector);
ObjectInspector valueInspector=mapInspector.getMapValueObjectInspector();
for (Map.Entry<?,?> entry : objectMap.entrySet()) {
generator.writeFieldName(getPrimitiveAsString(sessionTimeZone,entry.getKey(),(PrimitiveObjectInspector)keyInspector));
buildJsonString(sessionTimeZone,generator,entry.getValue(),valueInspector);
}
generator.writeEndObject();
}
break;
}
case STRUCT:
{
if (object == null) {
generator.writeNull();
}
 else {
generator.writeStartObject();
StructObjectInspector structInspector=(StructObjectInspector)objectInspector;
List<? extends StructField> structFields=structInspector.getAllStructFieldRefs();
for (StructField structField : structFields) {
generator.writeFieldName(structField.getFieldName());
buildJsonString(sessionTimeZone,generator,structInspector.getStructFieldData(object,structField),structField.getFieldObjectInspector());
}
generator.writeEndObject();
}
break;
}
case UNION:
{
if (object == null) {
generator.writeNull();
}
 else {
generator.writeStartObject();
UnionObjectInspector unionInspector=(UnionObjectInspector)objectInspector;
generator.writeFieldName(Byte.toString(unionInspector.getTag(object)));
buildJsonString(sessionTimeZone,generator,unionInspector.getField(object),unionInspector.getObjectInspectors().get(unionInspector.getTag(object)));
generator.writeEndObject();
}
break;
}
default :
throw new RuntimeException("Unknown type in ObjectInspector!" + objectInspector.getCategory());
}
}
