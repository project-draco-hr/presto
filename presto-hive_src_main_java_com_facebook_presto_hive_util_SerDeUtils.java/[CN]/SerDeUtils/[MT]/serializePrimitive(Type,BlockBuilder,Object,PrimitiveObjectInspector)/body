{
  requireNonNull(builder,"parent builder is null");
  if (object == null) {
    builder.appendNull();
    return;
  }
switch (inspector.getPrimitiveCategory()) {
case BOOLEAN:
    BooleanType.BOOLEAN.writeBoolean(builder,((BooleanObjectInspector)inspector).get(object));
  return;
case BYTE:
TinyintType.TINYINT.writeLong(builder,((ByteObjectInspector)inspector).get(object));
return;
case SHORT:
SmallintType.SMALLINT.writeLong(builder,((ShortObjectInspector)inspector).get(object));
return;
case INT:
IntegerType.INTEGER.writeLong(builder,((IntObjectInspector)inspector).get(object));
return;
case LONG:
BigintType.BIGINT.writeLong(builder,((LongObjectInspector)inspector).get(object));
return;
case FLOAT:
DoubleType.DOUBLE.writeDouble(builder,((FloatObjectInspector)inspector).get(object));
return;
case DOUBLE:
DoubleType.DOUBLE.writeDouble(builder,((DoubleObjectInspector)inspector).get(object));
return;
case STRING:
type.writeSlice(builder,Slices.utf8Slice(((StringObjectInspector)inspector).getPrimitiveJavaObject(object)));
return;
case VARCHAR:
type.writeSlice(builder,Slices.utf8Slice(((HiveVarcharObjectInspector)inspector).getPrimitiveJavaObject(object).getValue()));
return;
case DATE:
DateType.DATE.writeLong(builder,formatDateAsLong(object,(DateObjectInspector)inspector));
return;
case TIMESTAMP:
TimestampType.TIMESTAMP.writeLong(builder,formatTimestampAsLong(object,(TimestampObjectInspector)inspector));
return;
case BINARY:
VARBINARY.writeSlice(builder,Slices.wrappedBuffer(((BinaryObjectInspector)inspector).getPrimitiveJavaObject(object)));
return;
case DECIMAL:
DecimalType decimalType=checkType(type,DecimalType.class,"type");
HiveDecimalWritable hiveDecimal=((HiveDecimalObjectInspector)inspector).getPrimitiveWritableObject(object);
if (decimalType.isShort()) {
decimalType.writeLong(builder,DecimalUtils.getShortDecimalValue(hiveDecimal,decimalType.getScale()));
}
 else {
decimalType.writeSlice(builder,DecimalUtils.getLongDecimalValue(hiveDecimal,decimalType.getScale()));
}
return;
}
throw new RuntimeException("Unknown primitive type: " + inspector.getPrimitiveCategory());
}
