{
  Optional<Window> window=visitIfPresent(context.over(),Window.class);
  QualifiedName name=getQualifiedName(context.qualifiedName());
  boolean distinct=isDistinct(context.setQuantifier());
  if (name.toString().equalsIgnoreCase("if")) {
    check(context.expression().size() == 2 || context.expression().size() == 3,"Invalid number of arguments for 'if' function",context);
    check(!window.isPresent(),"OVER clause not valid for 'if' function",context);
    check(!distinct,"DISTINCT not valid for 'if' function",context);
    Expression elseExpression=null;
    if (context.expression().size() == 3) {
      elseExpression=(Expression)visit(context.expression(2));
    }
    return new IfExpression(getLocation(context),(Expression)visit(context.expression(0)),(Expression)visit(context.expression(1)),elseExpression);
  }
  if (name.toString().equalsIgnoreCase("nullif")) {
    check(context.expression().size() == 2,"Invalid number of arguments for 'nullif' function",context);
    check(!window.isPresent(),"OVER clause not valid for 'nullif' function",context);
    check(!distinct,"DISTINCT not valid for 'nullif' function",context);
    return new NullIfExpression(getLocation(context),(Expression)visit(context.expression(0)),(Expression)visit(context.expression(1)));
  }
  if (name.toString().equalsIgnoreCase("coalesce")) {
    check(!window.isPresent(),"OVER clause not valid for 'coalesce' function",context);
    check(!distinct,"DISTINCT not valid for 'coalesce' function",context);
    return new CoalesceExpression(getLocation(context),visit(context.expression(),Expression.class));
  }
  return new FunctionCall(getLocation(context),getQualifiedName(context.qualifiedName()),window,distinct,visit(context.expression(),Expression.class));
}
