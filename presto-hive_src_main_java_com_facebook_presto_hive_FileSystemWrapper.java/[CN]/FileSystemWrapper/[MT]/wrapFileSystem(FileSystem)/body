{
  return new ForwardingFileSystem(fileSystem){
    private FileStatus[] wrapFileStatuses(    FileStatus[] fileStatuses){
      if (fileStatuses == null) {
        return null;
      }
      FileStatus[] newFileStatuses=new FileStatus[fileStatuses.length];
      for (int i=0; i < fileStatuses.length; i++) {
        newFileStatuses[i]=wrap(fileStatuses[i]);
      }
      return newFileStatuses;
    }
    @Override public Path makeQualified(    Path path){
      return wrap(super.makeQualified(path));
    }
    @Override public FileStatus[] listStatus(    Path f) throws IOException {
      return wrapFileStatuses(super.listStatus(f));
    }
    @Override public FileStatus[] listStatus(    Path f,    PathFilter filter) throws IOException {
      return wrapFileStatuses(super.listStatus(f,filter));
    }
    @Override public FileStatus[] listStatus(    Path[] files) throws IOException {
      return wrapFileStatuses(super.listStatus(files));
    }
    @Override public FileStatus[] listStatus(    Path[] files,    PathFilter filter) throws IOException {
      return wrapFileStatuses(super.listStatus(files,filter));
    }
    @Override public FileStatus[] globStatus(    Path pathPattern) throws IOException {
      return wrapFileStatuses(super.globStatus(pathPattern));
    }
    @Override public FileStatus[] globStatus(    Path pathPattern,    PathFilter filter) throws IOException {
      return wrapFileStatuses(super.globStatus(pathPattern,filter));
    }
    @Override public Path getHomeDirectory(){
      return wrap(super.getHomeDirectory());
    }
    @Override public Path getWorkingDirectory(){
      return wrap(super.getWorkingDirectory());
    }
    @Override public Path startLocalOutput(    Path fsOutputFile,    Path tmpLocalFile) throws IOException {
      return wrap(super.startLocalOutput(fsOutputFile,tmpLocalFile));
    }
    @Override public FileStatus getFileStatus(    Path f) throws IOException {
      return wrap(super.getFileStatus(f));
    }
  }
;
}
