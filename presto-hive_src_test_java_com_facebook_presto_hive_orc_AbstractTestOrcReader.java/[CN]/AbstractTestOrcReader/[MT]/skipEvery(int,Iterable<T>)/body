{
  return new Iterable<T>(){
    @Override public Iterator<T> iterator(){
      return new AbstractIterator<T>(){
        private final Iterator<T> delegate=iterable.iterator();
        private int position;
        @Override protected T computeNext(){
          while (true) {
            if (!delegate.hasNext()) {
              return endOfData();
            }
            T next=delegate.next();
            position++;
            if (position <= n) {
              return next;
            }
            position=0;
          }
        }
      }
;
    }
  }
;
}
