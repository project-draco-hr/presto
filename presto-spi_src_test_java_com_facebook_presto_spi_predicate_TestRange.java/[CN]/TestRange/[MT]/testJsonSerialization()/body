{
  TestingTypeManager typeManager=new TestingTypeManager();
  TestingBlockEncodingSerde blockEncodingSerde=new TestingBlockEncodingSerde(typeManager);
  ObjectMapper mapper=new ObjectMapperProvider().get().registerModule(new SimpleModule().addDeserializer(Type.class,new TestingTypeDeserializer(typeManager)).addSerializer(Block.class,new TestingBlockJsonSerde.Serializer(blockEncodingSerde)).addDeserializer(Block.class,new TestingBlockJsonSerde.Deserializer(blockEncodingSerde)));
  Range range=Range.all(BIGINT);
  Assert.assertEquals(range,mapper.readValue(mapper.writeValueAsString(range),Range.class));
  range=Range.equal(DOUBLE,0.123);
  Assert.assertEquals(range,mapper.readValue(mapper.writeValueAsString(range),Range.class));
  range=Range.greaterThan(BIGINT,0L);
  Assert.assertEquals(range,mapper.readValue(mapper.writeValueAsString(range),Range.class));
  range=Range.greaterThanOrEqual(VARCHAR,utf8Slice("abc"));
  Assert.assertEquals(range,mapper.readValue(mapper.writeValueAsString(range),Range.class));
  range=Range.lessThan(BIGINT,Long.MAX_VALUE);
  Assert.assertEquals(range,mapper.readValue(mapper.writeValueAsString(range),Range.class));
  range=Range.lessThanOrEqual(DOUBLE,Double.MAX_VALUE);
  Assert.assertEquals(range,mapper.readValue(mapper.writeValueAsString(range),Range.class));
}
