{
  Type type=types.get("T");
  TypeSignature valueType=type.getTypeSignature();
  TypeSignature arrayType=parameterizedTypeName(StandardTypes.ARRAY,valueType);
  MethodHandle methodHandle;
  MethodHandle equalsHandle=functionRegistry.getScalarFunctionImplementation(internalOperator(OperatorType.EQUAL,BooleanType.BOOLEAN,ImmutableList.of(type,type))).getMethodHandle();
  List<Boolean> nullableArguments;
  if (type.getJavaType() == void.class) {
    nullableArguments=ImmutableList.of(false,true);
    methodHandle=METHOD_HANDLE_UNKNOWN;
  }
 else {
    nullableArguments=ImmutableList.of(false,false);
    methodHandle=methodHandle(ArrayContains.class,"contains",Type.class,MethodHandle.class,Block.class,type.getJavaType());
  }
  Signature signature=new Signature(FUNCTION_NAME,SCALAR,RETURN_TYPE,arrayType,valueType);
  return new FunctionInfo(signature,getDescription(),isHidden(),methodHandle.bindTo(type).bindTo(equalsHandle),isDeterministic(),true,nullableArguments);
}
