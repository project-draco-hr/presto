{
  SortedRangeSet rangeSet=SortedRangeSet.of(Range.greaterThan(10L),Range.lessThanOrEqual(0L),Range.range(2L,true,4L,false),Range.range(4L,true,6L,false),Range.range(1L,false,2L,false),Range.range(9L,false,11L,false));
  ImmutableList<Range> normalizedResult=ImmutableList.of(Range.lessThanOrEqual(0L),Range.range(1L,false,6L,false),Range.greaterThan(9L));
  SortedRangeSet complement=SortedRangeSet.of(Range.range(0L,false,1L,true),Range.range(6L,true,9L,true));
  Assert.assertEquals(rangeSet.getType(),Long.class);
  Assert.assertFalse(rangeSet.isNone());
  Assert.assertFalse(rangeSet.isAll());
  Assert.assertFalse(rangeSet.isSingleValue());
  Assert.assertTrue(Iterables.elementsEqual(rangeSet,normalizedResult));
  Assert.assertEquals(rangeSet,SortedRangeSet.copyOf(Long.class,normalizedResult));
  Assert.assertEquals(rangeSet.getRangeCount(),3);
  Assert.assertEquals(rangeSet.getType(),Long.class);
  Assert.assertEquals(rangeSet.complement(),complement);
  Assert.assertTrue(rangeSet.includesMarker(Marker.lowerUnbounded(Long.class)));
  Assert.assertTrue(rangeSet.includesMarker(Marker.exactly(0L)));
  Assert.assertTrue(rangeSet.includesMarker(Marker.exactly(4L)));
  Assert.assertFalse(rangeSet.includesMarker(Marker.exactly(7L)));
  Assert.assertTrue(rangeSet.includesMarker(Marker.upperUnbounded(Long.class)));
}
