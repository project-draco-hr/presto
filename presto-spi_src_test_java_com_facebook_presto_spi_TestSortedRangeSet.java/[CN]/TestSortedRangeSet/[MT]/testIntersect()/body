{
  Assert.assertEquals(SortedRangeSet.none(Long.class).intersect(SortedRangeSet.none(Long.class)),SortedRangeSet.none(Long.class));
  Assert.assertEquals(SortedRangeSet.all(Long.class).intersect(SortedRangeSet.all(Long.class)),SortedRangeSet.all(Long.class));
  Assert.assertEquals(SortedRangeSet.none(Long.class).intersect(SortedRangeSet.all(Long.class)),SortedRangeSet.none(Long.class));
  Assert.assertEquals(SortedRangeSet.of(Range.equal(1L),Range.equal(2L),Range.equal(3L)).intersect(SortedRangeSet.of(Range.equal(2L),Range.equal(4L))),SortedRangeSet.of(Range.equal(2L)));
  Assert.assertEquals(SortedRangeSet.all(Long.class).intersect(SortedRangeSet.of(Range.equal(2L),Range.equal(4L))),SortedRangeSet.of(Range.equal(2L),Range.equal(4L)));
  Assert.assertEquals(SortedRangeSet.of(Range.range(0L,true,4L,false)).intersect(SortedRangeSet.of(Range.equal(2L),Range.greaterThan(3L))),SortedRangeSet.of(Range.equal(2L),Range.range(3L,false,4L,false)));
  Assert.assertEquals(SortedRangeSet.of(Range.greaterThanOrEqual(0L)).intersect(SortedRangeSet.of(Range.lessThanOrEqual(0L))),SortedRangeSet.of(Range.equal(0L)));
  Assert.assertEquals(SortedRangeSet.of(Range.greaterThanOrEqual(-1L)).intersect(SortedRangeSet.of(Range.lessThanOrEqual(1L))),SortedRangeSet.of(Range.range(-1L,true,1L,true)));
}
