{
  HiveSplitSource hiveSplitSource=new HiveSplitSource("test",10,new TestingHiveSplitLoader(),Executors.newFixedThreadPool(5));
  for (int i=0; i < 5; i++) {
    hiveSplitSource.addToQueue(new TestSplit(i));
    assertEquals(hiveSplitSource.getOutstandingSplitCount(),i + 1);
  }
  assertEquals(getFutureValue(hiveSplitSource.getNextBatch(1)).size(),1);
  assertEquals(hiveSplitSource.getOutstandingSplitCount(),4);
  hiveSplitSource.fail(new RuntimeException("test"));
  assertEquals(hiveSplitSource.getOutstandingSplitCount(),4);
  try {
    getFutureValue(hiveSplitSource.getNextBatch(1));
    fail("expected RuntimeException");
  }
 catch (  RuntimeException e) {
    assertEquals(e.getMessage(),"test");
  }
  assertEquals(hiveSplitSource.getOutstandingSplitCount(),3);
  hiveSplitSource.addToQueue(new TestSplit(99));
  assertEquals(hiveSplitSource.getOutstandingSplitCount(),3);
  hiveSplitSource.fail(new RuntimeException("another failure"));
  assertEquals(hiveSplitSource.getOutstandingSplitCount(),3);
  try {
    getFutureValue(hiveSplitSource.getNextBatch(1));
    fail("expected RuntimeException");
  }
 catch (  RuntimeException e) {
    assertEquals(e.getMessage(),"test");
  }
}
