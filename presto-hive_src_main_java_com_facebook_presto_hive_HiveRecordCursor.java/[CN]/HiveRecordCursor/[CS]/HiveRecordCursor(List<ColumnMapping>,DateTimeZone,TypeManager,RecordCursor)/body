{
  requireNonNull(columnMappings,"columns is null");
  requireNonNull(typeManager,"typeManager is null");
  requireNonNull(hiveStorageTimeZone,"hiveStorageTimeZone is null");
  this.delegate=requireNonNull(delegate,"delegate is null");
  this.columnMappings=columnMappings;
  int size=columnMappings.size();
  this.types=new Type[size];
  this.booleans=new boolean[size];
  this.longs=new long[size];
  this.doubles=new double[size];
  this.slices=new Slice[size];
  this.objects=new Object[size];
  this.nulls=new boolean[size];
  for (int columnIndex=0; columnIndex < size; columnIndex++) {
    ColumnMapping columnMapping=columnMappings.get(columnIndex);
    if (columnMapping.isPrefilled()) {
      String columnValue=columnMapping.getPrefilledValue();
      byte[] bytes=columnValue.getBytes(UTF_8);
      String name=columnMapping.getHiveColumnHandle().getName();
      Type type=typeManager.getType(columnMapping.getHiveColumnHandle().getTypeSignature());
      types[columnIndex]=type;
      if (HiveUtil.isHiveNull(bytes)) {
        nulls[columnIndex]=true;
      }
 else       if (BOOLEAN.equals(type)) {
        booleans[columnIndex]=booleanPartitionKey(columnValue,name);
      }
 else       if (TINYINT.equals(type)) {
        longs[columnIndex]=tinyintPartitionKey(columnValue,name);
      }
 else       if (SMALLINT.equals(type)) {
        longs[columnIndex]=smallintPartitionKey(columnValue,name);
      }
 else       if (INTEGER.equals(type)) {
        longs[columnIndex]=integerPartitionKey(columnValue,name);
      }
 else       if (BIGINT.equals(type)) {
        longs[columnIndex]=bigintPartitionKey(columnValue,name);
      }
 else       if (REAL.equals(type)) {
        longs[columnIndex]=floatPartitionKey(columnValue,name);
      }
 else       if (DOUBLE.equals(type)) {
        doubles[columnIndex]=doublePartitionKey(columnValue,name);
      }
 else       if (isVarcharType(type)) {
        slices[columnIndex]=varcharPartitionKey(columnValue,name,type);
      }
 else       if (isCharType(type)) {
        slices[columnIndex]=charPartitionKey(columnValue,name,type);
      }
 else       if (DATE.equals(type)) {
        longs[columnIndex]=datePartitionKey(columnValue,name);
      }
 else       if (TIMESTAMP.equals(type)) {
        longs[columnIndex]=timestampPartitionKey(columnValue,hiveStorageTimeZone,name);
      }
 else       if (isShortDecimal(type)) {
        longs[columnIndex]=shortDecimalPartitionKey(columnValue,(DecimalType)type,name);
      }
 else       if (isLongDecimal(type)) {
        slices[columnIndex]=longDecimalPartitionKey(columnValue,(DecimalType)type,name);
      }
 else {
        throw new PrestoException(NOT_SUPPORTED,format("Unsupported column type %s for prefilled column: %s",type.getDisplayName(),name));
      }
    }
  }
}
