{
  if (compressedPages.isEmpty()) {
    return null;
  }
  DataPage compressedPage=compressedPages.remove(0);
  try {
    if (compressedPage instanceof DataPageV1) {
      DataPageV1 dataPageV1=(DataPageV1)compressedPage;
      return new DataPageV1(decompressor.decompress(dataPageV1.getBytes(),dataPageV1.getUncompressedSize()),dataPageV1.getValueCount(),dataPageV1.getUncompressedSize(),dataPageV1.getStatistics(),dataPageV1.getRlEncoding(),dataPageV1.getDlEncoding(),dataPageV1.getValueEncoding());
    }
 else {
      DataPageV2 dataPageV2=(DataPageV2)compressedPage;
      if (!dataPageV2.isCompressed()) {
        return dataPageV2;
      }
      int uncompressedSize=Ints.checkedCast(dataPageV2.getUncompressedSize() - dataPageV2.getDefinitionLevels().size() - dataPageV2.getRepetitionLevels().size());
      return DataPageV2.uncompressed(dataPageV2.getRowCount(),dataPageV2.getNullCount(),dataPageV2.getValueCount(),dataPageV2.getRepetitionLevels(),dataPageV2.getDefinitionLevels(),dataPageV2.getDataEncoding(),decompressor.decompress(dataPageV2.getData(),uncompressedSize),dataPageV2.getStatistics());
    }
  }
 catch (  IOException e) {
    throw new RuntimeException("Could not decompress page",e);
  }
}
