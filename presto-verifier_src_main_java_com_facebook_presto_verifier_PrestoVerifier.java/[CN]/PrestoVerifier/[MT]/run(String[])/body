{
  if (args.length > 0) {
    System.setProperty("config",args[0]);
  }
  ImmutableList.Builder<Module> builder=ImmutableList.<Module>builder().add(new PrestoVerifierModule()).addAll(getAdditionalModules());
  Bootstrap app=new Bootstrap(builder.build());
  Injector injector=app.strictConfig().initialize();
  try {
    VerifierConfig config=injector.getInstance(VerifierConfig.class);
    injector.injectMembers(this);
    Set<String> supportedEventClients=injector.getInstance(Key.get(new TypeLiteral<Set<String>>(){
    }
,Names.named(SUPPORTED_EVENT_CLIENTS)));
    for (    String clientType : config.getEventClients()) {
      checkArgument(supportedEventClients.contains(clientType),"Unsupported event client: %s",clientType);
    }
    Set<EventClient> eventClients=injector.getInstance(Key.get(new TypeLiteral<Set<EventClient>>(){
    }
));
    VerifierDao dao=new DBI(config.getQueryDatabase()).onDemand(VerifierDao.class);
    ImmutableList.Builder<QueryPair> queriesBuilder=ImmutableList.builder();
    for (    String suite : config.getSuites()) {
      queriesBuilder.addAll(dao.getQueriesBySuite(suite,config.getMaxQueries()));
    }
    List<QueryPair> queries=queriesBuilder.build();
    queries=applyOverrides(config,queries);
    queries=filterQueries(queries);
    if (config.getAdditionalJdbcDriverPath() != null) {
      List<URL> urlList=getUrls(config.getAdditionalJdbcDriverPath());
      URL[] urls=new URL[urlList.size()];
      urlList.toArray(urls);
      if (config.getTestJdbcDriverName() != null) {
        loadJdbcDriver(urls,config.getTestJdbcDriverName());
      }
      if (config.getControlJdbcDriverName() != null) {
        loadJdbcDriver(urls,config.getControlJdbcDriverName());
      }
    }
    Verifier verifier=new Verifier(System.out,config,eventClients);
    verifier.run(queries);
  }
  finally {
    injector.getInstance(LifeCycleManager.class).stop();
  }
}
