{
  this.sqlParser=checkNotNull(sqlParser,"sqlParser is null");
  this.executionFactories=checkNotNull(executionFactories,"executionFactories is null");
  this.queryExecutor=newCachedThreadPool(threadsNamed("query-scheduler-%d"));
  this.queryExecutorMBean=new ThreadPoolExecutorMBean((ThreadPoolExecutor)queryExecutor);
  checkNotNull(config,"config is null");
  this.queryStarter=new QueryStarter(queryExecutor,stats,config);
  this.queryMonitor=checkNotNull(queryMonitor,"queryMonitor is null");
  this.locationFactory=checkNotNull(locationFactory,"locationFactory is null");
  this.queryIdGenerator=checkNotNull(queryIdGenerator,"queryIdGenerator is null");
  this.maxQueryAge=config.getMaxQueryAge();
  this.maxQueryHistory=config.getMaxQueryHistory();
  this.clientTimeout=config.getClientTimeout();
  queryManagementExecutor=Executors.newScheduledThreadPool(config.getQueryManagerExecutorPoolSize(),threadsNamed("query-management-%d"));
  queryManagementExecutorMBean=new ThreadPoolExecutorMBean((ThreadPoolExecutor)queryManagementExecutor);
  queryManagementExecutor.scheduleWithFixedDelay(new Runnable(){
    @Override public void run(){
      try {
        failAbandonedQueries();
      }
 catch (      Throwable e) {
        log.warn(e,"Error cancelling abandoned queries");
      }
      try {
        removeExpiredQueries();
      }
 catch (      Throwable e) {
        log.warn(e,"Error removing expired queries");
      }
    }
  }
,1,1,TimeUnit.SECONDS);
}
