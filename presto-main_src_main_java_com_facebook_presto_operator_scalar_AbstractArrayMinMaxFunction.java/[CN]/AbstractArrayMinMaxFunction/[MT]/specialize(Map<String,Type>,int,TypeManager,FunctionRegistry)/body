{
  checkArgument(types.size() == 1,"Expected one type, got %s",types);
  Type elementType=types.get("E");
  checkArgument(elementType.isOrderable(),"Type must be orderable");
  MethodHandle compareMethodHandle=functionRegistry.getScalarFunctionImplementation(internalOperator(operatorType,BOOLEAN,ImmutableList.of(elementType,elementType))).getMethodHandle();
  MethodHandle methodHandle=METHOD_HANDLES.get(elementType.getJavaType());
  if (methodHandle == null) {
    methodHandle=METHOD_HANDLE_OBJECT;
    compareMethodHandle=compareMethodHandle.asType(compareMethodHandle.type().changeParameterType(0,Object.class).changeParameterType(1,Object.class));
  }
  methodHandle=methodHandle.bindTo(compareMethodHandle).bindTo(elementType);
  return new ScalarFunctionImplementation(true,ImmutableList.of(false),methodHandle,isDeterministic());
}
