{
  Accumulator singleStep=factory.createAccumulator();
  singleStep.addInput(input);
  Block singleStepResult=getFinalBlock(singleStep);
  Accumulator partialStep=factory.createAccumulator();
  partialStep.addInput(input);
  Block intermediate=getIntermediateBlock(partialStep);
  Accumulator finalStep=factory.createAccumulator();
  finalStep.addIntermediate(intermediate);
  finalStep.addIntermediate(intermediate);
  Block actual=getFinalBlock(finalStep);
  Map<String,Double> expected=Maps.transformValues(extractSingleValue(singleStepResult),new Function<Double,Double>(){
    @Override public Double apply(    Double input){
      return input * 2;
    }
  }
);
  assertEquals(extractSingleValue(actual),expected);
}
