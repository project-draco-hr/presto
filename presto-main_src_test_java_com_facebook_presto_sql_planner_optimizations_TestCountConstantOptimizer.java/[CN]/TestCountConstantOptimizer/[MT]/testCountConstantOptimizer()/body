{
  CountConstantOptimizer optimizer=new CountConstantOptimizer();
  PlanNodeIdAllocator planNodeIdAllocator=new PlanNodeIdAllocator();
  Symbol countAggregationSymbol=new Symbol("count");
  Signature countAggregationSignature=new Signature("count",FunctionKind.AGGREGATE,"bigint","bigint");
  ImmutableMap<Symbol,FunctionCall> aggregations=ImmutableMap.of(countAggregationSymbol,new FunctionCall(QualifiedName.of("count"),ImmutableList.of(new QualifiedNameReference(QualifiedName.of("expr")))));
  ImmutableMap<Symbol,Signature> functions=ImmutableMap.of(countAggregationSymbol,countAggregationSignature);
  ValuesNode valuesNode=new ValuesNode(planNodeIdAllocator.getNextId(),ImmutableList.of(new Symbol("col")),ImmutableList.of(ImmutableList.of()));
  AggregationNode eligiblePlan=new AggregationNode(planNodeIdAllocator.getNextId(),new ProjectNode(planNodeIdAllocator.getNextId(),valuesNode,ImmutableMap.of(new Symbol("expr"),new LongLiteral("42"))),ImmutableList.of(),aggregations,functions,ImmutableMap.of(),ImmutableList.of(),AggregationNode.Step.INTERMEDIATE,Optional.empty(),1.0,Optional.empty());
  assertTrue(((AggregationNode)optimizer.optimize(eligiblePlan,TEST_SESSION,ImmutableMap.of(),new SymbolAllocator(),new PlanNodeIdAllocator())).getAggregations().get(countAggregationSymbol).getArguments().isEmpty());
  AggregationNode ineligiblePlan=new AggregationNode(planNodeIdAllocator.getNextId(),new ProjectNode(planNodeIdAllocator.getNextId(),valuesNode,ImmutableMap.of(new Symbol("expr"),new FunctionCall(QualifiedName.of("function"),ImmutableList.of(new QualifiedNameReference(QualifiedName.of("x")))))),ImmutableList.of(),aggregations,functions,ImmutableMap.of(),ImmutableList.of(),AggregationNode.Step.INTERMEDIATE,Optional.empty(),1.0,Optional.empty());
  assertFalse(((AggregationNode)optimizer.optimize(ineligiblePlan,TEST_SESSION,ImmutableMap.of(),new SymbolAllocator(),new PlanNodeIdAllocator())).getAggregations().get(countAggregationSymbol).getArguments().isEmpty());
}
