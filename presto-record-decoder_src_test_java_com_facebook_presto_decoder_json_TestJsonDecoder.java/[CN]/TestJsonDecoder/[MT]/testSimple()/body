{
  byte[] json=ByteStreams.toByteArray(TestJsonDecoder.class.getResourceAsStream("/decoder/json/message.json"));
  JsonRowDecoder rowDecoder=new JsonRowDecoder(PROVIDER.get());
  DecoderTestColumnHandle row1=new DecoderTestColumnHandle("",0,"row1",createVarcharType(100),"source",null,null,false,false,false);
  DecoderTestColumnHandle row2=new DecoderTestColumnHandle("",1,"row2",createVarcharType(10),"user/screen_name",null,null,false,false,false);
  DecoderTestColumnHandle row3=new DecoderTestColumnHandle("",2,"row3",BigintType.BIGINT,"id",null,null,false,false,false);
  DecoderTestColumnHandle row4=new DecoderTestColumnHandle("",3,"row4",BigintType.BIGINT,"user/statuses_count",null,null,false,false,false);
  DecoderTestColumnHandle row5=new DecoderTestColumnHandle("",4,"row5",BooleanType.BOOLEAN,"user/geo_enabled",null,null,false,false,false);
  List<DecoderColumnHandle> columns=ImmutableList.of(row1,row2,row3,row4,row5);
  Set<FieldValueProvider> providers=new HashSet<>();
  boolean corrupt=rowDecoder.decodeRow(json,null,providers,columns,buildMap(columns));
  assertFalse(corrupt);
  assertEquals(providers.size(),columns.size());
  checkValue(providers,row1,"<a href=\"http://twitterfeed.com\" rel=\"nofollow\">twitterfeed</a>");
  checkValue(providers,row2,"EKentuckyN");
  checkValue(providers,row3,493857959588286460L);
  checkValue(providers,row4,7630);
  checkValue(providers,row5,true);
}
