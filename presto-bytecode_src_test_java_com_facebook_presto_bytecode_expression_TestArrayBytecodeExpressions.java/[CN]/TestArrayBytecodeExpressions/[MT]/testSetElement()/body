{
  BytecodeExpression stringArray=constantString("foo bar baz").invoke("split",String[].class,constantString(" "));
  assertByteCodeExpressionType(stringArray,type(String[].class));
  assertByteCodeExpression(stringArray.length(),3,"\"foo bar baz\".split(\" \").length");
  assertByteCodeExpression(stringArray.getElement(0),"foo","\"foo bar baz\".split(\" \")[0]");
  assertByteCodeExpression(stringArray.getElement(1),"bar","\"foo bar baz\".split(\" \")[1]");
  assertByteCodeExpression(stringArray.getElement(2),"baz","\"foo bar baz\".split(\" \")[2]");
  assertByteCodeExpression(invokeStatic(typeMethodMap.get(boolean[].class),newArray(type(boolean[].class),5),constantInt(0),constantTrue()),true,classLoader);
  assertByteCodeExpression(invokeStatic(typeMethodMap.get(int[].class),newArray(type(int[].class),5),constantInt(0),constantInt(999)),999,classLoader);
  assertByteCodeExpression(invokeStatic(typeMethodMap.get(float[].class),newArray(type(float[].class),5),constantInt(0),constantFloat(0.777f)),0.777f,classLoader);
  assertByteCodeExpression(invokeStatic(typeMethodMap.get(double[].class),newArray(type(double[].class),5),constantInt(0),constantDouble(0.888d)),0.888d,classLoader);
  assertByteCodeExpression(invokeStatic(typeMethodMap.get(String[].class),stringArray,constantInt(0),constantString("hello")),"hello",classLoader);
}
