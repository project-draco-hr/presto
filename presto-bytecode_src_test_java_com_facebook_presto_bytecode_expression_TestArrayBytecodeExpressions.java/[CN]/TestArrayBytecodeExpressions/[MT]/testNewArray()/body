{
  assertByteCodeExpressionType(newArray(type(boolean[].class),5),type(boolean[].class));
  assertByteCodeExpression(newArray(type(boolean[].class),5).length(),5,"new boolean[5].length");
  assertByteCodeExpressionType(newArray(type(char[].class),5),type(char[].class));
  assertByteCodeExpression(newArray(type(char[].class),5).length(),5,"new char[5].length");
  assertByteCodeExpressionType(newArray(type(float[].class),5),type(float[].class));
  assertByteCodeExpression(newArray(type(float[].class),5).length(),5,"new float[5].length");
  assertByteCodeExpressionType(newArray(type(double[].class),5),type(double[].class));
  assertByteCodeExpression(newArray(type(double[].class),5).length(),5,"new double[5].length");
  assertByteCodeExpressionType(newArray(type(byte[].class),5),type(byte[].class));
  assertByteCodeExpression(newArray(type(byte[].class),5).length(),5,"new byte[5].length");
  assertByteCodeExpressionType(newArray(type(short[].class),5),type(short[].class));
  assertByteCodeExpression(newArray(type(short[].class),5).length(),5,"new short[5].length");
  assertByteCodeExpressionType(newArray(type(int[].class),5),type(int[].class));
  assertByteCodeExpression(newArray(type(int[].class),5).length(),5,"new int[5].length");
  assertByteCodeExpressionType(newArray(type(long[].class),5),type(long[].class));
  assertByteCodeExpression(newArray(type(long[].class),5).length(),5,"new long[5].length");
  assertByteCodeExpressionType(constantString("foo bar baz").invoke("split",String[].class,constantString(" ")),type(String[].class));
  assertByteCodeExpression(constantString("foo bar baz").invoke("split",String[].class,constantString(" ")).length(),3,"\"foo bar baz\".split(\" \").length");
}
