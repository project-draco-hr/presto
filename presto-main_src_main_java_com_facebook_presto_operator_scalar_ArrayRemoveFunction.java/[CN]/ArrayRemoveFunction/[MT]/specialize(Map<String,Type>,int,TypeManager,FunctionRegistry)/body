{
  checkArgument(types.size() == 1,format("%s expects only one argument",FUNCTION_NAME));
  Type type=types.get("E");
  MethodHandle equalsFunction=functionRegistry.getScalarFunctionImplementation(internalOperator(EQUAL,BOOLEAN,ImmutableList.of(type,type))).getMethodHandle();
  MethodHandle baseMethodHandle;
  if (type.getJavaType() == long.class) {
    baseMethodHandle=METHOD_HANDLE_LONG;
  }
 else   if (type.getJavaType() == double.class) {
    baseMethodHandle=METHOD_HANDLE_DOUBLE;
  }
 else   if (type.getJavaType() == Slice.class) {
    baseMethodHandle=METHOD_HANDLE_SLICE;
  }
 else   if (type.getJavaType() == boolean.class) {
    baseMethodHandle=METHOD_HANDLE_BOOLEAN;
  }
 else {
    baseMethodHandle=METHOD_HANDLE_OBJECT;
  }
  MethodHandle methodHandle=baseMethodHandle.bindTo(equalsFunction).bindTo(type);
  return new ScalarFunctionImplementation(false,ImmutableList.of(false,false),methodHandle,isDeterministic());
}
