{
  Block elementsBlock=readStructuralBlock(array);
  int sizeAfterRemove=0;
  List<Integer> positions=new ArrayList<>();
  for (int i=0; i < elementsBlock.getPositionCount(); i++) {
    Object element=castValue(type,elementsBlock,i);
    try {
      if (element == null || !(boolean)equalsFunction.invoke(element,value)) {
        positions.add(i);
        sizeAfterRemove+=elementsBlock.getLength(i);
      }
    }
 catch (    Throwable t) {
      Throwables.propagateIfInstanceOf(t,Error.class);
      Throwables.propagateIfInstanceOf(t,PrestoException.class);
      throw new PrestoException(INTERNAL_ERROR,t);
    }
  }
  if (elementsBlock.getPositionCount() == positions.size()) {
    return array;
  }
  BlockBuilder blockBuilder=new VariableWidthBlockBuilder(new BlockBuilderStatus(),sizeAfterRemove);
  for (  int position : positions) {
    type.appendTo(elementsBlock,position,blockBuilder);
  }
  return buildStructuralSlice(blockBuilder);
}
