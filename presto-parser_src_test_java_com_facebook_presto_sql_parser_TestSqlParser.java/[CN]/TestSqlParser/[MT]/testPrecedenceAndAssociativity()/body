{
  assertExpression("1 AND 2 OR 3",new LogicalBinaryExpression(LogicalBinaryExpression.Type.OR,new LogicalBinaryExpression(LogicalBinaryExpression.Type.AND,new LongLiteral("1"),new LongLiteral("2")),new LongLiteral("3")));
  assertExpression("1 OR 2 AND 3",new LogicalBinaryExpression(LogicalBinaryExpression.Type.OR,new LongLiteral("1"),new LogicalBinaryExpression(LogicalBinaryExpression.Type.AND,new LongLiteral("2"),new LongLiteral("3"))));
  assertExpression("NOT 1 AND 2",new LogicalBinaryExpression(LogicalBinaryExpression.Type.AND,new NotExpression(new LongLiteral("1")),new LongLiteral("2")));
  assertExpression("NOT 1 OR 2",new LogicalBinaryExpression(LogicalBinaryExpression.Type.OR,new NotExpression(new LongLiteral("1")),new LongLiteral("2")));
  assertExpression("-1 + 2",new ArithmeticBinaryExpression(ArithmeticBinaryExpression.Type.ADD,new NegativeExpression(new LongLiteral("1")),new LongLiteral("2")));
  assertExpression("1 - 2 - 3",new ArithmeticBinaryExpression(ArithmeticBinaryExpression.Type.SUBTRACT,new ArithmeticBinaryExpression(ArithmeticBinaryExpression.Type.SUBTRACT,new LongLiteral("1"),new LongLiteral("2")),new LongLiteral("3")));
  assertExpression("1 / 2 / 3",new ArithmeticBinaryExpression(ArithmeticBinaryExpression.Type.DIVIDE,new ArithmeticBinaryExpression(ArithmeticBinaryExpression.Type.DIVIDE,new LongLiteral("1"),new LongLiteral("2")),new LongLiteral("3")));
  assertExpression("1 + 2 * 3",new ArithmeticBinaryExpression(ArithmeticBinaryExpression.Type.ADD,new LongLiteral("1"),new ArithmeticBinaryExpression(ArithmeticBinaryExpression.Type.MULTIPLY,new LongLiteral("2"),new LongLiteral("3"))));
}
