{
  List<Long> columnIds=ImmutableList.of(1L,2L,4L,6L,7L);
  List<Type> columnTypes=ImmutableList.of(BIGINT,VARCHAR,VARBINARY,DoubleType.DOUBLE,BooleanType.BOOLEAN);
  File file=new File(directory,System.nanoTime() + ".orc");
  byte[] bytes1=octets(0x00,0xFE,0xFF);
  byte[] bytes3=octets(0x01,0x02,0x19,0x80);
  RowPagesBuilder rowPagesBuilder=RowPagesBuilder.rowPagesBuilder(columnTypes).row(123,"hello",wrappedBuffer(bytes1),123.456,true).row(null,"world",null,Double.POSITIVE_INFINITY,null).row(456,"bye",wrappedBuffer(bytes3),Double.NaN,false);
  try (ThreadContextClassLoader ignored=new ThreadContextClassLoader(new EmptyClassLoader());OrcFileWriter writer=new OrcFileWriter(columnIds,columnTypes,file)){
    writer.appendPages(rowPagesBuilder.build());
  }
   try (FileOrcDataSource dataSource=new FileOrcDataSource(file,new DataSize(1,Unit.MEGABYTE))){
    OrcRecordReader reader=createReader(dataSource,columnIds);
    assertEquals(reader.getTotalRowCount(),3);
    assertEquals(reader.getPosition(),0);
    assertEquals(reader.nextBatch(),3);
    assertEquals(reader.getPosition(),3);
    LongVector longVector=new LongVector();
    reader.readVector(0,longVector);
    assertEquals(longVector.isNull[0],false);
    assertEquals(longVector.isNull[1],true);
    assertEquals(longVector.isNull[2],false);
    assertEquals(longVector.vector[0],123L);
    assertEquals(longVector.vector[2],456L);
    SliceVector stringVector=new SliceVector();
    reader.readVector(1,stringVector);
    assertEquals(stringVector.vector[0],utf8Slice("hello"));
    assertEquals(stringVector.vector[1],utf8Slice("world"));
    assertEquals(stringVector.vector[2],utf8Slice("bye"));
    SliceVector sliceVector=new SliceVector();
    reader.readVector(2,sliceVector);
    assertEquals(sliceVector.vector[0],wrappedBuffer(bytes1));
    assertEquals(sliceVector.vector[1],null);
    assertEquals(sliceVector.vector[2],wrappedBuffer(bytes3));
    DoubleVector doubleVector=new DoubleVector();
    reader.readVector(3,doubleVector);
    assertEquals(doubleVector.isNull[0],false);
    assertEquals(doubleVector.isNull[1],false);
    assertEquals(doubleVector.isNull[2],false);
    assertEquals(doubleVector.vector[0],123.456);
    assertEquals(doubleVector.vector[1],Double.POSITIVE_INFINITY);
    assertEquals(doubleVector.vector[2],Double.NaN);
    BooleanVector booleanVector=new BooleanVector();
    reader.readVector(4,booleanVector);
    assertEquals(booleanVector.isNull[0],false);
    assertEquals(booleanVector.isNull[1],true);
    assertEquals(booleanVector.isNull[2],false);
    assertEquals(booleanVector.vector[0],true);
    assertEquals(booleanVector.vector[2],false);
    assertEquals(reader.nextBatch(),-1);
  }
   File crcFile=new File(file.getParentFile(),"." + file.getName() + ".crc");
  assertFalse(crcFile.exists());
}
