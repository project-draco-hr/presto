{
  checkNotNull(fileStripes,"fileStripes is null");
  checkNotNull(stripeStats,"stripeStats is null");
  checkNotNull(orcDataSource,"orcDataSource is null");
  checkNotNull(tupleDomain,"tupleDomain is null");
  checkNotNull(columnHandles,"columnHandles is null");
  checkNotNull(types,"types is null");
  checkNotNull(compressionKind,"compressionKind is null");
  checkNotNull(hiveStorageTimeZone,"hiveStorageTimeZone is null");
  checkNotNull(sessionTimeZone,"sessionTimeZone is null");
  checkNotNull(typeManager,"typeManager is null");
  this.orcDataSource=orcDataSource;
  this.splitLength=splitLength;
  checkArgument(rowsInRowGroup > 0,"rowsInRowGroup must be greater than zero");
  boolean[] includedStreams=findIncludedStreams(types,columnHandles);
  columnHandleStreamIndex=getColumnHandleStreamIndex(types,columnHandles);
  long totalRowCount=0;
  ImmutableList.Builder<StripeInformation> stripes=ImmutableList.builder();
  if (doesFileOverlapTupleDomain(typeManager,numberOfRows,fileStats,tupleDomain,columnHandleStreamIndex)) {
    for (int i=0; i < fileStripes.size(); i++) {
      StripeInformation stripe=fileStripes.get(i);
      if (splitContainsStripe(splitOffset,splitLength,stripe) && doesStripOverlapTupleDomain(typeManager,stripe,stripeStats,tupleDomain,columnHandleStreamIndex,i)) {
        stripes.add(stripe);
        totalRowCount+=stripe.getNumberOfRows();
      }
    }
  }
  this.totalRowCount=totalRowCount;
  this.stripes=stripes.build();
  stripeReader=new StripeReader(orcDataSource,compressionKind,types,bufferSize,includedStreams,rowsInRowGroup,columnHandleStreamIndex,tupleDomain,metadataReader,typeManager);
  streamReaders=createStreamReaders(orcDataSource,types,hiveStorageTimeZone,sessionTimeZone,includedStreams);
}
