{
  LocalExchange exchange=new LocalExchange(SINGLE_DISTRIBUTION,8,TYPES,ImmutableList.of(),Optional.empty(),new DataSize(sizeOfPages(99),BYTE));
  assertEquals(exchange.getBufferCount(),1);
  assertExchangeTotalBufferPages(exchange,0);
  LocalExchangeSinkFactory sinkFactory=exchange.createSinkFactory();
  LocalExchangeSource source=exchange.getSource(0);
  assertSource(source,0);
  LocalExchangeSink sink=sinkFactory.createSink();
  sinkFactory.close();
  sinkFactory.noMoreSinkFactories();
  assertSinkCanWrite(sink);
  assertSource(source,0);
  ListenableFuture<?> readFuture=source.waitForReading();
  assertFalse(readFuture.isDone());
  sink.addPage(createPage(0));
  assertTrue(readFuture.isDone());
  assertExchangeTotalBufferPages(exchange,1);
  assertSource(source,1);
  sink.addPage(createPage(1));
  assertSource(source,2);
  assertExchangeTotalBufferPages(exchange,2);
  assertRemovePage(source,createPage(0));
  assertSource(source,1);
  assertExchangeTotalBufferPages(exchange,1);
  assertRemovePage(source,createPage(1));
  assertSource(source,0);
  assertExchangeTotalBufferPages(exchange,0);
  sink.addPage(createPage(2));
  sink.addPage(createPage(3));
  assertSource(source,2);
  assertExchangeTotalBufferPages(exchange,2);
  sink.finish();
  assertSinkFinished(sink);
  assertSource(source,2);
  assertRemovePage(source,createPage(2));
  assertSource(source,1);
  assertSinkFinished(sink);
  assertExchangeTotalBufferPages(exchange,1);
  assertRemovePage(source,createPage(3));
  assertSourceFinished(source);
  assertExchangeTotalBufferPages(exchange,0);
}
