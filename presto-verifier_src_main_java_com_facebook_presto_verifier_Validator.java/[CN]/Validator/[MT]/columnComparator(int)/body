{
  return new Comparator<Object>(){
    @SuppressWarnings("unchecked") @Override public int compare(    Object a,    Object b){
      if (a instanceof Number && b instanceof Number) {
        Number x=(Number)a;
        Number y=(Number)b;
        boolean bothReal=isReal(x) && isReal(y);
        boolean bothIntegral=isIntegral(x) && isIntegral(y);
        if (!(bothReal || bothIntegral)) {
          throw new TypesDoNotMatchException(format("item types do not match: %s vs %s",a.getClass().getName(),b.getClass().getName()));
        }
        if (isIntegral(x)) {
          return Long.compare(x.longValue(),y.longValue());
        }
        return precisionCompare(x.doubleValue(),y.doubleValue(),precision);
      }
      if (a.getClass() != b.getClass()) {
        throw new TypesDoNotMatchException(format("item types do not match: %s vs %s",a.getClass().getName(),b.getClass().getName()));
      }
      if ((a.getClass().isArray() && b.getClass().isArray())) {
        if (Arrays.deepEquals((Object[])a,(Object[])b)) {
          return 0;
        }
        return Arrays.hashCode((Object[])a) < Arrays.hashCode((Object[])b) ? -1 : 1;
      }
      if ((a instanceof Map && b instanceof Map)) {
        if (a.equals(b)) {
          return 0;
        }
        return a.hashCode() < b.hashCode() ? -1 : 1;
      }
      checkArgument(a instanceof Comparable,"item is not Comparable: %s",a.getClass().getName());
      return ((Comparable<Object>)a).compareTo(b);
    }
  }
;
}
