{
  if (false || !isOptimizedReaderEnabled(session,enabled)) {
    return Optional.absent();
  }
  @SuppressWarnings("deprecation") Deserializer deserializer=getDeserializer(schema);
  RcFileBlockLoader blockLoader;
  if (deserializer instanceof LazyBinaryColumnarSerDe) {
    blockLoader=new RcBinaryBlockLoader(DateTimeZone.forID(session.getTimeZoneKey().getId()));
  }
 else   if (deserializer instanceof ColumnarSerDe) {
    blockLoader=new RcTextBlockLoader(hiveStorageTimeZone,DateTimeZone.forID(session.getTimeZoneKey().getId()));
  }
 else {
    return Optional.absent();
  }
  List<HiveColumnHandle> readColumns=ImmutableList.copyOf(filter(columns,not(isPartitionKeyPredicate())));
  List<Integer> readHiveColumnIndexes=ImmutableList.copyOf(transform(readColumns,hiveColumnIndexGetter()));
  ColumnProjectionUtils.appendReadColumns(configuration,readHiveColumnIndexes);
  for (  String name : schema.stringPropertyNames()) {
    if (name.startsWith("serialization.")) {
      configuration.set(name,schema.getProperty(name));
    }
  }
  RCFile.Reader recordReader;
  try {
    FileSystem fileSystem=path.getFileSystem(configuration);
    recordReader=new RCFile.Reader(fileSystem,path,configuration);
  }
 catch (  Exception e) {
    throw Throwables.propagate(e);
  }
  try {
    return Optional.of(new RcFilePageSource(recordReader,start,length,blockLoader,schema,partitionKeys,columns,hiveStorageTimeZone,typeManager));
  }
 catch (  Exception e) {
    try {
      recordReader.close();
    }
 catch (    Exception ignored) {
    }
    throw Throwables.propagate(e);
  }
}
