{
  Class<?> javaType=type.getJavaType();
  if (element == null) {
    blockBuilder.appendNull();
  }
 else   if (type.getTypeSignature().getBase().equals(StandardTypes.ARRAY) && element instanceof Iterable<?>) {
    BlockBuilder subBlockBuilder=((ArrayType)type).getElementType().createBlockBuilder(new BlockBuilderStatus(),TypeUtils.EXPECTED_ARRAY_SIZE);
    for (    Object subElement : (Iterable<?>)element) {
      appendToBlockBuilder(type.getTypeParameters().get(0),subElement,subBlockBuilder);
    }
    type.writeObject(blockBuilder,subBlockBuilder);
  }
 else   if (type.getTypeSignature().getBase().equals(StandardTypes.ROW) && element instanceof Iterable<?>) {
    BlockBuilder subBlockBuilder=new VariableWidthBlockBuilder(new BlockBuilderStatus(),TypeUtils.EXPECTED_ARRAY_SIZE);
    int field=0;
    for (    Object subElement : (Iterable<?>)element) {
      appendToBlockBuilder(type.getTypeParameters().get(field),subElement,subBlockBuilder);
      field++;
    }
    type.writeObject(blockBuilder,subBlockBuilder);
  }
 else   if (type.getTypeSignature().getBase().equals(StandardTypes.MAP) && element instanceof Map<?,?>) {
    BlockBuilder subBlockBuilder=new VariableWidthBlockBuilder(new BlockBuilderStatus(),TypeUtils.EXPECTED_ARRAY_SIZE);
    for (    Map.Entry<?,?> entry : ((Map<?,?>)element).entrySet()) {
      appendToBlockBuilder(type.getTypeParameters().get(0),entry.getKey(),subBlockBuilder);
      appendToBlockBuilder(type.getTypeParameters().get(1),entry.getValue(),subBlockBuilder);
    }
    type.writeObject(blockBuilder,subBlockBuilder);
  }
 else   if (javaType == boolean.class) {
    type.writeBoolean(blockBuilder,(Boolean)element);
  }
 else   if (javaType == long.class) {
    type.writeLong(blockBuilder,((Number)element).longValue());
  }
 else   if (javaType == double.class) {
    type.writeDouble(blockBuilder,((Number)element).doubleValue());
  }
 else   if (javaType == Slice.class) {
    if (element instanceof String) {
      type.writeSlice(blockBuilder,Slices.utf8Slice(element.toString()));
    }
 else     if (element instanceof byte[]) {
      type.writeSlice(blockBuilder,Slices.wrappedBuffer((byte[])element));
    }
 else {
      type.writeSlice(blockBuilder,(Slice)element);
    }
  }
 else {
    type.writeObject(blockBuilder,element);
  }
}
