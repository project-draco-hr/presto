{
  return new AbstractIterator<Block>(){
    private final Iterator<? extends BlockIterable> blockIterables=ConcatBlockIterable.this.blockIterables.iterator();
    private Iterator<Block> blocks;
    @Override protected Block computeNext(){
      while ((blocks == null || !blocks.hasNext()) && blockIterables.hasNext()) {
        blocks=blockIterables.next().iterator();
      }
      if (blocks == null || !blocks.hasNext()) {
        return endOfData();
      }
      UncompressedBlock block=(UncompressedBlock)blocks.next();
      return block;
    }
  }
;
}
