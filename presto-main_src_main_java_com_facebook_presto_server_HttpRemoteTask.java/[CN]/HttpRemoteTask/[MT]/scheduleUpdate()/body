{
  if (!needsUpdate.get() || taskInfo.get().getState().isDone()) {
    return;
  }
  if (currentRequest != null && Duration.nanosSince(currentRequestStartNanos).compareTo(new Duration(2,TimeUnit.SECONDS)) >= 0) {
    needsUpdate.set(true);
    currentRequest.cancel(true);
    currentRequest=null;
    currentRequestStartNanos=0;
  }
  if (this.currentRequest != null && !this.currentRequest.isDone()) {
    return;
  }
  updateErrorTracker.acquireRequestPermit();
  List<TaskSource> sources=getSources();
  TaskUpdateRequest updateRequest=new TaskUpdateRequest(session.toSessionRepresentation(),planFragment,sources,outputBuffers.get());
  Request request=preparePost().setUri(uriBuilderFrom(taskInfo.get().getSelf()).addParameter("summarize").build()).setHeader(HttpHeaders.CONTENT_TYPE,MediaType.JSON_UTF_8.toString()).setBodyGenerator(jsonBodyGenerator(taskUpdateRequestCodec,updateRequest)).build();
  ListenableFuture<JsonResponse<TaskInfo>> future=httpClient.executeAsync(request,createFullJsonResponseHandler(taskInfoCodec));
  currentRequest=future;
  currentRequestStartNanos=System.nanoTime();
  needsUpdate.set(false);
  Futures.addCallback(future,new SimpleHttpResponseHandler<>(new UpdateResponseHandler(sources),request.getUri()),executor);
}
