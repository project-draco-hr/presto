{
  PlanFragment planFragment=new PlanFragment(new PlanFragmentId("32"),ImmutableSet.<PlanNodeId>of(),ImmutableMap.<Symbol,Type>of(),new ExchangeNode(new PlanNodeId("1"),new PlanFragmentId("22"),ImmutableList.<Symbol>of()));
  Session session=new Session(null,DEFAULT_CATALOG,DEFAULT_SCHEMA);
  TaskUpdateRequest updateRequest=new TaskUpdateRequest(session,planFragment,ImmutableList.<TaskSource>of(),new OutputBuffers(ImmutableSet.of("out"),true));
  Request request=preparePost().setUri(httpServer.getBaseUrl().resolve("/v1/task/query.stage." + httpServer.getPort())).setHeader(HttpHeaders.CONTENT_TYPE,MediaType.APPLICATION_JSON).setBodyGenerator(jsonBodyGenerator(jsonCodec(TaskUpdateRequest.class),updateRequest)).build();
  JsonResponse<TaskInfo> response=httpClient.execute(request,createFullJsonResponseHandler(jsonCodec(TaskInfo.class)));
  Preconditions.checkState(response.getStatusCode() == HttpStatus.OK.code(),"Expected response code from %s to be %s, but was %s: %s",request.getUri(),HttpStatus.OK,response.getStatusCode(),response.getStatusMessage());
  TaskInfo taskInfo=response.getValue();
  URI outputLocation=httpServer.getBaseUrl().resolve("/v1/task/" + taskInfo.getTaskId() + "/results/out");
  return outputLocation;
}
