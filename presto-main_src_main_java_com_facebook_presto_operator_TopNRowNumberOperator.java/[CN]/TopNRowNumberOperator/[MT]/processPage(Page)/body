{
  Optional<GroupByIdBlock> partitionIds=Optional.empty();
  if (groupByHash.isPresent()) {
    GroupByHash hash=groupByHash.get();
    long groupByHashSize=hash.getEstimatedSize();
    partitionIds=Optional.of(hash.getGroupIds(page));
    operatorContext.reserveMemory(hash.getEstimatedSize() - groupByHashSize);
  }
  long sizeDelta=0;
  Block[] blocks=page.getBlocks();
  for (int position=0; position < page.getPositionCount(); position++) {
    long partitionId=groupByHash.isPresent() ? partitionIds.get().getGroupId(position) : 0;
    if (!partitionRows.containsKey(partitionId)) {
      partitionRows.put(partitionId,new PartitionBuilder(sortTypes,sortChannels,sortOrders,maxRowCountPerPartition));
    }
    PartitionBuilder partitionBuilder=partitionRows.get(partitionId);
    if (partitionBuilder.getRowCount() < maxRowCountPerPartition) {
      Block[] row=getSingleValueBlocks(page,position);
      sizeDelta+=partitionBuilder.addRow(row);
    }
 else     if (compare(position,blocks,partitionBuilder.peekLastRow()) < 0) {
      Block[] row=getSingleValueBlocks(page,position);
      sizeDelta+=partitionBuilder.replaceRow(row);
    }
  }
  if (sizeDelta > 0) {
    operatorContext.reserveMemory(sizeDelta);
  }
 else {
    operatorContext.freeMemory(-sizeDelta);
  }
}
