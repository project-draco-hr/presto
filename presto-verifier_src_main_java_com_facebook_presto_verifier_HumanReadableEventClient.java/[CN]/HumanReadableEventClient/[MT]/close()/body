{
  long totalCount=(long)cpuRatioAll.getCount();
  StringBuilder builder=new StringBuilder();
  builder.append("\n");
  builder.append("CPU Ratio\n");
  builder.append("Bucket      (p50)  count      (%)\n");
  builder.append("---------------------------------\n");
  builder.append(formatBucket(0,LARGE_SPEEDUP,cpuRatioLargeSpeedup,totalCount) + "\n");
  builder.append(formatBucket(LARGE_SPEEDUP,SMALL_SPEEDUP,cpuRatioSmallSpeedup,totalCount) + "\n");
  builder.append(formatBucket(SMALL_SPEEDUP,SMALL_REGRESSION,cpuRatioSmallRegression,totalCount) + "\n");
  builder.append(formatBucket(SMALL_REGRESSION,POSITIVE_INFINITY,cpuRatioLargeRegression,totalCount) + "\n");
  builder.append("\n");
  builder.append("CPU Ratio Distribution\n");
  builder.append("-----------------------\n");
  builder.append(format("count: %s\n",cpuRatioAll.getCount()));
  builder.append(format("min: %3.1f\n",100 * sortableLongToDouble(cpuRatioAll.getMin())));
  builder.append(format("p01: %3.1f\n",100 * sortableLongToDouble(cpuRatioAll.getQuantile(0.01))));
  builder.append(format("p05: %3.1f\n",100 * sortableLongToDouble(cpuRatioAll.getQuantile(0.05))));
  builder.append(format("p10: %3.1f\n",100 * sortableLongToDouble(cpuRatioAll.getQuantile(0.10))));
  builder.append(format("p25: %3.1f\n",100 * sortableLongToDouble(cpuRatioAll.getQuantile(0.25))));
  builder.append(format("p50: %3.1f\n",100 * sortableLongToDouble(cpuRatioAll.getQuantile(0.50))));
  builder.append(format("p75: %3.1f\n",100 * sortableLongToDouble(cpuRatioAll.getQuantile(0.75))));
  builder.append(format("p90: %3.1f\n",100 * sortableLongToDouble(cpuRatioAll.getQuantile(0.90))));
  builder.append(format("p99: %3.1f\n",100 * sortableLongToDouble(cpuRatioAll.getQuantile(0.99))));
  builder.append(format("max: %3.1f\n",100 * sortableLongToDouble(cpuRatioAll.getMax())));
  out.println(builder);
}
