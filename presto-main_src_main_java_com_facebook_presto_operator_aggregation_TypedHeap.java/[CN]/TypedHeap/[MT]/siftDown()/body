{
  int position=0;
  while (true) {
    int leftPosition=position * 2 + 1;
    if (leftPosition >= positionCount) {
      break;
    }
    int rightPosition=leftPosition + 1;
    int smallerChildPosition;
    if (rightPosition >= positionCount) {
      smallerChildPosition=leftPosition;
    }
 else {
      smallerChildPosition=comparator.compareTo(heapBlockBuilder,heapIndex[leftPosition],heapBlockBuilder,heapIndex[rightPosition]) >= 0 ? rightPosition : leftPosition;
    }
    if (comparator.compareTo(heapBlockBuilder,heapIndex[smallerChildPosition],heapBlockBuilder,heapIndex[position]) >= 0) {
      break;
    }
    int swapTemp=heapIndex[position];
    heapIndex[position]=heapIndex[smallerChildPosition];
    heapIndex[smallerChildPosition]=swapTemp;
    position=smallerChildPosition;
  }
}
