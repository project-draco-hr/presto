{
switch (descriptor.getType()) {
case BOOLEAN:
    return new ParquetBooleanColumnReader(descriptor);
case INT32:
  return new ParquetIntColumnReader(descriptor);
case INT64:
return new ParquetLongColumnReader(descriptor);
case INT96:
return new ParquetTimestampColumnReader(descriptor);
case FLOAT:
return new ParquetFloatColumnReader(descriptor);
case DOUBLE:
return new ParquetDoubleColumnReader(descriptor);
case BINARY:
return new ParquetBinaryColumnReader(descriptor);
case FIXED_LEN_BYTE_ARRAY:
if (descriptor.getPrimitiveType().getOriginalType() == OriginalType.DECIMAL) {
DecimalMetadata decimalMetadata=descriptor.getPrimitiveType().getDecimalMetadata();
return ParquetDecimalColumnReaderFactory.createReader(descriptor,decimalMetadata.getPrecision(),decimalMetadata.getScale());
}
 else {
throw new PrestoException(NOT_SUPPORTED,"Parquet type FIXED_LEN_BYTE_ARRAY supported as DECIMAL; got " + descriptor.getPrimitiveType().getOriginalType());
}
default :
throw new PrestoException(NOT_SUPPORTED,"Unsupported parquet type: " + descriptor.getType());
}
}
