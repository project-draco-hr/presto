{
  if (aggregations == null) {
    Map<Tuple,AggregationFunction> aggregationMap=new HashMap<>();
    while (groupBySource.hasNext()) {
      RunLengthEncodedBlock group=groupBySource.next();
      AggregationFunction aggregation=aggregationMap.get(group.getValue());
      if (aggregation == null) {
        aggregation=functionProvider.get();
        aggregationMap.put(group.getValue(),aggregation);
      }
      processGroup(aggregationSource,aggregation,group.getRange());
    }
    this.aggregations=aggregationMap.entrySet().iterator();
  }
  if (!aggregations.hasNext()) {
    endOfData();
    return null;
  }
  BlockBuilder blockBuilder=new BlockBuilder(position,tupleInfo);
  while (!blockBuilder.isFull() && aggregations.hasNext()) {
    Entry<Tuple,AggregationFunction> aggregation=aggregations.next();
    Tuple key=aggregation.getKey();
    Tuple value=aggregation.getValue().evaluate();
    blockBuilder.append(key);
    blockBuilder.append(value);
  }
  ValueBlock block=blockBuilder.build();
  position+=block.getCount();
  return block;
}
