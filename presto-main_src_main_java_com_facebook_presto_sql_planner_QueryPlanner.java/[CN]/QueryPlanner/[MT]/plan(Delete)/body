{
  RelationType descriptor=analysis.getOutputDescriptor(node.getTable());
  TableHandle handle=analysis.getTableHandle(node.getTable());
  ColumnHandle rowIdHandle=metadata.getUpdateRowIdColumnHandle(session,handle);
  Type rowIdType=metadata.getColumnMetadata(session,handle,rowIdHandle).getType();
  ImmutableList.Builder<Symbol> outputSymbols=ImmutableList.builder();
  ImmutableMap.Builder<Symbol,ColumnHandle> columns=ImmutableMap.builder();
  ImmutableList.Builder<Field> fields=ImmutableList.builder();
  for (  Field field : descriptor.getAllFields()) {
    Symbol symbol=symbolAllocator.newSymbol(field.getName().get(),field.getType());
    outputSymbols.add(symbol);
    columns.put(symbol,analysis.getColumn(field));
    fields.add(field);
  }
  Field rowIdField=Field.newUnqualified(Optional.empty(),rowIdType);
  Symbol rowIdSymbol=symbolAllocator.newSymbol("$rowId",rowIdField.getType());
  outputSymbols.add(rowIdSymbol);
  columns.put(rowIdSymbol,rowIdHandle);
  fields.add(rowIdField);
  PlanNode tableScan=new TableScanNode(idAllocator.getNextId(),handle,outputSymbols.build(),columns.build(),Optional.empty(),TupleDomain.all(),null);
  RelationPlan relationPlan=new RelationPlan(tableScan,new RelationType(fields.build()),outputSymbols.build(),Optional.empty());
  TranslationMap translations=new TranslationMap(relationPlan,analysis);
  translations.setFieldMappings(relationPlan.getOutputSymbols());
  PlanBuilder builder=new PlanBuilder(translations,relationPlan.getRoot(),relationPlan.getSampleWeight());
  if (node.getWhere().isPresent()) {
    builder=filter(builder,node.getWhere().get(),node);
  }
  Symbol rowId=builder.translate(new FieldOrExpression(relationPlan.getDescriptor().indexOf(rowIdField)));
  List<Symbol> outputs=ImmutableList.of(symbolAllocator.newSymbol("partialrows",BIGINT),symbolAllocator.newSymbol("fragment",VARBINARY));
  return new DeleteNode(idAllocator.getNextId(),builder.getRoot(),new DeleteHandle(handle),rowId,outputs);
}
