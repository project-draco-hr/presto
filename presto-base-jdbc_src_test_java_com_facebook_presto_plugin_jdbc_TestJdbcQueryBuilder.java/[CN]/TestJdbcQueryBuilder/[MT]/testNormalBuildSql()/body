{
  TupleDomain<ColumnHandle> tupleDomain=TupleDomain.withColumnDomains(ImmutableMap.<ColumnHandle,Domain>builder().put(columns.get(0),Domain.create(SortedRangeSet.copyOf(BIGINT,ImmutableList.of(Range.equal(BIGINT,128L),Range.equal(BIGINT,180L),Range.equal(BIGINT,233L),Range.lessThan(BIGINT,25L),Range.range(BIGINT,66L,true,96L,true),Range.greaterThan(BIGINT,192L))),false)).put(columns.get(1),Domain.create(SortedRangeSet.copyOf(DOUBLE,ImmutableList.of(Range.equal(DOUBLE,200011.0),Range.equal(DOUBLE,200014.0),Range.equal(DOUBLE,200017.0),Range.equal(DOUBLE,200116.5),Range.range(DOUBLE,200030.0,true,200036.0,true),Range.range(DOUBLE,200048.0,true,200099.0,true))),false)).put(columns.get(7),Domain.create(SortedRangeSet.copyOf(TINYINT,ImmutableList.of(Range.range(TINYINT,60L,true,70L,false),Range.range(TINYINT,52L,true,55L,false))),false)).put(columns.get(8),Domain.create(SortedRangeSet.copyOf(SMALLINT,ImmutableList.of(Range.range(SMALLINT,-75L,true,-68L,true),Range.range(SMALLINT,-200L,true,-100L,false))),false)).put(columns.get(9),Domain.create(SortedRangeSet.copyOf(INTEGER,ImmutableList.of(Range.equal(INTEGER,80L),Range.equal(INTEGER,96L),Range.lessThan(INTEGER,0L))),false)).put(columns.get(2),Domain.create(SortedRangeSet.copyOf(BOOLEAN,ImmutableList.of(Range.equal(BOOLEAN,true))),false)).build());
  Connection connection=database.getConnection();
  try (PreparedStatement preparedStatement=new QueryBuilder("\"").buildSql(jdbcClient,connection,"","","test_table",columns,tupleDomain);ResultSet resultSet=preparedStatement.executeQuery()){
    ImmutableSet.Builder<Long> builder=ImmutableSet.builder();
    while (resultSet.next()) {
      builder.add((Long)resultSet.getObject("col_0"));
    }
    assertEquals(builder.build(),ImmutableSet.of(68L,180L,196L));
  }
 }
