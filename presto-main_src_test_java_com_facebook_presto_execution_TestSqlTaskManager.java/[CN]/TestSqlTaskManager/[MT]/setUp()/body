{
  DualMetadata dualMetadata=new DualMetadata();
  tableHandle=dualMetadata.getTableHandle(new SchemaTableName("default",DualMetadata.NAME));
  assertNotNull(tableHandle,"tableHandle is null");
  ;
  columnHandle=dualMetadata.getColumnHandle(tableHandle,DualMetadata.COLUMN_NAME);
  assertNotNull(columnHandle,"columnHandle is null");
  symbol=new Symbol(DualMetadata.COLUMN_NAME);
  MetadataManager metadata=new MetadataManager();
  metadata.addInternalSchemaMetadata(MetadataManager.INTERNAL_CONNECTOR_ID,dualMetadata);
  DualSplitManager dualSplitManager=new DualSplitManager(new InMemoryNodeManager());
  PartitionResult partitionResult=dualSplitManager.getPartitions(tableHandle,TupleDomain.all());
  split=Iterables.getOnlyElement(dualSplitManager.getPartitionSplits(tableHandle,partitionResult.getPartitions()));
  planner=new LocalExecutionPlanner(new NodeInfo("test"),metadata,new DataStreamManager(new DualDataStreamProvider()),new MockLocalStorageManager(new File("target/temp")),new MockExchangeClientSupplier(),new ExpressionCompiler(metadata));
  taskExecutor=new TaskExecutor(8);
  taskExecutor.start();
  sqlTaskManager=new SqlTaskManager(planner,new MockLocationFactory(),taskExecutor,new QueryMonitor(new ObjectMapperProvider().get(),new NullEventClient(),new NodeInfo("test")),new TaskManagerConfig());
  tableScanNodeId=new PlanNodeId("tableScan");
  testFragment=new PlanFragment(new PlanFragmentId("fragment"),new TableScanNode(tableScanNodeId,tableHandle,ImmutableList.of(symbol),ImmutableMap.of(symbol,columnHandle),Optional.<GeneratedPartitions>absent()),ImmutableMap.<Symbol,Type>of(symbol,Type.VARCHAR),Partitioning.SOURCE,tableScanNodeId);
  taskId=new TaskId("query","stage","task");
  session=new Session("user","test","default","default","test","test");
}
