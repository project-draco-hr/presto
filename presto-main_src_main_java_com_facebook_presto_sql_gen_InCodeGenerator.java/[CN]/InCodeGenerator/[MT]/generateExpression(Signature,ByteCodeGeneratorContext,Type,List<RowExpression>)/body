{
  ByteCodeNode value=generatorContext.generate(arguments.get(0));
  List<RowExpression> values=arguments.subList(1,arguments.size());
  ImmutableList.Builder<ByteCodeNode> valuesByteCode=ImmutableList.builder();
  for (int i=1; i < arguments.size(); i++) {
    ByteCodeNode testNode=generatorContext.generate(arguments.get(i));
    valuesByteCode.add(testNode);
  }
  Type type=arguments.get(0).getType();
  Class<?> javaType=type.getJavaType();
  SwitchGenerationCase switchGenerationCase=checkSwitchGenerationCase(type,values);
  FunctionInfo hashCodeFunction=generatorContext.getRegistry().resolveOperator(OperatorType.HASH_CODE,ImmutableList.of(type));
  ImmutableListMultimap.Builder<Integer,ByteCodeNode> hashBucketsBuilder=ImmutableListMultimap.builder();
  ImmutableList.Builder<ByteCodeNode> defaultBucket=ImmutableList.builder();
  ImmutableSet.Builder<Object> constantValuesBuilder=ImmutableSet.builder();
  for (  RowExpression testValue : values) {
    ByteCodeNode testByteCode=generatorContext.generate(testValue);
    if (testValue instanceof ConstantExpression && ((ConstantExpression)testValue).getValue() != null) {
      ConstantExpression constant=(ConstantExpression)testValue;
      Object object=constant.getValue();
switch (switchGenerationCase) {
case DIRECT_SWITCH:
case SET_CONTAINS:
        constantValuesBuilder.add(object);
      break;
case HASH_SWITCH:
    try {
      int hashCode=Ints.checkedCast((Long)hashCodeFunction.getMethodHandle().invoke(object));
      hashBucketsBuilder.put(hashCode,testByteCode);
    }
 catch (    Throwable throwable) {
      throw new IllegalArgumentException("Error processing IN statement: error calculating hash code for " + object,throwable);
    }
  break;
default :
throw new IllegalArgumentException("Not supported switch generation case: " + switchGenerationCase);
}
}
 else {
defaultBucket.add(testByteCode);
}
}
ImmutableListMultimap<Integer,ByteCodeNode> hashBuckets=hashBucketsBuilder.build();
ImmutableSet<Object> constantValues=constantValuesBuilder.build();
LabelNode end=new LabelNode("end");
LabelNode match=new LabelNode("match");
LabelNode noMatch=new LabelNode("noMatch");
LabelNode defaultLabel=new LabelNode("default");
Scope scope=generatorContext.getScope();
ByteCodeNode switchBlock;
ByteCodeBlock switchCaseBlocks=new ByteCodeBlock();
LookupSwitch.LookupSwitchBuilder switchBuilder=lookupSwitchBuilder();
switch (switchGenerationCase) {
case DIRECT_SWITCH:
for (Object constantValue : constantValues) {
switchBuilder.addCase(Ints.checkedCast((Long)constantValue),match);
}
switchBuilder.defaultCase(defaultLabel);
switchBlock=new ByteCodeBlock().comment("lookupSwitch(<stackValue>))").dup(javaType).longToInt().append(switchBuilder.build());
break;
case HASH_SWITCH:
for (Map.Entry<Integer,Collection<ByteCodeNode>> bucket : hashBuckets.asMap().entrySet()) {
LabelNode label=new LabelNode("inHash" + bucket.getKey());
switchBuilder.addCase(bucket.getKey(),label);
Collection<ByteCodeNode> testValues=bucket.getValue();
ByteCodeBlock caseBlock=buildInCase(generatorContext,scope,type,label,match,defaultLabel,testValues,false);
switchCaseBlocks.append(caseBlock.setDescription("case " + bucket.getKey()));
}
switchBuilder.defaultCase(defaultLabel);
Binding hashCodeBinding=generatorContext.getCallSiteBinder().bind(hashCodeFunction.getMethodHandle());
switchBlock=new ByteCodeBlock().comment("lookupSwitch(hashCode(<stackValue>))").dup(javaType).append(invoke(hashCodeBinding,hashCodeFunction.getSignature())).longToInt().append(switchBuilder.build()).append(switchCaseBlocks);
break;
case SET_CONTAINS:
Set<?> constantValuesSet=toFastutilHashSet(constantValues,javaType);
Binding constant=generatorContext.getCallSiteBinder().bind(constantValuesSet,constantValuesSet.getClass());
switchBlock=new ByteCodeBlock().comment("inListSet.contains(<stackValue>)").append(new IfStatement().condition(new ByteCodeBlock().comment("value").dup(javaType).comment("set").append(loadConstant(constant)).invokeStatic(FastutilSetHelper.class,"in",boolean.class,javaType.isPrimitive() ? javaType : Object.class,constantValuesSet.getClass())).ifTrue(jump(match)));
break;
default :
throw new IllegalArgumentException("Not supported switch generation case: " + switchGenerationCase);
}
ByteCodeBlock defaultCaseBlock=buildInCase(generatorContext,scope,type,defaultLabel,match,noMatch,defaultBucket.build(),true).setDescription("default");
ByteCodeBlock block=new ByteCodeBlock().comment("IN").append(value).append(ifWasNullPopAndGoto(scope,end,boolean.class,javaType)).append(switchBlock).append(defaultCaseBlock);
ByteCodeBlock matchBlock=new ByteCodeBlock().setDescription("match").visitLabel(match).pop(javaType).append(generatorContext.wasNull().set(constantFalse())).push(true).gotoLabel(end);
block.append(matchBlock);
ByteCodeBlock noMatchBlock=new ByteCodeBlock().setDescription("noMatch").visitLabel(noMatch).pop(javaType).push(false).gotoLabel(end);
block.append(noMatchBlock);
block.visitLabel(end);
return block;
}
