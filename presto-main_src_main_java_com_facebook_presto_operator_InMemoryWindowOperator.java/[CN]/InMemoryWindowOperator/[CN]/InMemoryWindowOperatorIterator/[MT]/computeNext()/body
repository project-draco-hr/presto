{
  if (pageIndex == null) {
    pageIndex=new PagesIndex(source,expectedPositions,maxSize);
    int[] orderFields=Ints.concat(partitionFields,sortFields);
    boolean[] partitionOrder=new boolean[partitionFields.length];
    Arrays.fill(partitionOrder,true);
    boolean[] ordering=Booleans.concat(partitionOrder,sortOrder);
    pageIndex.sort(orderByChannel,orderFields,ordering);
    ChannelIndex index=pageIndex.getIndex(orderByChannel);
    partitionComparator=new MultiSliceFieldOrderedTupleComparator(partitionFields,partitionOrder,index);
    index=pageIndex.getIndex(orderByChannel);
    orderComparator=new MultiSliceFieldOrderedTupleComparator(sortFields,sortOrder,index);
  }
  if (currentPosition >= pageIndex.getPositionCount()) {
    return endOfData();
  }
  PageBuilder pageBuilder=new PageBuilder(getTupleInfos());
  while ((!pageBuilder.isFull()) && (currentPosition < pageIndex.getPositionCount())) {
    boolean newPartition=(currentPosition == 0) || (currentPosition == partitionEnd);
    if (newPartition) {
      partitionEnd++;
      while (partitionEnd < pageIndex.getPositionCount()) {
        if (partitionComparator.compare(partitionEnd - 1,partitionEnd) != 0) {
          break;
        }
        partitionEnd++;
      }
      for (      WindowFunction function : windowFunctions) {
        function.reset(partitionEnd - currentPosition);
      }
    }
    int channel=0;
    while (channel < outputChannels.length) {
      pageIndex.appendTupleTo(outputChannels[channel],currentPosition,pageBuilder.getBlockBuilder(channel));
      channel++;
    }
    boolean newPeerGroup=newPartition || (currentPosition == peerGroupEnd);
    if (newPeerGroup) {
      peerGroupEnd++;
      while (peerGroupEnd < partitionEnd) {
        if (orderComparator.compare(peerGroupEnd - 1,peerGroupEnd) != 0) {
          break;
        }
        peerGroupEnd++;
      }
      peerGroupCount=peerGroupEnd - currentPosition;
    }
    for (    WindowFunction function : windowFunctions) {
      function.processRow(pageBuilder.getBlockBuilder(channel),newPeerGroup,peerGroupCount);
      channel++;
    }
    currentPosition++;
  }
  if (pageBuilder.isEmpty()) {
    return endOfData();
  }
  return pageBuilder.build();
}
