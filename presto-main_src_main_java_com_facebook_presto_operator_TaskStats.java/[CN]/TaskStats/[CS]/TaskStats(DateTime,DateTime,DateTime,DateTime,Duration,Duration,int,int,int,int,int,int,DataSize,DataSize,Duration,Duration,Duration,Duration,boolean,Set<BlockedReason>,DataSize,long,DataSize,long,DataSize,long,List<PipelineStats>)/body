{
  this.createTime=requireNonNull(createTime,"createTime is null");
  this.firstStartTime=firstStartTime;
  this.lastStartTime=lastStartTime;
  this.endTime=endTime;
  this.elapsedTime=requireNonNull(elapsedTime,"elapsedTime is null");
  this.queuedTime=requireNonNull(queuedTime,"queuedTime is null");
  checkArgument(totalDrivers >= 0,"totalDrivers is negative");
  this.totalDrivers=totalDrivers;
  checkArgument(queuedDrivers >= 0,"queuedDrivers is negative");
  this.queuedDrivers=queuedDrivers;
  checkArgument(queuedPartitionedDrivers >= 0,"queuedPartitionedDrivers is negative");
  this.queuedPartitionedDrivers=queuedPartitionedDrivers;
  checkArgument(runningDrivers >= 0,"runningDrivers is negative");
  this.runningDrivers=runningDrivers;
  checkArgument(runningPartitionedDrivers >= 0,"runningPartitionedDrivers is negative");
  this.runningPartitionedDrivers=runningPartitionedDrivers;
  checkArgument(completedDrivers >= 0,"completedDrivers is negative");
  this.completedDrivers=completedDrivers;
  this.memoryReservation=requireNonNull(memoryReservation,"memoryReservation is null");
  this.systemMemoryReservation=requireNonNull(systemMemoryReservation,"systemMemoryReservation is null");
  this.totalScheduledTime=requireNonNull(totalScheduledTime,"totalScheduledTime is null");
  this.totalCpuTime=requireNonNull(totalCpuTime,"totalCpuTime is null");
  this.totalUserTime=requireNonNull(totalUserTime,"totalUserTime is null");
  this.totalBlockedTime=requireNonNull(totalBlockedTime,"totalBlockedTime is null");
  this.fullyBlocked=fullyBlocked;
  this.blockedReasons=ImmutableSet.copyOf(requireNonNull(blockedReasons,"blockedReasons is null"));
  this.rawInputDataSize=requireNonNull(rawInputDataSize,"rawInputDataSize is null");
  checkArgument(rawInputPositions >= 0,"rawInputPositions is negative");
  this.rawInputPositions=rawInputPositions;
  this.processedInputDataSize=requireNonNull(processedInputDataSize,"processedInputDataSize is null");
  checkArgument(processedInputPositions >= 0,"processedInputPositions is negative");
  this.processedInputPositions=processedInputPositions;
  this.outputDataSize=requireNonNull(outputDataSize,"outputDataSize is null");
  checkArgument(outputPositions >= 0,"outputPositions is negative");
  this.outputPositions=outputPositions;
  this.pipelines=ImmutableList.copyOf(requireNonNull(pipelines,"pipelines is null"));
}
