{
  checkNotNull(column,"column is null");
  checkNotNull(encoding,"encoding is null");
  try {
    String hash=ByteStreams.hash(ByteStreams.slice(tableInputSupplierFactory.getInputSupplier(column.getTable().getName()),0,1024 * 1024),Hashing.murmur3_32()).toString();
    File cachedFile=new File(new File(cacheDirectory,column.getTable().getName() + "-" + hash),"new-" + createFileName(column,encoding.getName()));
    if (cachedFile.exists()) {
      return cachedFile;
    }
    Files.createParentDirs(cachedFile);
    InputSupplier<InputStream> inputSupplier=tableInputSupplierFactory.getInputSupplier(column.getTable().getName());
    DelimitedRecordIterable records=new DelimitedRecordIterable(newReaderSupplier(inputSupplier,UTF_8),Splitter.on("|"));
    RecordProjectOperator source=new RecordProjectOperator(records,createProjection(column.getIndex(),column.getType()));
    ImportingOperator.importData(source,new BlocksFileWriter(encoding,newOutputStreamSupplier(cachedFile)));
    return cachedFile;
  }
 catch (  IOException e) {
    throw Throwables.propagate(e);
  }
}
