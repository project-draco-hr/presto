{
  QualifiedName name=table.getName();
  if (name.getParts().size() > 3) {
    throw new SemanticException(table,"Too many dots in table name: %s",name);
  }
  List<String> parts=Lists.reverse(name.getParts());
  String tableName=parts.get(0);
  String schemaName=(parts.size() > 1) ? parts.get(1) : session.getCurrentSchema();
  String catalogName=(parts.size() > 2) ? parts.get(2) : session.getCurrentCatalog();
  TableMetadata tableMetadata=metadata.getTable(catalogName,schemaName,tableName);
  if (tableMetadata == null) {
    throw new SemanticException(table,"Table %s does not exist",name);
  }
  ImmutableList.Builder<Field> fields=ImmutableList.builder();
  for (  ColumnMetadata column : tableMetadata.getColumns()) {
    QualifiedName prefix=QualifiedName.of(tableMetadata.getCatalogName(),tableMetadata.getSchemaName(),tableMetadata.getTableName());
    Symbol symbol=context.getSymbolAllocator().newSymbol(column.getName(),Type.fromRaw(column.getType()));
    Preconditions.checkArgument(column.getColumnHandle().isPresent(),"Column doesn't have a handle");
    fields.add(new Field(Optional.of(prefix),Optional.of(column.getName()),column.getColumnHandle(),symbol,Type.fromRaw(column.getType())));
  }
  TupleDescriptor descriptor=new TupleDescriptor(fields.build());
  context.registerTable(table,descriptor,tableMetadata);
  return descriptor;
}
