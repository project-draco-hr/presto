{
  super(id);
  requireNonNull(source,"source is null");
  requireNonNull(specification,"specification is null");
  requireNonNull(windowFunctions,"windowFunctions is null");
  requireNonNull(hashSymbol,"hashSymbol is null");
  checkArgument(specification.getPartitionBy().containsAll(prePartitionedInputs),"prePartitionedInputs must be contained in partitionBy");
  checkArgument(preSortedOrderPrefix <= specification.getOrderBy().size(),"Cannot have sorted more symbols than those requested");
  checkArgument(preSortedOrderPrefix == 0 || ImmutableSet.copyOf(prePartitionedInputs).equals(ImmutableSet.copyOf(specification.getPartitionBy())),"preSortedOrderPrefix can only be greater than zero if all partition symbols are pre-partitioned");
  this.source=source;
  this.prePartitionedInputs=ImmutableSet.copyOf(prePartitionedInputs);
  this.specification=specification;
  this.windowFunctions=ImmutableMap.copyOf(windowFunctions);
  this.hashSymbol=hashSymbol;
  this.preSortedOrderPrefix=preSortedOrderPrefix;
}
