{
  ConnectorTableHandle tableHandle=getTableHandle(table);
  ConnectorTableMetadata tableMetadata=metadata.getTableMetadata(SESSION,tableHandle);
  List<ColumnHandle> columnHandles=ImmutableList.copyOf(metadata.getColumnHandles(SESSION,tableHandle).values());
  Map<String,Integer> columnIndex=indexColumns(columnHandles);
  ConnectorTransactionHandle transaction=CassandraTransactionHandle.INSTANCE;
  List<ConnectorTableLayoutResult> layouts=metadata.getTableLayouts(SESSION,tableHandle,Constraint.alwaysTrue(),Optional.empty());
  ConnectorTableLayoutHandle layout=getOnlyElement(layouts).getTableLayout().getHandle();
  List<ConnectorSplit> splits=getAllSplits(splitManager.getSplits(transaction,SESSION,layout));
  long rowNumber=0;
  for (  ConnectorSplit split : splits) {
    CassandraSplit cassandraSplit=(CassandraSplit)split;
    long completedBytes=0;
    try (RecordCursor cursor=recordSetProvider.getRecordSet(transaction,SESSION,cassandraSplit,columnHandles).cursor()){
      while (cursor.advanceNextPosition()) {
        try {
          assertReadFields(cursor,tableMetadata.getColumns());
        }
 catch (        RuntimeException e) {
          throw new RuntimeException("row " + rowNumber,e);
        }
        rowNumber++;
        String keyValue=cursor.getSlice(columnIndex.get("key")).toStringUtf8();
        assertTrue(keyValue.startsWith("key "));
        int rowId=Integer.parseInt(keyValue.substring(4));
        assertEquals(keyValue,String.format("key %d",rowId));
        assertEquals(Bytes.toHexString(cursor.getSlice(columnIndex.get("typebytes")).getBytes()),String.format("0x%08X",rowId));
        assertEquals(cursor.getSlice(columnIndex.get("typeinteger")).toStringUtf8(),String.valueOf(rowId));
        assertEquals(cursor.getLong(columnIndex.get("typelong")),1000 + rowId);
        assertEquals(cursor.getSlice(columnIndex.get("typeuuid")).toStringUtf8(),String.format("00000000-0000-0000-0000-%012d",rowId));
        assertEquals(cursor.getSlice(columnIndex.get("typetimestamp")).toStringUtf8(),Long.valueOf(DATE.getTime()).toString());
        long newCompletedBytes=cursor.getCompletedBytes();
        assertTrue(newCompletedBytes >= completedBytes);
        completedBytes=newCompletedBytes;
      }
    }
   }
  assertEquals(rowNumber,9);
}
