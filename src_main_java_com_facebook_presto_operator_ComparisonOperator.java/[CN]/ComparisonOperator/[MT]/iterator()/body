{
  final Cursor left=leftSource.cursor();
  final Cursor right=rightSource.cursor();
  boolean advancedLeft=Cursors.advanceNextPositionNoYield(left);
  boolean advancedRight=Cursors.advanceNextPositionNoYield(right);
  Preconditions.checkState(advancedLeft && advancedRight || !advancedLeft && !advancedRight,"Left and right don't have the same cardinality");
  if (!advancedLeft || !advancedRight) {
    return BlockIterators.emptyIterator();
  }
  return new AbstractBlockIterator<UncompressedPositionBlock>(){
    @Override protected UncompressedPositionBlock computeNext(){
      if (left.isFinished()) {
        return endOfData();
      }
      if (right.getPosition() < left.getPosition()) {
        if (right.advanceNextPosition() == MUST_YIELD) {
          return setMustYield();
        }
        Preconditions.checkState(right.getPosition() == left.getPosition());
      }
      ImmutableList.Builder<Long> positions=ImmutableList.builder();
      int count=0;
      do {
        long endPosition=Math.min(left.getCurrentValueEndPosition(),right.getCurrentValueEndPosition());
        if (operation.evaluate(left,right)) {
          while (left.getPosition() <= endPosition && count < MAX_POSITIONS_PER_BLOCK) {
            positions.add(left.getPosition());
            ++count;
            AdvanceResult result=left.advanceNextPosition();
            if (result == SUCCESS) {
              result=right.advanceNextPosition();
            }
            if (result != SUCCESS) {
              if (count != 0) {
                return new UncompressedPositionBlock(positions.build());
              }
              if (result == MUST_YIELD) {
                return setMustYield();
              }
              if (result == FINISHED) {
                return endOfData();
              }
            }
          }
        }
 else {
          AdvanceResult result=left.advanceToPosition(endPosition + 1);
          if (result == SUCCESS) {
            result=right.advanceToPosition(endPosition + 1);
          }
          if (result != SUCCESS) {
            if (count != 0) {
              return new UncompressedPositionBlock(positions.build());
            }
            if (result == MUST_YIELD) {
              return setMustYield();
            }
            if (result == FINISHED) {
              return endOfData();
            }
          }
        }
      }
 while (count < MAX_POSITIONS_PER_BLOCK);
      if (count == 0) {
        endOfData();
        return null;
      }
      return new UncompressedPositionBlock(positions.build());
    }
  }
;
}
