{
  AggregationFunction aggregationAnnotation=clazz.getAnnotation(AggregationFunction.class);
  checkNotNull(aggregationAnnotation,"aggregationAnnotation is null");
  DynamicClassLoader classLoader=new DynamicClassLoader(clazz.getClassLoader());
  ImmutableList.Builder<InternalAggregationFunction> builder=ImmutableList.builder();
  for (  Class<?> stateClass : getStateClasses(clazz)) {
    AccumulatorStateSerializer<?> stateSerializer=new StateCompiler().generateStateSerializer(stateClass,classLoader);
    Type intermediateType=stateSerializer.getSerializedType();
    Method intermediateInputFunction=getIntermediateInputFunction(clazz,stateClass);
    Method combineFunction=getCombineFunction(clazz,stateClass);
    AccumulatorStateFactory<?> stateFactory=new StateCompiler().generateStateFactory(stateClass,classLoader);
    for (    Method outputFunction : getOutputFunctions(clazz,stateClass)) {
      for (      Method inputFunction : getInputFunctions(clazz,stateClass)) {
        for (        String name : getNames(outputFunction,aggregationAnnotation)) {
          List<Type> inputTypes=getInputTypes(inputFunction);
          Type outputType=AggregationUtils.getOutputType(outputFunction,stateSerializer,typeManager);
          AggregationMetadata metadata;
          try {
            MethodHandle inputHandle=lookup().unreflect(inputFunction);
            MethodHandle intermediateInputHandle=intermediateInputFunction == null ? null : lookup().unreflect(intermediateInputFunction);
            MethodHandle combineHandle=combineFunction == null ? null : lookup().unreflect(combineFunction);
            MethodHandle outputHandle=outputFunction == null ? null : lookup().unreflect(outputFunction);
            metadata=new AggregationMetadata(generateAggregationName(name,outputType,inputTypes),getParameterMetadata(inputFunction,aggregationAnnotation.approximate()),inputHandle,getParameterMetadata(intermediateInputFunction,false),intermediateInputHandle,combineHandle,outputHandle,stateClass,stateSerializer,stateFactory,outputType,aggregationAnnotation.approximate());
          }
 catch (          IllegalAccessException e) {
            throw Throwables.propagate(e);
          }
          GenericAccumulatorFactoryBinder factory=new AccumulatorCompiler().generateAccumulatorFactoryBinder(metadata,classLoader);
          builder.add(new InternalAggregationFunction(name,inputTypes,intermediateType,outputType,aggregationAnnotation.decomposable(),aggregationAnnotation.approximate(),factory));
        }
      }
    }
  }
  return builder.build();
}
