{
  AggregationFunction aggregationAnnotation=clazz.getAnnotation(AggregationFunction.class);
  ApproximateAggregationFunction approximateAnnotation=clazz.getAnnotation(ApproximateAggregationFunction.class);
  checkArgument(aggregationAnnotation != null || approximateAnnotation != null,"Aggregation function annotation is missing");
  checkArgument(aggregationAnnotation == null || approximateAnnotation == null,"Aggregation function cannot be exact and approximate");
  ImmutableList.Builder<InternalAggregationFunction> builder=ImmutableList.builder();
  for (  Class<?> stateClass : getStateClasses(clazz)) {
    AccumulatorStateSerializer<?> stateSerializer=new StateCompiler().generateStateSerializer(stateClass);
    Type intermediateType=stateSerializer.getSerializedType();
    Method intermediateInputFunction=getIntermediateInputFunction(clazz,stateClass);
    Method combineFunction=getCombineFunction(clazz,stateClass);
    AccumulatorStateFactory<?> stateFactory=new StateCompiler().generateStateFactory(stateClass);
    for (    Method outputFunction : getOutputFunctions(clazz,stateClass)) {
      for (      Method inputFunction : getInputFunctions(clazz,stateClass)) {
        List<Type> inputTypes=getInputTypes(inputFunction);
        Type outputType=getOutputType(outputFunction,stateSerializer);
        String name=getName(outputFunction,aggregationAnnotation,approximateAnnotation);
        StringBuilder sb=new StringBuilder();
        sb.append(outputType.getName());
        for (        Type inputType : inputTypes) {
          sb.append(inputType.getName());
        }
        sb.append(CaseFormat.LOWER_UNDERSCORE.to(CaseFormat.UPPER_CAMEL,name.toLowerCase()));
        AccumulatorFactory factory=new AccumulatorCompiler().generateAccumulatorFactory(sb.toString(),inputFunction,intermediateInputFunction,combineFunction,outputFunction,stateClass,intermediateType,outputType,stateSerializer,stateFactory,approximateAnnotation != null);
        builder.add(new GenericAggregationFunction(name,inputTypes,intermediateType,outputType,false,approximateAnnotation != null,factory));
      }
    }
  }
  return builder.build();
}
