{
  OutputBuffers outputBuffers=INITIAL_EMPTY_OUTPUT_BUFFERS;
  SharedBuffer sharedBuffer=new SharedBuffer(TASK_ID,executor,sizeOfPages(10),outputBuffers);
  for (int i=0; i < 3; i++) {
    addPage(sharedBuffer,createPage(i));
  }
  outputBuffers=outputBuffers.withBuffer("first",new UnpartitionedPagePartitionFunction());
  sharedBuffer.setOutputBuffers(outputBuffers);
  assertQueueState(sharedBuffer,"first",3,0);
  assertBufferResultEquals(TYPES,sharedBuffer.get("first",0,sizeOfPages(10),NO_WAIT),bufferResult(0,createPage(0),createPage(1),createPage(2)));
  assertQueueState(sharedBuffer,"first",3,0);
  assertBufferResultEquals(TYPES,sharedBuffer.get("first",0,sizeOfPages(10),NO_WAIT),bufferResult(0,createPage(0),createPage(1),createPage(2)));
  assertQueueState(sharedBuffer,"first",3,0);
  sharedBuffer.acknowledge("first",3);
  assertBufferResultEquals(TYPES,sharedBuffer.get("first",0,sizeOfPages(10),NO_WAIT),emptyResults(3,false));
  assertQueueState(sharedBuffer,"first",0,3);
}
