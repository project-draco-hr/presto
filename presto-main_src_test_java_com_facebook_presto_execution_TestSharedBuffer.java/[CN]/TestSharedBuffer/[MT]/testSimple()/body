{
  SharedBuffer<Integer> sharedBuffer=new SharedBuffer<>(10);
  for (int i=0; i < 3; i++) {
    assertTrue(sharedBuffer.offer(i));
  }
  sharedBuffer.addQueue("first");
  assertQueueState(sharedBuffer,"first",3);
  assertEquals(sharedBuffer.get("first",10,NO_WAIT),ImmutableList.of(0,1,2));
  assertQueueState(sharedBuffer,"first",0);
  assertEquals(sharedBuffer.get("first",10,NO_WAIT),ImmutableList.of());
  for (int i=3; i < 10; i++) {
    assertTrue(sharedBuffer.offer(i));
  }
  assertQueueState(sharedBuffer,"first",7);
  assertFalse(sharedBuffer.offer(99));
  assertEquals(sharedBuffer.get("first",1,NO_WAIT),ImmutableList.of(3));
  assertQueueState(sharedBuffer,"first",6);
  assertFalse(sharedBuffer.offer(99));
  sharedBuffer.addQueue("second");
  assertQueueState(sharedBuffer,"second",10);
  assertEquals(sharedBuffer.get("second",10,NO_WAIT),ImmutableList.of(0,1,2,3,4,5,6,7,8,9));
  assertQueueState(sharedBuffer,"second",0);
  sharedBuffer.noMoreQueues();
  for (int i=10; i < 14; i++) {
    assertTrue(sharedBuffer.offer(i));
  }
  assertFalse(sharedBuffer.offer(99));
  assertQueueState(sharedBuffer,"first",10);
  assertQueueState(sharedBuffer,"second",4);
  assertEquals(sharedBuffer.get("first",1,NO_WAIT),ImmutableList.of(4));
  assertQueueState(sharedBuffer,"first",9);
  assertQueueState(sharedBuffer,"second",4);
  assertTrue(sharedBuffer.offer(14));
  assertFalse(sharedBuffer.offer(99));
  assertQueueState(sharedBuffer,"first",10);
  assertQueueState(sharedBuffer,"second",5);
  assertFalse(sharedBuffer.isFinished());
  sharedBuffer.finish();
  assertQueueState(sharedBuffer,"first",10);
  assertQueueState(sharedBuffer,"second",5);
  assertFalse(sharedBuffer.isFinished());
  assertEquals(sharedBuffer.get("first",1,NO_WAIT),ImmutableList.of(5));
  assertQueueState(sharedBuffer,"first",9);
  assertQueueState(sharedBuffer,"second",5);
  assertFalse(sharedBuffer.isFinished());
  assertEquals(sharedBuffer.get("first",10,NO_WAIT),ImmutableList.of(6,7,8,9,10,11,12,13,14));
  assertQueueClosed(sharedBuffer,"first");
  assertQueueState(sharedBuffer,"second",5);
  assertFalse(sharedBuffer.isFinished());
  assertEquals(sharedBuffer.get("second",10,NO_WAIT),ImmutableList.of(10,11,12,13,14));
  assertQueueClosed(sharedBuffer,"first");
  assertQueueClosed(sharedBuffer,"second");
  assertFinished(sharedBuffer);
  assertEquals(sharedBuffer.get("first",10,NO_WAIT),ImmutableList.of());
  assertEquals(sharedBuffer.get("second",10,NO_WAIT),ImmutableList.of());
}
