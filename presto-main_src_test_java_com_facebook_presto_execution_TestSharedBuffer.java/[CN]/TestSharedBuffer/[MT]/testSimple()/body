{
  SharedBuffer sharedBuffer=new SharedBuffer(sizeOfPages(10),INITIAL_EMPTY_OUTPUT_BUFFERS);
  for (int i=0; i < 3; i++) {
    addPage(sharedBuffer,createPage(i));
  }
  OutputBuffers outputBuffers=INITIAL_EMPTY_OUTPUT_BUFFERS.withBuffer("first",new UnpartitionedPagePartitionFunction());
  sharedBuffer.setOutputBuffers(outputBuffers);
  assertQueueState(sharedBuffer,"first",3,0);
  assertBufferResultEquals(sharedBuffer.get("first",0,sizeOfPages(10),NO_WAIT),bufferResult(0,createPage(0),createPage(1),createPage(2)));
  assertQueueState(sharedBuffer,"first",3,0);
  assertBufferResultEquals(sharedBuffer.get("first",3,sizeOfPages(10),NO_WAIT),emptyResults(3,false));
  assertQueueState(sharedBuffer,"first",0,3);
  for (int i=3; i < 10; i++) {
    addPage(sharedBuffer,createPage(i));
  }
  assertQueueState(sharedBuffer,"first",7,3);
  ListenableFuture<?> future=enqueuePage(sharedBuffer,createPage(10));
  assertBufferResultEquals(sharedBuffer.get("first",3,sizeOfPages(1),NO_WAIT),bufferResult(3,createPage(3)));
  assertQueueState(sharedBuffer,"first",7,3);
  assertFalse(future.isDone());
  outputBuffers=outputBuffers.withBuffer("second",new UnpartitionedPagePartitionFunction());
  sharedBuffer.setOutputBuffers(outputBuffers);
  assertQueueState(sharedBuffer,"second",10,0);
  assertBufferResultEquals(sharedBuffer.get("second",0,sizeOfPages(10),NO_WAIT),bufferResult(0,createPage(0),createPage(1),createPage(2),createPage(3),createPage(4),createPage(5),createPage(6),createPage(7),createPage(8),createPage(9)));
  assertQueueState(sharedBuffer,"second",10,0);
  assertBufferResultEquals(sharedBuffer.get("second",10,sizeOfPages(10),NO_WAIT),emptyResults(10,false));
  assertQueueState(sharedBuffer,"second",0,10);
  outputBuffers=outputBuffers.withNoMoreBufferIds();
  sharedBuffer.setOutputBuffers(outputBuffers);
  future.get(1,TimeUnit.SECONDS);
  addPage(sharedBuffer,createPage(11));
  addPage(sharedBuffer,createPage(12));
  future=enqueuePage(sharedBuffer,createPage(13));
  assertQueueState(sharedBuffer,"first",10,3);
  assertQueueState(sharedBuffer,"second",3,10);
  assertBufferResultEquals(sharedBuffer.get("first",4,sizeOfPages(1),NO_WAIT),bufferResult(4,createPage(4)));
  future.get(1,TimeUnit.SECONDS);
  assertQueueState(sharedBuffer,"first",10,4);
  assertQueueState(sharedBuffer,"second",4,10);
  assertFalse(sharedBuffer.isFinished());
  sharedBuffer.finish();
  assertQueueState(sharedBuffer,"first",10,4);
  assertQueueState(sharedBuffer,"second",4,10);
  assertFalse(sharedBuffer.isFinished());
  assertBufferResultEquals(sharedBuffer.get("first",5,sizeOfPages(1),NO_WAIT),bufferResult(5,createPage(5)));
  assertQueueState(sharedBuffer,"first",9,5);
  assertQueueState(sharedBuffer,"second",4,10);
  assertFalse(sharedBuffer.isFinished());
  BufferResult x=sharedBuffer.get("first",6,sizeOfPages(10),NO_WAIT);
  assertBufferResultEquals(x,bufferResult(6,createPage(6),createPage(7),createPage(8),createPage(9),createPage(10),createPage(11),createPage(12),createPage(13)));
  assertQueueState(sharedBuffer,"first",8,6);
  assertBufferResultEquals(sharedBuffer.get("first",14,sizeOfPages(10),NO_WAIT),emptyResults(14,false));
  assertQueueClosed(sharedBuffer,"first",14);
  assertQueueState(sharedBuffer,"second",4,10);
  assertFalse(sharedBuffer.isFinished());
  assertBufferResultEquals(sharedBuffer.get("second",10,sizeOfPages(10),NO_WAIT),bufferResult(10,createPage(10),createPage(11),createPage(12),createPage(13)));
  assertQueueState(sharedBuffer,"second",4,10);
  assertBufferResultEquals(sharedBuffer.get("second",14,sizeOfPages(10),NO_WAIT),emptyResults(14,false));
  assertQueueClosed(sharedBuffer,"first",14);
  assertQueueClosed(sharedBuffer,"second",14);
  assertFinished(sharedBuffer);
  assertBufferResultEquals(sharedBuffer.get("first",14,sizeOfPages(10),NO_WAIT),emptyResults(14,true));
  assertBufferResultEquals(sharedBuffer.get("second",14,sizeOfPages(10),NO_WAIT),emptyResults(14,true));
}
