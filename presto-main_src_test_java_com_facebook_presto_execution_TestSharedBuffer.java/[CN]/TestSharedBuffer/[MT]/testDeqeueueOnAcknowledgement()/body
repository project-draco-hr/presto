{
  int firstPartition=0;
  int secondPartition=1;
  SharedBuffer sharedBuffer=new SharedBuffer(TASK_ID,stateNotificationExecutor,sizeOfPages(2));
  OutputBuffers outputBuffers=INITIAL_EMPTY_OUTPUT_BUFFERS.withBuffer(FIRST,new HashPagePartitionFunction(firstPartition,2,Ints.asList(0),Optional.<Integer>empty(),ImmutableList.of(BIGINT))).withBuffer(SECOND,new HashPagePartitionFunction(secondPartition,2,Ints.asList(0),Optional.<Integer>empty(),ImmutableList.of(BIGINT))).withNoMoreBufferIds();
  sharedBuffer.setOutputBuffers(outputBuffers);
  addPage(sharedBuffer,createPage(1),firstPartition);
  addPage(sharedBuffer,createPage(2),firstPartition);
  assertQueueState(sharedBuffer,FIRST,firstPartition,2,0,2,2,0);
  ListenableFuture<?> future=enqueuePage(sharedBuffer,createPage(3),secondPartition);
  assertFalse(future.isDone());
  assertQueueState(sharedBuffer,FIRST,firstPartition,2,0,2,2,0);
  assertQueueState(sharedBuffer,SECOND,secondPartition,0,0,0,0,1);
  sharedBuffer.get(FIRST,2,sizeOfPages(10)).cancel(true);
  assertTrue(future.isDone());
  assertQueueState(sharedBuffer,SECOND,secondPartition,1,0,1,1,0);
}
