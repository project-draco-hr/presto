{
  int firstPartition=0;
  int secondPartition=1;
  SharedBuffer sharedBuffer=new SharedBuffer(TASK_ID,stateNotificationExecutor,sizeOfPages(20));
  for (int i=0; i < 3; i++) {
    addPage(sharedBuffer,createPage(i),firstPartition);
    addPage(sharedBuffer,createPage(i),secondPartition);
  }
  OutputBuffers outputBuffers=INITIAL_EMPTY_OUTPUT_BUFFERS.withBuffer(FIRST,new HashPagePartitionFunction(firstPartition,2,Ints.asList(0),Optional.<Integer>empty(),ImmutableList.of(BIGINT),HASH));
  sharedBuffer.setOutputBuffers(outputBuffers);
  assertQueueState(sharedBuffer,FIRST,firstPartition,3,0,3,3,0);
  assertBufferResultEquals(TYPES,getBufferResult(sharedBuffer,FIRST,0,sizeOfPages(10),NO_WAIT),bufferResult(0,createPage(0),createPage(1),createPage(2)));
  assertQueueState(sharedBuffer,FIRST,firstPartition,3,0,3,3,0);
  sharedBuffer.get(FIRST,3,sizeOfPages(10)).cancel(true);
  assertQueueState(sharedBuffer,FIRST,firstPartition,0,3,3,3,0);
  for (int i=3; i < 10; i++) {
    addPage(sharedBuffer,createPage(i),firstPartition);
    addPage(sharedBuffer,createPage(i),secondPartition);
  }
  assertQueueState(sharedBuffer,FIRST,firstPartition,7,3,10,10,0);
  ListenableFuture<?> future=enqueuePage(sharedBuffer,createPage(10),firstPartition);
  assertQueueState(sharedBuffer,FIRST,firstPartition,7,3,10,10,1);
  assertBufferResultEquals(TYPES,getBufferResult(sharedBuffer,FIRST,3,sizeOfPages(1),NO_WAIT),bufferResult(3,createPage(3)));
  assertQueueState(sharedBuffer,FIRST,firstPartition,7,3,10,10,1);
  assertFalse(future.isDone());
  outputBuffers=outputBuffers.withBuffer(SECOND,new HashPagePartitionFunction(secondPartition,2,Ints.asList(0),Optional.<Integer>empty(),ImmutableList.of(BIGINT),HASH));
  sharedBuffer.setOutputBuffers(outputBuffers);
  assertQueueState(sharedBuffer,SECOND,secondPartition,10,0,10,10,0);
  assertBufferResultEquals(TYPES,getBufferResult(sharedBuffer,SECOND,0,sizeOfPages(10),NO_WAIT),bufferResult(0,createPage(0),createPage(1),createPage(2),createPage(3),createPage(4),createPage(5),createPage(6),createPage(7),createPage(8),createPage(9)));
  assertQueueState(sharedBuffer,SECOND,secondPartition,10,0,10,10,0);
  sharedBuffer.get(SECOND,10,sizeOfPages(10)).cancel(true);
  assertQueueState(sharedBuffer,SECOND,secondPartition,0,10,10,10,0);
  outputBuffers=outputBuffers.withNoMoreBufferIds();
  sharedBuffer.setOutputBuffers(outputBuffers);
  future.get(1,TimeUnit.SECONDS);
  assertQueueState(sharedBuffer,FIRST,firstPartition,8,3,8,11,0);
  assertQueueState(sharedBuffer,SECOND,secondPartition,0,10,0,10,0);
  addPage(sharedBuffer,createPage(11),firstPartition);
  addPage(sharedBuffer,createPage(12),firstPartition);
  addPage(sharedBuffer,createPage(13),firstPartition);
  assertQueueState(sharedBuffer,FIRST,firstPartition,11,3,11,14,0);
  assertQueueState(sharedBuffer,SECOND,secondPartition,0,10,0,10,0);
  assertBufferResultEquals(TYPES,getBufferResult(sharedBuffer,FIRST,4,sizeOfPages(1),NO_WAIT),bufferResult(4,createPage(4)));
  future.get(1,TimeUnit.SECONDS);
  assertQueueState(sharedBuffer,FIRST,firstPartition,10,4,10,14,0);
  assertQueueState(sharedBuffer,SECOND,secondPartition,0,10,0,10,0);
  assertFalse(sharedBuffer.isFinished());
  sharedBuffer.setNoMorePages();
  assertQueueState(sharedBuffer,FIRST,firstPartition,10,4,10,14,0);
  assertQueueState(sharedBuffer,SECOND,secondPartition,0,10,0,10,0);
  sharedBuffer.abort(SECOND);
  assertQueueClosed(sharedBuffer,SECOND,10);
  assertFalse(sharedBuffer.isFinished());
  assertBufferResultEquals(TYPES,getBufferResult(sharedBuffer,FIRST,5,sizeOfPages(1),NO_WAIT),bufferResult(5,createPage(5)));
  assertQueueState(sharedBuffer,FIRST,firstPartition,9,5,9,14,0);
  assertFalse(sharedBuffer.isFinished());
  BufferResult x=getBufferResult(sharedBuffer,FIRST,6,sizeOfPages(10),NO_WAIT);
  assertBufferResultEquals(TYPES,x,bufferResult(6,createPage(6),createPage(7),createPage(8),createPage(9),createPage(10),createPage(11),createPage(12),createPage(13)));
  assertQueueState(sharedBuffer,FIRST,firstPartition,8,6,8,14,0);
  assertBufferResultEquals(TYPES,getBufferResult(sharedBuffer,FIRST,14,sizeOfPages(10),NO_WAIT),emptyResults(14,true));
  sharedBuffer.abort(FIRST);
  assertQueueClosed(sharedBuffer,FIRST,14);
  assertFinished(sharedBuffer);
}
