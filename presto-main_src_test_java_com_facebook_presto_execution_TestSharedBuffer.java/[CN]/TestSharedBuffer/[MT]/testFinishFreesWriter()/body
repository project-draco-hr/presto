{
  SharedBuffer sharedBuffer=new SharedBuffer(TASK_ID,stateNotificationExecutor,sizeOfPages(5));
  sharedBuffer.setOutputBuffers(INITIAL_EMPTY_OUTPUT_BUFFERS.withBuffer(QUEUE,new UnpartitionedPagePartitionFunction()).withNoMoreBufferIds());
  assertFalse(sharedBuffer.isFinished());
  for (int i=0; i < 5; i++) {
    addPage(sharedBuffer,createPage(i));
  }
  ListenableFuture<?> firstEnqueuePage=enqueuePage(sharedBuffer,createPage(5));
  ListenableFuture<?> secondEnqueuePage=enqueuePage(sharedBuffer,createPage(6));
  assertBufferResultEquals(TYPES,getBufferResult(sharedBuffer,QUEUE,0,sizeOfPages(1),MAX_WAIT),bufferResult(0,createPage(0)));
  sharedBuffer.get(QUEUE,1,sizeOfPages(1)).cancel(true);
  assertTrue(firstEnqueuePage.isDone());
  assertFalse(secondEnqueuePage.isDone());
  sharedBuffer.setNoMorePages();
  assertFalse(sharedBuffer.isFinished());
  assertTrue(secondEnqueuePage.isDone());
  assertBufferResultEquals(TYPES,getBufferResult(sharedBuffer,QUEUE,1,sizeOfPages(100),NO_WAIT),bufferResult(1,createPage(1),createPage(2),createPage(3),createPage(4),createPage(5)));
  assertBufferResultEquals(TYPES,getBufferResult(sharedBuffer,QUEUE,6,sizeOfPages(100),NO_WAIT),emptyResults(6,true));
  assertFinished(sharedBuffer);
}
