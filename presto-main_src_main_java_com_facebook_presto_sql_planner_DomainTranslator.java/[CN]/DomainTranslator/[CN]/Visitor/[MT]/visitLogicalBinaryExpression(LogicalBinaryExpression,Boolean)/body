{
  ExtractionResult leftResult=process(node.getLeft(),complement);
  ExtractionResult rightResult=process(node.getRight(),complement);
  TupleDomain<Symbol> leftTupleDomain=leftResult.getTupleDomain();
  TupleDomain<Symbol> rightTupleDomain=rightResult.getTupleDomain();
  LogicalBinaryExpression.Type type=complement ? flipLogicalBinaryType(node.getType()) : node.getType();
switch (type) {
case AND:
    return new ExtractionResult(leftTupleDomain.intersect(rightTupleDomain),combineConjuncts(leftResult.getRemainingExpression(),rightResult.getRemainingExpression()));
case OR:
  TupleDomain<Symbol> columnUnionedTupleDomain=TupleDomain.columnWiseUnion(leftTupleDomain,rightTupleDomain);
Expression remainingExpression=complementIfNecessary(node,complement);
if (leftResult.getRemainingExpression().equals(rightResult.getRemainingExpression()) && DeterminismEvaluator.isDeterministic(leftResult.getRemainingExpression())) {
boolean matchingSingleSymbolDomains=!leftTupleDomain.isNone() && !rightTupleDomain.isNone() && leftTupleDomain.getDomains().get().size() == 1 && rightTupleDomain.getDomains().get().size() == 1 && leftTupleDomain.getDomains().get().keySet().equals(rightTupleDomain.getDomains().get().keySet());
boolean oneSideIsSuperSet=leftTupleDomain.contains(rightTupleDomain) || rightTupleDomain.contains(leftTupleDomain);
if (matchingSingleSymbolDomains || oneSideIsSuperSet) {
  remainingExpression=leftResult.getRemainingExpression();
}
}
return new ExtractionResult(columnUnionedTupleDomain,remainingExpression);
default :
throw new AssertionError("Unknown type: " + node.getType());
}
}
