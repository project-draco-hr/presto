{
  Optional<NormalizedSimpleComparison> optionalNormalized=toNormalizedSimpleComparison(session,metadata,types,node);
  if (!optionalNormalized.isPresent()) {
    return super.visitComparisonExpression(node,complement);
  }
  NormalizedSimpleComparison normalized=optionalNormalized.get();
  Symbol symbol=Symbol.fromQualifiedName(normalized.getNameReference().getName());
  Type fieldType=checkedTypeLookup(symbol);
  NullableValue value=normalized.getValue();
  if (value.getType().equals(DOUBLE) && fieldType.equals(BIGINT)) {
    return process(coerceDoubleToLongComparison(normalized),complement);
  }
  if (!TypeRegistry.canCoerce(value.getType(),fieldType)) {
    return super.visitComparisonExpression(node,complement);
  }
  Object coerced=new FunctionInvoker(metadata.getFunctionRegistry()).invoke(metadata.getFunctionRegistry().getCoercion(value.getType(),fieldType),session.toConnectorSession(),value.getValue());
  return createComparisonExtractionResult(normalized.getComparisonType(),symbol,fieldType,coerced,complement);
}
