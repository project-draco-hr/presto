{
  Optional<NormalizedSimpleComparison> optionalNormalized=toNormalizedSimpleComparison(session,metadata,types,node);
  if (!optionalNormalized.isPresent()) {
    return super.visitComparisonExpression(node,complement);
  }
  NormalizedSimpleComparison normalized=optionalNormalized.get();
  Symbol symbol=Symbol.fromQualifiedName(normalized.getNameReference().getName());
  Type type=checkedTypeLookup(symbol);
  NullableValue value=normalized.getValue();
  if (value.getType().equals(DOUBLE) && type.equals(BIGINT)) {
    return process(coerceDoubleToLongComparison(normalized),complement);
  }
  if (value.getType().equals(BIGINT) && type.equals(DOUBLE)) {
    value=NullableValue.of(DOUBLE,((Long)value.getValue()).doubleValue());
  }
  if (value.getType() instanceof VarcharType && type instanceof VarcharType) {
    value=NullableValue.of(type,value.getValue());
  }
  checkState(value.isNull() || value.getType().equals(type),"INVARIANT: comparison should be working on the same types");
  return createComparisonExtractionResult(normalized.getComparisonType(),symbol,type,value.getValue(),complement);
}
