{
  Optional<NormalizedSimpleComparison> optionalNormalized=toNormalizedSimpleComparison(session,metadata,types,node);
  if (!optionalNormalized.isPresent()) {
    return super.visitComparisonExpression(node,complement);
  }
  NormalizedSimpleComparison normalized=optionalNormalized.get();
  Symbol symbol=Symbol.from(normalized.getNameReference());
  Type fieldType=checkedTypeLookup(symbol);
  NullableValue value=normalized.getValue();
  Optional<NullableValue> coercedValue=coerce(value,fieldType);
  if (coercedValue.isPresent()) {
    return createComparisonExtractionResult(normalized.getComparisonType(),symbol,fieldType,coercedValue.get().getValue(),complement);
  }
  Optional<Expression> coercedExpression=coerceComparisonWithRounding(fieldType,normalized.getNameReference(),value.getType(),value.getValue(),normalized.getComparisonType());
  if (coercedExpression.isPresent()) {
    return process(coercedExpression.get(),complement);
  }
  return super.visitComparisonExpression(node,complement);
}
