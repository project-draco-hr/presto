{
  if (value == null) {
switch (comparisonType) {
case EQUAL:
case GREATER_THAN:
case GREATER_THAN_OR_EQUAL:
case LESS_THAN:
case LESS_THAN_OR_EQUAL:
case NOT_EQUAL:
      return new ExtractionResult(TupleDomain.<ColumnHandle>none(),TRUE_LITERAL);
case IS_DISTINCT_FROM:
    Domain domain=complementIfNecessary(Domain.notNull(wrap(columnType.getJavaType())),complement);
  return new ExtractionResult(TupleDomain.withColumnDomains(ImmutableMap.<ColumnHandle,Domain>of(columnHandle,domain)),TRUE_LITERAL);
default :
throw new AssertionError("Unhandled type: " + comparisonType);
}
}
Domain domain;
switch (comparisonType) {
case EQUAL:
domain=Domain.create(complementIfNecessary(SortedRangeSet.of(Range.equal(value)),complement),false);
break;
case GREATER_THAN:
domain=Domain.create(complementIfNecessary(SortedRangeSet.of(Range.greaterThan(value)),complement),false);
break;
case GREATER_THAN_OR_EQUAL:
domain=Domain.create(complementIfNecessary(SortedRangeSet.of(Range.greaterThanOrEqual(value)),complement),false);
break;
case LESS_THAN:
domain=Domain.create(complementIfNecessary(SortedRangeSet.of(Range.lessThan(value)),complement),false);
break;
case LESS_THAN_OR_EQUAL:
domain=Domain.create(complementIfNecessary(SortedRangeSet.of(Range.lessThanOrEqual(value)),complement),false);
break;
case NOT_EQUAL:
domain=Domain.create(complementIfNecessary(SortedRangeSet.of(Range.lessThan(value),Range.greaterThan(value)),complement),false);
break;
case IS_DISTINCT_FROM:
domain=complementIfNecessary(Domain.create(SortedRangeSet.of(Range.lessThan(value),Range.greaterThan(value)),true),complement);
break;
default :
throw new AssertionError("Unhandled type: " + comparisonType);
}
return new ExtractionResult(TupleDomain.withColumnDomains(ImmutableMap.<ColumnHandle,Domain>of(columnHandle,domain)),TRUE_LITERAL);
}
