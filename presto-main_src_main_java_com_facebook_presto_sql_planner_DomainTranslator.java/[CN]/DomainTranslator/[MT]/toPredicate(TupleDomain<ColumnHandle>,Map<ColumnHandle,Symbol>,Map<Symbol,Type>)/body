{
  if (tupleDomain.isNone()) {
    return FALSE_LITERAL;
  }
  ImmutableList.Builder<Expression> conjunctBuilder=ImmutableList.builder();
  for (  Map.Entry<ColumnHandle,Domain> entry : tupleDomain.getDomains().entrySet()) {
    ColumnHandle columnHandle=entry.getKey();
    checkArgument(symbolTranslationMap.containsKey(columnHandle),"Unable to convert TupleDomain to Expression b/c don't know Symbol for ColumnHandle %s",columnHandle);
    Symbol symbol=symbolTranslationMap.get(columnHandle);
    QualifiedNameReference reference=new QualifiedNameReference(symbol.toQualifiedName());
    Type type=symbolTypes.get(symbol);
    conjunctBuilder.add(toPredicate(entry.getValue(),reference,type));
  }
  return combineConjuncts(conjunctBuilder.build());
}
