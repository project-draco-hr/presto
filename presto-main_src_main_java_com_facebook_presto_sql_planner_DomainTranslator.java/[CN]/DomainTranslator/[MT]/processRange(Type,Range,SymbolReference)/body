{
  if (range.isAll()) {
    return TRUE_LITERAL;
  }
  if (isBetween(range)) {
    return new BetweenPredicate(reference,toExpression(range.getLow().getValue(),type),toExpression(range.getHigh().getValue(),type));
  }
  List<Expression> rangeConjuncts=new ArrayList<>();
  if (!range.getLow().isLowerUnbounded()) {
switch (range.getLow().getBound()) {
case ABOVE:
      rangeConjuncts.add(new ComparisonExpression(GREATER_THAN,reference,toExpression(range.getLow().getValue(),type)));
    break;
case EXACTLY:
  rangeConjuncts.add(new ComparisonExpression(GREATER_THAN_OR_EQUAL,reference,toExpression(range.getLow().getValue(),type)));
break;
case BELOW:
throw new IllegalStateException("Low Marker should never use BELOW bound: " + range);
default :
throw new AssertionError("Unhandled bound: " + range.getLow().getBound());
}
}
if (!range.getHigh().isUpperUnbounded()) {
switch (range.getHigh().getBound()) {
case ABOVE:
throw new IllegalStateException("High Marker should never use ABOVE bound: " + range);
case EXACTLY:
rangeConjuncts.add(new ComparisonExpression(LESS_THAN_OR_EQUAL,reference,toExpression(range.getHigh().getValue(),type)));
break;
case BELOW:
rangeConjuncts.add(new ComparisonExpression(LESS_THAN,reference,toExpression(range.getHigh().getValue(),type)));
break;
default :
throw new AssertionError("Unhandled bound: " + range.getHigh().getBound());
}
}
checkState(!rangeConjuncts.isEmpty());
return combineConjuncts(rangeConjuncts);
}
