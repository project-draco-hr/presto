{
  Parameter lookupSource=arg("lookupSource",LookupSource.class);
  Parameter page=arg("page",Page.class);
  MethodDefinition constructorDefinition=classDefinition.declareConstructor(a(PUBLIC),lookupSource,page);
  Variable thisVariable=constructorDefinition.getThis();
  BytecodeBlock constructor=constructorDefinition.getBody().comment("super();").append(thisVariable).invokeConstructor(Object.class);
  constructor.comment("this.lookupSource = lookupSource;").append(thisVariable.setField(lookupSourceField,lookupSource));
  constructor.comment("this.positionCount = page.getPositionCount();").append(thisVariable.setField(positionCountField,page.invoke("getPositionCount",int.class)));
  constructor.comment("Set block fields");
  for (int index=0; index < blockFields.size(); index++) {
    constructor.append(thisVariable.setField(blockFields.get(index),page.invoke("getBlock",Block.class,constantInt(index))));
  }
  constructor.comment("Set probe channel fields");
  for (int index=0; index < probeChannelFields.size(); index++) {
    constructor.append(thisVariable.setField(probeChannelFields.get(index),thisVariable.getField(blockFields.get(probeChannels.get(index)))));
  }
  constructor.comment("this.probeBlocks = new Block[<probeChannelCount>];");
  constructor.append(thisVariable).push(probeChannelFields.size()).newArray(Block.class).putField(probeBlocksArrayField);
  for (int index=0; index < probeChannelFields.size(); index++) {
    constructor.append(thisVariable).getField(probeBlocksArrayField).push(index).append(thisVariable).getField(probeChannelFields.get(index)).putObjectArrayElement();
  }
  constructor.comment("this.probePage = new Page(probeBlocks)").append(thisVariable.setField(probePageField,newInstance(Page.class,thisVariable.getField(probeBlocksArrayField))));
  if (probeHashChannel.isPresent()) {
    Integer index=probeHashChannel.get();
    constructor.comment("this.probeHashBlock = blocks[hashChannel.get()]").append(thisVariable.setField(probeHashBlockField,thisVariable.getField(blockFields.get(index))));
  }
  constructor.comment("this.position = -1;").append(thisVariable.setField(positionField,constantInt(-1)));
  constructor.ret();
}
