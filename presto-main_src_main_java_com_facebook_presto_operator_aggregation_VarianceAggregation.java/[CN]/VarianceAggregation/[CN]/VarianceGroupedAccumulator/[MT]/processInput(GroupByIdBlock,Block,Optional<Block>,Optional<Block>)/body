{
  counts.ensureCapacity(groupIdsBlock.getGroupCount());
  means.ensureCapacity(groupIdsBlock.getGroupCount());
  m2s.ensureCapacity(groupIdsBlock.getGroupCount());
  BlockCursor values=valuesBlock.cursor();
  BlockCursor masks=null;
  if (maskBlock.isPresent()) {
    masks=maskBlock.get().cursor();
  }
  BlockCursor sampleWeights=null;
  if (sampleWeightBlock.isPresent()) {
    sampleWeights=sampleWeightBlock.get().cursor();
  }
  OnlineVarianceCalculator calculator=new OnlineVarianceCalculator();
  for (int position=0; position < groupIdsBlock.getPositionCount(); position++) {
    checkState(values.advanceNextPosition());
    checkState(masks == null || masks.advanceNextPosition());
    checkState(sampleWeights == null || sampleWeights.advanceNextPosition());
    long sampleWeight=computeSampleWeight(masks,sampleWeights);
    if (!values.isNull() && sampleWeight > 0) {
      long groupId=groupIdsBlock.getGroupId(position);
      double inputValue;
      if (inputIsLong) {
        inputValue=values.getLong();
      }
 else {
        inputValue=values.getDouble();
      }
      calculator.reinitialize(counts.get(groupId),means.get(groupId),m2s.get(groupId));
      for (int i=0; i < sampleWeight; i++) {
        calculator.add(inputValue);
      }
      counts.set(groupId,calculator.getCount());
      means.set(groupId,calculator.getMean());
      m2s.set(groupId,calculator.getM2());
    }
  }
  checkState(!values.advanceNextPosition());
}
