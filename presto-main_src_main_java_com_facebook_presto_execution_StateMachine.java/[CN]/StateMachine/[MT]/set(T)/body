{
  checkState(!Thread.holdsLock(this),"Can not set state while holding a lock on this");
  checkNotNull(newState,"newState is null");
  T oldState;
  ImmutableList<SettableFuture<T>> futureStateChanges;
  ImmutableList<StateChangeListener<T>> stateChangeListeners;
synchronized (this) {
    if (Objects.equals(state,newState)) {
      return state;
    }
    oldState=state;
    state=newState;
    futureStateChanges=ImmutableList.copyOf(this.futureStateChanges);
    this.futureStateChanges.clear();
    stateChangeListeners=ImmutableList.copyOf(this.stateChangeListeners);
    this.notifyAll();
  }
  fireStateChanged(newState,futureStateChanges,stateChangeListeners);
  return oldState;
}
