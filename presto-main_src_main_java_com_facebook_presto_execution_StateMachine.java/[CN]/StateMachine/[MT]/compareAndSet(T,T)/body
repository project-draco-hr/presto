{
  checkState(!Thread.holdsLock(lock),"Can not set state while holding the lock");
  requireNonNull(expectedState,"expectedState is null");
  requireNonNull(newState,"newState is null");
  ImmutableList<CompletableFuture<T>> futureStateChanges;
  ImmutableList<StateChangeListener<T>> stateChangeListeners;
synchronized (lock) {
    if (!state.equals(expectedState)) {
      return false;
    }
    if (state.equals(newState)) {
      return false;
    }
    checkState(!isTerminalState(state),"%s can not transition from %s to %s",name,state,newState);
    state=newState;
    futureStateChanges=ImmutableList.copyOf(this.futureStateChanges);
    this.futureStateChanges.clear();
    stateChangeListeners=ImmutableList.copyOf(this.stateChangeListeners);
    if (isTerminalState(state)) {
      this.stateChangeListeners.clear();
    }
    lock.notifyAll();
  }
  fireStateChanged(newState,futureStateChanges,stateChangeListeners);
  return true;
}
