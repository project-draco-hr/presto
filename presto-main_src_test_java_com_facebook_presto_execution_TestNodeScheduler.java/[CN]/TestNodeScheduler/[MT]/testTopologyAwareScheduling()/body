{
  TransactionHandle transactionHandle=TestingTransactionHandle.create("foo");
  NodeTaskMap nodeTaskMap=new NodeTaskMap(finalizerService);
  InMemoryNodeManager nodeManager=new InMemoryNodeManager();
  ImmutableList.Builder<Node> nodeBuilder=ImmutableList.builder();
  nodeBuilder.add(new PrestoNode("node1",URI.create("http://host1.rack1:11"),NodeVersion.UNKNOWN));
  nodeBuilder.add(new PrestoNode("node2",URI.create("http://host2.rack1:12"),NodeVersion.UNKNOWN));
  nodeBuilder.add(new PrestoNode("node3",URI.create("http://host3.rack2:13"),NodeVersion.UNKNOWN));
  ImmutableList<Node> nodes=nodeBuilder.build();
  nodeManager.addNode("foo",nodes);
  Map<Node,RemoteTask> taskMap=new HashMap<>();
  NodeSchedulerConfig nodeSchedulerConfig=new NodeSchedulerConfig().setMaxSplitsPerNode(20).setIncludeCoordinator(false).setNetworkTopology("test").setMaxPendingSplitsPerNodePerTask(15);
  TestNetworkTopology topology=new TestNetworkTopology();
  NodeScheduler nodeScheduler=new NodeScheduler(topology,nodeManager,nodeSchedulerConfig,nodeTaskMap);
  NodeSelector nodeSelector=nodeScheduler.createNodeSelector("foo");
  ImmutableSet.Builder<Split> nonRackLocalBuilder=ImmutableSet.builder();
  for (int i=0; i < 26 * 3; i++) {
    nonRackLocalBuilder.add(new Split("foo",transactionHandle,new TestSplitRemote(HostAddress.fromParts("data.other_rack",1))));
  }
  Set<Split> nonRackLocalSplits=nonRackLocalBuilder.build();
  Multimap<Node,Split> assignments=nodeSelector.computeAssignments(nonRackLocalSplits,ImmutableList.copyOf(taskMap.values()));
  MockRemoteTaskFactory remoteTaskFactory=new MockRemoteTaskFactory(remoteTaskExecutor);
  int task=0;
  for (  Node node : assignments.keySet()) {
    TaskId taskId=new TaskId(new StageId("test","1"),String.valueOf(task));
    task++;
    MockRemoteTaskFactory.MockRemoteTask remoteTask=remoteTaskFactory.createTableScanTask(taskId,node,ImmutableList.copyOf(assignments.get(node)),nodeTaskMap.createPartitionedSplitCountTracker(node,taskId));
    remoteTask.startSplits(20);
    nodeTaskMap.addTask(node,remoteTask);
    taskMap.put(node,remoteTask);
  }
  nonRackLocalSplits=Sets.difference(nonRackLocalSplits,new HashSet<>(assignments.values()));
  assignments=nodeSelector.computeAssignments(nonRackLocalSplits,ImmutableList.copyOf(taskMap.values()));
  for (  Node node : assignments.keySet()) {
    RemoteTask remoteTask=taskMap.get(node);
    remoteTask.addSplits(new PlanNodeId("sourceId"),assignments.get(node));
  }
  nonRackLocalSplits=Sets.difference(nonRackLocalSplits,new HashSet<>(assignments.values()));
  assertEquals(nonRackLocalSplits.size(),3);
  ImmutableSet.Builder<Split> rackLocalSplits=ImmutableSet.builder();
  for (int i=0; i < 6 * 2; i++) {
    rackLocalSplits.add(new Split("foo",transactionHandle,new TestSplitRemote(HostAddress.fromParts("data.rack1",1))));
  }
  for (int i=0; i < 6; i++) {
    rackLocalSplits.add(new Split("foo",transactionHandle,new TestSplitRemote(HostAddress.fromParts("data.rack2",1))));
  }
  assignments=nodeSelector.computeAssignments(rackLocalSplits.build(),ImmutableList.copyOf(taskMap.values()));
  for (  Node node : assignments.keySet()) {
    RemoteTask remoteTask=taskMap.get(node);
    remoteTask.addSplits(new PlanNodeId("sourceId"),assignments.get(node));
  }
  Set<Split> unassigned=Sets.difference(rackLocalSplits.build(),new HashSet<>(assignments.values()));
  assertEquals(unassigned.size(),3);
  int rack1=0;
  int rack2=0;
  for (  Split split : unassigned) {
    String rack=topology.locate(split.getAddresses().get(0)).getSegments().get(0);
switch (rack) {
case "rack1":
      rack1++;
    break;
case "rack2":
  rack2++;
break;
default :
fail();
}
}
assertEquals(rack1,2);
assertEquals(rack2,1);
ImmutableSet.Builder<Split> localSplits=ImmutableSet.builder();
localSplits.add(new Split("foo",transactionHandle,new TestSplitRemote(HostAddress.fromParts("host1.rack1",1))));
localSplits.add(new Split("foo",transactionHandle,new TestSplitRemote(HostAddress.fromParts("host2.rack1",1))));
localSplits.add(new Split("foo",transactionHandle,new TestSplitRemote(HostAddress.fromParts("host3.rack2",1))));
assignments=nodeSelector.computeAssignments(localSplits.build(),ImmutableList.copyOf(taskMap.values()));
assertEquals(assignments.size(),3);
assertEquals(assignments.keySet().size(),3);
}
