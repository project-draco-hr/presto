{
  finalizerService=new FinalizerService();
  nodeTaskMap=new NodeTaskMap(finalizerService);
  nodeManager=new InMemoryNodeManager();
  ImmutableList.Builder<Node> nodeBuilder=ImmutableList.builder();
  nodeBuilder.add(new PrestoNode("other1",URI.create("http://127.0.0.1:11"),NodeVersion.UNKNOWN,false));
  nodeBuilder.add(new PrestoNode("other2",URI.create("http://127.0.0.1:12"),NodeVersion.UNKNOWN,false));
  nodeBuilder.add(new PrestoNode("other3",URI.create("http://127.0.0.1:13"),NodeVersion.UNKNOWN,false));
  ImmutableList<Node> nodes=nodeBuilder.build();
  nodeManager.addNode("foo",nodes);
  NodeSchedulerConfig nodeSchedulerConfig=new NodeSchedulerConfig().setMaxSplitsPerNode(20).setIncludeCoordinator(false).setMaxPendingSplitsPerNodePerStage(10);
  NodeScheduler nodeScheduler=new NodeScheduler(new LegacyNetworkTopology(),nodeManager,nodeSchedulerConfig,nodeTaskMap);
  taskMap=new HashMap<>();
  nodeSelector=nodeScheduler.createNodeSelector("foo");
  remoteTaskExecutor=Executors.newCachedThreadPool(daemonThreadsNamed("remoteTaskExecutor-%s"));
  finalizerService.start();
}
