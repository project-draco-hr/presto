{
  TestingTransactionHandle transactionHandle=TestingTransactionHandle.create("foo");
  Node newNode=new PrestoNode("other4",URI.create("http://127.0.0.1:14"),NodeVersion.UNKNOWN,false);
  nodeManager.addNode("foo",newNode);
  ImmutableList.Builder<Split> initialSplits=ImmutableList.builder();
  for (int i=0; i < 20; i++) {
    initialSplits.add(new Split("foo",transactionHandle,new TestSplitRemote()));
  }
  List<RemoteTask> tasks=new ArrayList<>();
  MockRemoteTaskFactory remoteTaskFactory=new MockRemoteTaskFactory(remoteTaskExecutor);
  for (  Node node : nodeManager.getActiveDatasourceNodes("foo")) {
    TaskId taskId=new TaskId("test",1,1);
    RemoteTask remoteTask=remoteTaskFactory.createTableScanTask(taskId,node,initialSplits.build(),nodeTaskMap.createPartitionedSplitCountTracker(node,taskId));
    nodeTaskMap.addTask(node,remoteTask);
    tasks.add(remoteTask);
  }
  TaskId taskId=new TaskId("test",1,2);
  RemoteTask newRemoteTask=remoteTaskFactory.createTableScanTask(taskId,newNode,initialSplits.build(),nodeTaskMap.createPartitionedSplitCountTracker(newNode,taskId));
  taskMap.put(newNode,newRemoteTask);
  nodeTaskMap.addTask(newNode,newRemoteTask);
  tasks.add(newRemoteTask);
  Set<Split> splits=new HashSet<>();
  for (int i=0; i < 5; i++) {
    splits.add(new Split("foo",transactionHandle,new TestSplitRemote()));
  }
  Multimap<Node,Split> assignments=nodeSelector.computeAssignments(splits,ImmutableList.copyOf(taskMap.values()));
  assertEquals(assignments.keySet().size(),3);
  assertFalse(assignments.keySet().contains(newNode));
  for (  RemoteTask task : tasks) {
    task.abort();
  }
  assertEquals(nodeTaskMap.getPartitionedSplitsOnNode(newNode),0);
}
