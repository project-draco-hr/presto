{
  TestingTransactionHandle transactionHandle=TestingTransactionHandle.create();
  Node newNode=new PrestoNode("other4",URI.create("http://127.0.0.1:14"),NodeVersion.UNKNOWN,false);
  nodeManager.addNode(CONNECTOR_ID,newNode);
  ImmutableList.Builder<Split> initialSplits=ImmutableList.builder();
  for (int i=0; i < 10; i++) {
    initialSplits.add(new Split(CONNECTOR_ID,transactionHandle,new TestSplitRemote()));
  }
  MockRemoteTaskFactory remoteTaskFactory=new MockRemoteTaskFactory(remoteTaskExecutor);
  TaskId taskId1=new TaskId("test",1,1);
  RemoteTask remoteTask1=remoteTaskFactory.createTableScanTask(taskId1,newNode,initialSplits.build(),nodeTaskMap.createPartitionedSplitCountTracker(newNode,taskId1));
  nodeTaskMap.addTask(newNode,remoteTask1);
  TaskId taskId2=new TaskId("test",1,2);
  RemoteTask remoteTask2=remoteTaskFactory.createTableScanTask(taskId2,newNode,initialSplits.build(),nodeTaskMap.createPartitionedSplitCountTracker(newNode,taskId2));
  nodeTaskMap.addTask(newNode,remoteTask2);
  Set<Split> splits=new HashSet<>();
  for (int i=0; i < 5; i++) {
    splits.add(new Split(CONNECTOR_ID,transactionHandle,new TestSplitRemote()));
  }
  Multimap<Node,Split> assignments=nodeSelector.computeAssignments(splits,ImmutableList.copyOf(taskMap.values()));
  assertFalse(assignments.keySet().contains(newNode));
  remoteTask1.abort();
  remoteTask2.abort();
  assertEquals(nodeTaskMap.getPartitionedSplitsOnNode(newNode),0);
}
