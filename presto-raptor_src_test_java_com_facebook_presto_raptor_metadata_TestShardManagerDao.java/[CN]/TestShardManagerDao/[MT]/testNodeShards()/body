{
  assertEquals(dao.getAllNodesInUse(),ImmutableSet.of());
  String nodeName1=UUID.randomUUID().toString();
  int nodeId1=dao.insertNode(nodeName1);
  String nodeName2=UUID.randomUUID().toString();
  int nodeId2=dao.insertNode(nodeName2);
  assertEquals(dao.getAllNodesInUse(),ImmutableSet.of(nodeName1,nodeName2));
  UUID shardUuid1=UUID.randomUUID();
  UUID shardUuid2=UUID.randomUUID();
  UUID shardUuid3=UUID.randomUUID();
  UUID shardUuid4=UUID.randomUUID();
  long tableId=1;
  long shardId1=dao.insertShard(shardUuid1,tableId,1,11,111);
  long shardId2=dao.insertShard(shardUuid2,tableId,2,22,222);
  long shardId3=dao.insertShard(shardUuid3,tableId,3,33,333);
  long shardId4=dao.insertShard(shardUuid4,tableId,4,44,444);
  assertEquals(dao.getShards(tableId),ImmutableList.of(shardUuid1,shardUuid2,shardUuid3,shardUuid4));
  assertEquals(dao.getNodeShards(nodeName1).size(),0);
  assertEquals(dao.getNodeShards(nodeName2).size(),0);
  dao.insertShardNode(shardId1,nodeId1);
  dao.insertShardNode(shardId2,nodeId1);
  dao.insertShardNode(shardId3,nodeId1);
  dao.insertShardNode(shardId4,nodeId1);
  dao.insertShardNode(shardId1,nodeId2);
  dao.insertShardNode(shardId4,nodeId2);
  ShardMetadata shard1=new ShardMetadata(tableId,shardId1,shardUuid1,1,11,111);
  ShardMetadata shard2=new ShardMetadata(tableId,shardId2,shardUuid2,2,22,222);
  ShardMetadata shard3=new ShardMetadata(tableId,shardId3,shardUuid3,3,33,333);
  ShardMetadata shard4=new ShardMetadata(tableId,shardId4,shardUuid4,4,44,444);
  assertEquals(dao.getNodeShards(nodeName1),ImmutableSet.of(shard1,shard2,shard3,shard4));
  assertEquals(dao.getNodeShards(nodeName2),ImmutableSet.of(shard1,shard4));
  dao.dropShardNodes(tableId);
  assertEquals(dao.getShardNodes(tableId),ImmutableList.of());
  dao.dropShards(tableId);
  assertEquals(dao.getShards(tableId),ImmutableList.of());
}
