{
  String nodeName=UUID.randomUUID().toString();
  dao.insertNode(nodeName);
  Long nodeId=dao.getNodeId(nodeName);
  assertNotNull(nodeId);
  long tableId=1;
  long partitionId0=dao.insertPartition(tableId,"part_0");
  long partitionId1=dao.insertPartition(tableId,"part_1");
  long partitionId2=dao.insertPartition(tableId,"part_2");
  UUID shardUuid0=UUID.randomUUID();
  UUID shardUuid1=UUID.randomUUID();
  UUID shardUuid2a=UUID.randomUUID();
  UUID shardUuid2b=UUID.randomUUID();
  long shardId0=dao.insertShard(shardUuid0);
  long shardId1=dao.insertShard(shardUuid1);
  long shardId2a=dao.insertShard(shardUuid2a);
  long shardId2b=dao.insertShard(shardUuid2b);
  dao.insertShardNode(shardId0,nodeId);
  dao.insertShardNode(shardId1,nodeId);
  dao.insertShardNode(shardId2a,nodeId);
  dao.insertShardNode(shardId2b,nodeId);
  dao.insertPartitionShard(shardId0,tableId,partitionId0);
  dao.insertPartitionShard(shardId1,tableId,partitionId1);
  dao.insertPartitionShard(shardId2a,tableId,partitionId2);
  dao.insertPartitionShard(shardId2b,tableId,partitionId2);
  Set<TablePartition> partitions=dao.getPartitions(tableId);
  assertEquals(partitions.size(),3);
  List<ShardNode> shardNodes=dao.getShardNodes(tableId);
  assertEquals(shardNodes.size(),4);
  assertContainsShardNode(shardNodes,tableId,nodeName,partitionId0,shardUuid0);
  assertContainsShardNode(shardNodes,tableId,nodeName,partitionId1,shardUuid1);
  assertContainsShardNode(shardNodes,tableId,nodeName,partitionId2,shardUuid2a);
  assertContainsShardNode(shardNodes,tableId,nodeName,partitionId2,shardUuid2b);
  Set<String> nodes=dao.getTableNodes(tableId);
  assertEquals(nodes,ImmutableSet.of(nodeName));
}
