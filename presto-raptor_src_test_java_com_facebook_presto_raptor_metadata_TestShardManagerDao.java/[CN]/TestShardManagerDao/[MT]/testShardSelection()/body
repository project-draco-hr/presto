{
  assertEquals(dao.getAllNodesInUse(),ImmutableSet.of());
  String nodeName1=UUID.randomUUID().toString();
  dao.insertNode(nodeName1);
  Integer nodeId1=dao.getNodeId(nodeName1);
  assertNotNull(nodeId1);
  assertEquals(dao.getAllNodesInUse(),ImmutableSet.of(nodeName1));
  String nodeName2=UUID.randomUUID().toString();
  dao.insertNode(nodeName2);
  Integer nodeId2=dao.getNodeId(nodeName2);
  assertNotNull(nodeId2);
  assertEquals(dao.getAllNodesInUse(),ImmutableSet.of(nodeName1,nodeName2));
  long tableId=1;
  UUID shardUuid1=UUID.randomUUID();
  UUID shardUuid2=UUID.randomUUID();
  UUID shardUuid3=UUID.randomUUID();
  UUID shardUuid4=UUID.randomUUID();
  long shardId1=dao.insertShard(shardUuid1,tableId,0,0,0);
  long shardId2=dao.insertShard(shardUuid2,tableId,0,0,0);
  long shardId3=dao.insertShard(shardUuid3,tableId,0,0,0);
  long shardId4=dao.insertShard(shardUuid4,tableId,0,0,0);
  List<UUID> shards=dao.getShards(tableId);
  assertEquals(shards.size(),4);
  assertTrue(shards.contains(shardUuid1));
  assertTrue(shards.contains(shardUuid2));
  assertTrue(shards.contains(shardUuid3));
  assertTrue(shards.contains(shardUuid4));
  assertEquals(dao.getShardNodes(tableId).size(),0);
  dao.insertShardNode(shardId1,nodeId1);
  dao.insertShardNode(shardId1,nodeId2);
  dao.insertShardNode(shardId2,nodeId1);
  dao.insertShardNode(shardId3,nodeId1);
  dao.insertShardNode(shardId4,nodeId1);
  dao.insertShardNode(shardId4,nodeId2);
  assertEquals(dao.getShards(tableId),shards);
  List<ShardNode> shardNodes=dao.getShardNodes(tableId);
  assertEquals(shardNodes.size(),6);
  assertContainsShardNode(shardNodes,nodeName1,shardUuid1);
  assertContainsShardNode(shardNodes,nodeName2,shardUuid1);
  assertContainsShardNode(shardNodes,nodeName1,shardUuid2);
  assertContainsShardNode(shardNodes,nodeName1,shardUuid3);
  assertContainsShardNode(shardNodes,nodeName1,shardUuid4);
  assertContainsShardNode(shardNodes,nodeName2,shardUuid4);
}
