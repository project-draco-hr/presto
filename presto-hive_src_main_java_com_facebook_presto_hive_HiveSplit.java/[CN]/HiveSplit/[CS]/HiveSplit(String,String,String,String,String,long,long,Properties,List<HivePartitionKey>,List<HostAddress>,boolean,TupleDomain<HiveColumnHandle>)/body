{
  requireNonNull(clientId,"clientId is null");
  checkArgument(start >= 0,"start must be positive");
  checkArgument(length >= 0,"length must be positive");
  requireNonNull(database,"database is null");
  requireNonNull(table,"table is null");
  requireNonNull(partitionName,"partitionName is null");
  requireNonNull(path,"path is null");
  requireNonNull(schema,"schema is null");
  requireNonNull(partitionKeys,"partitionKeys is null");
  requireNonNull(addresses,"addresses is null");
  requireNonNull(effectivePredicate,"tupleDomain is null");
  this.clientId=clientId;
  this.database=database;
  this.table=table;
  this.partitionName=partitionName;
  this.path=path;
  this.start=start;
  this.length=length;
  this.schema=schema;
  this.partitionKeys=ImmutableList.copyOf(partitionKeys);
  this.addresses=ImmutableList.copyOf(addresses);
  this.forceLocalScheduling=forceLocalScheduling;
  this.effectivePredicate=effectivePredicate;
}
