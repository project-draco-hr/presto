{
  long start;
  System.out.println("none");
  ColumnProjectionUtils.setReadColumnIDs(JOB_CONF,BIGINT_COLUMN_INDEX);
  for (  BenchmarkFile benchmarkFile : benchmarkFiles) {
    for (    HiveRecordCursorProvider recordCursorProvider : benchmarkFile.getRecordCursorProviders()) {
      for (      CompressionType compressionType : compressionTypes) {
        long result=0;
        start=System.nanoTime();
        for (int loop=0; loop < loopCount; loop++) {
          result=benchmarkReadBigint(createFileSplit(benchmarkFile.getFile(compressionType)),createPartitionProperties(benchmarkFile),recordCursorProvider);
        }
        logDuration(benchmarkFile.getName() + " " + getCursorType(recordCursorProvider),compressionType,start,loopCount,result);
      }
    }
    for (    HivePageSourceFactory pageSourceFactory : benchmarkFile.getPageSourceFactory()) {
      for (      CompressionType compressionType : compressionTypes) {
        long result=0;
        start=System.nanoTime();
        for (int loop=0; loop < loopCount; loop++) {
          result=benchmarkReadBigint(createFileSplit(benchmarkFile.getFile(compressionType)),createPartitionProperties(benchmarkFile),pageSourceFactory);
        }
        logDuration(benchmarkFile.getName() + " page",compressionType,start,loopCount,result);
      }
    }
  }
  System.out.println("bigint");
  ColumnProjectionUtils.setReadColumnIDs(JOB_CONF,ImmutableList.<Integer>of());
  for (  BenchmarkFile benchmarkFile : benchmarkFiles) {
    for (    HiveRecordCursorProvider recordCursorProvider : benchmarkFile.getRecordCursorProviders()) {
      for (      CompressionType compressionType : compressionTypes) {
        long result=0;
        start=System.nanoTime();
        for (int loop=0; loop < loopCount; loop++) {
          result=benchmarkReadBigint(createFileSplit(benchmarkFile.getFile(compressionType)),createPartitionProperties(benchmarkFile),recordCursorProvider);
        }
        logDuration(benchmarkFile.getName() + " " + getCursorType(recordCursorProvider),compressionType,start,loopCount,result);
      }
    }
    for (    HivePageSourceFactory pageSourceFactory : benchmarkFile.getPageSourceFactory()) {
      for (      CompressionType compressionType : compressionTypes) {
        long result=0;
        start=System.nanoTime();
        for (int loop=0; loop < loopCount; loop++) {
          result=benchmarkReadBigint(createFileSplit(benchmarkFile.getFile(compressionType)),createPartitionProperties(benchmarkFile),pageSourceFactory);
        }
        logDuration(benchmarkFile.getName() + " page",compressionType,start,loopCount,result);
      }
    }
  }
  System.out.println();
  System.out.println("double");
  ColumnProjectionUtils.setReadColumnIDs(JOB_CONF,DOUBLE_COLUMN_INDEX);
  for (  BenchmarkFile benchmarkFile : benchmarkFiles) {
    for (    HiveRecordCursorProvider recordCursorProvider : benchmarkFile.getRecordCursorProviders()) {
      for (      CompressionType compressionType : compressionTypes) {
        double result=0;
        start=System.nanoTime();
        for (int loop=0; loop < loopCount; loop++) {
          result=benchmarkReadDouble(createFileSplit(benchmarkFile.getFile(compressionType)),createPartitionProperties(benchmarkFile),recordCursorProvider);
        }
        logDuration(benchmarkFile.getName() + " " + getCursorType(recordCursorProvider),compressionType,start,loopCount,result);
      }
    }
    for (    HivePageSourceFactory pageSourceFactory : benchmarkFile.getPageSourceFactory()) {
      for (      CompressionType compressionType : compressionTypes) {
        double result=0;
        start=System.nanoTime();
        for (int loop=0; loop < loopCount; loop++) {
          result=benchmarkReadDouble(createFileSplit(benchmarkFile.getFile(compressionType)),createPartitionProperties(benchmarkFile),pageSourceFactory);
        }
        logDuration(benchmarkFile.getName() + " page",compressionType,start,loopCount,result);
      }
    }
  }
  System.out.println();
  System.out.println("varchar");
  ColumnProjectionUtils.setReadColumnIDs(JOB_CONF,VARCHAR_COLUMN_INDEX);
  for (  BenchmarkFile benchmarkFile : benchmarkFiles) {
    for (    HiveRecordCursorProvider recordCursorProvider : benchmarkFile.getRecordCursorProviders()) {
      for (      CompressionType compressionType : compressionTypes) {
        long result=0;
        start=System.nanoTime();
        for (int loop=0; loop < loopCount; loop++) {
          result=benchmarkReadVarchar(createFileSplit(benchmarkFile.getFile(compressionType)),createPartitionProperties(benchmarkFile),recordCursorProvider);
        }
        logDuration(benchmarkFile.getName() + " " + getCursorType(recordCursorProvider),compressionType,start,loopCount,result);
      }
    }
    for (    HivePageSourceFactory pageSourceFactory : benchmarkFile.getPageSourceFactory()) {
      for (      CompressionType compressionType : compressionTypes) {
        long result=0;
        start=System.nanoTime();
        for (int loop=0; loop < loopCount; loop++) {
          result=benchmarkReadVarchar(createFileSplit(benchmarkFile.getFile(compressionType)),createPartitionProperties(benchmarkFile),pageSourceFactory);
        }
        logDuration(benchmarkFile.getName() + " page",compressionType,start,loopCount,result);
      }
    }
  }
  System.out.println();
  System.out.println("tpch6");
  ColumnProjectionUtils.setReadColumnIDs(JOB_CONF,TPCH_6_COLUMN_INDEXES);
  for (  BenchmarkFile benchmarkFile : benchmarkFiles) {
    for (    HiveRecordCursorProvider recordCursorProvider : benchmarkFile.getRecordCursorProviders()) {
      for (      CompressionType compressionType : compressionTypes) {
        double result=0;
        start=System.nanoTime();
        for (int loop=0; loop < loopCount; loop++) {
          result=benchmarkReadTpch6(createFileSplit(benchmarkFile.getFile(compressionType)),createPartitionProperties(benchmarkFile),recordCursorProvider);
        }
        logDuration(benchmarkFile.getName() + " " + getCursorType(recordCursorProvider),compressionType,start,loopCount,result);
      }
    }
    for (    HivePageSourceFactory pageSourceFactory : benchmarkFile.getPageSourceFactory()) {
      for (      CompressionType compressionType : compressionTypes) {
        double result=0;
        start=System.nanoTime();
        for (int loop=0; loop < loopCount; loop++) {
          result=benchmarkReadTpch6(createFileSplit(benchmarkFile.getFile(compressionType)),createPartitionProperties(benchmarkFile),pageSourceFactory);
        }
        logDuration(benchmarkFile.getName() + " page",compressionType,start,loopCount,result);
      }
    }
  }
  System.out.println();
  System.out.println("tpch1");
  ColumnProjectionUtils.setReadColumnIDs(JOB_CONF,TPCH_1_COLUMN_INDEXES);
  for (  BenchmarkFile benchmarkFile : benchmarkFiles) {
    for (    HiveRecordCursorProvider recordCursorProvider : benchmarkFile.getRecordCursorProviders()) {
      for (      CompressionType compressionType : compressionTypes) {
        double result=0;
        start=System.nanoTime();
        for (int loop=0; loop < loopCount; loop++) {
          result=benchmarkReadTpch1(createFileSplit(benchmarkFile.getFile(compressionType)),createPartitionProperties(benchmarkFile),recordCursorProvider);
        }
        logDuration(benchmarkFile.getName() + " " + getCursorType(recordCursorProvider),compressionType,start,loopCount,result);
      }
    }
    for (    HivePageSourceFactory pageSourceFactory : benchmarkFile.getPageSourceFactory()) {
      for (      CompressionType compressionType : compressionTypes) {
        double result=0;
        start=System.nanoTime();
        for (int loop=0; loop < loopCount; loop++) {
          result=benchmarkReadTpch1(createFileSplit(benchmarkFile.getFile(compressionType)),createPartitionProperties(benchmarkFile),pageSourceFactory);
        }
        logDuration(benchmarkFile.getName() + " page",compressionType,start,loopCount,result);
      }
    }
  }
  System.out.println();
  System.out.println("all");
  ColumnProjectionUtils.setReadColumnIDs(JOB_CONF,ALL_COLUMN_INDEXES);
  for (  BenchmarkFile benchmarkFile : benchmarkFiles) {
    for (    HiveRecordCursorProvider recordCursorProvider : benchmarkFile.getRecordCursorProviders()) {
      for (      CompressionType compressionType : compressionTypes) {
        double result=0;
        start=System.nanoTime();
        for (int loop=0; loop < loopCount; loop++) {
          result=benchmarkReadAll(createFileSplit(benchmarkFile.getFile(compressionType)),createPartitionProperties(benchmarkFile),recordCursorProvider);
        }
        logDuration(benchmarkFile.getName() + " " + getCursorType(recordCursorProvider),compressionType,start,loopCount,result);
      }
    }
    for (    HivePageSourceFactory pageSourceFactory : benchmarkFile.getPageSourceFactory()) {
      for (      CompressionType compressionType : compressionTypes) {
        double result=0;
        start=System.nanoTime();
        for (int loop=0; loop < loopCount; loop++) {
          result=benchmarkReadAll(createFileSplit(benchmarkFile.getFile(compressionType)),createPartitionProperties(benchmarkFile),pageSourceFactory);
        }
        logDuration(benchmarkFile.getName() + " page",compressionType,start,loopCount,result);
      }
    }
  }
  System.out.println();
  System.out.println("one (load all)");
  ColumnProjectionUtils.setReadColumnIDs(JOB_CONF,BIGINT_COLUMN_INDEX);
  for (  BenchmarkFile benchmarkFile : benchmarkFiles) {
    for (    HiveRecordCursorProvider recordCursorProvider : benchmarkFile.getRecordCursorProviders()) {
      for (      CompressionType compressionType : compressionTypes) {
        double result=0;
        start=System.nanoTime();
        for (int loop=0; loop < loopCount; loop++) {
          result=benchmarkLoadAllReadOne(createFileSplit(benchmarkFile.getFile(compressionType)),createPartitionProperties(benchmarkFile),recordCursorProvider);
        }
        logDuration(benchmarkFile.getName() + " " + getCursorType(recordCursorProvider),compressionType,start,loopCount,result);
      }
    }
    for (    HivePageSourceFactory pageSourceFactory : benchmarkFile.getPageSourceFactory()) {
      for (      CompressionType compressionType : compressionTypes) {
        double result=0;
        start=System.nanoTime();
        for (int loop=0; loop < loopCount; loop++) {
          result=benchmarkLoadAllReadOne(createFileSplit(benchmarkFile.getFile(compressionType)),createPartitionProperties(benchmarkFile),pageSourceFactory);
        }
        logDuration(benchmarkFile.getName() + " page",compressionType,start,loopCount,result);
      }
    }
  }
  System.out.println();
}
