{
  if (!rowGroupOpen) {
    openRowGroup();
  }
  if (readOffset > 0) {
    if (presentStream != null) {
      readOffset=presentStream.countBitsSet(readOffset);
    }
    if (readOffset > 0) {
      if (lengthStream == null) {
        throw new OrcCorruptionException("Value is not null but length stream is not present");
      }
      long dataSkipSize=lengthStream.sum(readOffset);
      if (dataSkipSize > 0) {
        if (dataStream == null) {
          throw new OrcCorruptionException("Value is not null but data stream is not present");
        }
        dataStream.skip(Ints.checkedCast(dataSkipSize));
      }
    }
  }
  if (presentStream == null) {
    if (lengthStream == null) {
      throw new OrcCorruptionException("Value is not null but length stream is not present");
    }
    lengthStream.nextIntVector(nextBatchSize,lengthVector);
  }
 else {
    int nullValues=presentStream.getUnsetBits(nextBatchSize,isNullVector);
    if (nullValues != nextBatchSize) {
      if (lengthStream == null) {
        throw new OrcCorruptionException("Value is not null but length stream is not present");
      }
      lengthStream.nextIntVector(nextBatchSize,lengthVector,isNullVector);
    }
  }
  int totalLength=0;
  for (int i=0; i < nextBatchSize; i++) {
    if (!isNullVector[i]) {
      totalLength+=lengthVector[i];
    }
  }
  byte[] data=EMPTY_BYTE_ARRAY;
  if (totalLength > 0) {
    if (dataStream == null) {
      throw new OrcCorruptionException("Value is not null but data stream is not present");
    }
    data=dataStream.next(totalLength);
  }
  SliceVector sliceVector=castOrcVector(vector,SliceVector.class);
  sliceVector.initialize(nextBatchSize);
  int offset=0;
  for (int i=0; i < nextBatchSize; i++) {
    if (!isNullVector[i]) {
      int length=lengthVector[i];
      sliceVector.vector[i]=Slices.wrappedBuffer(data,offset,length);
      offset+=length;
    }
 else {
      sliceVector.vector[i]=null;
    }
  }
  readOffset=0;
  nextBatchSize=0;
}
