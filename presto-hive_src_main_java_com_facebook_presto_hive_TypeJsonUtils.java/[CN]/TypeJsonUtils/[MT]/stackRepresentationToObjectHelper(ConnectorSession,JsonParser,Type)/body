{
  if (parser.getCurrentToken() == JsonToken.VALUE_NULL) {
    return null;
  }
  if (isArrayType(type)) {
    List<Object> list=new ArrayList<>();
    checkState(parser.getCurrentToken() == JsonToken.START_ARRAY,"Expected a json array");
    while (parser.nextToken() != JsonToken.END_ARRAY) {
      list.add(stackRepresentationToObjectHelper(session,parser,type.getTypeParameters().get(0)));
    }
    return Collections.unmodifiableList(list);
  }
  if (isMapType(type)) {
    Map<Object,Object> map=new LinkedHashMap<>();
    checkState(parser.getCurrentToken() == JsonToken.START_OBJECT,"Expected a json object");
    while (parser.nextValue() != JsonToken.END_OBJECT) {
      Object key=mapKeyToObject(session,parser.getCurrentName(),type.getTypeParameters().get(0));
      Object value=stackRepresentationToObjectHelper(session,parser,type.getTypeParameters().get(1));
      map.put(key,value);
    }
    return Collections.unmodifiableMap(map);
  }
  BlockBuilder blockBuilder=type.createBlockBuilder(new BlockBuilderStatus());
  if (type.getJavaType() == boolean.class) {
    type.writeBoolean(blockBuilder,parser.getBooleanValue());
  }
 else   if (type.getJavaType() == long.class) {
    type.writeLong(blockBuilder,parser.getLongValue());
  }
 else   if (type.getJavaType() == double.class) {
    type.writeDouble(blockBuilder,parser.getDoubleValue());
  }
 else   if (type.getJavaType() == Slice.class) {
    type.writeSlice(blockBuilder,Slices.utf8Slice(parser.getValueAsString()));
  }
  Object value=type.getObjectValue(session,blockBuilder.build(),0);
  if (type.equals(DateType.DATE)) {
    return new Date(((SqlDate)value).getMillisAtMidnight());
  }
  if (type.equals(TimestampType.TIMESTAMP)) {
    return new Timestamp(((SqlTimestamp)value).getMillisUtc());
  }
  return value;
}
