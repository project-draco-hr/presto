{
  checkCondition(0 <= targetLength && targetLength <= Integer.MAX_VALUE,INVALID_FUNCTION_ARGUMENT,"Target length must be in the range [0.." + Integer.MAX_VALUE + "]");
  checkCondition(padString.length() > 0,INVALID_FUNCTION_ARGUMENT,"Padding string must not be empty");
  int textLength=countCodePoints(text);
  int resultLength=(int)targetLength;
  if (textLength == resultLength) {
    return text;
  }
  if (textLength > resultLength) {
    return SliceUtf8.substring(text,0,resultLength);
  }
  int padStringLength=countCodePoints(padString);
  int[] padStringCounts=new int[padStringLength];
  for (int i=0; i < padStringLength; ++i) {
    padStringCounts[i]=lengthOfCodePointSafe(padString,offsetOfCodePoint(padString,i));
  }
  int bufferSize=text.length();
  for (int i=0; i < resultLength - textLength; ++i) {
    bufferSize+=padStringCounts[i % padStringLength];
  }
  Slice buffer=Slices.allocate(bufferSize);
  int countBytes=bufferSize - text.length();
  int startPointOfExistingText=(paddingOffset + countBytes) % bufferSize;
  buffer.setBytes(startPointOfExistingText,text);
  int byteIndex=paddingOffset;
  for (int i=0; i < countBytes / padString.length(); ++i) {
    buffer.setBytes(byteIndex,padString);
    byteIndex+=padString.length();
  }
  buffer.setBytes(byteIndex,padString.getBytes(0,paddingOffset + countBytes - byteIndex));
  return buffer;
}
