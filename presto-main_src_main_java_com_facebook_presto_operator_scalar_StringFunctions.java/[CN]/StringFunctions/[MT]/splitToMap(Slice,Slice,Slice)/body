{
  checkCondition(entryDelimiter.length() > 0,INVALID_FUNCTION_ARGUMENT,"entryDelimiter is empty");
  checkCondition(keyValueDelimiter.length() > 0,INVALID_FUNCTION_ARGUMENT,"keyValueDelimiter is empty");
  checkCondition(!entryDelimiter.equals(keyValueDelimiter),INVALID_FUNCTION_ARGUMENT,"entryDelimiter and keyValueDelimiter must not be the same");
  Map<Slice,Slice> map=new HashMap<>();
  int entryStart=0;
  while (entryStart < string.length()) {
    Slice keyValuePair;
    int entryEnd=string.indexOf(entryDelimiter,entryStart);
    if (entryEnd >= 0) {
      keyValuePair=string.slice(entryStart,entryEnd - entryStart);
    }
 else {
      keyValuePair=string.slice(entryStart,string.length() - entryStart);
    }
    int keyEnd=keyValuePair.indexOf(keyValueDelimiter);
    if (keyEnd >= 0) {
      int valueStart=keyEnd + keyValueDelimiter.length();
      Slice key=keyValuePair.slice(0,keyEnd);
      Slice value=keyValuePair.slice(valueStart,keyValuePair.length() - valueStart);
      if (value.indexOf(keyValueDelimiter) >= 0) {
        throw new PrestoException(INVALID_FUNCTION_ARGUMENT,"Key-value delimiter must appear exactly once in each entry. Bad input: '" + keyValuePair.toStringUtf8() + "'");
      }
      if (map.containsKey(key)) {
        throw new PrestoException(INVALID_FUNCTION_ARGUMENT,format("Duplicate keys (%s) are not allowed",key.toStringUtf8()));
      }
      map.put(key,value);
    }
 else {
      throw new PrestoException(INVALID_FUNCTION_ARGUMENT,"Key-value delimiter must appear exactly once in each entry. Bad input: '" + keyValuePair.toStringUtf8() + "'");
    }
    if (entryEnd < 0) {
      break;
    }
    entryStart=entryEnd + entryDelimiter.length();
  }
  BlockBuilder builder=VARCHAR.createBlockBuilder(new BlockBuilderStatus(),map.size());
  for (  Map.Entry<Slice,Slice> entry : map.entrySet()) {
    VARCHAR.writeSlice(builder,entry.getKey());
    VARCHAR.writeSlice(builder,entry.getValue());
  }
  return builder.build();
}
