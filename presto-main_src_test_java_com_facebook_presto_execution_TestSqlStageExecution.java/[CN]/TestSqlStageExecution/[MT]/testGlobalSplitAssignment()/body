{
  SqlStageExecution sqlStageExecution;
  Future future;
  sqlStageExecution=createSqlStageExecution(nodeScheduler,20,20);
  future=sqlStageExecution.start();
  future.get(1,TimeUnit.SECONDS);
  Map<Node,RemoteTask> tasks1=sqlStageExecution.getTasks();
  assertEquals(tasks1.size(),4);
  for (  Map.Entry<Node,RemoteTask> entry : tasks1.entrySet()) {
    assertEquals(entry.getValue().getPartitionedSplitCount(),5);
  }
  Node additionalNode=new PrestoNode("other5",URI.create("http://127.0.0.1:15"),NodeVersion.UNKNOWN);
  nodeManager.addNode(datasourceName,additionalNode);
  nodeManager.addNode(datasourceName,new PrestoNode("other6",URI.create("http://127.0.0.1:16"),NodeVersion.UNKNOWN));
  sqlStageExecution=createSqlStageExecution(nodeScheduler,20,10);
  future=sqlStageExecution.start();
  future.get(1,TimeUnit.SECONDS);
  Map<Node,RemoteTask> tasks2=sqlStageExecution.getTasks();
  assertEquals(tasks2.size(),2);
  RemoteTask task=tasks2.get(additionalNode);
  assertNotNull(task);
  for (  Map.Entry<Node,RemoteTask> entry : tasks2.entrySet()) {
    assertEquals(entry.getValue().getPartitionedSplitCount(),5);
  }
  for (  RemoteTask remoteTask : tasks1.values()) {
    remoteTask.cancel();
  }
  for (  RemoteTask remoteTask : tasks2.values()) {
    remoteTask.cancel();
  }
}
