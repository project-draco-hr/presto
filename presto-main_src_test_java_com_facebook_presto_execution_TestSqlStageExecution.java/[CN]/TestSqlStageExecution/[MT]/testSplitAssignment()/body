{
  SqlStageExecution sqlStageExecution;
  Future future;
  Map<Node,RemoteTask> tasks;
  sqlStageExecution=createSqlStageExecution(nodeScheduler,20,20);
  future=sqlStageExecution.start();
  future.get(1,TimeUnit.SECONDS);
  tasks=sqlStageExecution.getTasks();
  assertEquals(tasks.size(),4);
  for (  Map.Entry<Node,RemoteTask> entry : tasks.entrySet()) {
    assertEquals(entry.getValue().getPartitionedSplitCount(),5);
  }
  for (  RemoteTask task : tasks.values()) {
    task.cancel();
  }
  Node additionalNode=new PrestoNode("other5",URI.create("http://127.0.0.1:15"),NodeVersion.UNKNOWN);
  nodeManager.addNode(datasourceName,additionalNode);
  sqlStageExecution=createSqlStageExecution(nodeScheduler,20,20);
  future=sqlStageExecution.start();
  future.get(1,TimeUnit.SECONDS);
  tasks=sqlStageExecution.getTasks();
  assertNotNull(tasks.get(additionalNode));
  assertEquals(tasks.size(),5);
  for (  Map.Entry<Node,RemoteTask> entry : tasks.entrySet()) {
    assertEquals(entry.getValue().getPartitionedSplitCount(),4);
  }
  for (  RemoteTask task : tasks.values()) {
    task.cancel();
  }
  assertEquals(nodeTaskMap.getPartitionedSplitsOnNode(additionalNode),0);
}
