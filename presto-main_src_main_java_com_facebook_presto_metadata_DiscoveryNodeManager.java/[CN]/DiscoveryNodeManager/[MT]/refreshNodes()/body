{
  lastUpdateTimestamp=System.nanoTime();
  Set<ServiceDescriptor> services=IterableTransformer.on(serviceSelector.selectAllServices()).select(not(in(failureDetector.getFailed()))).set();
  currentNode=null;
  ImmutableSet.Builder<Node> activeNodesBuilder=ImmutableSet.builder();
  ImmutableSet.Builder<Node> inactiveNodesBuilder=ImmutableSet.builder();
  ImmutableSetMultimap.Builder<String,Node> byDataSourceBuilder=ImmutableSetMultimap.builder();
  for (  ServiceDescriptor service : services) {
    URI uri=getHttpUri(service);
    NodeVersion nodeVersion=getNodeVersion(service);
    if (uri != null && nodeVersion != null) {
      PrestoNode node=new PrestoNode(service.getNodeId(),uri,nodeVersion);
      if (node.getNodeIdentifier().equals(nodeInfo.getNodeId())) {
        currentNode=node;
        checkState(currentNode.getNodeVersion().equals(expectedNodeVersion),"INVARIANT: current node version should be equal to expected node version");
      }
      if (isActive(node)) {
        activeNodesBuilder.add(node);
        String dataSources=service.getProperties().get("datasources");
        if (dataSources != null) {
          dataSources=dataSources.toLowerCase();
          for (          String dataSource : DATASOURCES_SPLITTER.split(dataSources)) {
            byDataSourceBuilder.put(dataSource,node);
          }
        }
        byDataSourceBuilder.put(SYSTEM_DATASOURCE,node);
      }
 else {
        inactiveNodesBuilder.add(node);
      }
    }
  }
  allNodes=new AllNodes(activeNodesBuilder.build(),inactiveNodesBuilder.build());
  activeNodesByDataSource=byDataSourceBuilder.build();
  checkState(currentNode != null,"INVARIANT: current node not returned from service selector");
}
