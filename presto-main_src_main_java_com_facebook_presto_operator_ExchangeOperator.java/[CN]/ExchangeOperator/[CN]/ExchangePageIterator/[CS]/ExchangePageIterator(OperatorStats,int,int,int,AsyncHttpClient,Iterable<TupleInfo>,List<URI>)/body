{
  super(tupleInfos);
  this.operatorStats=operatorStats;
  this.concurrentRequestMultiplier=concurrentRequestMultiplier;
  this.maxBufferedPages=maxBufferedPages;
  this.expectedPagesPerRequest=expectedPagesPerRequest;
  ImmutableSet.Builder<HttpPageBufferClient> builder=ImmutableSet.builder();
  for (  URI location : locations) {
    builder.add(new HttpPageBufferClient(httpClient,location,new ClientCallback(){
      @Override public void addPage(      HttpPageBufferClient client,      Page page){
        Preconditions.checkNotNull(client,"client is null");
        Preconditions.checkNotNull(page,"page is null");
        pageBuffer.add(page);
      }
      @Override public void requestComplete(      HttpPageBufferClient client){
        Preconditions.checkNotNull(client,"client is null");
        queuedClients.add(client);
      }
      @Override public void bufferFinished(      HttpPageBufferClient client){
        Preconditions.checkNotNull(client,"client is null");
        completedClients.add(client);
      }
    }
));
  }
  this.allClients=builder.build();
  queuedClients.addAll(allClients);
}
