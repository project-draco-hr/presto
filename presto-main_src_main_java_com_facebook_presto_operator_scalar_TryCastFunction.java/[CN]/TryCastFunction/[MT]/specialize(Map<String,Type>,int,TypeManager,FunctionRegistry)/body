{
  Type fromType=types.get("F");
  Type toType=types.get("T");
  Class<?> returnType=Primitives.wrap(toType.getJavaType());
  MethodHandle tryCastHandle;
  if (fromType.equals(UNKNOWN)) {
    tryCastHandle=dropArguments(constant(returnType,null),0,Void.class);
  }
 else {
    MethodHandle coercion=functionRegistry.getCoercion(fromType,toType).getMethodHandle();
    coercion=coercion.asType(methodType(returnType,coercion.type()));
    MethodHandle exceptionHandler=dropArguments(constant(returnType,null),0,RuntimeException.class);
    tryCastHandle=catchException(coercion,RuntimeException.class,exceptionHandler);
  }
  return new FunctionInfo(internalFunction(SIGNATURE.getName(),toType.getTypeSignature(),ImmutableList.of(fromType.getTypeSignature())),getDescription(),isHidden(),tryCastHandle,isDeterministic(),true,ImmutableList.of(true));
}
