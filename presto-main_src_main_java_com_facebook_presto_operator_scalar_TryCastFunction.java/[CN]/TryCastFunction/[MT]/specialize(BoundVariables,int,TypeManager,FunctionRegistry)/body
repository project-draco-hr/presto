{
  Type fromType=boundVariables.getTypeVariable("F");
  Type toType=boundVariables.getTypeVariable("T");
  Class<?> returnType=Primitives.wrap(toType.getJavaType());
  MethodHandle tryCastHandle;
  if (fromType.equals(UNKNOWN)) {
    tryCastHandle=dropArguments(constant(returnType,null),0,Void.class);
  }
 else {
    Signature signature=functionRegistry.getCoercion(fromType,toType);
    MethodHandle coercion=functionRegistry.getScalarFunctionImplementation(signature).getMethodHandle();
    coercion=coercion.asType(methodType(returnType,coercion.type()));
    MethodHandle exceptionHandler=dropArguments(constant(returnType,null),0,RuntimeException.class);
    tryCastHandle=catchException(coercion,RuntimeException.class,exceptionHandler);
  }
  return new ScalarFunctionImplementation(true,ImmutableList.of(true),tryCastHandle,isDeterministic());
}
