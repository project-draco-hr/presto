{
  AstVisitor<Void,Void> visitor=new DefaultTraversalVisitor<Void,Void>(){
    @Override protected Void visitQualifiedNameReference(    QualifiedNameReference node,    Void context){
      List<QualifiedName> matches=symbols.resolve(node.getName());
      if (matches.isEmpty()) {
        throw new SemanticException(format("Attribute '%s' cannot be resolved",node.getName()),node);
      }
 else       if (matches.size() > 1) {
        throw new SemanticException(format("Attribute '%s' is ambiguous. Possible targets: %s",node.getName(),matches),node);
      }
      resolvedNames.put(node,Iterables.getOnlyElement(matches));
      return null;
    }
    @Override protected Void visitSubqueryExpression(    SubqueryExpression node,    Void context){
      return null;
    }
  }
;
  visitor.process(node);
}
