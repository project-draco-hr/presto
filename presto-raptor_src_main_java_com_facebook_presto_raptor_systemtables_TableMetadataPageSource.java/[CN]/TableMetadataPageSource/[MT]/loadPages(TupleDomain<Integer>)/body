{
  Map<Integer,Domain> domains=tupleDomain.getDomains().get();
  Domain schemaNameDomain=domains.get(getColumnIndex(tableMetadata,SCHEMA_NAME));
  Domain tableNameDomain=domains.get(getColumnIndex(tableMetadata,TABLE_NAME));
  String schemaName=schemaNameDomain == null ? null : getStringValue(schemaNameDomain.getSingleValue()).toLowerCase(ENGLISH);
  String tableName=tableNameDomain == null ? null : getStringValue(tableNameDomain.getSingleValue()).toLowerCase(ENGLISH);
  PageListBuilder pageBuilder=new PageListBuilder(types);
  List<TableMetadataRow> tableRows=dao.getTableMetadataRows(schemaName,tableName);
  PeekingIterator<ColumnMetadataRow> columnRowIterator=peekingIterator(dao.getColumnMetadataRows(schemaName,tableName).iterator());
  for (  TableMetadataRow tableRow : tableRows) {
    while (columnRowIterator.hasNext() && columnRowIterator.peek().getTableId() < tableRow.getTableId()) {
      columnRowIterator.next();
    }
    String temporalColumnName=null;
    SortedMap<Integer,String> sortColumnNames=new TreeMap<>();
    SortedMap<Integer,String> bucketColumnNames=new TreeMap<>();
    OptionalLong temporalColumnId=tableRow.getTemporalColumnId();
    while (columnRowIterator.hasNext() && columnRowIterator.peek().getTableId() == tableRow.getTableId()) {
      ColumnMetadataRow columnRow=columnRowIterator.next();
      if (temporalColumnId.isPresent() && columnRow.getColumnId() == temporalColumnId.getAsLong()) {
        temporalColumnName=columnRow.getColumnName();
      }
      OptionalInt sortOrdinalPosition=columnRow.getSortOrdinalPosition();
      if (sortOrdinalPosition.isPresent()) {
        sortColumnNames.put(sortOrdinalPosition.getAsInt(),columnRow.getColumnName());
      }
      OptionalInt bucketOrdinalPosition=columnRow.getBucketOrdinalPosition();
      if (bucketOrdinalPosition.isPresent()) {
        bucketColumnNames.put(bucketOrdinalPosition.getAsInt(),columnRow.getColumnName());
      }
    }
    pageBuilder.beginRow();
    VARCHAR.writeSlice(pageBuilder.nextBlockBuilder(),utf8Slice(tableRow.getSchemaName()));
    VARCHAR.writeSlice(pageBuilder.nextBlockBuilder(),utf8Slice(tableRow.getTableName()));
    if (temporalColumnId.isPresent()) {
      if (temporalColumnName == null) {
        throw new PrestoException(RAPTOR_CORRUPT_METADATA,format("Table ID %s has corrupt metadata (invalid temporal column ID)",tableRow.getTableId()));
      }
      VARCHAR.writeSlice(pageBuilder.nextBlockBuilder(),utf8Slice(temporalColumnName));
    }
 else {
      pageBuilder.nextBlockBuilder().appendNull();
    }
    writeArray(pageBuilder.nextBlockBuilder(),sortColumnNames.values());
    Optional<String> distributionName=tableRow.getDistributionName();
    if (distributionName.isPresent()) {
      VARCHAR.writeSlice(pageBuilder.nextBlockBuilder(),utf8Slice(distributionName.get()));
    }
 else {
      pageBuilder.nextBlockBuilder().appendNull();
    }
    OptionalInt bucketCount=tableRow.getBucketCount();
    if (bucketCount.isPresent()) {
      BIGINT.writeLong(pageBuilder.nextBlockBuilder(),bucketCount.getAsInt());
    }
 else {
      pageBuilder.nextBlockBuilder().appendNull();
    }
    writeArray(pageBuilder.nextBlockBuilder(),bucketColumnNames.values());
  }
  return pageBuilder.build().iterator();
}
