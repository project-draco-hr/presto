{
  Preconditions.checkNotNull(recordReader,"recordReader is null");
  Preconditions.checkArgument(totalBytes >= 0,"totalBytes is negative");
  Preconditions.checkNotNull(splitSchema,"splitSchema is null");
  Preconditions.checkNotNull(partitionKeys,"partitionKeys is null");
  Preconditions.checkNotNull(columns,"columns is null");
  Preconditions.checkArgument(!columns.isEmpty(),"columns is empty");
  this.recordReader=recordReader;
  this.totalBytes=totalBytes;
  this.key=recordReader.createKey();
  this.value=recordReader.createValue();
  int size=columns.size();
  this.names=new String[size];
  this.types=new ColumnType[size];
  this.hiveTypes=new HiveType[size];
  this.fieldInspectors=new ObjectInspector[size];
  this.hiveColumnIndexes=new int[size];
  this.booleans=new boolean[size];
  this.longs=new long[size];
  this.doubles=new double[size];
  this.strings=new byte[size][];
  this.nulls=new boolean[size];
  try {
    Deserializer deserializer=MetaStoreUtils.getDeserializer(null,splitSchema);
    StructObjectInspector rowInspector=(StructObjectInspector)deserializer.getObjectInspector();
    for (int i=0; i < columns.size(); i++) {
      HiveColumnHandle column=columns.get(i);
      names[i]=column.getName();
      types[i]=column.getType();
      hiveTypes[i]=column.getHiveType();
      if (!column.isPartitionKey()) {
        fieldInspectors[i]=rowInspector.getStructFieldRef(column.getName()).getFieldObjectInspector();
      }
      hiveColumnIndexes[i]=column.getHiveColumnIndex();
    }
  }
 catch (  Exception e) {
    throw Throwables.propagate(e);
  }
  Map<String,HivePartitionKey> partitionKeysByName=uniqueIndex(partitionKeys,HivePartitionKey.nameGetter());
  for (int columnIndex=0; columnIndex < columns.size(); columnIndex++) {
    HiveColumnHandle column=columns.get(columnIndex);
    if (column.isPartitionKey()) {
      HivePartitionKey partitionKey=partitionKeysByName.get(column.getName());
      Preconditions.checkArgument(partitionKey != null,"Unknown partition key %s",column.getName());
      byte[] bytes=partitionKey.getValue().getBytes(Charsets.UTF_8);
      parsePrimitiveColumn(columnIndex,bytes,0,bytes.length);
    }
  }
}
